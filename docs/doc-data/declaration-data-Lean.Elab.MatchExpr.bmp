{"name":"Lean.Elab.MatchExpr","instances":[],"imports":["Lean.Elab.Term"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L209-L215","name":"Lean.Elab.Term.expandLetExpr","line":209,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.expandLetExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.expandLetExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandLetExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L203-L207","name":"Lean.Elab.Term.expandMatchExpr","line":203,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.expandMatchExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.expandMatchExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandMatchExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L191-L199","name":"Lean.Elab.Term.MatchExpr.main","line":191,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.main","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elseAlt</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L164-L183","name":"Lean.Elab.Term.MatchExpr.generate.loop","line":164,"kind":"opaque","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.generate.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.generate.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">generate</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kElse</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`term</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L153-L189","name":"Lean.Elab.Term.MatchExpr.generate","line":153,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.generate","doc":"Generates an `if-then-else` tree for implementing a `match_expr` with discriminant `discr`,\nalternatives `alts`, and else-alternative `elseAlt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.generate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">generate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elseAlt</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt\">ElseAlt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L150-L151","name":"Lean.Elab.Term.MatchExpr.toDoubleQuotedName","line":150,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toDoubleQuotedName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toDoubleQuotedName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">toDoubleQuotedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ident</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L136-L148","name":"Lean.Elab.Term.MatchExpr.getActuals","line":136,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getActuals","doc":"Generates the actual arguments for invoking the auxiliary continuation function\nassociated with the given alternative. The arguments are the actuals stored in `alt`.\n`discr` is also an argument if `alt.var?` is not none.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getActuals\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">getActuals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L121-L134","name":"Lean.Elab.Term.MatchExpr.getParams","line":121,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getParams","doc":"Generates parameters for the continuation function used to execute\nthe RHS of the given alternative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">getParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L110-L119","name":"Lean.Elab.Term.MatchExpr.initK","line":110,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.initK","doc":"Creates a fresh identifier for representing the continuation function used to\nexecute the RHS of the given alternative, and stores it in the field `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.initK\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">initK</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L96-L108","name":"Lean.Elab.Term.MatchExpr.next","line":96,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.next","doc":"Removes alternatives that do not have any pattern variable left to be matched.\nFor the ones that still have pattern variables, remove the first one, and\nsave `actual` if the removed pattern variable is not a `_`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.next\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">actual</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L89-L94","name":"Lean.Elab.Term.MatchExpr.getAltFor?","line":89,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getAltFor?","doc":"Returns the first alternative whose function name is `funName` **and**\ndoes not have pattern variables left to match.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getAltFor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">getAltFor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funName</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L83-L87","name":"Lean.Elab.Term.MatchExpr.shouldSaveActual","line":83,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.shouldSaveActual","doc":"Returns `true` if there is at least one alternative whose next pattern variable is not a `_`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.shouldSaveActual\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">shouldSaveActual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L72-L81","name":"Lean.Elab.Term.MatchExpr.getFunNamesToMatch","line":72,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getFunNamesToMatch","doc":"Returns the function names of alternatives that do not have any pattern variable left.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.getFunNamesToMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">getFunNamesToMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L57-L70","name":"Lean.Elab.Term.MatchExpr.toAlt?","line":57,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toAlt?","doc":"Converts syntax representing a `match_expr` alternative into an `Alt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toAlt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">toAlt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L50-L55","name":"Lean.Elab.Term.MatchExpr.toElseAlt?","line":50,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toElseAlt?","doc":"Converts syntax representing a `match_expr` else-alternative into an `ElseAlt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.toElseAlt?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">toElseAlt?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt\">ElseAlt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L46-L46","name":"Lean.Elab.Term.MatchExpr.ElseAlt.rhs","line":46,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt.rhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">ElseAlt</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt\">ElseAlt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L45-L45","name":"Lean.Elab.Term.MatchExpr.ElseAlt.mk","line":45,"kind":"ctor","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">ElseAlt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt\">ElseAlt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L39-L46","name":"Lean.Elab.Term.MatchExpr.ElseAlt","line":39,"kind":"structure","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt","doc":"`match_expr` else-alternative. Recall that it has the following structure.\n```\n| _ => rhs\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.ElseAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">ElseAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L37-L37","name":"Lean.Elab.Term.MatchExpr.Alt.actuals","line":37,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.actuals","doc":"Actual value to be passed as an argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.actuals\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">actuals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L35-L35","name":"Lean.Elab.Term.MatchExpr.Alt.k","line":35,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.k","doc":"Store the auxliary continuation function for each right-hand-side. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.k\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L33-L33","name":"Lean.Elab.Term.MatchExpr.Alt.rhs","line":33,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.rhs","doc":"right-hand-side for the alternative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L31-L31","name":"Lean.Elab.Term.MatchExpr.Alt.pvars","line":31,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.pvars","doc":"Pattern variables. The list uses `none` for representing `_`, and `some a` for pattern variable `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.pvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">pvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L29-L29","name":"Lean.Elab.Term.MatchExpr.Alt.funName","line":29,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.funName","doc":"Function being matched. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.funName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">funName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L27-L27","name":"Lean.Elab.Term.MatchExpr.Alt.var?","line":27,"kind":"def","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.var?","doc":"`some c` if there is a variable binding to the function symbol being matched.\n`c` is the variable name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.var?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">var?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L22-L22","name":"Lean.Elab.Term.MatchExpr.Alt.mk","line":22,"kind":"ctor","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funName</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">actuals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\">Alt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MatchExpr.lean#L11-L37","name":"Lean.Elab.Term.MatchExpr.Alt","line":11,"kind":"structure","docLink":"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt","doc":"`match_expr` alternative. Recall that it has the following structure.\n```\n| (ident \"@\")? ident bindeIdent* => rhs\n```\n\nExample:\n```\n| c@Eq _ a b => f c a b\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MatchExpr.html#Lean.Elab.Term.MatchExpr.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MatchExpr</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}