{"name":"Lean.Elab.Syntax","instances":[],"imports":["Lean.Elab.Command","Lean.Parser.Syntax","Lean.Elab.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L444-L447","name":"Lean.Elab.Command.strLitToPattern","line":444,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.strLitToPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.strLitToPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">strLitToPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L426-L442","name":"Lean.Elab.Command.expandNoKindMacroRulesAux","line":426,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.expandNoKindMacroRulesAux","doc":"Infer syntax kind `k` from first pattern, put alternatives of same kind into new `macro/elab_rules (kind := k)` via `mkCmd (some k)`,\nleave remaining alternatives (via `mkCmd none`) to be recursively expanded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.expandNoKindMacroRulesAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">expandNoKindMacroRulesAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.matchAlt</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmdName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkCmd</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.matchAlt</span>)</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Command\">Command</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Command\">Command</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L418-L424","name":"Lean.Elab.Command.inferMacroRulesAltKind","line":418,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.inferMacroRulesAltKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.inferMacroRulesAltKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">inferMacroRulesAltKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.matchAlt</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L415-L416","name":"Lean.Elab.Command.checkRuleKind","line":415,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.checkRuleKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.checkRuleKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">checkRuleKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">given </span><span class=\"fn\">expected</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L407-L413","name":"Lean.Elab.Command.elabSyntaxAbbrev","line":407,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.elabSyntaxAbbrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.elabSyntaxAbbrev\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabSyntaxAbbrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L372-L405","name":"Lean.Elab.Command.elabSyntax","line":372,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.elabSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.elabSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L363-L370","name":"Lean.Elab.Command.addMacroScopeIfLocal","line":363,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.addMacroScopeIfLocal","doc":"Add macro scope to `name` if it does not already have them, and `attrKind` is `local`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.addMacroScopeIfLocal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">addMacroScopeIfLocal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrKind</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L358-L361","name":"Lean.Elab.Command.isLocalAttrKind","line":358,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.isLocalAttrKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.isLocalAttrKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">isLocalAttrKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrKind</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L353-L356","name":"Lean.Elab.Command.resolveSyntaxKind","line":353,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.resolveSyntaxKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.resolveSyntaxKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">resolveSyntaxKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L329-L332","name":"Lean.Elab.Command.mkNameFromParserSyntax.appendCatName","line":329,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.mkNameFromParserSyntax.appendCatName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.mkNameFromParserSyntax.appendCatName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkNameFromParserSyntax</span>.<span class=\"name\">appendCatName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">str</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L315-L327","name":"Lean.Elab.Command.mkNameFromParserSyntax.visit","line":315,"kind":"opaque","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.mkNameFromParserSyntax.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.mkNameFromParserSyntax.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkNameFromParserSyntax</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L302-L332","name":"Lean.Elab.Command.mkNameFromParserSyntax","line":302,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.mkNameFromParserSyntax","doc":"Auxiliary function for creating declaration names from parser descriptions.\nExample:\nGiven\n```\nsyntax term \"+\" term : term\nsyntax \"[\" sepBy(term, \", \") \"]\"  : term\n```\nIt generates the names `term_+_` and `term[_,]`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.mkNameFromParserSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkNameFromParserSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L285-L300","name":"Lean.Elab.Command.elabDeclareSyntaxCat","line":285,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Command.elabDeclareSyntaxCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Command.elabDeclareSyntaxCat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabDeclareSyntaxCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L259-L261","name":"Lean.Elab.Term.toParserDescr.processNonReserved","line":259,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processNonReserved","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processNonReserved\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">processNonReserved</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\">ToParserDescrM</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L246-L257","name":"Lean.Elab.Term.toParserDescr.processAtom","line":246,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processAtom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">processAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\">ToParserDescrM</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L235-L244","name":"Lean.Elab.Term.toParserDescr.isValidAtom","line":235,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.isValidAtom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.isValidAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">isValidAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L228-L233","name":"Lean.Elab.Term.toParserDescr.processSepBy1","line":228,"kind":"opaque","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processSepBy1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processSepBy1\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">processSepBy1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\">ToParserDescrM</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L221-L226","name":"Lean.Elab.Term.toParserDescr.processSepBy","line":221,"kind":"opaque","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processSepBy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processSepBy\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">processSepBy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\">ToParserDescrM</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L196-L219","name":"Lean.Elab.Term.toParserDescr.processNullaryOrCat","line":196,"kind":"opaque","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processNullaryOrCat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processNullaryOrCat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">processNullaryOrCat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\">ToParserDescrM</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L164-L194","name":"Lean.Elab.Term.toParserDescr.processAlias","line":164,"kind":"opaque","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processAlias","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processAlias\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">processAlias</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\">ToParserDescrM</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L156-L162","name":"Lean.Elab.Term.toParserDescr.processParserCategory","line":156,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processParserCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processParserCategory\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">processParserCategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\">ToParserDescrM</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L152-L154","name":"Lean.Elab.Term.toParserDescr.ensureNoPrec","line":152,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.ensureNoPrec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.ensureNoPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">ensureNoPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\">ToParserDescrM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L141-L150","name":"Lean.Elab.Term.toParserDescr.processSeq","line":141,"kind":"opaque","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processSeq","doc":"Sequence (aka NullNode) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.processSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">processSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\">ToParserDescrM</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L112-L138","name":"Lean.Elab.Term.toParserDescr.process","line":112,"kind":"opaque","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.process","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr.process\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span>.<span class=\"name\">process</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescr\">ToParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L102-L261","name":"Lean.Elab.Term.toParserDescr","line":102,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr","doc":"Given a `stx` of category `syntax`, return a `(newStx, lhsPrec?)`,\nwhere `newStx` is of category `term`. After elaboration, `newStx` should have type\n`TrailingParserDescr` if `lhsPrec?.isSome`, and `ParserDescr` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.toParserDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">toParserDescr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L96-L99","name":"Lean.Elab.Term.elabParserName","line":96,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.elabParserName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.elabParserName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabParserName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Parser/Extension.html#Lean.Parser.ParserResolution\">Parser.ParserResolution</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L83-L94","name":"Lean.Elab.Term.elabParserName?","line":83,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.elabParserName?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.elabParserName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabParserName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Parser/Extension.html#Lean.Parser.ParserResolution\">Parser.ParserResolution</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L69-L81","name":"Lean.Elab.Term.checkLeftRec","line":69,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.checkLeftRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.checkLeftRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">checkLeftRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\">ToParserDescrM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L63-L67","name":"Lean.Elab.Term.addAliasInfo","line":63,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.addAliasInfo","doc":"(Try to) add a term info for the alias with info `info` at `ref`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.addAliasInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addAliasInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Parser/Extension.html#Lean.Parser.ParserAliasInfo\">Parser.ParserAliasInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L57-L61","name":"Lean.Elab.Term.addCategoryInfo","line":57,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.addCategoryInfo","doc":"(Try to) add a term info for the category `catName` at `ref`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.addCategoryInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addCategoryInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L47-L52","name":"Lean.Elab.Term.ensureUnaryOutput","line":47,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.ensureUnaryOutput","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ensureUnaryOutput\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ensureUnaryOutput</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L41-L41","name":"Lean.Elab.Term.ToParserDescr","line":41,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToParserDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L40-L40","name":"Lean.Elab.Term.ToParserDescrM","line":40,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToParserDescrM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L38-L38","name":"Lean.Elab.Term.ToParserDescrContext.behavior","line":38,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext.behavior","doc":"See comment at `Parser.ParserCategory`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext.behavior\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToParserDescrContext</span>.<span class=\"name\">behavior</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext\">ToParserDescrContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">Parser.LeadingIdentBehavior</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L36-L36","name":"Lean.Elab.Term.ToParserDescrContext.leftRec","line":36,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext.leftRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext.leftRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToParserDescrContext</span>.<span class=\"name\">leftRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext\">ToParserDescrContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L35-L35","name":"Lean.Elab.Term.ToParserDescrContext.first","line":35,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext.first","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext.first\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToParserDescrContext</span>.<span class=\"name\">first</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext\">ToParserDescrContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L34-L34","name":"Lean.Elab.Term.ToParserDescrContext.catName","line":34,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext.catName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext.catName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToParserDescrContext</span>.<span class=\"name\">catName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext\">ToParserDescrContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L33-L33","name":"Lean.Elab.Term.ToParserDescrContext.mk","line":33,"kind":"ctor","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToParserDescrContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">first </span><span class=\"fn\">leftRec</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">behavior</span> : <a href=\"./Lean/Parser/Basic.html#Lean.Parser.LeadingIdentBehavior\">Parser.LeadingIdentBehavior</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext\">ToParserDescrContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L33-L38","name":"Lean.Elab.Term.ToParserDescrContext","line":33,"kind":"structure","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.ToParserDescrContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ToParserDescrContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Syntax.lean#L12-L19","name":"Lean.Elab.Term.expandOptPrecedence","line":12,"kind":"def","docLink":"./Lean/Elab/Syntax.html#Lean.Elab.Term.expandOptPrecedence","doc":"Expand `optional «precedence»` where\n«precedence» := leading_parser \" : \" >> precedenceParser "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Syntax.html#Lean.Elab.Term.expandOptPrecedence\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandOptPrecedence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"}]}