{"name":"Lean.Meta.SynthInstance","instances":[{"typeNames":["Lean.Meta.SynthInstance.Instance"],"name":"Lean.Meta.SynthInstance.instInhabitedInstance","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.GeneratorNode"],"name":"Lean.Meta.SynthInstance.instInhabitedGeneratorNode","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.ConsumerNode"],"name":"Lean.Meta.SynthInstance.instInhabitedConsumerNode","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.MkTableKey.M"],"name":"Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.Meta.SynthInstance.Answer"],"name":"Lean.Meta.SynthInstance.instInhabitedAnswer","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.SynthM"],"name":"Lean.Meta.SynthInstance.instInhabitedSynthM","className":"Inhabited"}],"imports":["Init.Data.Array.InsertionSort","Lean.Meta.Basic","Lean.Meta.Instances","Lean.Meta.AbstractMVars","Lean.Meta.Check","Lean.Util.Profile"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L815-L822","name":"Lean.Meta.synthInstance","line":815,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">synthInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxResultSize?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L812-L813","name":"Lean.Meta.throwFailedToSynthesize","line":812,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.throwFailedToSynthesize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.throwFailedToSynthesize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">throwFailedToSynthesize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L804-L810","name":"Lean.Meta.trySynthInstance","line":804,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.trySynthInstance","doc":"Return `LOption.some r` if succeeded, `LOption.none` if it failed, and `LOption.undef` if\ninstance cannot be synthesized right now because `type` contains metavariables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.trySynthInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">trySynthInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxResultSize?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Data/LOption.html#Lean.LOption\">LOption</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L778-L802","name":"Lean.Meta.synthInstance?","line":778,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">synthInstance?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxResultSize?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L628-L641","name":"Lean.Meta.SynthInstance.main","line":628,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.main","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxResultSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">AbstractMVarsResult</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L620-L626","name":"Lean.Meta.SynthInstance.synth","line":620,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.synth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.synth\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">synth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">AbstractMVarsResult</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L617-L618","name":"Lean.Meta.SynthInstance.getResult","line":617,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">AbstractMVarsResult</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L605-L615","name":"Lean.Meta.SynthInstance.step","line":605,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.step\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">step</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L585-L603","name":"Lean.Meta.SynthInstance.resume","line":585,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.resume","doc":"Given `(cNode, answer)` on the top of the resume stack, continue execution by using `answer` to solve the\nnext subgoal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.resume\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">resume</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L580-L583","name":"Lean.Meta.SynthInstance.getNextToResume","line":580,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getNextToResume","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getNextToResume\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getNextToResume</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> (<a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L542-L578","name":"Lean.Meta.SynthInstance.generate","line":542,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.generate","doc":"Try the next instance in the node on the top of the generator stack. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.generate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">generate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L539-L540","name":"Lean.Meta.SynthInstance.modifyTop","line":539,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.modifyTop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.modifyTop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">modifyTop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a> → <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L536-L537","name":"Lean.Meta.SynthInstance.getTop","line":536,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getTop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getTop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getTop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L486-L534","name":"Lean.Meta.SynthInstance.consume","line":486,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.consume","doc":"Process the next subgoal in the given consumer node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.consume\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">consume</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cNode</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L414-L432","name":"Lean.Meta.SynthInstance.addAnswer","line":414,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.addAnswer","doc":"Create a new answer after `cNode` resolved all subgoals.\nThat is, `cNode.subgoals == []`.\nAnd then, store it in the tabled entries map, and wakeup waiters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.addAnswer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">addAnswer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cNode</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L400-L404","name":"Lean.Meta.SynthInstance.isNewAnswer","line":400,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.isNewAnswer","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.isNewAnswer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">isNewAnswer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldAnswers</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">answer</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L385-L398","name":"Lean.Meta.SynthInstance.wakeUp","line":385,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.wakeUp","doc":"Move waiters that are waiting for the given answer to the resume stack. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.wakeUp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">wakeUp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">answer</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Waiter</a> → <span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L374-L383","name":"Lean.Meta.SynthInstance.tryAnswer","line":374,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryAnswer","doc":"Assign a precomputed answer to `mvar`.\nIf it succeeds, the result is a new updated metavariable context and a new list of subgoals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryAnswer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">tryAnswer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">answer</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L336-L372","name":"Lean.Meta.SynthInstance.tryResolve","line":336,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryResolve","doc":"Try to synthesize metavariable `mvar` using the instance `inst`.\nRemark: `mctx` is set using `withMCtx`.\nIf it succeeds, the result is a new updated metavariable context and a new list of subgoals.\nA subgoal is created for each instance implicit parameter of `inst`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryResolve\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">tryResolve</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Instance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L297-L334","name":"Lean.Meta.SynthInstance.getSubgoals","line":297,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getSubgoals","doc":"`getSubgoals lctx localInsts xs inst` creates the subgoals for the instance `inst`.\nThe subgoals are in the context of the free variables `xs`, and\n`(lctx, localInsts)` is the local context and instances before we added the free variables to it.\n\nThis extra complication is required because\n  1- We want all metavariables created by `synthInstance` to share the same local context.\n  2- We want to ensure that applications such as `mvar xs` are higher order patterns.\n\nThe method `getGoals` create a new metavariable for each parameter of `inst`.\nFor example, suppose the type of `inst` is `forall (x_1 : A_1) ... (x_n : A_n), B x_1 ... x_n`.\nThen, we create the metavariables `?m_i : forall xs, A_i`, and return the subset of these\nmetavariables that are instance implicit arguments, and the expressions:\n  - `inst (?m_1 xs) ... (?m_n xs)` (aka `instVal`)\n  - `B (?m_1 xs) ... (?m_n xs)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getSubgoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getSubgoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInsts</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Instance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\">SubgoalsResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L295-L295","name":"Lean.Meta.SynthInstance.SubgoalsResult.instTypeBody","line":295,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.instTypeBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.instTypeBody\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SubgoalsResult</span>.<span class=\"name\">instTypeBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\">SubgoalsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L294-L294","name":"Lean.Meta.SynthInstance.SubgoalsResult.instVal","line":294,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.instVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.instVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SubgoalsResult</span>.<span class=\"name\">instVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\">SubgoalsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L293-L293","name":"Lean.Meta.SynthInstance.SubgoalsResult.subgoals","line":293,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.subgoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.subgoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SubgoalsResult</span>.<span class=\"name\">subgoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\">SubgoalsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L292-L292","name":"Lean.Meta.SynthInstance.SubgoalsResult.mk","line":292,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SubgoalsResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subgoals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instVal </span><span class=\"fn\">instTypeBody</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\">SubgoalsResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L286-L295","name":"Lean.Meta.SynthInstance.SubgoalsResult","line":286,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult","doc":"See `getSubgoals` and `getSubgoalsAux`\n\nWe use the parameter `j` to reduce the number of `instantiate*` invocations.\nIt is the same approach we use at `forallTelescope` and `lambdaTelescope`.\nGiven `getSubgoalsAux args j subgoals instVal type`,\nwe have that `type.instantiateRevRange j args.size args` does not have loose bound variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SubgoalsResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L275-L284","name":"Lean.Meta.SynthInstance.mkTableKeyFor","line":275,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkTableKeyFor","doc":"Create a `key` for the goal associated with the given metavariable.\nThat is, we create a key for the type of the metavariable.\n\nWe must instantiate assigned metavariables before we invoke `mkTableKey`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkTableKeyFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">mkTableKeyFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L270-L273","name":"Lean.Meta.SynthInstance.getEntry","line":270,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">key</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">TableEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L267-L268","name":"Lean.Meta.SynthInstance.findEntry?","line":267,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.findEntry?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.findEntry?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">findEntry?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">key</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">TableEntry</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L252-L265","name":"Lean.Meta.SynthInstance.newSubgoal","line":252,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.newSubgoal","doc":"Create a new generator node for `mvar` and add `waiter` as its waiter.\n`key` must be `mkTableKey mctx mvarType`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.newSubgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">newSubgoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">key </span><span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">waiter</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Waiter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L238-L250","name":"Lean.Meta.SynthInstance.mkGeneratorNode?","line":238,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkGeneratorNode?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkGeneratorNode?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">mkGeneratorNode?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">key </span><span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L200-L236","name":"Lean.Meta.SynthInstance.getInstances","line":200,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getInstances","doc":"Return globals and locals instances that may unify with `type` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Instance</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L197-L198","name":"Lean.Meta.SynthInstance.instInhabitedSynthM","line":197,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedSynthM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedSynthM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">instInhabitedSynthM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L193-L195","name":"Lean.Meta.SynthInstance.checkSystem","line":193,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.checkSystem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.checkSystem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">checkSystem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\">SynthM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L191-L191","name":"Lean.Meta.SynthInstance.SynthM","line":191,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">SynthM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L189-L189","name":"Lean.Meta.SynthInstance.State.tableEntries","line":189,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.tableEntries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.tableEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span>.<span class=\"name\">tableEntries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">TableEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L188-L188","name":"Lean.Meta.SynthInstance.State.resumeStack","line":188,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.resumeStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.resumeStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span>.<span class=\"name\">resumeStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L187-L187","name":"Lean.Meta.SynthInstance.State.generatorStack","line":187,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.generatorStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.generatorStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span>.<span class=\"name\">generatorStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L186-L186","name":"Lean.Meta.SynthInstance.State.result?","line":186,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.result?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.result?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span>.<span class=\"name\">result?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">AbstractMVarsResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L185-L185","name":"Lean.Meta.SynthInstance.State.mk","line":185,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">AbstractMVarsResult</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generatorStack</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resumeStack</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tableEntries</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">TableEntry</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L178-L189","name":"Lean.Meta.SynthInstance.State","line":178,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State","doc":"Remark: the SynthInstance.State is not really an extension of `Meta.State`.\nThe field `postponed` is not needed, and the field `mctx` is misleading since\n`synthInstance` methods operate over different `MetavarContext`s simultaneously.\nThat being said, we still use `extends` because it makes it simpler to move from\n`M` to `MetaM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L176-L176","name":"Lean.Meta.SynthInstance.Context.maxHeartbeats","line":176,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.maxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.maxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Context</span>.<span class=\"name\">maxHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L175-L175","name":"Lean.Meta.SynthInstance.Context.maxResultSize","line":175,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.maxResultSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.maxResultSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Context</span>.<span class=\"name\">maxResultSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L174-L174","name":"Lean.Meta.SynthInstance.Context.mk","line":174,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxResultSize </span><span class=\"fn\">maxHeartbeats</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L174-L176","name":"Lean.Meta.SynthInstance.Context","line":174,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L172-L172","name":"Lean.Meta.SynthInstance.TableEntry.answers","line":172,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.answers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.answers\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">TableEntry</span>.<span class=\"name\">answers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">TableEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L171-L171","name":"Lean.Meta.SynthInstance.TableEntry.waiters","line":171,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.waiters","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.waiters\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">TableEntry</span>.<span class=\"name\">waiters</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">TableEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Waiter</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L170-L170","name":"Lean.Meta.SynthInstance.TableEntry.mk","line":170,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">TableEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">waiters</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Waiter</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">answers</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\">TableEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L170-L172","name":"Lean.Meta.SynthInstance.TableEntry","line":170,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">TableEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L168-L168","name":"Lean.Meta.SynthInstance.instInhabitedAnswer","line":168,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedAnswer","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedAnswer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">instInhabitedAnswer</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L167-L167","name":"Lean.Meta.SynthInstance.Answer.size","line":167,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Answer</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L166-L166","name":"Lean.Meta.SynthInstance.Answer.resultType","line":166,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.resultType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.resultType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Answer</span>.<span class=\"name\">resultType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L165-L165","name":"Lean.Meta.SynthInstance.Answer.result","line":165,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.result","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.result\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Answer</span>.<span class=\"name\">result</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">AbstractMVarsResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L164-L164","name":"Lean.Meta.SynthInstance.Answer.mk","line":164,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Answer</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">AbstractMVarsResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\">Answer</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L164-L168","name":"Lean.Meta.SynthInstance.Answer","line":164,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Answer</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L158-L162","name":"Lean.Meta.SynthInstance.mkTableKey","line":158,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkTableKey","doc":"Remark: `mkTableKey` assumes `e` does not contain assigned metavariables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkTableKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">mkTableKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L131-L154","name":"Lean.Meta.SynthInstance.MkTableKey.normExpr","line":131,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.normExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.normExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">normExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L111-L129","name":"Lean.Meta.SynthInstance.MkTableKey.normLevel","line":111,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.normLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.normLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">normLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M\">M</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L106-L109","name":"Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM","line":106,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">instMonadMCtxM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L104-L104","name":"Lean.Meta.SynthInstance.MkTableKey.M","line":104,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L102-L102","name":"Lean.Meta.SynthInstance.MkTableKey.State.mctx","line":102,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L101-L101","name":"Lean.Meta.SynthInstance.MkTableKey.State.emap","line":101,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.emap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.emap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span>.<span class=\"name\">emap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L100-L100","name":"Lean.Meta.SynthInstance.MkTableKey.State.lmap","line":100,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.lmap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.lmap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span>.<span class=\"name\">lmap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L99-L99","name":"Lean.Meta.SynthInstance.MkTableKey.State.nextIdx","line":99,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.nextIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.nextIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span>.<span class=\"name\">nextIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L98-L98","name":"Lean.Meta.SynthInstance.MkTableKey.State.mk","line":98,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lmap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">emap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L98-L102","name":"Lean.Meta.SynthInstance.MkTableKey.State","line":98,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">MkTableKey</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L72-L74","name":"Lean.Meta.SynthInstance.Waiter.isRoot","line":72,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.isRoot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.isRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">isRoot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Waiter</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L70-L70","name":"Lean.Meta.SynthInstance.Waiter.root","line":70,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.root","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.root\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">root</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Waiter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L69-L69","name":"Lean.Meta.SynthInstance.Waiter.consumerNode","line":69,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.consumerNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.consumerNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Waiter</span>.<span class=\"name\">consumerNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a> → <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\">Waiter</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L68-L70","name":"Lean.Meta.SynthInstance.Waiter","line":68,"kind":"inductive","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Waiter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L66-L66","name":"Lean.Meta.SynthInstance.instInhabitedConsumerNode","line":66,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedConsumerNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedConsumerNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">instInhabitedConsumerNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L65-L65","name":"Lean.Meta.SynthInstance.ConsumerNode.size","line":65,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L64-L64","name":"Lean.Meta.SynthInstance.ConsumerNode.subgoals","line":64,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.subgoals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.subgoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">subgoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L63-L63","name":"Lean.Meta.SynthInstance.ConsumerNode.mctx","line":63,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L62-L62","name":"Lean.Meta.SynthInstance.ConsumerNode.key","line":62,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.key","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">key</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L61-L61","name":"Lean.Meta.SynthInstance.ConsumerNode.mvar","line":61,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">mvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L60-L60","name":"Lean.Meta.SynthInstance.ConsumerNode.mk","line":60,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar </span><span class=\"fn\">key</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subgoals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\">ConsumerNode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L60-L66","name":"Lean.Meta.SynthInstance.ConsumerNode","line":60,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">ConsumerNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L58-L58","name":"Lean.Meta.SynthInstance.instInhabitedGeneratorNode","line":58,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedGeneratorNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedGeneratorNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">instInhabitedGeneratorNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L57-L57","name":"Lean.Meta.SynthInstance.GeneratorNode.typeHasMVars","line":57,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.typeHasMVars","doc":"`typeHasMVars := true` if type of `mvar` contains metavariables.\nWe store this information to implement an optimization that relies on the fact\nthat instances are \"morally canonical.\"\nThat is, we need to find at most one answer for this generator node if the type\ndoes not have metavariables.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.typeHasMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">typeHasMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L49-L49","name":"Lean.Meta.SynthInstance.GeneratorNode.currInstanceIdx","line":49,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.currInstanceIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.currInstanceIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">currInstanceIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L48-L48","name":"Lean.Meta.SynthInstance.GeneratorNode.instances","line":48,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.instances","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.instances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">instances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Instance</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L47-L47","name":"Lean.Meta.SynthInstance.GeneratorNode.mctx","line":47,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L46-L46","name":"Lean.Meta.SynthInstance.GeneratorNode.key","line":46,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.key","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">key</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L45-L45","name":"Lean.Meta.SynthInstance.GeneratorNode.mvar","line":45,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">mvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L44-L44","name":"Lean.Meta.SynthInstance.GeneratorNode.mk","line":44,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar </span><span class=\"fn\">key</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instances</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Instance</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currInstanceIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeHasMVars</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\">GeneratorNode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L44-L58","name":"Lean.Meta.SynthInstance.GeneratorNode","line":44,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">GeneratorNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L42-L42","name":"Lean.Meta.SynthInstance.instInhabitedInstance","line":42,"kind":"instance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">instInhabitedInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Instance</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L41-L41","name":"Lean.Meta.SynthInstance.Instance.synthOrder","line":41,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.synthOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.synthOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Instance</span>.<span class=\"name\">synthOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Instance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L40-L40","name":"Lean.Meta.SynthInstance.Instance.val","line":40,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Instance</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Instance</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L39-L39","name":"Lean.Meta.SynthInstance.Instance.mk","line":39,"kind":"ctor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Instance</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">synthOrder</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\">Instance</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L39-L42","name":"Lean.Meta.SynthInstance.Instance","line":39,"kind":"structure","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Instance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">Instance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L36-L37","name":"Lean.Meta.SynthInstance.getMaxHeartbeats","line":36,"kind":"def","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getMaxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getMaxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SynthInstance</span>.<span class=\"name\">getMaxHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L28-L32","name":"Lean.Meta.backward.synthInstance.canonInstances","line":28,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.backward.synthInstance.canonInstances","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.backward.synthInstance.canonInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">backward</span>.<span class=\"name\">synthInstance</span>.<span class=\"name\">canonInstances</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L23-L26","name":"Lean.Meta.synthInstance.maxSize","line":23,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance.maxSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance.maxSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">synthInstance</span>.<span class=\"name\">maxSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/SynthInstance.lean#L18-L21","name":"Lean.Meta.synthInstance.maxHeartbeats","line":18,"kind":"opaque","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance.maxHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance.maxHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">synthInstance</span>.<span class=\"name\">maxHeartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"}]}