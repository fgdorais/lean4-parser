{"name":"Init.Data.Range.Lemmas","instances":[],"imports":["Init.Data.Range.Basic","Init.Data.List.Range","Init.Data.List.Monadic","Init.Data.Nat.Div.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Range/Lemmas.lean#L101-L103","name":"Std.Range.forM_eq_forM_range'","line":101,"kind":"theorem","docLink":"./Init/Data/Range/Lemmas.html#Std.Range.forM_eq_forM_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Lemmas.html#Std.Range.forM_eq_forM_range'\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">forM_eq_forM_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">forM</a> <span class=\"fn\">r</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM.forM\">forM</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.step\">step</a></span>)</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Range/Lemmas.lean#L83-L86","name":"Std.Range.forIn_eq_forIn_range'","line":83,"kind":"theorem","docLink":"./Init/Data/Range/Lemmas.html#Std.Range.forIn_eq_forIn_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Lemmas.html#Std.Range.forIn_eq_forIn_range'\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">forIn_eq_forIn_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.step\">step</a></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Range/Lemmas.lean#L75-L81","name":"Std.Range.forIn'_eq_forIn'_range'","line":75,"kind":"theorem","docLink":"./Init/Data/Range/Lemmas.html#Std.Range.forIn'_eq_forIn'_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Lemmas.html#Std.Range.forIn'_eq_forIn'_range'\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">forIn'_eq_forIn'_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.step\">step</a></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.step\">step</a></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Range/Lemmas.lean#L33-L35","name":"Std.Range.mem_of_mem_range'","line":33,"kind":"theorem","docLink":"./Init/Data/Range/Lemmas.html#Std.Range.mem_of_mem_range'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Lemmas.html#Std.Range.mem_of_mem_range'\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">mem_of_mem_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.step\">step</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></div></div>"}]}