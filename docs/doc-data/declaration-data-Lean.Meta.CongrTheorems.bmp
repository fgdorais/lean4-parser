{"name":"Lean.Meta.CongrTheorems","instances":[{"typeNames":["Lean.Meta.CongrArgKind"],"name":"Lean.Meta.instInhabitedCongrArgKind","className":"Inhabited"},{"typeNames":["Lean.Meta.CongrArgKind"],"name":"Lean.Meta.instReprCongrArgKind","className":"Repr"},{"typeNames":["Lean.Meta.CongrArgKind"],"name":"Lean.Meta.instBEqCongrArgKind","className":"BEq"}],"imports":["Lean.AddDecl","Lean.ReservedNameAction","Lean.ResolveName","Lean.Meta.AppBuilder","Lean.Class"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L426-L441","name":"Lean.Meta.mkCongrSimpForConst?","line":426,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpForConst?","doc":"Similar to `mkCongrSimp?`, but uses reserved names to ensure we don't keep creating the\nsame congruence theorem over and over again.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpForConst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCongrSimpForConst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levels</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L408-L424","name":"Lean.Meta.mkHCongrWithArityForConst?","line":408,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArityForConst?","doc":"Similar to `mkHCongrWithArity`, but uses reserved names to ensure we don't keep creating the\nsame congruence theorem over and over again.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArityForConst?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHCongrWithArityForConst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levels</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L367-L367","name":"Lean.Meta.congrKindsExt","line":367,"kind":"opaque","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.congrKindsExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.congrKindsExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">congrKindsExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension\">MapDeclarationExtension</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L365-L365","name":"Lean.Meta.congrSimpSuffix","line":365,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.congrSimpSuffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.congrSimpSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">congrSimpSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L361-L363","name":"Lean.Meta.isHCongrReservedNameSuffix","line":361,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.isHCongrReservedNameSuffix","doc":"Returns `true` if `s` is of the form `hcongr_<idx>` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.isHCongrReservedNameSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isHCongrReservedNameSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L359-L359","name":"Lean.Meta.hcongrThmSuffixBasePrefix","line":359,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.hcongrThmSuffixBasePrefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.hcongrThmSuffixBasePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">hcongrThmSuffixBasePrefix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L358-L358","name":"Lean.Meta.hcongrThmSuffixBase","line":358,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.hcongrThmSuffixBase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.hcongrThmSuffixBase\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">hcongrThmSuffixBase</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L345-L356","name":"Lean.Meta.mkCongrSimp?","line":345,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimp?","doc":"Create a congruence theorem for `f`. The theorem is used in the simplifier.\n\nIf `subsingletonInstImplicitRhs = true`, the `rhs` corresponding to `[Decidable p]` parameters\nis marked as instance implicit. It forces the simplifier to compute the new instance when applying\nthe congruence theorem.\nFor the `congr` tactic we set it to `false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCongrSimp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subsingletonInstImplicitRhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L319-L342","name":"Lean.Meta.mkCongrSimpCore?.mkProof.go","line":319,"kind":"opaque","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?.mkProof.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?.mkProof.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCongrSimpCore?</span>.<span class=\"name\">mkProof</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L318-L343","name":"Lean.Meta.mkCongrSimpCore?.mkProof","line":318,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?.mkProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?.mkProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCongrSimpCore?</span>.<span class=\"name\">mkProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L286-L313","name":"Lean.Meta.mkCongrSimpCore?.mk?.go","line":286,"kind":"opaque","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?.mk?.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?.mk?.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCongrSimpCore?</span>.<span class=\"name\">mk?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subsingletonInstImplicitRhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.FunInfo\">FunInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eqs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L281-L316","name":"Lean.Meta.mkCongrSimpCore?.mk?","line":281,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?.mk?","doc":"Create a congruence theorem that is useful for the simplifier.\nIn this kind of theorem, if the i-th argument is a `cast` argument, then the theorem\ncontains an input `a_i` representing the i-th argument in the left-hand-side, and\nit appears with a cast (e.g., `Eq.drec ... a_i ...`) in the right-hand-side.\nThe idea is that the right-hand-side of this theorem \"tells\" the simplifier\nhow the resulting term looks like. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?.mk?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCongrSimpCore?</span>.<span class=\"name\">mk?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subsingletonInstImplicitRhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.FunInfo\">FunInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L260-L343","name":"Lean.Meta.mkCongrSimpCore?","line":260,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?","doc":"Create a congruence theorem that is useful for the simplifier and `congr` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkCongrSimpCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkCongrSimpCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.FunInfo\">FunInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subsingletonInstImplicitRhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L237-L258","name":"Lean.Meta.getCongrSimpKindsForArgZero","line":237,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.getCongrSimpKindsForArgZero","doc":"Variant of `getCongrSimpKinds` for rewriting just argument 0.\nIf it is possible to rewrite, the 0th `CongrArgKind` is `CongrArgKind.eq`,\nand otherwise it is `CongrArgKind.fixed`. This is used for the `arg` conv tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.getCongrSimpKindsForArgZero\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getCongrSimpKindsForArgZero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.FunInfo\">FunInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L199-L235","name":"Lean.Meta.getCongrSimpKinds","line":199,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.getCongrSimpKinds","doc":"Compute `CongrArgKind`s for a simp congruence theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.getCongrSimpKinds\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getCongrSimpKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.FunInfo\">FunInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L119-L120","name":"Lean.Meta.mkHCongr","line":119,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHCongr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L98-L117","name":"Lean.Meta.mkHCongrWithArity.mkProof","line":98,"kind":"opaque","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArity.mkProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArity.mkProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHCongrWithArity</span>.<span class=\"name\">mkProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L82-L95","name":"Lean.Meta.mkHCongrWithArity.withNewEqs.loop","line":82,"kind":"opaque","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArity.withNewEqs.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArity.withNewEqs.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHCongrWithArity</span>.<span class=\"name\">withNewEqs</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eqs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L81-L96","name":"Lean.Meta.mkHCongrWithArity.withNewEqs","line":81,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArity.withNewEqs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArity.withNewEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHCongrWithArity</span>.<span class=\"name\">withNewEqs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L59-L117","name":"Lean.Meta.mkHCongrWithArity","line":59,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.mkHCongrWithArity\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkHCongrWithArity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L43-L43","name":"Lean.Meta.CongrTheorem.argKinds","line":43,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.argKinds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.argKinds\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrTheorem</span>.<span class=\"name\">argKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L42-L42","name":"Lean.Meta.CongrTheorem.proof","line":42,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.proof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrTheorem</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L41-L41","name":"Lean.Meta.CongrTheorem.type","line":41,"kind":"def","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrTheorem</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L40-L40","name":"Lean.Meta.CongrTheorem.mk","line":40,"kind":"ctor","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrTheorem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argKinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">CongrTheorem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L40-L43","name":"Lean.Meta.CongrTheorem","line":40,"kind":"structure","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L38-L38","name":"Lean.Meta.instBEqCongrArgKind","line":38,"kind":"instance","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.instBEqCongrArgKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.instBEqCongrArgKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqCongrArgKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L38-L38","name":"Lean.Meta.instReprCongrArgKind","line":38,"kind":"instance","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.instReprCongrArgKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.instReprCongrArgKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprCongrArgKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L38-L38","name":"Lean.Meta.instInhabitedCongrArgKind","line":38,"kind":"instance","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.instInhabitedCongrArgKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.instInhabitedCongrArgKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedCongrArgKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L34-L37","name":"Lean.Meta.CongrArgKind.subsingletonInst","line":34,"kind":"ctor","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.subsingletonInst","doc":"For congr-simp theorems only.  Indicates a decidable instance argument.\nThe lemma contains two arguments [a_i : Decidable ...] [b_i : Decidable ...] "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.subsingletonInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">subsingletonInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L30-L33","name":"Lean.Meta.CongrArgKind.heq","line":30,"kind":"ctor","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.heq","doc":"The lemma contains three parameters for this kind of argument `a_i`, `b_i` and `eq_i : HEq a_i b_i`.\n`a_i` and `b_i` represent the left and right hand sides, and `eq_i` is a proof for their heterogeneous equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.heq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">heq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L26-L29","name":"Lean.Meta.CongrArgKind.cast","line":26,"kind":"ctor","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.cast","doc":"The congr-simp theorems contains only one parameter for this kind of argument, and congr theorems contains two.\nThey correspond to arguments that are subsingletons/propositions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.cast\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">cast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L22-L25","name":"Lean.Meta.CongrArgKind.eq","line":22,"kind":"ctor","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.eq","doc":"The lemma contains three parameters for this kind of argument `a_i`, `b_i` and `eq_i : a_i = b_i`.\n`a_i` and `b_i` represent the left and right hand sides, and `eq_i` is a proof for their equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L18-L21","name":"Lean.Meta.CongrArgKind.fixedNoParam","line":18,"kind":"ctor","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.fixedNoParam","doc":"It is not a parameter for the congruence theorem, the theorem was specialized for this parameter.\nThis only happens if the parameter is a subsingleton/proposition, and other parameters depend on it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.fixedNoParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">fixedNoParam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L16-L17","name":"Lean.Meta.CongrArgKind.fixed","line":16,"kind":"ctor","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.fixed","doc":"It is a parameter for the congruence theorem, the parameter occurs in the left and right hand sides. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind.fixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span>.<span class=\"name\">fixed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\">CongrArgKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/CongrTheorems.lean#L15-L38","name":"Lean.Meta.CongrArgKind","line":15,"kind":"inductive","docLink":"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrArgKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CongrArgKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}