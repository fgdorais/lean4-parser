{"name":"Lean.Elab.Tactic.Change","instances":[],"imports":["Lean.Meta.Tactic.Replace","Lean.Elab.Tactic.Location"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Change.lean#L16-L39","name":"Lean.Elab.Tactic.elabChange","line":16,"kind":"def","docLink":"./Lean/Elab/Tactic/Change.html#Lean.Elab.Tactic.elabChange","doc":"Elaborates the pattern `p` and ensures that it is defeq to `e`.\nEmulates `(show p from ?m : e)`, returning the type of `?m`, but `e` and `p` do not need to be types.\nUnlike `(show p from ?m : e)`, this can assign synthetic opaque metavariables appearing in `p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Change.html#Lean.Elab.Tactic.elabChange\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabChange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}