{"name":"Std.Tactic.BVDecide.LRAT.Internal.CNF","instances":[],"imports":["Std.Tactic.BVDecide.LRAT.Internal.Formula.Class"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/CNF.lean#L119-L126","name":"Std.Tactic.BVDecide.LRAT.Internal.Formula.limplies_delete","line":119,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Formula.limplies_delete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Formula.limplies_delete\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Formula</span>.<span class=\"name\">limplies_delete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.Clause\">Clause</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails\">Entails</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Class.html#Std.Tactic.BVDecide.LRAT.Internal.Formula\">Formula</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">arr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Limplies\">Limplies</a> <span class=\"fn\">α</span> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Class.html#Std.Tactic.BVDecide.LRAT.Internal.Formula.delete\">delete</a> <span class=\"fn\">f</span> <span class=\"fn\">arr</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/CNF.lean#L109-L117","name":"Std.Tactic.BVDecide.LRAT.Internal.Formula.limplies_insert","line":109,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Formula.limplies_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Formula.limplies_insert\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Formula</span>.<span class=\"name\">limplies_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.Clause\">Clause</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails\">Entails</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Class.html#Std.Tactic.BVDecide.LRAT.Internal.Formula\">Formula</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Limplies\">Limplies</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Class.html#Std.Tactic.BVDecide.LRAT.Internal.Formula.insert\">insert</a> <span class=\"fn\">f</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/CNF.lean#L104-L107","name":"Std.Tactic.BVDecide.LRAT.Internal.Formula.sat_iff_forall","line":104,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Formula.sat_iff_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Formula.sat_iff_forall\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Formula</span>.<span class=\"name\">sat_iff_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.Clause\">Clause</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails\">Entails</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Class.html#Std.Tactic.BVDecide.LRAT.Internal.Formula\">Formula</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Class.html#Std.Tactic.BVDecide.LRAT.Internal.Formula.toList\">toList</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/CNF.lean#L88-L98","name":"Std.Tactic.BVDecide.LRAT.Internal.Clause.entails_of_entails_delete","line":88,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Clause.entails_of_entails_delete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Clause.entails_of_entails_delete\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Clause</span>.<span class=\"name\">entails_of_entails_delete</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.Clause\">Clause</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.Clause.delete\">delete</a> <span class=\"fn\">c</span> <span class=\"fn\">l</span>)</span></span> → <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/CNF.lean#L46-L86","name":"Std.Tactic.BVDecide.LRAT.Internal.Clause.limplies_iff_mem","line":46,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Clause.limplies_iff_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Clause.limplies_iff_mem\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Clause</span>.<span class=\"name\">limplies_iff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.Clause\">Clause</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Limplies\">Limplies</a> <span class=\"fn\">α</span> <span class=\"fn\">l</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.Clause.toList\">toList</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/CNF.lean#L42-L44","name":"Std.Tactic.BVDecide.LRAT.Internal.Clause.sat_iff_exists","line":42,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Clause.sat_iff_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Clause.sat_iff_exists\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Clause</span>.<span class=\"name\">sat_iff_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.Clause\">Clause</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.Clause.toList\">toList</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/CNF.lean#L30-L36","name":"Std.Tactic.BVDecide.LRAT.Internal.Literal.unsat_of_limplies_complement","line":30,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Literal.unsat_of_limplies_complement","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Literal.unsat_of_limplies_complement\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Literal</span>.<span class=\"name\">unsat_of_limplies_complement</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails\">Entails</a> <span class=\"fn\">α</span> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Limplies\">Limplies</a> <span class=\"fn\">α</span> <span class=\"fn\">x</span> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Limplies\">Limplies</a> <span class=\"fn\">α</span> <span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal.negate\">negate</a></span></span> → <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Unsatisfiable\">Unsatisfiable</a> <span class=\"fn\">α</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/CNF.lean#L20-L28","name":"Std.Tactic.BVDecide.LRAT.Internal.Literal.sat_negate_iff_not_sat","line":20,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Literal.sat_negate_iff_not_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Literal.sat_negate_iff_not_sat\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Literal</span>.<span class=\"name\">sat_negate_iff_not_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal.negate\">negate</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/CNF.lean#L17-L18","name":"Std.Tactic.BVDecide.LRAT.Internal.Literal.sat_iff","line":17,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Literal.sat_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/CNF.html#Std.Tactic.BVDecide.LRAT.Internal.Literal.sat_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Literal</span>.<span class=\"name\">sat_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"}]}