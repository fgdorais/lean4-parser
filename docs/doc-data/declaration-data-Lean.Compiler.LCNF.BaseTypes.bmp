{"name":"Lean.Compiler.LCNF.BaseTypes","instances":[],"imports":["Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/BaseTypes.lean#L19-L27","name":"Lean.Compiler.LCNF.getOtherDeclBaseType","line":19,"kind":"def","docLink":"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.getOtherDeclBaseType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.getOtherDeclBaseType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getOtherDeclBaseType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/BaseTypes.lean#L12-L17","name":"Lean.Compiler.LCNF.baseTypeExt","line":12,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.baseTypeExt","doc":"State for the environment extension used to save the LCNF base phase type for declarations\nthat do not have code associated with them.\nExample: constructors, inductive types, foreign functions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/BaseTypes.html#Lean.Compiler.LCNF.baseTypeExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">baseTypeExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CacheExtension\">CacheExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}