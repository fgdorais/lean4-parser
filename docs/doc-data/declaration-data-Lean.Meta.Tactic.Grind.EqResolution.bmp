{"name":"Lean.Meta.Tactic.Grind.EqResolution","instances":[],"imports":["Lean.Meta.AppBuilder","Lean.Meta.MatchUtil"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/EqResolution.lean#L58-L68","name":"Lean.Meta.Grind.eqResolution","line":58,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/EqResolution.html#Lean.Meta.Grind.eqResolution","doc":"A basic \"equality resolution\" procedure: Given a proposition `prop` with a proof `proof`, it attempts to resolve equality hypotheses using `isDefEq`. For example, it reduces `∀ x y, f x = f (g y y) → g x y = y` to `∀ y, g (g y y) y = y`, and `∀ (x : Nat), f x ≠ f a` to `False`.\nIf successful, the result is a pair `(prop', proof)`, where `prop'` is the simplified proposition,\nand `proof : prop → prop'`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/EqResolution.html#Lean.Meta.Grind.eqResolution\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">eqResolution</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prop</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>"}]}