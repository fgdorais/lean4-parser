{"name":"Lean.Elab.DefView","instances":[{"typeNames":["Lean.Elab.DefKind"],"name":"Lean.Elab.instInhabitedDefKind","className":"Inhabited"},{"typeNames":["Lean.Elab.DefKind"],"name":"Lean.Elab.instBEqDefKind","className":"BEq"},{"typeNames":["Lean.Elab.DefViewElabHeaderData"],"name":"Lean.Elab.instInhabitedDefViewElabHeaderData","className":"Inhabited"},{"typeNames":["Lean.Elab.BodyProcessedSnapshot"],"name":"Lean.Elab.instNonemptyBodyProcessedSnapshot","className":"Nonempty"},{"typeNames":["Lean.Elab.BodyProcessedSnapshot"],"name":"Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Elab.HeaderProcessedSnapshot"],"name":"Lean.Elab.instNonemptyHeaderProcessedSnapshot","className":"Nonempty"},{"typeNames":["Lean.Elab.HeaderProcessedSnapshot"],"name":"Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Elab.DefParsed"],"name":"Lean.Elab.instNonemptyDefParsed","className":"Nonempty"},{"typeNames":["Lean.Elab.DefsParsedSnapshot"],"name":"Lean.Elab.instNonemptyDefsParsedSnapshot","className":"Nonempty"},{"typeNames":["Lean.Elab.DefsParsedSnapshot"],"name":"Lean.Elab.instTypeNameDefsParsedSnapshot","className":"TypeName"},{"typeNames":["Lean.Elab.DefsParsedSnapshot"],"name":"Lean.Elab.instToSnapshotTreeDefsParsedSnapshot","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Elab.DefView"],"name":"Lean.Elab.instInhabitedDefView","className":"Inhabited"}],"imports":["Lean.Elab.Command","Lean.Elab.DeclNameGen","Lean.Elab.DeclUtil"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L206-L221","name":"Lean.Elab.Command.mkDefView","line":206,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefView</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L197-L204","name":"Lean.Elab.Command.isDefLike","line":197,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.isDefLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.isDefLike\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">isDefLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L189-L195","name":"Lean.Elab.Command.mkDefViewOfExample","line":189,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfExample","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfExample</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L176-L187","name":"Lean.Elab.Command.mkDefViewOfOpaque","line":176,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfOpaque","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfOpaque\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfOpaque</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L154-L174","name":"Lean.Elab.Command.mkDefViewOfInstance","line":154,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L148-L152","name":"Lean.Elab.Command.mkDefViewOfTheorem","line":148,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L141-L146","name":"Lean.Elab.Command.mkDefViewOfDef","line":141,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfDef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfDef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfDef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L133-L139","name":"Lean.Elab.Command.mkDefViewOfAbbrev","line":133,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfAbbrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfAbbrev\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfAbbrev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L127-L128","name":"Lean.Elab.DefView.isInstance","line":127,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.isInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.isInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">isInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L125-L125","name":"Lean.Elab.instInhabitedDefView","line":125,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L124-L124","name":"Lean.Elab.DefView.deriving?","line":124,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.deriving?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.deriving?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">deriving?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L123-L123","name":"Lean.Elab.DefView.headerSnap?","line":123,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerSnap?","doc":"Snapshot for incremental processing of this definition.\n\nInvariant: If the bundle's `old?` is set, then elaboration of the header is guaranteed to result\nin the same elaboration result and state, i.e. reuse is possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerSnap?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">headerSnap?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Language.SnapshotBundle</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L116-L116","name":"Lean.Elab.DefView.value","line":116,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L115-L115","name":"Lean.Elab.DefView.type?","line":115,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.type?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.type?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">type?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L114-L114","name":"Lean.Elab.DefView.binders","line":114,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.binders","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.binders\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">binders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L113-L113","name":"Lean.Elab.DefView.declId","line":113,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.declId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.declId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">declId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L112-L112","name":"Lean.Elab.DefView.modifiers","line":112,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.modifiers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.modifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">modifiers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L111-L111","name":"Lean.Elab.DefView.headerRef","line":111,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerRef","doc":"An unstructured syntax object that comprises the \"header\" of the definition, i.e. everything up\nto the value. Used as a more specific ref for header elaboration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">headerRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L106-L106","name":"Lean.Elab.DefView.ref","line":106,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L105-L105","name":"Lean.Elab.DefView.kind","line":105,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L104-L104","name":"Lean.Elab.DefView.mk","line":104,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">headerRef</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declId </span><span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">headerSnap?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Language.SnapshotBundle</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">deriving?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L104-L125","name":"Lean.Elab.DefView","line":104,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L98-L100","name":"Lean.Elab.instToSnapshotTreeDefsParsedSnapshot","line":98,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeDefsParsedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeDefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToSnapshotTreeDefsParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L97-L97","name":"Lean.Elab.instTypeNameDefsParsedSnapshot","line":97,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instTypeNameDefsParsedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instTypeNameDefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instTypeNameDefsParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L97-L97","name":"Lean.Elab.instNonemptyDefsParsedSnapshot","line":97,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefsParsedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyDefsParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L96-L96","name":"Lean.Elab.DefsParsedSnapshot.defs","line":96,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.defs","doc":"Definitions of this mutual block. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.defs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span>.<span class=\"name\">defs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L94-L94","name":"Lean.Elab.DefsParsedSnapshot.mk","line":94,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSnapshot</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">defs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L94-L97","name":"Lean.Elab.DefsParsedSnapshot.toSnapshot","line":94,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.toSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.toSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span>.<span class=\"name\">toSnapshot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L93-L97","name":"Lean.Elab.DefsParsedSnapshot","line":93,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot","doc":"Snapshot after syntax tree has been split into separate mutual def headers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L91-L91","name":"Lean.Elab.instNonemptyDefParsed","line":91,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefParsed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefParsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyDefParsed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L90-L90","name":"Lean.Elab.DefParsed.headerProcessedSnap","line":90,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.headerProcessedSnap","doc":"Elaboration result, unless fatal exception occurred. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.headerProcessedSnap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span>.<span class=\"name\">headerProcessedSnap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L88-L88","name":"Lean.Elab.DefParsed.fullHeaderRef","line":88,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.fullHeaderRef","doc":"Unstructured syntax object comprising the full \"header\" of the definition from the modifiers\n(incl. docstring) up to the value, used for determining header elaboration reuse.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.fullHeaderRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span>.<span class=\"name\">fullHeaderRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L83-L83","name":"Lean.Elab.DefParsed.mk","line":83,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fullHeaderRef</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">headerProcessedSnap</span> : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L82-L91","name":"Lean.Elab.DefParsed","line":82,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed","doc":"State before elaboration of a mutual definition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L75-L80","name":"Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot","line":75,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToSnapshotTreeHeaderProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L74-L74","name":"Lean.Elab.instNonemptyHeaderProcessedSnapshot","line":74,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyHeaderProcessedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyHeaderProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyHeaderProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L73-L73","name":"Lean.Elab.HeaderProcessedSnapshot.moreSnaps","line":73,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.moreSnaps","doc":"Untyped snapshots from `logSnapshotTask`, saved at this level for cancellation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.moreSnaps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">moreSnaps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L71-L71","name":"Lean.Elab.HeaderProcessedSnapshot.bodySnap","line":71,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodySnap","doc":"Result of body elaboration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodySnap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">bodySnap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L69-L69","name":"Lean.Elab.HeaderProcessedSnapshot.bodyStx","line":69,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodyStx","doc":"Syntax of definition body, for checking reuse of `bodySnap`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodyStx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">bodyStx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L67-L67","name":"Lean.Elab.HeaderProcessedSnapshot.tacSnap?","line":67,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacSnap?","doc":"Incremental execution of main tactic block, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacSnap?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">tacSnap?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">Tactic.TacticParsedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L65-L65","name":"Lean.Elab.HeaderProcessedSnapshot.tacStx?","line":65,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacStx?","doc":"Syntax of top-level tactic block if any, for checking reuse of `tacSnap?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacStx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">tacStx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L63-L63","name":"Lean.Elab.HeaderProcessedSnapshot.state","line":63,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.state","doc":"Resulting elaboration state, including any environment additions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.state\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">state</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">Term.SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L61-L61","name":"Lean.Elab.HeaderProcessedSnapshot.view","line":61,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.view","doc":"Elaboration results. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.view\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">view</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L59-L59","name":"Lean.Elab.HeaderProcessedSnapshot.mk","line":59,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSnapshot</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">Term.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacStx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacSnap?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">Tactic.TacticParsedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bodyStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bodySnap</span> : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moreSnaps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L59-L74","name":"Lean.Elab.HeaderProcessedSnapshot.toSnapshot","line":59,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.toSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.toSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">toSnapshot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L58-L74","name":"Lean.Elab.HeaderProcessedSnapshot","line":58,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot","doc":"Snapshot after elaboration of a definition header. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L55-L56","name":"Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot","line":55,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToSnapshotTreeBodyProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L54-L54","name":"Lean.Elab.instNonemptyBodyProcessedSnapshot","line":54,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyBodyProcessedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyBodyProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyBodyProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L53-L53","name":"Lean.Elab.BodyProcessedSnapshot.moreSnaps","line":53,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.moreSnaps","doc":"Untyped snapshots from `logSnapshotTask`, saved at this level for cancellation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.moreSnaps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">moreSnaps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L51-L51","name":"Lean.Elab.BodyProcessedSnapshot.value","line":51,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.value","doc":"Elaboration result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L49-L49","name":"Lean.Elab.BodyProcessedSnapshot.state","line":49,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.state","doc":"State after elaboration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.state\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">state</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">Term.SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L47-L47","name":"Lean.Elab.BodyProcessedSnapshot.mk","line":47,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSnapshot</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">Term.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moreSnaps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L47-L54","name":"Lean.Elab.BodyProcessedSnapshot.toSnapshot","line":47,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.toSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.toSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">toSnapshot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L46-L54","name":"Lean.Elab.BodyProcessedSnapshot","line":46,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot","doc":"Snapshot after processing of a definition body.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L41-L41","name":"Lean.Elab.instInhabitedDefViewElabHeaderData","line":41,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefViewElabHeaderData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefViewElabHeaderData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefViewElabHeaderData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L40-L40","name":"Lean.Elab.DefViewElabHeaderData.type","line":40,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.type","doc":"Type including parameters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L38-L38","name":"Lean.Elab.DefViewElabHeaderData.numParams","line":38,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.numParams","doc":"Number of parameters before `:`, it also includes auto-implicit parameters automatically added by Lean. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.numParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">numParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L36-L36","name":"Lean.Elab.DefViewElabHeaderData.binderIds","line":36,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.binderIds","doc":"Syntax objects for the binders occurring before `:`, we use them to populate the `InfoTree` when elaborating `valueStx`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.binderIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">binderIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L34-L34","name":"Lean.Elab.DefViewElabHeaderData.levelNames","line":34,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.levelNames","doc":"Universe level parameter names explicitly provided by the user. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.levelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L32-L32","name":"Lean.Elab.DefViewElabHeaderData.declName","line":32,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.declName","doc":"Full name for this declaration. This is the name that will be added to the `Environment`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L30-L30","name":"Lean.Elab.DefViewElabHeaderData.shortDeclName","line":30,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.shortDeclName","doc":"Short name. Recall that all declarations in Lean 4 are potentially recursive. We use `shortDeclName` to refer\nto them at `valueStx`, and other declarations in the same mutual block. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.shortDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">shortDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L26-L26","name":"Lean.Elab.DefViewElabHeaderData.mk","line":26,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shortDeclName </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L25-L41","name":"Lean.Elab.DefViewElabHeaderData","line":25,"kind":"structure","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData","doc":"Header elaboration data of a `DefView`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L21-L23","name":"Lean.Elab.DefKind.isExample","line":21,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isExample","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">isExample</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L17-L19","name":"Lean.Elab.DefKind.isTheorem","line":17,"kind":"def","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">isTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L15-L15","name":"Lean.Elab.instBEqDefKind","line":15,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instBEqDefKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instBEqDefKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instBEqDefKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L15-L15","name":"Lean.Elab.instInhabitedDefKind","line":15,"kind":"instance","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.abbrev","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.abbrev","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.abbrev\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">abbrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.opaque","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.opaque","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.opaque\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">opaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.example","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.example","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.example\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">example</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.theorem","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.theorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.theorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">theorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.instance","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.instance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.instance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">instance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L14-L14","name":"Lean.Elab.DefKind.def","line":14,"kind":"ctor","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.def\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">def</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DefView.lean#L13-L15","name":"Lean.Elab.DefKind","line":13,"kind":"inductive","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}