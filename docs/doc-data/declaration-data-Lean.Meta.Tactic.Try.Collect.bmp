{"name":"Lean.Meta.Tactic.Try.Collect","instances":[{"typeNames":["Lean.Meta.Try.Collector.OrdSet"],"name":"Lean.Meta.Try.Collector.instInhabitedOrdSet","className":"Inhabited"}],"imports":["Init.Try","Lean.Meta.Tactic.LibrarySearch","Lean.Meta.Tactic.Util","Lean.Meta.Tactic.Grind.Cases","Lean.Meta.Tactic.Grind.EMatchTheorem","Lean.Meta.Tactic.FunIndInfo","Lean.Meta.Tactic.FunIndCollect"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L172-L173","name":"Lean.Meta.Try.collect","line":172,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.collect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.collect\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">collect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Info\">Info</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L170-L170","name":"Lean.Meta.Try.Info","line":170,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Info","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Info\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Info</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L157-L166","name":"Lean.Meta.Try.Collector.main.go","line":157,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.main.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.main.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">main</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Cache\">Cache</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L153-L166","name":"Lean.Meta.Try.Collector.main","line":153,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.main","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L133-L151","name":"Lean.Meta.Try.Collector.visit","line":133,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Cache\">Cache</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L131-L131","name":"Lean.Meta.Try.Collector.Cache","line":131,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Cache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L124-L129","name":"Lean.Meta.Try.Collector.checkInductive","line":124,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.checkInductive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.checkInductive\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">checkInductive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localDecl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L118-L122","name":"Lean.Meta.Try.Collector.visitApp","line":118,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visitApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visitApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">visitApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L108-L116","name":"Lean.Meta.Try.Collector.saveLibSearchCandidates","line":108,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveLibSearchCandidates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveLibSearchCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">saveLibSearchCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L101-L105","name":"Lean.Meta.Try.Collector.saveFunInd","line":101,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveFunInd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveFunInd\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">saveFunInd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L97-L99","name":"Lean.Meta.Try.Collector.visitConst","line":97,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visitConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.visitConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">visitConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L92-L95","name":"Lean.Meta.Try.Collector.saveUnfoldCandidate","line":92,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveUnfoldCandidate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveUnfoldCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">saveUnfoldCandidate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L83-L90","name":"Lean.Meta.Try.Collector.getEqDefDecl?","line":83,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.getEqDefDecl?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.getEqDefDecl?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">getEqDefDecl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L76-L81","name":"Lean.Meta.Try.Collector.saveEqnCandidate","line":76,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveEqnCandidate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveEqnCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">saveEqnCandidate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L66-L74","name":"Lean.Meta.Try.Collector.isEligible","line":66,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.isEligible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.isEligible\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">isEligible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L62-L64","name":"Lean.Meta.Try.Collector.inCurrentModule","line":62,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.inCurrentModule","doc":"Returns `true` if `declName` is in the module being compiled. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.inCurrentModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">inCurrentModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L59-L60","name":"Lean.Meta.Try.Collector.saveConst","line":59,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.saveConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">saveConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L56-L57","name":"Lean.Meta.Try.Collector.getConfig","line":56,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.getConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.getConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">getConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\">M</a> <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L54-L54","name":"Lean.Meta.Try.Collector.M","line":54,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L52-L52","name":"Lean.Meta.Try.Collector.Context.config","line":52,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context.config","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context.config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Context</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L51-L51","name":"Lean.Meta.Try.Collector.Context.mk","line":51,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L51-L52","name":"Lean.Meta.Try.Collector.Context","line":51,"kind":"structure","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L49-L49","name":"Lean.Meta.Try.Collector.Result.libSearchResults","line":49,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.libSearchResults","doc":"Relevant declarations by `libSearch` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.libSearchResults\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">libSearchResults</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheoremKind\">Grind.EMatchTheoremKind</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L47-L47","name":"Lean.Meta.Try.Collector.Result.indCandidates","line":47,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.indCandidates","doc":"Induction candidates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.indCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">indCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\">InductionCandidate</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L45-L45","name":"Lean.Meta.Try.Collector.Result.funIndCandidates","line":45,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.funIndCandidates","doc":"Function induction candidates "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.funIndCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">funIndCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/FunIndCollect.html#Lean.Meta.FunInd.SeenCalls\">FunInd.SeenCalls</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L43-L43","name":"Lean.Meta.Try.Collector.Result.eqnCandidates","line":43,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.eqnCandidates","doc":"Equation function candidates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.eqnCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">eqnCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L41-L41","name":"Lean.Meta.Try.Collector.Result.unfoldCandidates","line":41,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.unfoldCandidates","doc":"Unfolding candidates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.unfoldCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">unfoldCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L39-L39","name":"Lean.Meta.Try.Collector.Result.allConsts","line":39,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.allConsts","doc":"All constant symbols occurring in the gal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.allConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">allConsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L37-L37","name":"Lean.Meta.Try.Collector.Result.mk","line":37,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allConsts </span><span class=\"fn\">unfoldCandidates </span><span class=\"fn\">eqnCandidates</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funIndCandidates</span> : <a href=\"./Lean/Meta/Tactic/FunIndCollect.html#Lean.Meta.FunInd.SeenCalls\">FunInd.SeenCalls</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indCandidates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\">InductionCandidate</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">libSearchResults</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheoremKind\">Grind.EMatchTheoremKind</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\">Result</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L37-L49","name":"Lean.Meta.Try.Collector.Result","line":37,"kind":"structure","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.Result\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L34-L35","name":"Lean.Meta.Try.Collector.OrdSet.isEmpty","line":34,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.isEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L27-L32","name":"Lean.Meta.Try.Collector.OrdSet.insert","line":27,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L25-L25","name":"Lean.Meta.Try.Collector.instInhabitedOrdSet","line":25,"kind":"instance","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.instInhabitedOrdSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.instInhabitedOrdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">instInhabitedOrdSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝²</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">a✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L24-L24","name":"Lean.Meta.Try.Collector.OrdSet.set","line":24,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.set","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.set\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span>.<span class=\"name\">set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L23-L23","name":"Lean.Meta.Try.Collector.OrdSet.elems","line":23,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.elems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.elems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span>.<span class=\"name\">elems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L22-L22","name":"Lean.Meta.Try.Collector.OrdSet.mk","line":22,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">set</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\">OrdSet</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L21-L25","name":"Lean.Meta.Try.Collector.OrdSet","line":21,"kind":"structure","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet","doc":"`Set` with insertion order preserved. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.OrdSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">OrdSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L19-L19","name":"Lean.Meta.Try.Collector.InductionCandidate.val","line":19,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">InductionCandidate</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\">InductionCandidate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.InductiveVal\">InductiveVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L18-L18","name":"Lean.Meta.Try.Collector.InductionCandidate.fvarId","line":18,"kind":"def","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">InductionCandidate</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\">InductionCandidate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L17-L17","name":"Lean.Meta.Try.Collector.InductionCandidate.mk","line":17,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">InductionCandidate</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">InductiveVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\">InductionCandidate</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Try/Collect.lean#L17-L19","name":"Lean.Meta.Try.Collector.InductionCandidate","line":17,"kind":"structure","docLink":"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Try/Collect.html#Lean.Meta.Try.Collector.InductionCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Try</span>.<span class=\"name\">Collector</span>.<span class=\"name\">InductionCandidate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}