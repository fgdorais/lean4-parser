{"name":"Lean.Compiler.Old","instances":[],"imports":["Lean.Environment"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/Old.lean#L48-L52","name":"Lean.Compiler.isUnsafeRecName?","line":48,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.isUnsafeRecName?","doc":"Return `some _` if the given name was created using `mkUnsafeRecName` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.isUnsafeRecName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">isUnsafeRecName?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/Old.lean#L40-L46","name":"Lean.Compiler.mkUnsafeRecName","line":40,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.mkUnsafeRecName","doc":"We generate auxiliary unsafe definitions for regular recursive definitions.\nThe auxiliary unsafe definition has a clear runtime cost execution model.\nThis function returns the auxiliary unsafe definition name for the given name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.mkUnsafeRecName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkUnsafeRecName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/Old.lean#L34-L38","name":"Lean.Compiler.checkIsDefinition","line":34,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.checkIsDefinition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.checkIsDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">checkIsDefinition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/Old.lean#L24-L32","name":"Lean.Compiler.getDeclNamesForCodeGen","line":24,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.getDeclNamesForCodeGen","doc":"Return the name of new definitions in the a given declaration.\nHere we consider only declarations we generate code for.\nWe use this definition to implement `add_and_compile`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.getDeclNamesForCodeGen\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getDeclNamesForCodeGen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/Old.lean#L18-L22","name":"Lean.Compiler.isEagerLambdaLiftingName","line":18,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.isEagerLambdaLiftingName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.isEagerLambdaLiftingName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">isEagerLambdaLiftingName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/Old.lean#L14-L16","name":"Lean.Compiler.mkEagerLambdaLiftingName","line":14,"kind":"def","docLink":"./Lean/Compiler/Old.html#Lean.Compiler.mkEagerLambdaLiftingName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/Old.html#Lean.Compiler.mkEagerLambdaLiftingName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkEagerLambdaLiftingName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"}]}