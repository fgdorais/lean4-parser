{"name":"Batteries.Data.Range.Lemmas","instances":[],"imports":["Init","Batteries.Tactic.SeqFocus","Batteries.Data.List.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Range/Lemmas.lean#L30-L31","name":"Std.Range.forIn'_eq_forIn_range'","line":30,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.forIn'_eq_forIn_range'","doc":"**Alias** of `Std.Range.forIn'_eq_forIn'_range'`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.forIn'_eq_forIn_range'\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">forIn'_eq_forIn_range'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.step\">step</a></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.step\">step</a></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Range/Lemmas.lean#L27-L28","name":"Std.Range.mem_range'_elems","line":27,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.mem_range'_elems","doc":"**Alias** of `Std.Range.mem_of_mem_range'`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.mem_range'_elems\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">mem_range'_elems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">List.range'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.step\">step</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Range/Lemmas.lean#L24-L25","name":"Std.Range.numElems_step_1","line":24,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems_step_1","doc":"**Alias** of `Std.Range.size_step_1`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems_step_1\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">numElems_step_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start </span><span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Basic.html#Std.Range.mk\">{</a> <span class=\"fn\">start</span> := <span class=\"fn\">start</span>, <span class=\"fn\">stop</span> := <span class=\"fn\">stop</span>, <span class=\"fn\">step_pos</span> := <span class=\"fn\">⋯</span> <a href=\"./Init/Data/Range/Basic.html#Std.Range.mk\">}</a>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">start</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Range/Lemmas.lean#L21-L22","name":"Std.Range.size_step_1","line":21,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.size_step_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.size_step_1\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">size_step_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start </span><span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Basic.html#Std.Range.mk\">{</a> <span class=\"fn\">start</span> := <span class=\"fn\">start</span>, <span class=\"fn\">stop</span> := <span class=\"fn\">stop</span>, <span class=\"fn\">step_pos</span> := <span class=\"fn\">⋯</span> <a href=\"./Init/Data/Range/Basic.html#Std.Range.mk\">}</a>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">start</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Range/Lemmas.lean#L18-L19","name":"Std.Range.numElems_stop_le_start","line":18,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems_stop_le_start","doc":"**Alias** of `Std.Range.size_stop_le_start`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems_stop_le_start\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">numElems_stop_le_start</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.stop\">stop</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> → <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Range/Lemmas.lean#L13-L16","name":"Std.Range.size_stop_le_start","line":13,"kind":"theorem","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.size_stop_le_start","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.size_stop_le_start\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">size_stop_le_start</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.stop\">stop</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.start\">start</a></span> → <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Basic.html#Std.Range.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Range/Lemmas.lean#L11-L11","name":"Std.Range.numElems","line":11,"kind":"def","docLink":"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems","doc":"**Alias** of `Std.Range.size`.\n\n---\n\nThe number of elements in the range. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Range/Lemmas.html#Std.Range.numElems\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">numElems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"}]}