{"name":"Lean.Compiler.LCNF.LambdaLifting","instances":[],"imports":["Lean.Meta.Instances","Lean.Compiler.InlineAttrs","Lean.Compiler.LCNF.Closure","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.MonadScope","Lean.Compiler.LCNF.Internalize","Lean.Compiler.LCNF.Level","Lean.Compiler.LCNF.AuxDeclCache"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L171-L184","name":"Lean.Compiler.LCNF.eagerLambdaLifting","line":171,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.eagerLambdaLifting","doc":"During eager lambda lifting, we lift\n- All local function declarations from instances (motivation: make sure it is cheap to inline them later)\n- Local function declarations that take local instances as parameters (motivation: ensure they are specialized)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.eagerLambdaLifting\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">eagerLambdaLifting</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L162-L169","name":"Lean.Compiler.LCNF.lambdaLifting","line":162,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.lambdaLifting","doc":"Eliminate all local function declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.lambdaLifting\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">lambdaLifting</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L158-L160","name":"Lean.Compiler.LCNF.Decl.lambdaLifting","line":158,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.Decl.lambdaLifting","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.Decl.lambdaLifting\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">lambdaLifting</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">liftInstParamOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inheritInlineAttrs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L152-L154","name":"Lean.Compiler.LCNF.LambdaLifting.main","line":152,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.main","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L123-L149","name":"Lean.Compiler.LCNF.LambdaLifting.visitCode","line":123,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.visitCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.visitCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">visitCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L119-L121","name":"Lean.Compiler.LCNF.LambdaLifting.visitFunDecl","line":119,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.visitFunDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.visitFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">visitFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L109-L116","name":"Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl.go","line":109,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">mkAuxDecl</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">closure</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nameNew</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">safe</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inlineAttr?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/InlineAttrs.html#Lean.Compiler.InlineAttributeKind\">InlineAttributeKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Internalize.html#Lean.Compiler.LCNF.Internalize.InternalizeM\">Internalize.InternalizeM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L85-L116","name":"Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl","line":85,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl","doc":"Create a new auxiliary declaration. The array `closure` contains all free variables\noccurring in `decl`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">mkAuxDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">closure</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L78-L82","name":"Lean.Compiler.LCNF.LambdaLifting.mkAuxDeclName","line":78,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDeclName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">mkAuxDeclName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L66-L76","name":"Lean.Compiler.LCNF.LambdaLifting.shouldLift","line":66,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.shouldLift","doc":"Return `true` if the given declaration should be lambda lifted.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.shouldLift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">shouldLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L59-L64","name":"Lean.Compiler.LCNF.LambdaLifting.hasInstParam","line":59,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.hasInstParam","doc":"Return `true` if the given declaration takes a local instance as a parameter.\nWe lambda lift this kind of local function declaration before specialization.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.hasInstParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">hasInstParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L56-L57","name":"Lean.Compiler.LCNF.LambdaLifting.LiftM","line":56,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM","doc":"Monad for applying lambda lifting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">LiftM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L54-L54","name":"Lean.Compiler.LCNF.LambdaLifting.State.nextIdx","line":54,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.nextIdx","doc":"Next index for generating auxiliary declaration name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.nextIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">State</span>.<span class=\"name\">nextIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L50-L50","name":"Lean.Compiler.LCNF.LambdaLifting.State.decls","line":50,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.decls","doc":"New auxiliary declarations\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">State</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L46-L46","name":"Lean.Compiler.LCNF.LambdaLifting.State.mk","line":46,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L45-L54","name":"Lean.Compiler.LCNF.LambdaLifting.State","line":45,"kind":"structure","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State","doc":"State for the `LiftM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L42-L42","name":"Lean.Compiler.LCNF.LambdaLifting.Context.minSize","line":42,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.minSize","doc":"Only local functions with `size > minSize` are lambda lifted.\nWe use this feature to implement `@[inline] instance ...` and `@[always_inline] instance ...`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.minSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">minSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L37-L37","name":"Lean.Compiler.LCNF.LambdaLifting.Context.inheritInlineAttrs","line":37,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.inheritInlineAttrs","doc":"If true, the lambda-lifted functions inherit the inline attribute from `mainDecl`.\nWe use this feature to implement `@[inline] instance ...` and `@[always_inline] instance ...`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.inheritInlineAttrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">inheritInlineAttrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L32-L32","name":"Lean.Compiler.LCNF.LambdaLifting.Context.mainDecl","line":32,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.mainDecl","doc":"Declaration where lambda lifting is being applied.\nWe use it to provide the \"base name\" for auxiliary declarations and the flag `safe`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.mainDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">mainDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L27-L27","name":"Lean.Compiler.LCNF.LambdaLifting.Context.suffix","line":27,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.suffix","doc":"Suffix for the new auxiliary declarations being created. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.suffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">suffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L25-L25","name":"Lean.Compiler.LCNF.LambdaLifting.Context.liftInstParamOnly","line":25,"kind":"def","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.liftInstParamOnly","doc":"If `liftInstParamOnly` is `true`, then only local functions that take\nlocal instances as parameters are lambda lifted.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.liftInstParamOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">liftInstParamOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L20-L20","name":"Lean.Compiler.LCNF.LambdaLifting.Context.mk","line":20,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">liftInstParamOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inheritInlineAttrs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/LambdaLifting.lean#L19-L42","name":"Lean.Compiler.LCNF.LambdaLifting.Context","line":19,"kind":"structure","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context","doc":"Context for the `LiftM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}