{"name":"Init.Data.List.ToArrayImpl","instances":[],"imports":["Init.Data.List.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/List/ToArrayImpl.lean#L23-L34","name":"List.toArrayImpl","line":23,"kind":"def","docLink":"./Init/Data/List/ToArrayImpl.html#List.toArrayImpl","doc":"Converts a `List α` into an `Array α` by repeatedly pushing elements from the list onto an empty\narray. `O(|xs|)`.\n\nUse `List.toArray` instead of calling this function directly. At runtime, this operation implements\nboth `List.toArray` and `Array.mk`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/ToArrayImpl.html#List.toArrayImpl\"><span class=\"name\">List</span>.<span class=\"name\">toArrayImpl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/List/ToArrayImpl.lean#L14-L21","name":"List.toArrayAux","line":14,"kind":"def","docLink":"./Init/Data/List/ToArrayImpl.html#List.toArrayAux","doc":"Auxiliary definition for `List.toArray`.\n`List.toArrayAux as r = r ++ as.toArray`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/List/ToArrayImpl.html#List.toArrayAux\"><span class=\"name\">List</span>.<span class=\"name\">toArrayAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span></span></div></div>"}]}