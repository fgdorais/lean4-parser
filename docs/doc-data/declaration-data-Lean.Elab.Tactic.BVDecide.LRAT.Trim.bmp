{"name":"Lean.Elab.Tactic.BVDecide.LRAT.Trim","instances":[],"imports":["Init.Data.Nat.Fold","Std.Tactic.BVDecide.LRAT.Actions","Std.Data.HashMap"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L216-L221","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim","line":216,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim","doc":"Trim the LRAT `proof` by removing all steps that are not used in reaching the empty clause\nconclusion.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L210-L212","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.go","line":210,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L190-L208","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.mapping","line":190,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.mapping","doc":"Map the set of used proof steps to a new LRAT proof that has no holes in the sequence of proof\nidentifiers.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.mapping\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">mapping</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L161-L188","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.useAnalysis.go","line":161,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.useAnalysis.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.useAnalysis.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">useAnalysis</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">worklist</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L153-L188","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.useAnalysis","line":153,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.useAnalysis","doc":"Perform a use-def analysis of LRAT proof steps, starting at the empty clause and working its way\nup with DFS.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.useAnalysis\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">useAnalysis</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L143-L149","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.mapStep.mapIdent","line":143,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.mapStep.mapIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.mapStep.mapIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">mapStep</span>.<span class=\"name\">mapIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ident</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L120-L149","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.mapStep","line":120,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.mapStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.mapStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">mapStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L115-L118","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.registerIdMap","line":115,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.registerIdMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.registerIdMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">registerIdMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldId </span><span class=\"fn\">newId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L107-L113","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.markUsed","line":107,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.markUsed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.markUsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">markUsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L102-L105","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.isUsed","line":102,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.isUsed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.isUsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">isUsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L97-L100","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getProofStep","line":97,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getProofStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getProofStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">getProofStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L88-L91","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getEmptyId","line":88,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getEmptyId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getEmptyId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">getEmptyId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L83-L86","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getInitialId","line":83,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getInitialId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getInitialId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">getInitialId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L71-L81","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.run","line":71,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L66-L69","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findEmptyId","line":66,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findEmptyId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findEmptyId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">findEmptyId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L58-L64","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findInitialId","line":58,"kind":"opaque","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findInitialId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findInitialId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">findInitialId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L54-L54","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M","line":54,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L52-L52","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mapped","line":52,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mapped","doc":"For each proof step `i` contains at index `i - initialId` the step that `i` maps to in the new\nproof or `0` if that step is not yet set. Used such that the proof remains a sequence without\ngaps.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mapped\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">State</span>.<span class=\"name\">mapped</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L46-L46","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.State.used","line":46,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.used","doc":"For each proof step `i` contains  at index `i - initialId` `0` if `i` is unused, `1` if it is\nused.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.used\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">State</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L41-L41","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mk","line":41,"kind":"ctor","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">used</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapped</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L41-L52","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.State","line":41,"kind":"structure","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L39-L39","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.addEmptyId","line":39,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.addEmptyId","doc":"The id of the empty proof step.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.addEmptyId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">Context</span>.<span class=\"name\">addEmptyId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L35-L35","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.initialId","line":35,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.initialId","doc":"The id of the first proof step.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.initialId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">Context</span>.<span class=\"name\">initialId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L31-L31","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.proof","line":31,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.proof","doc":"The proof as a map from proof step ids to their actions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">Context</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L27-L27","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.mk","line":27,"kind":"ctor","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initialId </span><span class=\"fn\">addEmptyId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L24-L39","name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.Context","line":24,"kind":"structure","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context","doc":"The context used for trimming LRAT proofs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}