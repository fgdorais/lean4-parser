{"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.ReifiedLemmas","instances":[],"imports":["Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.ReifiedBVLogical"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedLemmas.lean#L67-L95","name":"Lean.Elab.Tactic.BVDecide.Frontend.addCondLemmas.mkCondFalseLemma","line":67,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedLemmas.html#Lean.Elab.Tactic.BVDecide.Frontend.addCondLemmas.mkCondFalseLemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedLemmas.html#Lean.Elab.Tactic.BVDecide.Frontend.addCondLemmas.mkCondFalseLemma\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">addCondLemmas</span>.<span class=\"name\">mkCondFalseLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atom </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrExpr </span><span class=\"fn\">atomExpr </span><span class=\"fn\">lhsExpr </span><span class=\"fn\">rhsExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.SatAtBVLogical\">SatAtBVLogical</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedLemmas.lean#L34-L65","name":"Lean.Elab.Tactic.BVDecide.Frontend.addCondLemmas.mkCondTrueLemma","line":34,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedLemmas.html#Lean.Elab.Tactic.BVDecide.Frontend.addCondLemmas.mkCondTrueLemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedLemmas.html#Lean.Elab.Tactic.BVDecide.Frontend.addCondLemmas.mkCondTrueLemma\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">addCondLemmas</span>.<span class=\"name\">mkCondTrueLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atom </span><span class=\"fn\">lhs</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrExpr </span><span class=\"fn\">atomExpr </span><span class=\"fn\">lhsExpr </span><span class=\"fn\">rhsExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.SatAtBVLogical\">SatAtBVLogical</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedLemmas.lean#L19-L95","name":"Lean.Elab.Tactic.BVDecide.Frontend.addCondLemmas","line":19,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedLemmas.html#Lean.Elab.Tactic.BVDecide.Frontend.addCondLemmas","doc":"This function adds the two lemmas:\n- `discrExpr = true → atomExpr = lhsExpr`\n- `discrExpr = false → atomExpr = rhsExpr`\nIt assumes that `discrExpr`, `lhsExpr` and `rhsExpr` are the expressions corresponding to `discr`,\n`lhs` and `rhs`. Furthermore it assumes that `atomExpr` is of the form\n`bif discrExpr then lhsExpr else rhsExpr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedLemmas.html#Lean.Elab.Tactic.BVDecide.Frontend.addCondLemmas\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">addCondLemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">atom </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVExpr\">ReifiedBVExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrExpr </span><span class=\"fn\">atomExpr </span><span class=\"fn\">lhsExpr </span><span class=\"fn\">rhsExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.LemmaM\">LemmaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}