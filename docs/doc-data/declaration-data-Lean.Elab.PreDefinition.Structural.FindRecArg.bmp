{"name":"Lean.Elab.PreDefinition.Structural.FindRecArg","instances":[],"imports":["Lean.Elab.PreDefinition.TerminationMeasure","Lean.Elab.PreDefinition.FixedParams","Lean.Elab.PreDefinition.Structural.Basic","Lean.Elab.PreDefinition.Structural.RecArgInfo"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L237-L282","name":"Lean.Elab.Structural.tryAllArgs","line":237,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.tryAllArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.tryAllArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">tryAllArgs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fnNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerms</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">values</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">termMeasure?s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L229-L233","name":"Lean.Elab.Structural.allCombinations.go","line":229,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.allCombinations.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.allCombinations.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">allCombinations</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L225-L234","name":"Lean.Elab.Structural.allCombinations","line":225,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.allCombinations","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.allCombinations\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">allCombinations</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L223-L223","name":"Lean.Elab.Structural.maxCombinationSize","line":223,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.maxCombinationSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.maxCombinationSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">maxCombinationSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L171-L221","name":"Lean.Elab.Structural.argsInGroup","line":171,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.argsInGroup","doc":"Filters the `recArgInfos` by those that describe an argument that's part of the recursive inductive\ngroup `group`.\n\nBecause of nested inductives this function has the ability to change the `recArgInfo`.\nConsider\n```\ninductive Tree where | node : List Tree → Tree\n```\nthen when we look for arguments whose type is part of the group `Tree`, we want to also consider\nthe argument of type `List Tree`, even though that argument’s `RecArgInfo` refers to initially to\n`List`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.argsInGroup\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">argsInGroup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">group</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/IndGroupInfo.html#Lean.Elab.Structural.IndGroupInst\">IndGroupInst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L165-L169","name":"Lean.Elab.Structural.inductiveGroups","line":165,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.inductiveGroups","doc":"Given the `RecArgInfo`s of all the recursive functions, find the inductive groups to consider.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.inductiveGroups\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">inductiveGroups</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/IndGroupInfo.html#Lean.Elab.Structural.IndGroupInst\">IndGroupInst</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L144-L156","name":"Lean.Elab.Structural.nonIndicesFirst","line":144,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.nonIndicesFirst","doc":"Reorders the `RecArgInfos` of one function to put arguments that are indices of other arguments\nlast.\nSee issue #837 for an example where we can show termination using the index of an inductive family, but\nwe don't get the desired definitional equalities.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.nonIndicesFirst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">nonIndicesFirst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L109-L141","name":"Lean.Elab.Structural.getRecArgInfos","line":109,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.getRecArgInfos","doc":"Collects the `RecArgInfos` for one function, and returns a report for why the others were not\nconsidered.\n\nThe `xs` are the fixed parameters, `value` the body with the fixed prefix instantiated.\n\nTakes the optional user annotation into account (`termMeasure?`). If this is given and the measure\nis unsuitable, throw an error.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.getRecArgInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">getRecArgInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fnName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">termMeasure?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L58-L107","name":"Lean.Elab.Structural.getRecArgInfo","line":58,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.getRecArgInfo","doc":"Assemble the `RecArgInfo` for the `i`th parameter in the parameter list `xs`. This performs\nvarious sanity checks on the parameter (is it even of inductive type etc).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.getRecArgInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">getRecArgInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fnName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L23-L31","name":"Lean.Elab.Structural.prettyParameterSet","line":23,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.prettyParameterSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.prettyParameterSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">prettyParameterSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fnNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">values</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L20-L21","name":"Lean.Elab.Structural.prettyRecArg","line":20,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.prettyRecArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.prettyRecArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">prettyRecArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfo</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/FindRecArg.lean#L15-L18","name":"Lean.Elab.Structural.prettyParam","line":15,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.prettyParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/FindRecArg.html#Lean.Elab.Structural.prettyParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">prettyParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"}]}