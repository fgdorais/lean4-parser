{"name":"Lean.Elab.Extra","instances":[{"typeNames":["_private.Lean.Elab.Extra.0.Lean.Elab.Term.Op.BinOpKind"],"name":"Lean.Elab.Term.Op.instBEqBinOpKind","className":"BEq"}],"imports":["Lean.Elab.App","Lean.Elab.BuiltinNotation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L564-L580","name":"Lean.Elab.Term.Op.elabDefaultOrNonempty","line":564,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabDefaultOrNonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabDefaultOrNonempty\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabDefaultOrNonempty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L562-L562","name":"Lean.Elab.Term.Op.elabBinRelNoProp","line":562,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelNoProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelNoProp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinRelNoProp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L560-L560","name":"Lean.Elab.Term.Op.elabBinRel","line":560,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L553-L558","name":"Lean.Elab.Term.Op.elabBinRelCore.toBoolIfNecessary","line":553,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelCore.toBoolIfNecessary","doc":"If `noProp == true` and `e` has type `Prop`, then coerce it to `Bool`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelCore.toBoolIfNecessary\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinRelCore</span>.<span class=\"name\">toBoolIfNecessary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">noProp</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L480-L558","name":"Lean.Elab.Term.Op.elabBinRelCore","line":480,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelCore","doc":"Elaboration functions for `binrel%` and `binrel_no_prop%` notations.\nWe use the infrastructure for `binop%` to make sure we propagate information between the left and right hand sides\nof a binary relation.\n\n- `binrel% R x y` elaborates `R x y` using the `binop%/...` expression trees in both `x` and `y`.\n  It is similar to how `binop% R x y` elaborates but with a significant difference:\n  it does not use the expected type when computing the types of the operands.\n- `binrel_no_prop% R x y` elaborates `R x y` like `binrel% R x y`, but if the resulting type for `x` and `y`\n  is `Prop` they are coerced to `Bool`.\n  This is used for relations such as `==` which do not support `Prop`, but we still want\n  to be able to write `(5 > 2) == (2 > 1)` for example.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinRelCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinRelCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">noProp</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L478-L478","name":"Lean.Elab.Term.Op.elabUnOp","line":478,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabUnOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabUnOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabUnOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L477-L477","name":"Lean.Elab.Term.Op.elabRightact","line":477,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabRightact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabRightact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabRightact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L476-L476","name":"Lean.Elab.Term.Op.elabLeftact","line":476,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabLeftact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabLeftact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabLeftact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L475-L475","name":"Lean.Elab.Term.Op.elabBinOpLazy","line":475,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinOpLazy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinOpLazy\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinOpLazy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L474-L474","name":"Lean.Elab.Term.Op.elabBinOp","line":474,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabBinOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabBinOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L471-L472","name":"Lean.Elab.Term.Op.elabOp","line":471,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.elabOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">elabOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L155-L155","name":"Lean.Elab.Term.Op.instBEqBinOpKind","line":155,"kind":"instance","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.instBEqBinOpKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.Op.instBEqBinOpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Op</span>.<span class=\"name\">instBEqBinOpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/Extra.html#_private.Lean.Elab.Extra.0.Lean.Elab.Term.Op.BinOpKind\">Lean.Elab.Term.Op.BinOpKind✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L50-L74","name":"Lean.Elab.Term.elabForIn'","line":50,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabForIn'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Extra.lean#L26-L48","name":"Lean.Elab.Term.elabForIn","line":26,"kind":"def","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabForIn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"}]}