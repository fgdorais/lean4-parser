{"name":"Lean.Elab.PreDefinition.Structural.Main","instances":[],"imports":["Lean.Elab.PreDefinition.TerminationMeasure","Lean.Elab.PreDefinition.Mutual","Lean.Elab.PreDefinition.Structural.Basic","Lean.Elab.PreDefinition.Structural.FindRecArg","Lean.Elab.PreDefinition.Structural.Preprocess","Lean.Elab.PreDefinition.Structural.BRecOn","Lean.Elab.PreDefinition.Structural.IndPred","Lean.Elab.PreDefinition.Structural.Eqns","Lean.Elab.PreDefinition.Structural.SmartUnfolding","Lean.Meta.Tactic.TryThis"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/Main.lean#L170-L203","name":"Lean.Elab.Structural.structuralRecursion","line":170,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Main.html#Lean.Elab.Structural.structuralRecursion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Main.html#Lean.Elab.Structural.structuralRecursion\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">structuralRecursion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">termMeasure?s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/Main.lean#L161-L167","name":"Lean.Elab.Structural.reporttermMeasure","line":161,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Main.html#Lean.Elab.Structural.reporttermMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Main.html#Lean.Elab.Structural.reporttermMeasure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">reporttermMeasure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDef</span> : <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgPos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/Main.lean#L66-L73","name":"Lean.Elab.Structural.withCommonTelescope.go","line":66,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/Structural/Main.html#Lean.Elab.Structural.withCommonTelescope.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Main.html#Lean.Elab.Structural.withCommonTelescope.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">withCommonTelescope</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars </span><span class=\"fn\">vals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/Main.lean#L63-L73","name":"Lean.Elab.Structural.withCommonTelescope","line":63,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/Main.html#Lean.Elab.Structural.withCommonTelescope","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/Main.html#Lean.Elab.Structural.withCommonTelescope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">withCommonTelescope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <span class=\"fn\">α</span></span></div></div>"}]}