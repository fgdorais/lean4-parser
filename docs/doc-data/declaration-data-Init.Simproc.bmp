{"name":"Init.Simproc","instances":[],"imports":["Init.NotationExtra"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L100-L103","name":"Lean.Parser.Attr.sevalprocBuiltinAttr","line":100,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.Attr.sevalprocBuiltinAttr","doc":"Auxiliary attribute for builtin symbolic evaluation procedures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.sevalprocBuiltinAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">sevalprocBuiltinAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L95-L98","name":"Lean.Parser.Attr.simprocBuiltinAttr","line":95,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.Attr.simprocBuiltinAttr","doc":"Auxiliary attribute for builtin simplification procedures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.simprocBuiltinAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">simprocBuiltinAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L90-L93","name":"Lean.Parser.Attr.sevalprocAttr","line":90,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.Attr.sevalprocAttr","doc":"Auxiliary attribute for symbolic evaluation procedures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.sevalprocAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">sevalprocAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L85-L88","name":"Lean.Parser.Attr.simprocAttr","line":85,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.Attr.simprocAttr","doc":"Auxiliary attribute for simplification procedures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.Attr.simprocAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">simprocAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L79-L82","name":"Lean.Parser.simprocPatternBuiltin","line":79,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.simprocPatternBuiltin","doc":"Auxiliary command for associating a pattern with a builtin simplification procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.simprocPatternBuiltin\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">simprocPatternBuiltin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L74-L77","name":"Lean.Parser.simprocPattern","line":74,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.simprocPattern","doc":"Auxiliary command for associating a pattern with a simplification procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.simprocPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">simprocPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L69-L72","name":"Lean.Parser.«command_Builtin_dsimproc_decl_(_):=_»","line":69,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command_Builtin_dsimproc_decl_(_):=_»","doc":"A builtin defeq simplification procedure declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command_Builtin_dsimproc_decl_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command_Builtin_dsimproc_decl_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L64-L67","name":"Lean.Parser.«command_Builtin_simproc_decl_(_):=_»","line":64,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command_Builtin_simproc_decl_(_):=_»","doc":"A builtin simplification procedure declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command_Builtin_simproc_decl_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command_Builtin_simproc_decl_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L59-L62","name":"Lean.Parser.«command__Builtin_dsimproc__[_]_(_):=_»","line":59,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command__Builtin_dsimproc__[_]_(_):=_»","doc":"A builtin defeq simplification procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command__Builtin_dsimproc__[_]_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command__Builtin_dsimproc__[_]_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L54-L57","name":"Lean.Parser.«command__Builtin_simproc__[_]_(_):=_»","line":54,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command__Builtin_simproc__[_]_(_):=_»","doc":"A builtin simplification procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command__Builtin_simproc__[_]_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command__Builtin_simproc__[_]_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L48-L52","name":"Lean.Parser.«command_Dsimproc_decl_(_):=_»","line":48,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command_Dsimproc_decl_(_):=_»","doc":"A user-defined defeq simplification procedure declaration. To activate this procedure in `simp` tactic,\nwe must provide it as an argument, or use the command `attribute` to set its `[simproc]` attribute.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command_Dsimproc_decl_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command_Dsimproc_decl_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L42-L46","name":"Lean.Parser.«command_Simproc_decl_(_):=_»","line":42,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command_Simproc_decl_(_):=_»","doc":"A user-defined simplification procedure declaration. To activate this procedure in `simp` tactic,\nwe must provide it as an argument, or use the command `attribute` to set its `[simproc]` attribute.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command_Simproc_decl_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command_Simproc_decl_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L37-L40","name":"Lean.Parser.«command__Dsimproc__[_]_(_):=_»","line":37,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command__Dsimproc__[_]_(_):=_»","doc":"Similar to `simproc`, but resulting expression must be definitionally equal to the input one.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command__Dsimproc__[_]_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command__Dsimproc__[_]_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Simproc.lean#L12-L35","name":"Lean.Parser.«command__Simproc__[_]_(_):=_»","line":12,"kind":"def","docLink":"./Init/Simproc.html#Lean.Parser.«command__Simproc__[_]_(_):=_»","doc":"A user-defined simplification procedure used by the `simp` tactic, and its variants.\nHere is an example.\n```lean\ntheorem and_false_eq {p : Prop} (q : Prop) (h : p = False) : (p ∧ q) = False := by simp [*]\n\nopen Lean Meta Simp\nsimproc ↓ shortCircuitAnd (And _ _) := fun e => do\n  let_expr And p q := e | return .continue\n  let r ← simp p\n  let_expr False := r.expr | return .continue\n  let proof ← mkAppM ``and_false_eq #[q, (← r.getProof)]\n  return .done { expr := r.expr, proof? := some proof }\n```\nThe `simp` tactic invokes `shortCircuitAnd` whenever it finds a term of the form `And _ _`.\nThe simplification procedures are stored in an (imperfect) discrimination tree.\nThe procedure should **not** assume the term `e` perfectly matches the given pattern.\nThe body of a simplification procedure must have type `Simproc`, which is an alias for\n`Expr → SimpM Step`\nYou can instruct the simplifier to apply the procedure before its sub-expressions\nhave been simplified by using the modifier `↓` before the procedure name.\nSimplification procedures can be also scoped or local.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Simproc.html#Lean.Parser.«command__Simproc__[_]_(_):=_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">«command__Simproc__[_]_(_):=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"}]}