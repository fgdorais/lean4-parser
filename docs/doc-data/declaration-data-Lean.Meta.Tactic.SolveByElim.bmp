{"name":"Lean.Meta.Tactic.SolveByElim","instances":[{"typeNames":["Lean.Meta.SolveByElim.SolveByElimConfig","Lean.Meta.Tactic.Backtrack.BacktrackConfig"],"name":"Lean.Meta.SolveByElim.SolveByElimConfig.instCoeBacktrackConfig","className":"Coe"}],"imports":["Init.Data.Sum","Lean.LabelAttribute","Lean.Meta.Tactic.Apply","Lean.Meta.Tactic.Backtrack","Lean.Meta.Tactic.Constructor","Lean.Meta.Tactic.Repeat","Lean.Meta.Tactic.Symm","Lean.Elab.Term"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L364-L364","name":"Lean.Meta.SolveByElim.mkAssumptionSet.elab'","line":364,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.mkAssumptionSet.elab'","doc":"Run `elabTerm`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.mkAssumptionSet.elab'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">mkAssumptionSet</span>.<span class=\"name\">elab'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L293-L364","name":"Lean.Meta.SolveByElim.mkAssumptionSet","line":293,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.mkAssumptionSet","doc":"`mkAssumptionSet` builds a collection of lemmas for use in\nthe backtracking search in `solve_by_elim`.\n\n* By default, it includes all local hypotheses, along with `rfl`, `trivial`, `congrFun`\n  and `congrArg`.\n* The flag `noDefaults` removes these.\n* The flag `star` includes all local hypotheses, but not `rfl`, `trivial`, `congrFun`,\n  or `congrArg`. (It doesn't make sense to use `star` without `noDefaults`.)\n* The argument `add` is the list of terms inside the square brackets that did not have `-`\n  and can be used to add expressions or local hypotheses\n* The argument `remove` is the list of terms inside the square brackets that had a `-`,\n  and can be used to remove local hypotheses.\n  (It doesn't make sense to remove expressions which are not local hypotheses,\n  to remove local hypotheses unless `!noDefaults || star`,\n  and it does not make sense to use `star` unless you remove at least one local hypothesis.)\n\n`mkAssumptionSet` returns not a `List expr`, but a `List (TermElabM Expr) × TermElabM (List Expr)`.\nThere are two separate problems that need to be solved.\n\n### Stuck metavariables\n\nLemmas with implicit arguments would be filled in with metavariables if we created the\n`Expr` objects immediately, so instead we return thunks that generate the expressions\non demand. This is the first component, with type `List (TermElabM Expr)`.\n\nAs an example, we have `def rfl : ∀ {α : Sort u} {a : α}, a = a`, which on elaboration will become\n`@rfl ?m_1 ?m_2`.\n\nBecause `solve_by_elim` works by repeated application of lemmas against subgoals,\nthe first time such a lemma is successfully applied,\nthose metavariables will be unified, and thereafter have fixed values.\nThis would make it impossible to apply the lemma\na second time with different values of the metavariables.\n\nSee https://github.com/leanprover-community/mathlib/issues/2269\n\n### Relevant local hypotheses\n\n`solve_by_elim*` works with multiple goals,\nand we need to use separate sets of local hypotheses for each goal.\nThe second component of the returned value provides these local hypotheses.\n(Essentially using `getLocalHyps`, along with some filtering to remove hypotheses\nthat have been explicitly removed via `only` or `[-h]`.)\n\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.mkAssumptionSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">mkAssumptionSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">noDefaults </span><span class=\"fn\">star</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">add </span><span class=\"fn\">remove</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">use</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L275-L289","name":"Lean.MVarId.applyRules","line":275,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.MVarId.applyRules","doc":"A `MetaM` analogue of the `apply_rules` user tactic.\n\nWe pass the lemmas as `TermElabM Expr` rather than just `Expr`,\nso they can be generated fresh for each application, to avoid stuck metavariables.\n\nBy default it uses all local hypotheses, but you can disable this with `only := true`.\nIf you need to remove particular local hypotheses, call `solveByElim` directly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.MVarId.applyRules\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">applyRules</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">Meta.SolveByElim.SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">only</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L265-L273","name":"Lean.Meta.SolveByElim.saturateSymm","line":265,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.saturateSymm","doc":"If `symm` is `true`, then adds in symmetric versions of each hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.saturateSymm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">saturateSymm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L259-L263","name":"Lean.Meta.SolveByElim.solveByElim.run","line":259,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.solveByElim.run","doc":"Run either backtracking search, or repeated application, on the list of goals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.solveByElim.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">solveByElim</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L226-L263","name":"Lean.Meta.SolveByElim.solveByElim","line":226,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.solveByElim","doc":"Solve a collection of goals by repeatedly applying lemmas, backtracking as necessary.\n\nArguments:\n* `cfg : SolveByElimConfig` additional configuration options\n  (options for `apply`, maximum depth, and custom flow control)\n* `lemmas : List (TermElabM Expr)` lemmas to apply.\n  These are thunks in `TermElabM` to avoid stuck metavariables.\n* `ctx : TermElabM (List Expr)` monadic function returning the local hypotheses to use.\n* `goals : List MVarId` the initial list of goals for `solveByElim`\n\nReturns a list of suspended goals, if it succeeded on all other subgoals.\nBy default `cfg.suspend` is `false,` `cfg.discharge` fails, and `cfg.failAtMaxDepth` is `true`,\nand so the returned list is always empty.\nCustom wrappers (e.g. `apply_assumption` and `apply_rules`) may modify this behaviour.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.solveByElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">solveByElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L219-L224","name":"Lean.Meta.SolveByElim.applyFirstLemma","line":219,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.applyFirstLemma","doc":"Applies the first possible lemma to the goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.applyFirstLemma\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">applyFirstLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L212-L217","name":"Lean.Meta.SolveByElim.applyLemmas","line":212,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.applyLemmas","doc":"Returns the list of tactics corresponding to applying the available lemmas to the goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.applyLemmas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">applyLemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Iterator.html#Lean.Meta.Iterator\">Meta.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L203-L210","name":"Lean.Meta.SolveByElim.elabContextLemmas","line":203,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.elabContextLemmas","doc":"Elaborate a list of lemmas and local context.\nSee `mkAssumptionSet` for an explanation of why this is needed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.elabContextLemmas\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">elabContextLemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L193-L199","name":"Lean.Meta.SolveByElim.SolveByElimConfig.processOptions","line":193,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.processOptions","doc":"Process the `intro` and `constructor` options by implementing the `discharger` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.processOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">processOptions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L185-L191","name":"Lean.Meta.SolveByElim.SolveByElimConfig.requireUsingAll","line":185,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.requireUsingAll","doc":"Create or modify a `Config` which only accept solutions\nfor which every expression in `use` appears as a subexpression.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.requireUsingAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">requireUsingAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">use</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L174-L183","name":"Lean.Meta.SolveByElim.SolveByElimConfig.testSolutions","line":174,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.testSolutions","doc":"Create or modify a `SolveByElimConfig` which rejects complete solutions for which `test`,\napplied to the instantiations of the original goals, fails or returns `false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.testSolutions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">testSolutions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L164-L172","name":"Lean.Meta.SolveByElim.SolveByElimConfig.testPartialSolutions","line":164,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.testPartialSolutions","doc":"Create or modify a `Config` which rejects branches for which `test`,\napplied to the instantiations of the original goals, fails or returns `false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.testPartialSolutions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">testPartialSolutions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L157-L162","name":"Lean.Meta.SolveByElim.SolveByElimConfig.synthInstanceAfter","line":157,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.synthInstanceAfter","doc":"Create or modify a `Config` which\ncalls `synthInstance` on any goal for which no lemma applies. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.synthInstanceAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">synthInstanceAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L153-L155","name":"Lean.Meta.SolveByElim.SolveByElimConfig.constructorAfter","line":153,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.constructorAfter","doc":"Call `constructor` when no lemmas apply. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.constructorAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">constructorAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L149-L151","name":"Lean.Meta.SolveByElim.SolveByElimConfig.introsAfter","line":149,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.introsAfter","doc":"Create or modify a `SolveByElimConfig` which calls `intro` on any goal for which no lemma applies. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.introsAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">introsAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L142-L147","name":"Lean.Meta.SolveByElim.SolveByElimConfig.withDischarge","line":142,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.withDischarge","doc":"Add a discharging tactic, falling back to the original discharging tactic if it fails.\nReturn `none` to return the goal as a new subgoal, or `some goals` to replace it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.withDischarge\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">withDischarge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discharge</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L133-L140","name":"Lean.Meta.SolveByElim.SolveByElimConfig.synthInstance","line":133,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.synthInstance","doc":"Attempt typeclass inference on each goal, before applying lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.synthInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">synthInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L126-L131","name":"Lean.Meta.SolveByElim.SolveByElimConfig.intros","line":126,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.intros","doc":"Create or modify a `Config` which calls `intro` on each goal before applying lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.intros\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">intros</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L114-L124","name":"Lean.Meta.SolveByElim.SolveByElimConfig.mainGoalProc","line":114,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mainGoalProc","doc":"Create or modify a `Config` which runs a tactic on the main goal.\nIf that tactic fails, fall back to the `proc` behaviour of `cfg`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mainGoalProc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">mainGoalProc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proc</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L105-L112","name":"Lean.Meta.SolveByElim.SolveByElimConfig.accept","line":105,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.accept","doc":"Create or modify a `Config` which allows a class of goals to be returned as subgoals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.accept\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">accept</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> := <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">{</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L103-L103","name":"Lean.Meta.SolveByElim.SolveByElimConfig.instCoeBacktrackConfig","line":103,"kind":"instance","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.instCoeBacktrackConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.instCoeBacktrackConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">instCoeBacktrackConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a> <a href=\"./Lean/Meta/Tactic/Backtrack.html#Lean.Meta.Tactic.Backtrack.BacktrackConfig\">Tactic.Backtrack.BacktrackConfig</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L99-L99","name":"Lean.Meta.SolveByElim.SolveByElimConfig.constructor","line":99,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.constructor","doc":"Try calling `constructor` if no lemmas apply. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.constructor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">constructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L97-L97","name":"Lean.Meta.SolveByElim.SolveByElimConfig.intro","line":97,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.intro","doc":"Trying calling `intro` if no lemmas apply. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.intro\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">intro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L94-L94","name":"Lean.Meta.SolveByElim.SolveByElimConfig.backtracking","line":94,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.backtracking","doc":"Enable backtracking search. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.backtracking\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">backtracking</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L92-L92","name":"Lean.Meta.SolveByElim.SolveByElimConfig.mk","line":92,"kind":"ctor","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toApplyRulesConfig</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\">ApplyRulesConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">backtracking </span><span class=\"fn\">intro </span><span class=\"fn\">constructor</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L92-L99","name":"Lean.Meta.SolveByElim.SolveByElimConfig.toApplyRulesConfig","line":92,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.toApplyRulesConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig.toApplyRulesConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span>.<span class=\"name\">toApplyRulesConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\">SolveByElimConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\">ApplyRulesConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L86-L99","name":"Lean.Meta.SolveByElim.SolveByElimConfig","line":86,"kind":"structure","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig","doc":"Configuration structure to control the behaviour of `solve_by_elim`:\n* transparency mode for calls to `apply`\n* whether to use `symm` on hypotheses and `exfalso` on the goal as needed,\n* see also `BacktrackConfig` for hooks allowing flow control.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.SolveByElimConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">SolveByElimConfig</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\">Lean.Meta.SolveByElim.ApplyRulesConfig</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L83-L83","name":"Lean.Meta.SolveByElim.ApplyRulesConfig.exfalso","line":83,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.exfalso","doc":"Try proving the goal via `exfalso` if `solve_by_elim` otherwise fails.\nThis is only used when operating on a single goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.exfalso\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">ApplyRulesConfig</span>.<span class=\"name\">exfalso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\">ApplyRulesConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L80-L80","name":"Lean.Meta.SolveByElim.ApplyRulesConfig.symm","line":80,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.symm","doc":"Also use symmetric versions (via `@[symm]`) of local hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.symm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">ApplyRulesConfig</span>.<span class=\"name\">symm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\">ApplyRulesConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L78-L78","name":"Lean.Meta.SolveByElim.ApplyRulesConfig.transparency","line":78,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.transparency","doc":"Transparency mode for calls to `apply`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.transparency\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">ApplyRulesConfig</span>.<span class=\"name\">transparency</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\">ApplyRulesConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L76-L76","name":"Lean.Meta.SolveByElim.ApplyRulesConfig.mk","line":76,"kind":"ctor","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">ApplyRulesConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toBacktrackConfig</span> : <a href=\"./Lean/Meta/Tactic/Backtrack.html#Lean.Meta.Tactic.Backtrack.BacktrackConfig\">Tactic.Backtrack.BacktrackConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toApplyConfig</span> : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">ApplyConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transparency</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm </span><span class=\"fn\">exfalso</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\">ApplyRulesConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L76-L84","name":"Lean.Meta.SolveByElim.ApplyRulesConfig.toApplyConfig","line":76,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.toApplyConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.toApplyConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">ApplyRulesConfig</span>.<span class=\"name\">toApplyConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\">ApplyRulesConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">ApplyConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L76-L84","name":"Lean.Meta.SolveByElim.ApplyRulesConfig.toBacktrackConfig","line":76,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.toBacktrackConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig.toBacktrackConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">ApplyRulesConfig</span>.<span class=\"name\">toBacktrackConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\">ApplyRulesConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Backtrack.html#Lean.Meta.Tactic.Backtrack.BacktrackConfig\">Tactic.Backtrack.BacktrackConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L75-L84","name":"Lean.Meta.SolveByElim.ApplyRulesConfig","line":75,"kind":"structure","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig","doc":"The default `maxDepth` for `apply_rules` is higher. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.ApplyRulesConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">ApplyRulesConfig</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Meta/Tactic/Backtrack.html#Lean.Meta.Tactic.Backtrack.BacktrackConfig\">Lean.Meta.Tactic.Backtrack.BacktrackConfig</a>, <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">Lean.Meta.ApplyConfig</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L63-L71","name":"Lean.Meta.SolveByElim.applyFirst","line":63,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.applyFirst","doc":"`applyFirst lemmas goal` applies the first of the `lemmas`\nwhich can be successfully applied to `goal`, and fails if none apply.\n\nWe use this in `apply_rules` and `apply_assumption` where backtracking is not needed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.applyFirst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">applyFirst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">ApplyConfig</a> := <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.mk\">{</a> <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transparency</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default\">TransparencyMode.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/SolveByElim.lean#L40-L61","name":"Lean.Meta.SolveByElim.applyTactics","line":40,"kind":"def","docLink":"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.applyTactics","doc":"`applyTactics lemmas goal` will return an iterator that applies the\nlemmas to the goal `goal` and returns ones that succeed.\n\nProviding this to the `backtracking` tactic,\nwe can perform backtracking search based on applying a list of lemmas.\n\n``applyTactics (trace := `name)`` will construct trace nodes for ``name` indicating which\ncalls to `apply` succeeded or failed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/SolveByElim.html#Lean.Meta.SolveByElim.applyTactics\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SolveByElim</span>.<span class=\"name\">applyTactics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig\">ApplyConfig</a> := <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.mk\">{</a> <a href=\"./Init/Meta.html#Lean.Meta.ApplyConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transparency</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default\">TransparencyMode.default</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Iterator.html#Lean.Meta.Iterator\">Meta.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"}]}