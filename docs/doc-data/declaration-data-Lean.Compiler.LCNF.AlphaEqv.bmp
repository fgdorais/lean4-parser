{"name":"Lean.Compiler.LCNF.AlphaEqv","instances":[],"imports":["Lean.Compiler.LCNF.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L131-L135","name":"Lean.Compiler.LCNF.Code.alphaEqv","line":131,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.Code.alphaEqv","doc":"Return `true` if `c₁` and `c₂` are alpha equivalent.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.Code.alphaEqv\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">alphaEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L107-L125","name":"Lean.Compiler.LCNF.AlphaEqv.eqv","line":107,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqv\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">eqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code₁ </span><span class=\"fn\">code₂</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L92-L105","name":"Lean.Compiler.LCNF.AlphaEqv.eqvAlts","line":92,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvAlts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">eqvAlts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts₁ </span><span class=\"fn\">alts₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L84-L88","name":"Lean.Compiler.LCNF.AlphaEqv.sortAlts","line":84,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.sortAlts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.sortAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">sortAlts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L69-L78","name":"Lean.Compiler.LCNF.AlphaEqv.withParams.go","line":69,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.withParams.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.withParams.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">withParams</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params₁ </span><span class=\"fn\">params₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">params₂</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">params₁</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L67-L82","name":"Lean.Compiler.LCNF.AlphaEqv.withParams","line":67,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.withParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.withParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">withParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params₁ </span><span class=\"fn\">params₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L64-L65","name":"Lean.Compiler.LCNF.AlphaEqv.withFVar","line":64,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.withFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.withFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">withFVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId₁ </span><span class=\"fn\">fvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L55-L62","name":"Lean.Compiler.LCNF.AlphaEqv.eqvLetValue","line":55,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">eqvLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L46-L53","name":"Lean.Compiler.LCNF.AlphaEqv.eqvArgs","line":46,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">eqvArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as₁ </span><span class=\"fn\">as₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L39-L44","name":"Lean.Compiler.LCNF.AlphaEqv.eqvArg","line":39,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">eqvArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L30-L37","name":"Lean.Compiler.LCNF.AlphaEqv.eqvTypes","line":30,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvTypes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">eqvTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es₁ </span><span class=\"fn\">es₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L23-L28","name":"Lean.Compiler.LCNF.AlphaEqv.eqvType","line":23,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">eqvType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L19-L21","name":"Lean.Compiler.LCNF.AlphaEqv.eqvFVar","line":19,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.eqvFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">eqvFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId₁ </span><span class=\"fn\">fvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\">EqvM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/AlphaEqv.lean#L17-L17","name":"Lean.Compiler.LCNF.AlphaEqv.EqvM","line":17,"kind":"def","docLink":"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/AlphaEqv.html#Lean.Compiler.LCNF.AlphaEqv.EqvM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AlphaEqv</span>.<span class=\"name\">EqvM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}