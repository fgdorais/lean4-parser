{"name":"Std.Data.DTreeMap.Internal.Ordered","instances":[],"imports":["Std.Classes.Ord","Std.Data.DTreeMap.Internal.Def","Std.Data.Internal.Cut"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/Ordered.lean#L65-L70","name":"Std.DTreeMap.Internal.Impl.Ordered.compare_right_not_beq_gt","line":65,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.compare_right_not_beq_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.compare_right_not_beq_gt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">compare_right_not_beq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">k</span> <span class=\"fn\">k'</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a>(<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/Ordered.lean#L60-L63","name":"Std.DTreeMap.Internal.Impl.Ordered.compare_right","line":60,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.compare_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.compare_right\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">compare_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">k'</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/Ordered.lean#L53-L58","name":"Std.DTreeMap.Internal.Impl.Ordered.compare_left_not_beq_eq","line":53,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.compare_left_not_beq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.compare_left_not_beq_eq\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">compare_left_not_beq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">k</span> <span class=\"fn\">k'</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a>(<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/Ordered.lean#L48-L51","name":"Std.DTreeMap.Internal.Impl.Ordered.compare_left_beq_gt","line":48,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.compare_left_beq_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.compare_left_beq_gt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">compare_left_beq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">k</span> <span class=\"fn\">k'</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/Ordered.lean#L44-L46","name":"Std.DTreeMap.Internal.Impl.Ordered.compare_left","line":44,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.compare_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.compare_left\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">compare_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk'</span> : <span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\"><span class=\"fn\">k'</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/Ordered.lean#L40-L42","name":"Std.DTreeMap.Internal.Impl.Ordered.right","line":40,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.right\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/Ordered.lean#L36-L38","name":"Std.DTreeMap.Internal.Impl.Ordered.left","line":36,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered.left\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/Ordered.lean#L28-L30","name":"Std.DTreeMap.Internal.Impl.Ordered","line":28,"kind":"def","docLink":"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered","doc":"Implementation detail of the tree map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Ordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}