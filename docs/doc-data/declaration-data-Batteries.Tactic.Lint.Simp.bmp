{"name":"Batteries.Tactic.Lint.Simp","instances":[],"imports":["Init","Lean.Meta.Tactic.Simp.Main","Batteries.Tactic.Lint.Basic","Batteries.Tactic.OpenPrivate","Batteries.Util.LibraryNote"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L226-L246","name":"Batteries.Tactic.Lint.simpComm","line":226,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpComm","doc":"A linter for commutativity lemmas that are marked simp. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpComm\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">simpComm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L203-L218","name":"Batteries.Tactic.Lint.simpVarHead","line":203,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpVarHead","doc":"A linter for simp lemmas whose lhs has a variable as head symbol,\nand which hence never fire.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpVarHead\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">simpVarHead</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L103-L153","name":"Batteries.Tactic.Lint.simpNF","line":103,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpNF","doc":"A linter for simp lemmas whose lhs is not in simp-normal form, and which hence never fire. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.simpNF\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">simpNF</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Basic.html#Batteries.Tactic.Lint.Linter\">Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L93-L101","name":"Batteries.Tactic.Lint.formatLemmas","line":93,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.formatLemmas","doc":"Render the list of simp lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.formatLemmas\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">formatLemmas</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedSimps</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Lean.Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L89-L91","name":"Batteries.Tactic.Lint.decorateError","line":89,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.decorateError","doc":"Add message `msg` to any errors thrown inside `k`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.decorateError\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">decorateError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L85-L87","name":"Lean.Meta.DiscrTree.elements.trieElements","line":85,"kind":"opaque","docLink":"./Batteries/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements.trieElements","doc":"Returns the list of elements in the trie. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements.trieElements\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">elements</span>.<span class=\"name\">trieElements</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Trie\">Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L80-L87","name":"Lean.Meta.DiscrTree.elements","line":80,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements","doc":"Returns the list of elements in the discrimination tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Lean.Meta.DiscrTree.elements\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DiscrTree</span>.<span class=\"name\">elements</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">DiscrTree</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L75-L77","name":"Batteries.Tactic.Lint.isSimpTheorem","line":75,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isSimpTheorem","doc":"Returns true if this is a `@[simp]` declaration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isSimpTheorem\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">isSimpTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L66-L73","name":"Batteries.Tactic.Lint.checkAllSimpTheoremInfos","line":66,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.checkAllSimpTheoremInfos","doc":"Constructs a message from all the simp theorems encoded in the given type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.checkAllSimpTheoremInfos\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">checkAllSimpTheoremInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L58-L64","name":"Batteries.Tactic.Lint.isSimpEq","line":58,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isSimpEq","doc":"Checks whether two expressions are equal for the simplifier. That is,\nthey are reducibly-definitional equal, and they have the same head symbol. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isSimpEq\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">isSimpEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">whnfFirst</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L48-L56","name":"Batteries.Tactic.Lint.withSimpTheoremInfos","line":48,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.withSimpTheoremInfos","doc":"Runs the continuation on all the simp theorems encoded in the given type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.withSimpTheoremInfos\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">withSimpTheoremInfos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L35-L45","name":"Batteries.Tactic.Lint.isConditionalHyps","line":35,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isConditionalHyps","doc":"Given the list of hypotheses, is this a conditional rewrite rule? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.isConditionalHyps\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">isConditionalHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L33-L33","name":"Batteries.Tactic.Lint.SimpTheoremInfo.rhs","line":33,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.rhs","doc":"The result of replacement "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.rhs\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L31-L31","name":"Batteries.Tactic.Lint.SimpTheoremInfo.lhs","line":31,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.lhs","doc":"The thing to replace "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.lhs\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">lhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L29-L29","name":"Batteries.Tactic.Lint.SimpTheoremInfo.isConditional","line":29,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.isConditional","doc":"True if this is a conditional rewrite rule "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.isConditional\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">isConditional</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L27-L27","name":"Batteries.Tactic.Lint.SimpTheoremInfo.hyps","line":27,"kind":"def","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.hyps","doc":"The hypotheses of the theorem "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.hyps\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">hyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L25-L25","name":"Batteries.Tactic.Lint.SimpTheoremInfo.mk","line":25,"kind":"ctor","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isConditional</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\">SimpTheoremInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/Lint/Simp.lean#L24-L33","name":"Batteries.Tactic.Lint.SimpTheoremInfo","line":24,"kind":"structure","docLink":"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo","doc":"The data associated to a simp theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/Lint/Simp.html#Batteries.Tactic.Lint.SimpTheoremInfo\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Lint</span>.<span class=\"name\">SimpTheoremInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}