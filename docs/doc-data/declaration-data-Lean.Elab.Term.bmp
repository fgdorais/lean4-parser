{"name":"Lean.Elab.Term","instances":[{"typeNames":["Lean.Elab.Term.SyntheticMVarKind"],"name":"Lean.Elab.Term.instInhabitedSyntheticMVarKind","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.SyntheticMVarKind"],"name":"Lean.Elab.Term.instToStringSyntheticMVarKind","className":"ToString"},{"typeNames":["Lean.Elab.Term.SyntheticMVarDecl"],"name":"Lean.Elab.Term.instInhabitedSyntheticMVarDecl","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.MVarErrorKind"],"name":"Lean.Elab.Term.instInhabitedMVarErrorKind","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.MVarErrorKind"],"name":"Lean.Elab.Term.instToStringMVarErrorKind","className":"ToString"},{"typeNames":["Lean.Elab.Term.MVarErrorInfo"],"name":"Lean.Elab.Term.instInhabitedMVarErrorInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.LevelMVarErrorInfo"],"name":"Lean.Elab.Term.instInhabitedLevelMVarErrorInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.LetRecToLift"],"name":"Lean.Elab.Term.instInhabitedLetRecToLift","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.State"],"name":"Lean.Elab.Term.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.SavedState"],"name":"Lean.Elab.Term.instNonemptySavedState","className":"Nonempty"},{"typeNames":["Lean.Elab.Tactic.State"],"name":"Lean.Elab.Tactic.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.CacheKey"],"name":"Lean.Elab.Tactic.instBEqCacheKey","className":"BEq"},{"typeNames":["Lean.Elab.Tactic.CacheKey"],"name":"Lean.Elab.Tactic.instHashableCacheKey","className":"Hashable"},{"typeNames":["Lean.Elab.Tactic.CacheKey"],"name":"Lean.Elab.Tactic.instInhabitedCacheKey","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.Cache"],"name":"Lean.Elab.Tactic.instInhabitedCache","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.TacticFinishedSnapshot"],"name":"Lean.Elab.Tactic.instInhabitedTacticFinishedSnapshot","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.TacticFinishedSnapshot"],"name":"Lean.Elab.Tactic.instToSnapshotTreeTacticFinishedSnapshot","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Elab.Tactic.TacticParsedSnapshot"],"name":"Lean.Elab.Tactic.instInhabitedTacticParsedSnapshot","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.TacticParsedSnapshot"],"name":"Lean.Elab.Tactic.instToSnapshotTreeTacticParsedSnapshot","className":"Lean.Language.ToSnapshotTree"},{"typeNames":["Lean.Elab.Term.TermElabM"],"name":"Lean.Elab.Term.instMonadTermElabM","className":"Monad"},{"typeNames":["Lean.Elab.Term.TermElabM"],"name":"Lean.Elab.Term.instInhabitedTermElabM","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.SavedState","Lean.Elab.Term.TermElabM"],"name":"Lean.Elab.Term.instMonadBacktrackSavedStateTermElabM","className":"Lean.MonadBacktrack"},{"typeNames":["Lean.Elab.Term.TermElabM"],"name":"Lean.Elab.Term.instAddErrorMessageContextTermElabM","className":"Lean.AddErrorMessageContext"},{"typeNames":["Lean.Elab.Term.LVal"],"name":"Lean.Elab.Term.instToStringLVal","className":"ToString"},{"typeNames":["Lean.Elab.Term.TermElabM"],"name":"Lean.Elab.Term.instMonadParentDeclTermElabM","className":"Lean.Elab.MonadParentDecl"},{"typeNames":["Lean.Elab.Term.BodyInfo"],"name":"Lean.Elab.Term.instTypeNameBodyInfo","className":"TypeName"},{"typeNames":["Lean.Elab.Term.TermElabM"],"name":"Lean.Elab.Term.instMonadMacroAdapterTermElabM","className":"Lean.Elab.MonadMacroAdapter"}],"imports":["Lean.ReservedNameAction","Lean.Meta.AppBuilder","Lean.Meta.CollectMVars","Lean.Meta.Coe","Lean.Util.CollectLevelMVars","Lean.Linter.Deprecated","Lean.Elab.Config","Lean.Elab.Level","Lean.Elab.DeclModifiers","Lean.Elab.PreDefinition.TerminationHint","Lean.Elab.DeclarationRange","Lean.Language.Basic","Lean.Elab.InfoTree.InlayHints"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2087-L2090","name":"Lean.Elab.isIncrementalElab","line":2087,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.isIncrementalElab","doc":"Checks whether a declaration is annotated with `[builtin_incremental]` or `[incremental]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.isIncrementalElab\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">isIncrementalElab</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2072-L2073","name":"Lean.Elab.addBuiltinIncrementalElab","line":2072,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.addBuiltinIncrementalElab","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.addBuiltinIncrementalElab\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addBuiltinIncrementalElab</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2070-L2070","name":"Lean.Elab.builtinIncrementalElabs","line":2070,"kind":"opaque","docLink":"./Lean/Elab/Term.html#Lean.Elab.builtinIncrementalElabs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.builtinIncrementalElabs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">builtinIncrementalElabs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2065-L2068","name":"Lean.Elab.incrementalAttr","line":2065,"kind":"opaque","docLink":"./Lean/Elab/Term.html#Lean.Elab.incrementalAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.incrementalAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">incrementalAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2056-L2057","name":"Lean.Elab.withoutModifyingStateWithInfoAndMessages","line":2056,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.withoutModifyingStateWithInfoAndMessages","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.withoutModifyingStateWithInfoAndMessages\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">withoutModifyingStateWithInfoAndMessages</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2037-L2051","name":"Lean.Elab.Term.exprToSyntax","line":2037,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.exprToSyntax","doc":"Helper function for \"embedding\" an `Expr` in `Syntax`.\nIt creates a named hole `?m` and immediately assigns `e` to it.\nExamples:\n```lean\nlet e := mkConst ``Nat.zero\n`(Nat.succ $(← exprToSyntax e))\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.exprToSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">exprToSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2031-L2035","name":"Lean.Elab.Term.expandDeclId","line":2031,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.expandDeclId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.expandDeclId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandDeclId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currNamespace</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currLevelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declId</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.ExpandDeclIdResult\">ExpandDeclIdResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2022-L2029","name":"Lean.Elab.Term.universeConstraintsCheckpoint","line":2022,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.universeConstraintsCheckpoint","doc":"Execute `x` and then tries to solve pending universe constraints.\nNote that, stuck constraints will not be discarded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.universeConstraintsCheckpoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">universeConstraintsCheckpoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2015-L2020","name":"Lean.Elab.Term.TermElabM.toIO","line":2015,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM.toIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM.toIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">TermElabM</span>.<span class=\"name\">toIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxCore</span> : <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sCore</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Core.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxMeta</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.Context\">Meta.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sMeta</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.State\">Meta.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/CoreM.html#Lean.Core.State\">Core.State</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.State\">Meta.State</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2012-L2013","name":"Lean.Elab.Term.TermElabM.run'","line":2012,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM.run'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">TermElabM</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a> := <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.mk\">{</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a> := <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.mk\">{</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L2009-L2010","name":"Lean.Elab.Term.TermElabM.run","line":2009,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">TermElabM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a> := <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.mk\">{</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a> := <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.mk\">{</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1994-L2007","name":"Lean.Elab.Term.resolveId?","line":1994,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.resolveId?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.resolveId?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">resolveId?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;term&quot;</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">withInfo</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1981-L1992","name":"Lean.Elab.Term.resolveName'","line":1981,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.resolveName'","doc":"Similar to `resolveName`, but creates identifiers for the main part and each projection with position information derived from `ident`.\nExample: Assume resolveName `v.head.bla.boo` produces `(v.head, [\"bla\", \"boo\"])`, then this method produces\n`(v.head, id, [f₁, f₂])` where `id` is an identifier for `v.head`, and `f₁` and `f₂` are identifiers for fields `\"bla\"` and `\"boo\"`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.resolveName'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">resolveName'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ident</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicitLevels</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1971-L1979","name":"Lean.Elab.Term.resolveName.process","line":1971,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.resolveName.process","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.resolveName.process\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">resolveName</span>.<span class=\"name\">process</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicitLevels</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">candidates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1953-L1979","name":"Lean.Elab.Term.resolveName","line":1953,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.resolveName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.resolveName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">resolveName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preresolved</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Syntax.Preresolved</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicitLevels</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1937-L1938","name":"Lean.Elab.Term.withoutCheckDeprecated","line":1937,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutCheckDeprecated","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutCheckDeprecated\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutCheckDeprecated</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1933-L1935","name":"Lean.Elab.Term.checkDeprecated","line":1933,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.checkDeprecated","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.checkDeprecated\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">checkDeprecated</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1916-L1931","name":"Lean.Elab.Term.mkConst","line":1916,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkConst","doc":"Create an `Expr.const` using the given name and explicit levels.\nRemark: fresh universe metavariables are created if the constant has more universe\nparameters than `explicitLevels`.\n\nIf `checkDeprecated := true`, then `Linter.checkDeprecated` is invoked.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicitLevels</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1904-L1910","name":"Lean.Elab.Term.isLetRecAuxMVar","line":1904,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.isLetRecAuxMVar","doc":"Return true if mvarId is an auxiliary metavariable created for compiling `let rec` or it\nis delayed assigned to one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.isLetRecAuxMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">isLetRecAuxMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1897-L1900","name":"Lean.Elab.Term.mkAuxName","line":1897,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkAuxName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkAuxName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkAuxName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1883-L1895","name":"Lean.Elab.Term.addAutoBoundImplicits'","line":1883,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.addAutoBoundImplicits'","doc":"Similar to `addAutoBoundImplicits`, but converts all metavariables into free variables.\n\nIt uses `mkForallFVars` + `forallBoundedTelescope` to convert metavariables into free variables.\nThe type `type` is modified during the process if type depends on `xs`.\nWe use this method to simplify the conversion of code using `autoBoundImplicitsOld` to `autoBoundImplicits`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.addAutoBoundImplicits'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addAutoBoundImplicits'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inlayHintPos?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1867-L1881","name":"Lean.Elab.Term.addAutoBoundImplicits.go","line":1867,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.addAutoBoundImplicits.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.addAutoBoundImplicits.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addAutoBoundImplicits</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inlayHintPos?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">todo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">autos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1851-L1881","name":"Lean.Elab.Term.addAutoBoundImplicits","line":1851,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.addAutoBoundImplicits","doc":"Return `autoBoundImplicits ++ xs`\nThis method throws an error if a variable in `autoBoundImplicits` depends on some `x` in `xs`.\nThe `autoBoundImplicits` may contain free variables created by the auto-implicit feature, and unassigned free variables.\nIt avoids the hack used at `autoBoundImplicitsOld`.\n\nIf `inlayHintPos?` is set, this function also inserts an inlay hint denoting `autoBoundImplicits`.\nSee `addAutoBoundImplicitsInlayHint` for more information.\n\nRemark: we cannot simply replace every occurrence of `addAutoBoundImplicitsOld` with this one because a particular\nuse-case may not be able to handle the metavariables in the array being given to `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.addAutoBoundImplicits\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addAutoBoundImplicits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inlayHintPos?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1809-L1849","name":"Lean.Elab.Term.addAutoBoundImplicitsInlayHint","line":1809,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.addAutoBoundImplicitsInlayHint","doc":"Adds an `InlayHintInfo` for the fvar auto implicits in `autos` at `inlayHintPos`.\nThe inserted inlay hint has a hover that denotes the type of the auto-implicit (with meta-variables)\nand can be inserted at `inlayHintPos`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.addAutoBoundImplicitsInlayHint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addAutoBoundImplicitsInlayHint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">autos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inlayHintPos</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1791-L1807","name":"Lean.Elab.Term.collectUnassignedMVars.go","line":1791,"kind":"opaque","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.collectUnassignedMVars.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.collectUnassignedMVars.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">collectUnassignedMVars</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">except</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result </span><span class=\"fn\">visited</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1780-L1807","name":"Lean.Elab.Term.collectUnassignedMVars","line":1780,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.collectUnassignedMVars","doc":"Collect unassigned metavariables in `type` that are not already in `init` and not satisfying `except`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.collectUnassignedMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">collectUnassignedMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">except</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1777-L1778","name":"Lean.Elab.Term.withAutoBoundImplicitForbiddenPred","line":1777,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withAutoBoundImplicitForbiddenPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withAutoBoundImplicitForbiddenPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withAutoBoundImplicitForbiddenPred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1774-L1775","name":"Lean.Elab.Term.withoutAutoBoundImplicit","line":1774,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutAutoBoundImplicit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutAutoBoundImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutAutoBoundImplicit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1757-L1769","name":"Lean.Elab.Term.withAutoBoundImplicit.loop","line":1757,"kind":"opaque","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withAutoBoundImplicit.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withAutoBoundImplicit.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withAutoBoundImplicit</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1750-L1772","name":"Lean.Elab.Term.withAutoBoundImplicit","line":1750,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withAutoBoundImplicit","doc":"Enable auto-bound implicits, and execute `k` while catching auto bound implicit exceptions. When an exception is caught,\na new local declaration is created, registered, and `k` is tried to be executed again. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withAutoBoundImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withAutoBoundImplicit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1744-L1748","name":"Lean.Elab.Term.elabType","line":1744,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.elabType","doc":"Elaborate `stx` and ensure result is a type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.elabType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1726-L1742","name":"Lean.Elab.Term.ensureType","line":1726,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.ensureType","doc":"Make sure `e` is a type by inferring its type and making sure it is an `Expr.sort`\nor is unifiable with `Expr.sort`, or can be coerced into one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.ensureType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ensureType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1714-L1724","name":"Lean.Elab.Term.mkInstMVar","line":1714,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkInstMVar","doc":"Create a new metavariable with the given type, and try to synthesize it.\nIf type class resolution cannot be executed (e.g., it is stuck because of metavariables in `type`),\nregister metavariable as a pending one.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkInstMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkInstMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraErrorMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1709-L1712","name":"Lean.Elab.Term.adaptExpander","line":1709,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.adaptExpander","doc":"Adapt a syntax transformation to a regular, term-producing elaborator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.adaptExpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">adaptExpander</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1693-L1707","name":"Lean.Elab.Term.commitIfNoErrors?","line":1693,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.commitIfNoErrors?","doc":"Execute `x` and return `some` if no new errors were recorded or exceptions were thrown. Otherwise, return `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.commitIfNoErrors?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">commitIfNoErrors?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1676-L1691","name":"Lean.Elab.Term.elabTermEnsuringType","line":1676,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.elabTermEnsuringType","doc":"Similar to `Lean.Elab.Term.elabTerm`, but ensures that the type of the elaborated term is `expectedType?`\nby inserting coercions if necessary.\n\nIf `errToSorry` is true, then if coercion insertion fails, this function returns `sorry` and logs the error.\nOtherwise, it throws the error.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.elabTermEnsuringType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabTermEnsuringType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catchExPostpone </span><span class=\"fn\">implicitLambda</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsgHeader?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1656-L1674","name":"Lean.Elab.Term.elabTerm","line":1656,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.elabTerm","doc":"Main function for elaborating terms.\nIt extracts the elaboration methods from the environment using the node kind.\nRecall that the environment has a mapping from `SyntaxNodeKind` to `TermElab` methods.\nIt creates a fresh macro scope for executing the elaboration method.\nAll unlogged trace messages produced by the elaboration method are logged using\nthe position information at `stx`. If the elaboration method throws an `Exception.error` and `errToSorry == true`,\nthe error is logged and a synthetic sorry expression is returned.\nIf the elaboration throws `Exception.postpone` and `catchExPostpone == true`,\na new synthetic metavariable of kind `SyntheticMVarKind.postponed` is created, registered,\nand returned.\nThe option `catchExPostpone == false` is used to implement `resumeElabTerm`\nto prevent the creation of another synthetic metavariable when resuming the elaboration.\n\nIf `implicitLambda == false`, then disable implicit lambdas feature for the given syntax, but not for its subterms.\nWe use this flag to implement, for example, the `@` modifier. If `Context.implicitLambda == false`, then this parameter has no effect.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.elabTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catchExPostpone </span><span class=\"fn\">implicitLambda</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1652-L1654","name":"Lean.Elab.Term.addDotCompletionInfo","line":1652,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.addDotCompletionInfo","doc":"Store in the `InfoTree` that `e` is a \"dot\"-completion target. `stx` should cover the entire term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.addDotCompletionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addDotCompletionInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1530-L1530","name":"Lean.Elab.Term.UseImplicitLambdaResult.postpone","line":1530,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult.postpone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult.postpone\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">UseImplicitLambdaResult</span>.<span class=\"name\">postpone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult\">UseImplicitLambdaResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1529-L1529","name":"Lean.Elab.Term.UseImplicitLambdaResult.yes","line":1529,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult.yes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult.yes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">UseImplicitLambdaResult</span>.<span class=\"name\">yes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult\">UseImplicitLambdaResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1528-L1528","name":"Lean.Elab.Term.UseImplicitLambdaResult.no","line":1528,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult.no","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult.no\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">UseImplicitLambdaResult</span>.<span class=\"name\">no</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult\">UseImplicitLambdaResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1527-L1530","name":"Lean.Elab.Term.UseImplicitLambdaResult","line":1527,"kind":"inductive","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.UseImplicitLambdaResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">UseImplicitLambdaResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1517-L1525","name":"Lean.Elab.Term.isLocalIdent?","line":1517,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.isLocalIdent?","doc":"Return true iff `stx` is a `Syntax.ident`, and it is a local variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.isLocalIdent?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">isLocalIdent?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1510-L1515","name":"Lean.Elab.Term.blockImplicitLambda","line":1510,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.blockImplicitLambda","doc":"Block usage of implicit lambdas if `stx` is `@f` or `@f arg1 ...` or `fun` with an implicit binder annotation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.blockImplicitLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">blockImplicitLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1504-L1508","name":"Lean.Elab.Term.mkNoImplicitLambdaAnnotation","line":1504,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkNoImplicitLambdaAnnotation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkNoImplicitLambdaAnnotation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkNoImplicitLambdaAnnotation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1501-L1502","name":"Lean.Elab.Term.hasNoImplicitLambdaAnnotation","line":1501,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.hasNoImplicitLambdaAnnotation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.hasNoImplicitLambdaAnnotation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">hasNoImplicitLambdaAnnotation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1457-L1460","name":"Lean.Elab.Term.instMonadMacroAdapterTermElabM","line":1457,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instMonadMacroAdapterTermElabM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instMonadMacroAdapterTermElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instMonadMacroAdapterTermElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Util.html#Lean.Elab.MonadMacroAdapter\">MonadMacroAdapter</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1390-L1397","name":"Lean.Elab.Term.postponeElabTerm","line":1390,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.postponeElabTerm","doc":"Postpone the elaboration of `stx`, return a metavariable that acts as a placeholder, and\nensures the info tree is updated and a hole id is introduced.\nWhen `stx` is elaborated, new info nodes are created and attached to the new hole id in the info tree.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.postponeElabTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">postponeElabTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1382-L1388","name":"Lean.Elab.Term.withTermInfoContext'","line":1382,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withTermInfoContext'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withTermInfoContext'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withTermInfoContext'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elaborator</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isBinder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1377-L1380","name":"Lean.Elab.Term.getBodyInfo?","line":1377,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.getBodyInfo?","doc":"Extracts a `BodyInfo` custom info. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.getBodyInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getBodyInfo?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.BodyInfo\">BodyInfo</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1373-L1375","name":"Lean.Elab.Term.mkBodyInfo","line":1373,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkBodyInfo","doc":"Creates an `Info.ofCustomInfo` node backed by a `BodyInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkBodyInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkBodyInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1371-L1371","name":"Lean.Elab.Term.instTypeNameBodyInfo","line":1371,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instTypeNameBodyInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instTypeNameBodyInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instTypeNameBodyInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.BodyInfo\">BodyInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1370-L1370","name":"Lean.Elab.Term.BodyInfo.value?","line":1370,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.BodyInfo.value?","doc":"The body as a fully elaborated term. `none` if the body failed to elaborate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.BodyInfo.value?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">BodyInfo</span>.<span class=\"name\">value?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.BodyInfo\">BodyInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1368-L1368","name":"Lean.Elab.Term.BodyInfo.mk","line":1368,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.BodyInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.BodyInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">BodyInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.BodyInfo\">BodyInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1367-L1371","name":"Lean.Elab.Term.BodyInfo","line":1367,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.BodyInfo","doc":"Info node capturing `def/let rec` bodies, used by the unused variables linter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.BodyInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">BodyInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1358-L1365","name":"Lean.Elab.Term.withInfoContext'","line":1358,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withInfoContext'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withInfoContext'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withInfoContext'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkInfo</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkInfoOnError</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1355-L1356","name":"Lean.Elab.Term.addTermInfo'","line":1355,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.addTermInfo'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.addTermInfo'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addTermInfo'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elaborator</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Name.anonymous</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isBinder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1328-L1353","name":"Lean.Elab.Term.addTermInfo","line":1328,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.addTermInfo","doc":"Pushes a new leaf node to the info tree associating the expression `e` to the syntax `stx`.\nAs a result, when the user hovers over `stx` they will see the type of `e`, and if `e`\nis a constant they will see the constant's doc string.\n\n* `expectedType?`: the expected type of `e` at the point of elaboration, if available\n* `lctx?`: the local context in which to interpret `e` (otherwise it will use `← getLCtx`)\n* `elaborator`: a declaration name used as an alternative target for go-to-definition\n* `isBinder`: if true, this will be treated as defining `e` (which should be a local constant)\n  for the purpose of go-to-definition on local variables\n* `force`: In patterns, the effect of `addTermInfo` is usually suppressed and replaced\n  by a `patternWithRef?` annotation which will be turned into a term info on the\n  post-match-elaboration expression. This flag overrides that behavior and adds the term\n  info immediately. (See https://github.com/leanprover/lean4/pull/1664.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.addTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">addTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elaborator</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Name.anonymous</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isBinder </span><span class=\"fn\">force</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1323-L1326","name":"Lean.Elab.Term.mkPartialTermInfo","line":1323,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkPartialTermInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkPartialTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkPartialTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elaborator</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1314-L1321","name":"Lean.Elab.Term.mkTermInfo","line":1314,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkTermInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elaborator</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isBinder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1300-L1312","name":"Lean.Elab.Term.isTacticOrPostponedHole?","line":1300,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.isTacticOrPostponedHole?","doc":"Return `some mvarId` if `e` corresponds to a hole that is going to be filled \"later\" by executing a tactic or resuming elaboration.\n\nWe do not save `ofTermInfo` for this kind of node in the `InfoTree`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.isTacticOrPostponedHole?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">isTacticOrPostponedHole?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1295-L1298","name":"Lean.Elab.Term.removeSaveInfoAnnotation","line":1295,"kind":"opaque","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.removeSaveInfoAnnotation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.removeSaveInfoAnnotation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">removeSaveInfoAnnotation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1292-L1293","name":"Lean.Elab.Term.isSaveInfoAnnotation?","line":1292,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.isSaveInfoAnnotation?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.isSaveInfoAnnotation?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">isSaveInfoAnnotation?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1269-L1290","name":"Lean.Elab.Term.mkSaveInfoAnnotation","line":1269,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkSaveInfoAnnotation","doc":"Create an auxiliary annotation to make sure we create an `Info` even if `e` is a metavariable.\nSee `mkTermInfo`.\n\nWe use this function because some elaboration functions elaborate subterms that may not be immediately\npart of the resulting term. Example:\n```\nlet_mvar% ?m := b; wait_if_type_mvar% ?m; body\n```\nIf the type of `b` is not known, then `wait_if_type_mvar% ?m; body` is postponed and just returns a fresh\nmetavariable `?n`. The elaborator for\n```\nlet_mvar% ?m := b; wait_if_type_mvar% ?m; body\n```\nreturns `mkSaveInfoAnnotation ?n` to make sure the info nodes created when elaborating `b` are \"saved\".\nThis is a bit hackish, but elaborators like `let_mvar%` are rare.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkSaveInfoAnnotation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkSaveInfoAnnotation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1255-L1267","name":"Lean.Elab.Term.mkTacticMVar","line":1255,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkTacticMVar","doc":"Creates a new metavariable of type `type` that will be synthesized using the tactic code.\nThe `tacticCode` syntax is the full `by ..` syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkTacticMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkTacticMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticCode</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind\">TacticMVarKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1249-L1253","name":"Lean.Elab.Term.debug.byAsSorry","line":1249,"kind":"opaque","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.debug.byAsSorry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.debug.byAsSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">debug</span>.<span class=\"name\">byAsSorry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1246-L1247","name":"Lean.Elab.Term.getSyntheticMVarDecl?","line":1246,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.getSyntheticMVarDecl?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.getSyntheticMVarDecl?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getSyntheticMVarDecl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl\">SyntheticMVarDecl</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1227-L1233","name":"Lean.Elab.Term.withSavedContext","line":1227,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withSavedContext","doc":"Execute `x` with the context saved using `saveContext`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withSavedContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withSavedContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">savedCtx</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1214-L1225","name":"Lean.Elab.Term.saveContext","line":1214,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.saveContext","doc":"Save relevant context for term elaboration postponement.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.saveContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">saveContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1208-L1212","name":"Lean.Elab.Term.withExpectedType","line":1208,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withExpectedType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withExpectedType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withExpectedType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1199-L1206","name":"Lean.Elab.Term.tryPostponeIfHasMVars","line":1199,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.tryPostponeIfHasMVars","doc":"Throws `Exception.postpone`, if `expectedType?` contains unassigned metavariables.\nIf `mayPostpone == false`, it throws error `msg`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.tryPostponeIfHasMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">tryPostponeIfHasMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1186-L1197","name":"Lean.Elab.Term.tryPostponeIfHasMVars?","line":1186,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.tryPostponeIfHasMVars?","doc":"Throws `Exception.postpone`, if `expectedType?` contains unassigned metavariables.\nIt is a noop if `mayPostpone == false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.tryPostponeIfHasMVars?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">tryPostponeIfHasMVars?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1180-L1184","name":"Lean.Elab.Term.tryPostponeIfNoneOrMVar","line":1180,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.tryPostponeIfNoneOrMVar","doc":"If `e? = some e`, then `tryPostponeIfMVar e`, otherwise it is just `tryPostpone`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.tryPostponeIfNoneOrMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">tryPostponeIfNoneOrMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1175-L1178","name":"Lean.Elab.Term.tryPostponeIfMVar","line":1175,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.tryPostponeIfMVar","doc":"If `mayPostpone == true` and `e`'s head is a metavariable, throw `Exception.postpone`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.tryPostponeIfMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">tryPostponeIfMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1171-L1173","name":"Lean.Elab.Term.isMVarApp","line":1171,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.isMVarApp","doc":"Return `true` if `e` reduces (by unfolding only `[reducible]` declarations) to `?m ...` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.isMVarApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">isMVarApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1166-L1169","name":"Lean.Elab.Term.tryPostpone","line":1166,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.tryPostpone","doc":"If `mayPostpone == true`, throw `Exception.postpone`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.tryPostpone\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">tryPostpone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1157-L1164","name":"Lean.Elab.Term.exceptionToSorry","line":1157,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.exceptionToSorry","doc":"Log the given exception, and create a synthetic sorry for representing the failed\nelaboration step with exception `ex`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.exceptionToSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">exceptionToSorry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex</span> : <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1138-L1145","name":"Lean.Elab.Term.ensureHasTypeWithErrorMsgs","line":1138,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.ensureHasTypeWithErrorMsgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.ensureHasTypeWithErrorMsgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ensureHasTypeWithErrorMsgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkImmedErrorMsg</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkErrorMsg</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1125-L1136","name":"Lean.Elab.Term.ensureHasType","line":1125,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.ensureHasType","doc":"If `expectedType?` is `some t`, then ensures `t` and `eType` are definitionally equal by inserting a coercion if necessary.\n\nArgument `f?` is used only for generating error messages when inserting coercions fails.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.ensureHasType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ensureHasType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsgHeader?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1120-L1123","name":"Lean.Elab.Term.mkCoeWithErrorMsgs","line":1120,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkCoeWithErrorMsgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkCoeWithErrorMsgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkCoeWithErrorMsgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkImmedErrorMsg</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkErrorMsg</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1095-L1118","name":"Lean.Elab.Term.mkCoe","line":1095,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkCoe\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkCoe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errorMsgHeader?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkErrorMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span>)</span></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkImmedErrorMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span>)</span></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1035-L1093","name":"Lean.Elab.Term.synthesizeInstMVarCore","line":1035,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.synthesizeInstMVarCore","doc":"Try to synthesize metavariable using type class resolution.\nThis method assumes the local context and local instances of `instMVar` coincide\nwith the current local context and local instances.\nReturn `true` if the instance was synthesized successfully, and `false` if\nthe instance contains unassigned metavariables that are blocking the type class\nresolution procedure. Throw an exception if resolution or assignment irrevocably fails.\n\nIf `extraErrorMsg?` is not none, it contains additional information that should be attached\nto type class synthesis failures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.synthesizeInstMVarCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">synthesizeInstMVarCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instMVar</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxResultSize?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraErrorMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1029-L1033","name":"Lean.Elab.Term.containsPendingMVar","line":1029,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.containsPendingMVar","doc":"Return `true` if `e` contains a pending metavariable. Remark: it also visits let-declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.containsPendingMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">containsPendingMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1003-L1025","name":"Lean.Elab.Term.ContainsPendingMVar.visit","line":1003,"kind":"opaque","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.ContainsPendingMVar.visit","doc":"See `containsPostponedTerm` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.ContainsPendingMVar.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ContainsPendingMVar</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.ContainsPendingMVar.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L1001-L1001","name":"Lean.Elab.Term.ContainsPendingMVar.M","line":1001,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.ContainsPendingMVar.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.ContainsPendingMVar.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ContainsPendingMVar</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L996-L997","name":"Lean.Elab.Term.withoutMacroStackAtErr","line":996,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutMacroStackAtErr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutMacroStackAtErr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutMacroStackAtErr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L975-L994","name":"Lean.Elab.Term.throwTypeMismatchError","line":975,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.throwTypeMismatchError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.throwTypeMismatchError\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">throwTypeMismatchError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType </span><span class=\"fn\">eType </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_extraMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L969-L973","name":"Lean.Elab.Term.mkTypeMismatchError","line":969,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkTypeMismatchError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkTypeMismatchError\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkTypeMismatchError</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">eType </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L966-L967","name":"Lean.Elab.Term.applyAttributes","line":966,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.applyAttributes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.applyAttributes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">applyAttributes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Attribute</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L962-L964","name":"Lean.Elab.Term.applyAttributesAt","line":962,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.applyAttributesAt","doc":"Apply given attributes **at** a given application time "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.applyAttributesAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">applyAttributesAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Attribute</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">applicationTime</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L919-L924","name":"Lean.Elab.Term.mkFreshIdent","line":919,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkFreshIdent","doc":"Auxiliary method for creating a `Syntax.ident` containing\na fresh name. This method is intended for creating fresh binder names.\nIt is just a thin layer on top of `mkFreshUserName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkFreshIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkFreshIdent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonical</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L910-L917","name":"Lean.Elab.Term.mkFreshBinderName","line":910,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkFreshBinderName","doc":"Creates a fresh inaccessible binder name based on `x`.\nEquivalent to ``Lean.Core.mkFreshUserName `x``.\n\nDo not confuse with `Lean.mkFreshId`, for creating fresh free variable and metavariable ids.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkFreshBinderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkFreshBinderName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L899-L908","name":"Lean.Elab.Term.levelMVarToParam","line":899,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.levelMVarToParam","doc":"Convert unassigned universe level metavariables into parameters.\nThe new parameter names are fresh names of the form `u_i` with regard to `ctx.levelNames`, which is updated with the new names. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.levelMVarToParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">levelMVarToParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">except</span> : <span class=\"fn\"><a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L895-L897","name":"Lean.Elab.Term.mkExplicitBinder","line":895,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkExplicitBinder","doc":"Creates syntax for `(` <ident> `:` <type> `)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkExplicitBinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkExplicitBinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ident </span><span class=\"fn\">type</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L889-L893","name":"Lean.Elab.Term.withoutPostponing","line":889,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutPostponing","doc":"Execute `x` without allowing it to postpone elaboration tasks.\nThat is, `tryPostpone` is a noop. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutPostponing\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutPostponing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L883-L887","name":"Lean.Elab.Term.ensureNoUnassignedMVars","line":883,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.ensureNoUnassignedMVars","doc":"Ensure metavariables registered using `registerMVarErrorInfos` (and used in the given declaration) have been assigned. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.ensureNoUnassignedMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ensureNoUnassignedMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L858-L881","name":"Lean.Elab.Term.logUnassignedLevelMVarsUsingErrorInfos","line":858,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.logUnassignedLevelMVarsUsingErrorInfos","doc":"Try to log errors for unassigned level metavariables `pendingLevelMVarIds`.\n\nReturns `true` if there are any relevant `LevelMVarErrorInfo`s and we should \"abort\" the declaration.\n\nRemark: we only log unassigned level metavariables as new errors if no error has been logged so far.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.logUnassignedLevelMVarsUsingErrorInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">logUnassignedLevelMVarsUsingErrorInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pendingLevelMVarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L851-L856","name":"Lean.Elab.Term.LevelMVarErrorInfo.logError","line":851,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.logError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.logError\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LevelMVarErrorInfo</span>.<span class=\"name\">logError</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelMVarErrorInfo</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\">LevelMVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L841-L849","name":"Lean.Elab.Term.exposeLevelMVars","line":841,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.exposeLevelMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.exposeLevelMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">exposeLevelMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L838-L839","name":"Lean.Elab.Term.registerLevelMVarErrorExprInfo","line":838,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.registerLevelMVarErrorExprInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.registerLevelMVarErrorExprInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">registerLevelMVarErrorExprInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L835-L836","name":"Lean.Elab.Term.registerLevelMVarErrorInfo","line":835,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.registerLevelMVarErrorInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.registerLevelMVarErrorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">registerLevelMVarErrorInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelMVarErrorInfo</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\">LevelMVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L802-L833","name":"Lean.Elab.Term.logUnassignedUsingErrorInfos","line":802,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.logUnassignedUsingErrorInfos","doc":"Try to log errors for the unassigned metavariables `pendingMVarIds`.\n\nReturn `true` if there were \"unfilled holes\", and we should \"abort\" declaration.\nTODO: try to fill \"all\" holes using synthetic \"sorry's\"\n\nRemark: We only log the \"unfilled holes\" as new errors if no error has been logged so far. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.logUnassignedUsingErrorInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">logUnassignedUsingErrorInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pendingMVarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L797-L800","name":"Lean.Elab.Term.MVarErrorInfo.logError.appendExtra","line":797,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.logError.appendExtra","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.logError.appendExtra\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorInfo</span>.<span class=\"name\">logError</span>.<span class=\"name\">appendExtra</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L792-L795","name":"Lean.Elab.Term.MVarErrorInfo.logError.addArgName","line":792,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.logError.addArgName","doc":"Append the argument name (if available) to the message.\nRemark: if the argument name contains macro scopes we do not append it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.logError.addArgName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorInfo</span>.<span class=\"name\">logError</span>.<span class=\"name\">addArgName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarErrorInfo</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\">MVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extra</span> : <a href=\"./Init/Prelude.html#String\">String</a> := <span class=\"fn\">&quot;&quot;</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L776-L800","name":"Lean.Elab.Term.MVarErrorInfo.logError","line":776,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.logError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.logError\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorInfo</span>.<span class=\"name\">logError</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarErrorInfo</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\">MVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L765-L774","name":"Lean.Elab.Term.throwMVarError","line":765,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.throwMVarError","doc":"Auxiliary method for reporting errors of the form \"... contains metavariables ...\".\nThis kind of error is thrown, for example, at `Match.lean` where elaboration\ncannot continue if there are metavariables in patterns.\nWe only want to log it if we haven't logged any errors so far. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.throwMVarError\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">throwMVarError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L762-L763","name":"Lean.Elab.Term.registerMVarArgName","line":762,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.registerMVarArgName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.registerMVarArgName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">registerMVarArgName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L757-L760","name":"Lean.Elab.Term.registerCustomErrorIfMVar","line":757,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.registerCustomErrorIfMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.registerCustomErrorIfMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">registerCustomErrorIfMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L754-L755","name":"Lean.Elab.Term.registerMVarErrorCustomInfo","line":754,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.registerMVarErrorCustomInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.registerMVarErrorCustomInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">registerMVarErrorCustomInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L751-L752","name":"Lean.Elab.Term.registerMVarErrorImplicitArgInfo","line":751,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.registerMVarErrorImplicitArgInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.registerMVarErrorImplicitArgInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">registerMVarErrorImplicitArgInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L748-L749","name":"Lean.Elab.Term.registerMVarErrorHoleInfo","line":748,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.registerMVarErrorHoleInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.registerMVarErrorHoleInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">registerMVarErrorHoleInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L745-L746","name":"Lean.Elab.Term.registerMVarErrorInfo","line":745,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.registerMVarErrorInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.registerMVarErrorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">registerMVarErrorInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarErrorInfo</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\">MVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L742-L743","name":"Lean.Elab.Term.registerSyntheticMVarWithCurrRef","line":742,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.registerSyntheticMVarWithCurrRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.registerSyntheticMVarWithCurrRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">registerSyntheticMVarWithCurrRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\">SyntheticMVarKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L736-L740","name":"Lean.Elab.Term.registerSyntheticMVar","line":736,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.registerSyntheticMVar","doc":"Add the given metavariable to the list of pending synthetic metavariables.\nThe method `synthesizeSyntheticMVars` is used to process the metavariables on this list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.registerSyntheticMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">registerSyntheticMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\">SyntheticMVarKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L731-L734","name":"Lean.Elab.Term.withMacroExpansion","line":731,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withMacroExpansion","doc":"Elaborate `x` with `stx` on the macro stack and produce macro expansion info "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withMacroExpansion\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withMacroExpansion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeStx </span><span class=\"fn\">afterStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L727-L729","name":"Lean.Elab.Term.withPushMacroExpansionStack","line":727,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withPushMacroExpansionStack","doc":"Elaborate `x` with `stx` on the macro stack "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withPushMacroExpansionStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withPushMacroExpansionStack</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeStx </span><span class=\"fn\">afterStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L724-L725","name":"Lean.Elab.Term.elabLevel","line":724,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.elabLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.elabLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L715-L722","name":"Lean.Elab.Term.liftLevelM","line":715,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.liftLevelM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.liftLevelM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">liftLevelM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Level.html#Lean.Elab.Level.LevelElabM\">Level.LevelElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L710-L711","name":"Lean.Elab.Term.ppGoal","line":710,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.ppGoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.ppGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ppGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L707-L708","name":"Lean.Elab.Term.traceAtCmdPos","line":707,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.traceAtCmdPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.traceAtCmdPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">traceAtCmdPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L702-L705","name":"Lean.Elab.Term.throwErrorIfErrors","line":702,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.throwErrorIfErrors","doc":"For testing `TermElabM` methods. The #eval command will sign the error. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.throwErrorIfErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">throwErrorIfErrors</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L676-L700","name":"Lean.Elab.Term.getInfoTreeWithContext?","line":676,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.getInfoTreeWithContext?","doc":"Wraps the trees returned from `getInfoTrees`, if any, in an `InfoTree.context` node based on the\ncurrent monadic context and state. This is mainly used to report info trees early via\n`Snapshot.infoTree?`. The trees are not removed from the `getInfoTrees` state as the final info tree\nof the elaborated command should be complete and not depend on whether parts have been reported\nearly.\n\nAs `InfoTree.context` can have only one child, this function panics if `trees` contains more than 1\ntree. Also, `PartialContextInfo.parentDeclCtx` is not currently generated as that information is not\navailable in the monadic context and only needed for the final info tree.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.getInfoTreeWithContext?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getInfoTreeWithContext?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L647-L663","name":"Lean.Elab.Term.withoutModifyingElabMetaStateWithInfo","line":647,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutModifyingElabMetaStateWithInfo","doc":"Execute `x` but discard changes performed at `Term.State` and `Meta.State`.\nRecall that the `Environment`, `InfoState` and messages are at `Core.State`.  Thus, any updates to\nit will be preserved.\nThis method is useful for performing computations where all metavariable must be resolved or\ndiscarded.\nThe `InfoTree`s are not discarded, however, and wrapped in `InfoTree.Context`\nto store their metavariable context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutModifyingElabMetaStateWithInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutModifyingElabMetaStateWithInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L639-L645","name":"Lean.Elab.Term.withoutHeedElabAsElim","line":639,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutHeedElabAsElim","doc":"Execute `x` without heeding the `elab_as_elim` attribute. Useful when there is\nno expected type (so `elabAppArgs` would fail), but expect that the user wants\nto use such constants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutHeedElabAsElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutHeedElabAsElim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT\">MonadFunctorT</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L636-L637","name":"Lean.Elab.Term.withoutHeedElabAsElimImp","line":636,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutHeedElabAsElimImp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutHeedElabAsElimImp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutHeedElabAsElimImp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L629-L634","name":"Lean.Elab.Term.withoutErrToSorry","line":629,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutErrToSorry","doc":"Execute `x` without converting errors (i.e., exceptions) to `sorry` applications.\nRecall that when `errToSorry = true`, the method `elabTerm` catches exceptions and converts them into `sorry` applications.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutErrToSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutErrToSorry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT\">MonadFunctorT</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L626-L627","name":"Lean.Elab.Term.withoutErrToSorryImp","line":626,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutErrToSorryImp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutErrToSorryImp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutErrToSorryImp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L620-L624","name":"Lean.Elab.Term.withLevelNames","line":620,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withLevelNames","doc":"Execute `x` using `levelNames` as the universe level parameter names. See `getLevelNames`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withLevelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withLevelNames</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L616-L618","name":"Lean.Elab.Term.setLevelNames","line":616,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.setLevelNames","doc":"Update the universe level parameter names. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.setLevelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">setLevelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L612-L614","name":"Lean.Elab.Term.withDeclName","line":612,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withDeclName","doc":"Execute `withSaveParentDeclInfoContext x` with `declName? := name`. See `getDeclName?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withDeclName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L609-L610","name":"Lean.Elab.Term.instMonadParentDeclTermElabM","line":609,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instMonadParentDeclTermElabM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instMonadParentDeclTermElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instMonadParentDeclTermElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadParentDecl\">MonadParentDecl</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L606-L607","name":"Lean.Elab.Term.getMVarDecl","line":606,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.getMVarDecl","doc":"Return the declaration of the given metavariable "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.getMVarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getMVarDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L604-L605","name":"Lean.Elab.Term.getLetRecsToLift","line":604,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.getLetRecsToLift","doc":"Return the list of nested `let rec` declarations that need to be lifted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.getLetRecsToLift\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getLetRecsToLift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L602-L603","name":"Lean.Elab.Term.getDeclName?","line":602,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.getDeclName?","doc":"Return the name of the declaration being elaborated if available. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.getDeclName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getDeclName?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L597-L600","name":"Lean.Elab.Term.instToStringLVal","line":597,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instToStringLVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instToStringLVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instToStringLVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LVal\">LVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L593-L595","name":"Lean.Elab.Term.LVal.isFieldName","line":593,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LVal.isFieldName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LVal.isFieldName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LVal</span>.<span class=\"name\">isFieldName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LVal\">LVal</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L589-L591","name":"Lean.Elab.Term.LVal.getRef","line":589,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LVal.getRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LVal.getRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LVal</span>.<span class=\"name\">getRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LVal\">LVal</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L585-L587","name":"Lean.Elab.Term.LVal.fieldName","line":585,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LVal.fieldName","doc":"Field `suffix?` is for producing better error messages because `x.y` may be a field access or a hierarchical/composite name.\n`ref` is the syntax object representing the field. `fullRef` includes the LHS. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LVal.fieldName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LVal</span>.<span class=\"name\">fieldName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fullRef</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LVal\">LVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L584-L584","name":"Lean.Elab.Term.LVal.fieldIdx","line":584,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LVal.fieldIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LVal.fieldIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LVal</span>.<span class=\"name\">fieldIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LVal\">LVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L577-L587","name":"Lean.Elab.Term.LVal","line":577,"kind":"inductive","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LVal","doc":"Auxiliary datatype for presenting a Lean lvalue modifier.\nWe represent an unelaborated lvalue as a `Syntax` (or `Expr`) and `List LVal`.\nExample: `a.foo.1` is represented as the `Syntax` `a` and the list\n`[LVal.fieldName \"foo\", LVal.fieldIdx 1]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L575-L575","name":"Lean.Elab.Term.termElabAttribute","line":575,"kind":"opaque","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.termElabAttribute","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.termElabAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">termElabAttribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/KeyedDeclsAttribute.html#Lean.KeyedDeclsAttribute\">KeyedDeclsAttribute</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L572-L573","name":"Lean.Elab.Term.mkTermElabAttribute","line":572,"kind":"opaque","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkTermElabAttribute","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkTermElabAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkTermElabAttribute</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Lean/KeyedDeclsAttribute.html#Lean.KeyedDeclsAttribute\">KeyedDeclsAttribute</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L569-L570","name":"Lean.Elab.Term.mkTermElabAttributeUnsafe","line":569,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.mkTermElabAttributeUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.mkTermElabAttributeUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkTermElabAttributeUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Lean/KeyedDeclsAttribute.html#Lean.KeyedDeclsAttribute\">KeyedDeclsAttribute</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L563-L567","name":"Lean.Elab.Term.withoutSavingRecAppSyntax","line":563,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutSavingRecAppSyntax","doc":"Execute `x` without storing `Syntax` for recursive applications. See `saveRecAppSyntax` field at `Context`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutSavingRecAppSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutSavingRecAppSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L555-L561","name":"Lean.Elab.Term.instAddErrorMessageContextTermElabM","line":555,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instAddErrorMessageContextTermElabM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instAddErrorMessageContextTermElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instAddErrorMessageContextTermElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.AddErrorMessageContext\">AddErrorMessageContext</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L546-L553","name":"Lean.Elab.Term.getFVarLocalDecl!","line":546,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.getFVarLocalDecl!","doc":"Given a free variable `fvar`, return its declaration.\nThis function panics if `fvar` is not a free variable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.getFVarLocalDecl!\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getFVarLocalDecl!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L540-L544","name":"Lean.Elab.Term.getLevelNames","line":540,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.getLevelNames","doc":"Return the universe level names explicitly provided by the user.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.getLevelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getLevelNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L531-L538","name":"Lean.Elab.Term.commitIfDidNotPostpone","line":531,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.commitIfDidNotPostpone","doc":"Execute `x`, but keep state modifications only if `x` did not postpone.\nThis method is useful to implement elaboration functions that cannot decide whether\nthey need to postpone or not without updating the state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.commitIfDidNotPostpone\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">commitIfDidNotPostpone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L523-L529","name":"Lean.Elab.Term.applyResult","line":523,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.applyResult","doc":"Apply the result/exception and state captured with `observing`.\nWe use this method to implement overloaded notation and symbols. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.applyResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">applyResult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabResult\">TermElabResult</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L499-L521","name":"Lean.Elab.Term.observing","line":499,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.observing","doc":"Execute `x`, save resulting expression and new state.\nWe remove any `Info` created by `x`.\nThe info nodes are committed when we execute `applyResult`.\nWe use `observing` to implement overloaded notation and decls.\nWe want to save `Info` nodes for the chosen alternative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.observing\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">observing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabResult\">TermElabResult</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L497-L497","name":"Lean.Elab.Term.TermElabResult","line":497,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">TermElabResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L486-L495","name":"Lean.Elab.Term.wrapAsyncAsSnapshot","line":486,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.wrapAsyncAsSnapshot","doc":"Wraps the given action for use in `BaseIO.asTask` etc., discarding its final state except for\n`logSnapshotTask` tasks, which are reported as part of the returned tree. The given cancellation\ntoken, if any, should be stored in a `SnapshotTask` for the server to trigger it when the result is\nno longer needed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.wrapAsyncAsSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">wrapAsyncAsSnapshot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">desc</span> : <a href=\"./Init/Prelude.html#String\">String</a> := by exact decl_name%.toString)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L475-L484","name":"Lean.Elab.Term.withoutTacticReuse","line":475,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutTacticReuse","doc":"Disables incremental tactic reuse for `act` if `cond` is true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutTacticReuse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutTacticReuse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L459-L473","name":"Lean.Elab.Term.withoutTacticIncrementality","line":459,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withoutTacticIncrementality","doc":"Disables incremental tactic reuse *and* reporting for `act` if `cond` is true by setting `tacSnap?`\nto `none`. This should be done for tactic blocks that are run multiple times as otherwise the\nreported progress will jump back and forth (and partial reuse for these kinds of tact blocks is\nsimilarly questionable).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withoutTacticIncrementality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withoutTacticIncrementality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L445-L457","name":"Lean.Elab.Term.withNarrowedArgTacticReuse","line":445,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withNarrowedArgTacticReuse","doc":"A variant of `withNarrowedTacticReuse` that uses `stx[argIdx]` as the inner syntax and all `stx`\nchild nodes before that as the outer syntax, i.e. reuse is disabled if there was any change before\n`argIdx`.\n\nNOTE: child nodes after `argIdx` are not tested (which would almost always disable reuse as they are\nnecessarily shifted by changes at `argIdx`) so it must be ensured that the result of `arg` does not\ndepend on them (i.e. they should not be inspected beforehand).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withNarrowedArgTacticReuse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withNarrowedArgTacticReuse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadReaderOf\">MonadReaderOf</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L412-L443","name":"Lean.Elab.Term.withNarrowedTacticReuse","line":412,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withNarrowedTacticReuse","doc":"Manages reuse information for nested tactics by `split`ting given syntax into an outer and inner\npart. `act` is then run on the inner part but with reuse information adjusted as following:\n* If the old (from `tacSnap?`'s `SyntaxGuarded.stx`) and new (from `stx`) outer syntax are not\n  identical according to `Syntax.eqWithInfo`, reuse is disabled.\n* Otherwise, the old syntax as stored in `tacSnap?` is updated to the old *inner* syntax.\n* In any case, `withReuseContext` is used on the new inner syntax to further prepare the monadic\n  context.\n\nFor any tactic that participates in reuse, `withNarrowedTacticReuse` should be applied to the\ntactic's syntax and `act` should be used to do recursive tactic evaluation of nested parts. Also,\nafter this function, `getAndEmptySnapshotTasks` should be called and the result stored in a snapshot\nso that the tasks don't end up in a snapshot further up and are cancelled together with it; see\nnote [Incremental Cancellation].\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withNarrowedTacticReuse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withNarrowedTacticReuse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadReaderOf\">MonadReaderOf</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">split</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L394-L410","name":"Lean.Elab.Term.withReuseContext","line":394,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withReuseContext","doc":"Incremental elaboration helper. Avoids leakage of data from outside syntax via the monadic context\nwhen running `act` on `stx` by\n* setting `stx` as the `ref` and\n* deactivating `suppressElabErrors` if `stx` is `missing`-free, which also helps with not hiding\n  useful errors in this part of the input. Note that if `stx` has `missing`, this should always be\n  true for the outer syntax as well, so taking the old value of `suppressElabErrors` into account\n  should not introduce data leakage.\n\nThis combinator should always be used when narrowing reuse to a syntax subtree, usually (in the case\nof tactics, to be generalized) via `withNarrowed(Arg)TacticReuse`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withReuseContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withReuseContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/CoreM.html#Lean.Core.Context\">Core.Context</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L390-L392","name":"Lean.Elab.Term.instMonadBacktrackSavedStateTermElabM","line":390,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instMonadBacktrackSavedStateTermElabM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instMonadBacktrackSavedStateTermElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instMonadBacktrackSavedStateTermElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadBacktrack.html#Lean.MonadBacktrack\">MonadBacktrack</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">SavedState</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L361-L388","name":"Lean.Elab.Term.withRestoreOrSaveFull","line":361,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.withRestoreOrSaveFull","doc":"Like `Meta.withRestoreOrSaveFull` for `TermElabM`, but also takes a `tacSnap?` that\n* when running `act`, is set as `Context.tacSnap?`\n* otherwise (i.e. on restore) is used to update the new snapshot promise to the old task's\n  value.\nThis extra restore step is necessary because while `reusableResult?` can be used to replay any\neffects on `State`, `Context.tacSnap?` is not part of it but changed via an `IO` side effect, so\nit needs to be replayed separately.\n\nWe use an explicit parameter instead of accessing `Context.tacSnap?` directly because this prevents\n`withRestoreOrSaveFull` and `withReader` from being used in the wrong order.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.withRestoreOrSaveFull\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">withRestoreOrSaveFull</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reusableResult?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">SavedState</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacSnap?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Language.SnapshotBundle</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">Tactic.TacticParsedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">SavedState</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L352-L359","name":"Lean.Elab.Term.SavedState.restore","line":352,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState.restore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState.restore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">restore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">restoreInfo</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L349-L350","name":"Lean.Elab.Term.saveState","line":349,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.saveState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.saveState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">saveState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">SavedState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L346-L347","name":"Lean.Elab.Term.instInhabitedTermElabM","line":346,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedTermElabM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedTermElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedTermElabM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L339-L342","name":"Lean.Elab.Term.instMonadTermElabM","line":339,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instMonadTermElabM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instMonadTermElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instMonadTermElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L333-L333","name":"Lean.Elab.Term.TermElab","line":333,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">TermElab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L332-L332","name":"Lean.Elab.Term.TermElabM","line":332,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">TermElabM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L330-L330","name":"Lean.Elab.Term.Context.checkDeprecated","line":330,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.checkDeprecated","doc":"If `checkDeprecated := true`, then `Linter.checkDeprecated` when creating constants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.checkDeprecated\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">checkDeprecated</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L326-L326","name":"Lean.Elab.Term.Context.holesAsSyntheticOpaque","line":326,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.holesAsSyntheticOpaque","doc":"If `holesAsSyntheticOpaque` is `true`, then we mark metavariables associated\nwith `_`s as `syntheticOpaque` if they do not occur in patterns.\nThis option is useful when elaborating terms in tactics such as `refine'` where\nwe want holes there to become new goals. See issue #1681, we have\n`refine' (fun x => _)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.holesAsSyntheticOpaque\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">holesAsSyntheticOpaque</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L318-L318","name":"Lean.Elab.Term.Context.saveRecAppSyntax","line":318,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.saveRecAppSyntax","doc":"If `true`, we store in the `Expr` the `Syntax` for recursive applications (i.e., applications\nof free variables tagged with `isAuxDecl`). We store the `Syntax` using `mkRecAppWithSyntax`.\nWe use the `Syntax` object to produce better error messages at `Structural.lean` and `WF.lean`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.saveRecAppSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">saveRecAppSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L313-L313","name":"Lean.Elab.Term.Context.tacSnap?","line":313,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.tacSnap?","doc":"Snapshot for incremental processing of current tactic, if any.\n\nInvariant: if the bundle's `old?` is set, then the state *up to the start* of the tactic is\nunchanged, i.e. reuse is possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.tacSnap?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">tacSnap?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Language.SnapshotBundle</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">Tactic.TacticParsedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L306-L306","name":"Lean.Elab.Term.Context.inPattern","line":306,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.inPattern","doc":"`true` when elaborating patterns. It affects how we elaborate named holes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.inPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">inPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L304-L304","name":"Lean.Elab.Term.Context.ignoreTCFailures","line":304,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.ignoreTCFailures","doc":"When `true` we skip TC failures. We use this option when processing patterns. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.ignoreTCFailures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">ignoreTCFailures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L302-L302","name":"Lean.Elab.Term.Context.isNoncomputableSection","line":302,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.isNoncomputableSection","doc":"Noncomputable sections automatically add the `noncomputable` modifier to any declaration we cannot generate code for. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.isNoncomputableSection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">isNoncomputableSection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L300-L300","name":"Lean.Elab.Term.Context.heedElabAsElim","line":300,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.heedElabAsElim","doc":"Heed `elab_as_elim` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.heedElabAsElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">heedElabAsElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L298-L298","name":"Lean.Elab.Term.Context.implicitLambda","line":298,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.implicitLambda","doc":"Enable/disable implicit lambdas feature. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.implicitLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">implicitLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L296-L296","name":"Lean.Elab.Term.Context.sectionFVars","line":296,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.sectionFVars","doc":"Map from internal name to fvar "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.sectionFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">sectionFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L294-L294","name":"Lean.Elab.Term.Context.sectionVars","line":294,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.sectionVars","doc":"Map from user name to internal unique name "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.sectionVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">sectionVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L292-L292","name":"Lean.Elab.Term.Context.autoBoundImplicitForbidden","line":292,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.autoBoundImplicitForbidden","doc":"A name `n` is only eligible to be an auto implicit name if `autoBoundImplicitForbidden n = false`.\nWe use this predicate to disallow `f` to be considered an auto implicit name in a definition such\nas\n```\ndef f : f → Bool := fun _ => true\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.autoBoundImplicitForbidden\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">autoBoundImplicitForbidden</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L283-L283","name":"Lean.Elab.Term.Context.autoBoundImplicits","line":283,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.autoBoundImplicits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.autoBoundImplicits\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">autoBoundImplicits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L282-L282","name":"Lean.Elab.Term.Context.autoBoundImplicit","line":282,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.autoBoundImplicit","doc":"When `autoBoundImplicit` is set to true, instead of producing\nan \"unknown identifier\" error for unbound variables, we generate an\ninternal exception. This exception is caught at `elabBinders` and\n`elabTypeWithUnboldImplicit`. Both methods add implicit declarations\nfor the unbound variable and try again. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.autoBoundImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">autoBoundImplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L275-L275","name":"Lean.Elab.Term.Context.errToSorry","line":275,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.errToSorry","doc":"When `errToSorry` is set to true, the method `elabTerm` catches\nexceptions and converts them into synthetic `sorry`s.\nThe implementation of choice nodes and overloaded symbols rely on the fact\nthat when `errToSorry` is set to false for an elaboration function `F`, then\n`errToSorry` remains `false` for all elaboration functions invoked by `F`.\nThat is, it is safe to transition `errToSorry` from `true` to `false`, but\nwe must not set `errToSorry` to `true` when it is currently set to `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.errToSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">errToSorry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L266-L266","name":"Lean.Elab.Term.Context.mayPostpone","line":266,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.mayPostpone","doc":"When `mayPostpone == true`, an elaboration function may interrupt its execution by throwing `Exception.postpone`.\nThe function `elabTerm` catches this exception and creates fresh synthetic metavariable `?m`, stores `?m` in\nthe list of pending synthetic metavariables, and returns `?m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.mayPostpone\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">mayPostpone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L261-L261","name":"Lean.Elab.Term.Context.macroStack","line":261,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.macroStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.macroStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">macroStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Util.html#Lean.Elab.MacroStack\">MacroStack</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L260-L260","name":"Lean.Elab.Term.Context.declName?","line":260,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.declName?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.declName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">declName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L259-L259","name":"Lean.Elab.Term.Context.mk","line":259,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">macroStack</span> : <a href=\"./Lean/Elab/Util.html#Lean.Elab.MacroStack\">MacroStack</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mayPostpone </span><span class=\"fn\">errToSorry </span><span class=\"fn\">autoBoundImplicit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">autoBoundImplicits</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">autoBoundImplicitForbidden</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sectionVars</span> : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sectionFVars</span> : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">implicitLambda </span><span class=\"fn\">heedElabAsElim </span><span class=\"fn\">isNoncomputableSection </span><span class=\"fn\">ignoreTCFailures </span><span class=\"fn\">inPattern</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacSnap?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Language.SnapshotBundle</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">Tactic.TacticParsedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">saveRecAppSyntax </span><span class=\"fn\">holesAsSyntheticOpaque </span><span class=\"fn\">checkDeprecated</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L259-L330","name":"Lean.Elab.Term.Context","line":259,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L249-L252","name":"Lean.Elab.Tactic.instToSnapshotTreeTacticParsedSnapshot.go","line":249,"kind":"opaque","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.instToSnapshotTreeTacticParsedSnapshot.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.instToSnapshotTreeTacticParsedSnapshot.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instToSnapshotTreeTacticParsedSnapshot</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L247-L252","name":"Lean.Elab.Tactic.instToSnapshotTreeTacticParsedSnapshot","line":247,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.instToSnapshotTreeTacticParsedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.instToSnapshotTreeTacticParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instToSnapshotTreeTacticParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L246-L246","name":"Lean.Elab.Tactic.instInhabitedTacticParsedSnapshot","line":246,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.instInhabitedTacticParsedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.instInhabitedTacticParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instInhabitedTacticParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L245-L245","name":"Lean.Elab.Tactic.TacticParsedSnapshot.next","line":245,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.next","doc":"Tasks for subsequent, potentially parallel, tactic steps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.next\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticParsedSnapshot</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L243-L243","name":"Lean.Elab.Tactic.TacticParsedSnapshot.finished","line":243,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.finished","doc":"Task for state after tactic execution. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.finished\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticParsedSnapshot</span>.<span class=\"name\">finished</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot\">TacticFinishedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L241-L241","name":"Lean.Elab.Tactic.TacticParsedSnapshot.inner?","line":241,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.inner?","doc":"Task for nested incrementality, if enabled for tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.inner?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticParsedSnapshot</span>.<span class=\"name\">inner?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L239-L239","name":"Lean.Elab.Tactic.TacticParsedSnapshot.stx","line":239,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.stx","doc":"Syntax tree of the tactic, stored and compared for incremental reuse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticParsedSnapshot</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L237-L237","name":"Lean.Elab.Tactic.TacticParsedSnapshot.mk","line":237,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticParsedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSnapshot</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inner?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finished</span> : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot\">TacticFinishedSnapshot</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L237-L246","name":"Lean.Elab.Tactic.TacticParsedSnapshot.toSnapshot","line":237,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.toSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot.toSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticParsedSnapshot</span>.<span class=\"name\">toSnapshot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\">TacticParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L236-L246","name":"Lean.Elab.Tactic.TacticParsedSnapshot","line":236,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot","doc":"Snapshot just before execution of a tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticParsedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L233-L234","name":"Lean.Elab.Tactic.instToSnapshotTreeTacticFinishedSnapshot","line":233,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.instToSnapshotTreeTacticFinishedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.instToSnapshotTreeTacticFinishedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instToSnapshotTreeTacticFinishedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot\">TacticFinishedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L232-L232","name":"Lean.Elab.Tactic.instInhabitedTacticFinishedSnapshot","line":232,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.instInhabitedTacticFinishedSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.instInhabitedTacticFinishedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instInhabitedTacticFinishedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot\">TacticFinishedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L231-L231","name":"Lean.Elab.Tactic.TacticFinishedSnapshot.moreSnaps","line":231,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot.moreSnaps","doc":"Untyped snapshots from `logSnapshotTask`, saved at this level for cancellation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot.moreSnaps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticFinishedSnapshot</span>.<span class=\"name\">moreSnaps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot\">TacticFinishedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L229-L229","name":"Lean.Elab.Tactic.TacticFinishedSnapshot.state?","line":229,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot.state?","doc":"State saved for reuse, if no fatal exception occurred. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot.state?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticFinishedSnapshot</span>.<span class=\"name\">state?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot\">TacticFinishedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\">SavedState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L227-L227","name":"Lean.Elab.Tactic.TacticFinishedSnapshot.mk","line":227,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticFinishedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSnapshot</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\">SavedState</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moreSnaps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot\">TacticFinishedSnapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L227-L232","name":"Lean.Elab.Tactic.TacticFinishedSnapshot.toSnapshot","line":227,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot.toSnapshot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot.toSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticFinishedSnapshot</span>.<span class=\"name\">toSnapshot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot\">TacticFinishedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L226-L232","name":"Lean.Elab.Tactic.TacticFinishedSnapshot","line":226,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot","doc":"Snapshot after finishing execution of a tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.TacticFinishedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">TacticFinishedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L224-L224","name":"Lean.Elab.Tactic.SavedState.tactic","line":224,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState.tactic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState.tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">tactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L223-L223","name":"Lean.Elab.Tactic.SavedState.term","line":223,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState.term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">Term.SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L222-L222","name":"Lean.Elab.Tactic.SavedState.mk","line":222,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">Term.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tactic</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\">SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L222-L224","name":"Lean.Elab.Tactic.SavedState","line":222,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SavedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L217-L217","name":"Lean.Elab.Tactic.instInhabitedCache","line":217,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.instInhabitedCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.instInhabitedCache\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instInhabitedCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache\">Cache</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L216-L216","name":"Lean.Elab.Tactic.Cache.post","line":216,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache.post","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache.post\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cache</span>.<span class=\"name\">post</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache\">Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey\">CacheKey</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot\">Snapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L215-L215","name":"Lean.Elab.Tactic.Cache.pre","line":215,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache.pre","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache.pre\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cache</span>.<span class=\"name\">pre</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache\">Cache</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey\">CacheKey</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot\">Snapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L214-L214","name":"Lean.Elab.Tactic.Cache.mk","line":214,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cache</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre </span><span class=\"fn\">post</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey\">CacheKey</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot\">Snapshot</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache\">Cache</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L211-L217","name":"Lean.Elab.Tactic.Cache","line":211,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache","doc":"Cache for the `save` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L209-L209","name":"Lean.Elab.Tactic.instInhabitedCacheKey","line":209,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.instInhabitedCacheKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.instInhabitedCacheKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instInhabitedCacheKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey\">CacheKey</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L209-L209","name":"Lean.Elab.Tactic.instHashableCacheKey","line":209,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.instHashableCacheKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.instHashableCacheKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instHashableCacheKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey\">CacheKey</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L209-L209","name":"Lean.Elab.Tactic.instBEqCacheKey","line":209,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.instBEqCacheKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.instBEqCacheKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instBEqCacheKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey\">CacheKey</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L208-L208","name":"Lean.Elab.Tactic.CacheKey.pos","line":208,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey.pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey.pos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CacheKey</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey\">CacheKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L207-L207","name":"Lean.Elab.Tactic.CacheKey.mvarId","line":207,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CacheKey</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey\">CacheKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L206-L206","name":"Lean.Elab.Tactic.CacheKey.mk","line":206,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CacheKey</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey\">CacheKey</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L203-L209","name":"Lean.Elab.Tactic.CacheKey","line":203,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey","doc":"Key for the cache used to implement the `save` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.CacheKey\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CacheKey</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L201-L201","name":"Lean.Elab.Tactic.Snapshot.stx","line":201,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot\">Snapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L200-L200","name":"Lean.Elab.Tactic.Snapshot.tactic","line":200,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.tactic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">tactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot\">Snapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L199-L199","name":"Lean.Elab.Tactic.Snapshot.term","line":199,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot\">Snapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">Term.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L198-L198","name":"Lean.Elab.Tactic.Snapshot.meta","line":198,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.meta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.meta\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">meta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot\">Snapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.State\">Meta.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L197-L197","name":"Lean.Elab.Tactic.Snapshot.core","line":197,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.core\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot\">Snapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.Core.State\">Core.State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L196-L196","name":"Lean.Elab.Tactic.Snapshot.mk","line":196,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Snapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">core</span> : <a href=\"./Lean/CoreM.html#Lean.Core.State\">Core.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">meta</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.State\">Meta.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">Term.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tactic</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.State\">State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot\">Snapshot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L190-L201","name":"Lean.Elab.Tactic.Snapshot","line":190,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot","doc":"Snapshots are used to implement the `save` tactic.\nThis tactic caches the state of the system, and allows us to \"replay\"\nexpensive proofs efficiently. This is only relevant implementing the\nLSP server.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.Snapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Snapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L188-L188","name":"Lean.Elab.Tactic.instInhabitedState","line":188,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L187-L187","name":"Lean.Elab.Tactic.State.goals","line":187,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.State.goals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.State.goals\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">State</span>.<span class=\"name\">goals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L186-L186","name":"Lean.Elab.Tactic.State.mk","line":186,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L183-L188","name":"Lean.Elab.Tactic.State","line":183,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Tactic.State","doc":"State of the `TacticM` monad.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L177-L177","name":"Lean.Elab.Term.instNonemptySavedState","line":177,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instNonemptySavedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instNonemptySavedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instNonemptySavedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">SavedState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L176-L176","name":"Lean.Elab.Term.SavedState.elab","line":176,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState.elab","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState.elab\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">elab</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L175-L175","name":"Lean.Elab.Term.SavedState.meta","line":175,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState.meta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState.meta\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">meta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Meta.SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L174-L174","name":"Lean.Elab.Term.SavedState.mk","line":174,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">meta</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">Meta.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«elab»</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\">SavedState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L171-L177","name":"Lean.Elab.Term.SavedState","line":171,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState","doc":"Backtrackable state for the `TermElabM` monad.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L169-L169","name":"Lean.Elab.Term.instInhabitedState","line":169,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L168-L168","name":"Lean.Elab.Term.State.letRecsToLift","line":168,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.State.letRecsToLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.letRecsToLift\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">State</span>.<span class=\"name\">letRecsToLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L167-L167","name":"Lean.Elab.Term.State.mvarArgNames","line":167,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.State.mvarArgNames","doc":"`mvarArgNames` stores the argument names associated to metavariables.\nThese are used in combination with `mvarErrorInfos` for throwing errors about metavariables that could not be fully instantiated.\nFor example when elaborating `List _`, the argument name of the placeholder will be `α`.\n\nWhile elaborating an application, `mvarArgNames` is set for each metavariable argument, using the available argument name.\nThis may happen before or after the `mvarErrorInfos` is set for the same metavariable.\n\nWe used to store the argument names in `mvarErrorInfos`, updating the `MVarErrorInfos` to add the argument name when it is available,\nbut this doesn't work if the argument name is available _before_ the `mvarErrorInfos` is set for that metavariable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.mvarArgNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">State</span>.<span class=\"name\">mvarArgNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarIdMap\">MVarIdMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L155-L155","name":"Lean.Elab.Term.State.levelMVarErrorInfos","line":155,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.State.levelMVarErrorInfos","doc":"List of data to be able to localize universe level metavariable errors to particular expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.levelMVarErrorInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">State</span>.<span class=\"name\">levelMVarErrorInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\">LevelMVarErrorInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L153-L153","name":"Lean.Elab.Term.State.mvarErrorInfos","line":153,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.State.mvarErrorInfos","doc":"List of errors associated to a metavariable that are shown to the user if the metavariable could not be fully instantiated "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.mvarErrorInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">State</span>.<span class=\"name\">mvarErrorInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\">MVarErrorInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L151-L151","name":"Lean.Elab.Term.State.pendingMVars","line":151,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.State.pendingMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.pendingMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">State</span>.<span class=\"name\">pendingMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L150-L150","name":"Lean.Elab.Term.State.syntheticMVars","line":150,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.State.syntheticMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.syntheticMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">State</span>.<span class=\"name\">syntheticMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarIdMap\">MVarIdMap</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl\">SyntheticMVarDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L149-L149","name":"Lean.Elab.Term.State.levelNames","line":149,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.State.levelNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.levelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">State</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L148-L148","name":"Lean.Elab.Term.State.mk","line":148,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">syntheticMVars</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarIdMap\">MVarIdMap</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl\">SyntheticMVarDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pendingMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarErrorInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\">MVarErrorInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelMVarErrorInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\">LevelMVarErrorInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarArgNames</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarIdMap\">MVarIdMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letRecsToLift</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L145-L169","name":"Lean.Elab.Term.State","line":145,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.State","doc":"State of the `TermElabM` monad.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L143-L143","name":"Lean.Elab.Term.instInhabitedLetRecToLift","line":143,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedLetRecToLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedLetRecToLift\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedLetRecToLift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L142-L142","name":"Lean.Elab.Term.LetRecToLift.termination","line":142,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.termination","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.termination\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">termination</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/TerminationHint.html#Lean.Elab.TerminationHints\">TerminationHints</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L141-L141","name":"Lean.Elab.Term.LetRecToLift.mvarId","line":141,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L140-L140","name":"Lean.Elab.Term.LetRecToLift.val","line":140,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L139-L139","name":"Lean.Elab.Term.LetRecToLift.type","line":139,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L138-L138","name":"Lean.Elab.Term.LetRecToLift.localInstances","line":138,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.localInstances","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.localInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">localInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L137-L137","name":"Lean.Elab.Term.LetRecToLift.lctx","line":137,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L136-L136","name":"Lean.Elab.Term.LetRecToLift.declName","line":136,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.declName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L135-L135","name":"Lean.Elab.Term.LetRecToLift.shortDeclName","line":135,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.shortDeclName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.shortDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">shortDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L134-L134","name":"Lean.Elab.Term.LetRecToLift.attrs","line":134,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.attrs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.attrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">attrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Attribute</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L133-L133","name":"Lean.Elab.Term.LetRecToLift.fvarId","line":133,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L132-L132","name":"Lean.Elab.Term.LetRecToLift.ref","line":132,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L131-L131","name":"Lean.Elab.Term.LetRecToLift.mk","line":131,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Attributes.html#Lean.Elab.Attribute\">Attribute</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shortDeclName </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">val</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">termination</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationHint.html#Lean.Elab.TerminationHints\">TerminationHints</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\">LetRecToLift</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L127-L143","name":"Lean.Elab.Term.LetRecToLift","line":127,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift","doc":"Nested `let rec` expressions are eagerly lifted by the elaborator.\nWe store the information necessary for performing the lifting here.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LetRecToLift\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LetRecToLift</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L125-L125","name":"Lean.Elab.Term.instInhabitedLevelMVarErrorInfo","line":125,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedLevelMVarErrorInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedLevelMVarErrorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedLevelMVarErrorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\">LevelMVarErrorInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L124-L124","name":"Lean.Elab.Term.LevelMVarErrorInfo.msgData?","line":124,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.msgData?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.msgData?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LevelMVarErrorInfo</span>.<span class=\"name\">msgData?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\">LevelMVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L123-L123","name":"Lean.Elab.Term.LevelMVarErrorInfo.ref","line":123,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LevelMVarErrorInfo</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\">LevelMVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L122-L122","name":"Lean.Elab.Term.LevelMVarErrorInfo.expr","line":122,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LevelMVarErrorInfo</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\">LevelMVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L121-L121","name":"Lean.Elab.Term.LevelMVarErrorInfo.lctx","line":121,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LevelMVarErrorInfo</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\">LevelMVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L120-L120","name":"Lean.Elab.Term.LevelMVarErrorInfo.mk","line":120,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LevelMVarErrorInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\">LevelMVarErrorInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L115-L125","name":"Lean.Elab.Term.LevelMVarErrorInfo","line":115,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo","doc":"When reporting unexpected universe level metavariables, it is useful to localize the errors\nto particular terms, especially at `let` bindings and function binders,\nwhere universe polymorphism is not permitted.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.LevelMVarErrorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LevelMVarErrorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L113-L113","name":"Lean.Elab.Term.instInhabitedMVarErrorInfo","line":113,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedMVarErrorInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedMVarErrorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedMVarErrorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\">MVarErrorInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L112-L112","name":"Lean.Elab.Term.MVarErrorInfo.kind","line":112,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorInfo</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\">MVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind\">MVarErrorKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L111-L111","name":"Lean.Elab.Term.MVarErrorInfo.ref","line":111,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorInfo</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\">MVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L110-L110","name":"Lean.Elab.Term.MVarErrorInfo.mvarId","line":110,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorInfo</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\">MVarErrorInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L109-L109","name":"Lean.Elab.Term.MVarErrorInfo.mk","line":109,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind\">MVarErrorKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\">MVarErrorInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L106-L113","name":"Lean.Elab.Term.MVarErrorInfo","line":106,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo","doc":"We can optionally associate an error context with metavariables.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L100-L104","name":"Lean.Elab.Term.instToStringMVarErrorKind","line":100,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instToStringMVarErrorKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instToStringMVarErrorKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instToStringMVarErrorKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind\">MVarErrorKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L98-L98","name":"Lean.Elab.Term.instInhabitedMVarErrorKind","line":98,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedMVarErrorKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedMVarErrorKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedMVarErrorKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind\">MVarErrorKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L96-L97","name":"Lean.Elab.Term.MVarErrorKind.custom","line":96,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind.custom","doc":"\"Custom\", `msgData` stores the additional error messages. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind.custom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorKind</span>.<span class=\"name\">custom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgData</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind\">MVarErrorKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L94-L95","name":"Lean.Elab.Term.MVarErrorKind.hole","line":94,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind.hole","doc":"Metavariable for explicit holes provided by the user (e.g., `_` and `?m`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind.hole\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorKind</span>.<span class=\"name\">hole</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind\">MVarErrorKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L91-L93","name":"Lean.Elab.Term.MVarErrorKind.implicitArg","line":91,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind.implicitArg","doc":"Metavariable for implicit arguments. `ctx` is the parent application,\n`lctx` is a local context where it is valid (necessary for eta feature for named arguments). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind.implicitArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorKind</span>.<span class=\"name\">implicitArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind\">MVarErrorKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L86-L98","name":"Lean.Elab.Term.MVarErrorKind","line":86,"kind":"inductive","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind","doc":"We can optionally associate an error context with a metavariable (see `MVarErrorInfo`).\nWe have three different kinds of error context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.MVarErrorKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MVarErrorKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L84-L84","name":"Lean.Elab.Term.instInhabitedSyntheticMVarDecl","line":84,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedSyntheticMVarDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedSyntheticMVarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedSyntheticMVarDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl\">SyntheticMVarDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L83-L83","name":"Lean.Elab.Term.SyntheticMVarDecl.kind","line":83,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl.kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SyntheticMVarDecl</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl\">SyntheticMVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\">SyntheticMVarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L82-L82","name":"Lean.Elab.Term.SyntheticMVarDecl.stx","line":82,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SyntheticMVarDecl</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl\">SyntheticMVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L81-L81","name":"Lean.Elab.Term.SyntheticMVarDecl.mk","line":81,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SyntheticMVarDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\">SyntheticMVarKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl\">SyntheticMVarDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L81-L84","name":"Lean.Elab.Term.SyntheticMVarDecl","line":81,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SyntheticMVarDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L74-L79","name":"Lean.Elab.Term.instToStringSyntheticMVarKind","line":74,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instToStringSyntheticMVarKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instToStringSyntheticMVarKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instToStringSyntheticMVarKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\">SyntheticMVarKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L68-L72","name":"Lean.Elab.Term.extraMsgToMsg","line":68,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.extraMsgToMsg","doc":"Convert an \"extra\" optional error message into a message `\"\\n{msg}\"` (if `some msg`) and `MessageData.nil` (if `none`)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.extraMsgToMsg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">extraMsgToMsg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraErrorMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L66-L66","name":"Lean.Elab.Term.instInhabitedSyntheticMVarKind","line":66,"kind":"instance","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedSyntheticMVarKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.instInhabitedSyntheticMVarKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedSyntheticMVarKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\">SyntheticMVarKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L64-L65","name":"Lean.Elab.Term.SyntheticMVarKind.postponed","line":64,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind.postponed","doc":"Metavariable represents a hole whose elaboration has been postponed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind.postponed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SyntheticMVarKind</span>.<span class=\"name\">postponed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\">SyntheticMVarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L62-L63","name":"Lean.Elab.Term.SyntheticMVarKind.tactic","line":62,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind.tactic","doc":"Use tactic to synthesize value for metavariable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind.tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SyntheticMVarKind</span>.<span class=\"name\">tactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticCode</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind\">TacticMVarKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\">SyntheticMVarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L51-L61","name":"Lean.Elab.Term.SyntheticMVarKind.coe","line":51,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind.coe","doc":"Use coercion to synthesize value for the metavariable.\nIf synthesis fails, then throws an error.\n- If `mkErrorMsg?` is provided, then the error `mkErrorMsg expectedType e` is thrown.\n  The `mkErrorMsg` function is allowed to throw an error itself.\n- Otherwise, throws a default type mismatch error message.\n  If `header?` is not provided, the default header is \"type mismatch\".\n  If `f?` is provided, then throws an application type mismatch error.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind.coe\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SyntheticMVarKind</span>.<span class=\"name\">coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkErrorMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\">SyntheticMVarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L45-L50","name":"Lean.Elab.Term.SyntheticMVarKind.typeClass","line":45,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind.typeClass","doc":"Use typeclass resolution to synthesize value for metavariable.\nIf `extraErrorMsg?` is `some msg`, `msg` contains additional information to include in error messages\nregarding type class synthesis failure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind.typeClass\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SyntheticMVarKind</span>.<span class=\"name\">typeClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraErrorMsg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\">SyntheticMVarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L43-L66","name":"Lean.Elab.Term.SyntheticMVarKind","line":43,"kind":"inductive","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind","doc":"We use synthetic metavariables as placeholders for pending elaboration steps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SyntheticMVarKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SyntheticMVarKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L40-L41","name":"Lean.Elab.Term.TacticMVarKind.fieldAutoParam","line":40,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind.fieldAutoParam","doc":"Tactic metavariable arising from an autoparam for a structure field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind.fieldAutoParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">TacticMVarKind</span>.<span class=\"name\">fieldAutoParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fieldName </span><span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind\">TacticMVarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L38-L39","name":"Lean.Elab.Term.TacticMVarKind.autoParam","line":38,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind.autoParam","doc":"Tactic metavariable arising from an autoparam for a function application. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind.autoParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">TacticMVarKind</span>.<span class=\"name\">autoParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind\">TacticMVarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L36-L37","name":"Lean.Elab.Term.TacticMVarKind.term","line":36,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind.term","doc":"Standard tactic metavariable, arising from `by ...` syntax. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">TacticMVarKind</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind\">TacticMVarKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L34-L41","name":"Lean.Elab.Term.TacticMVarKind","line":34,"kind":"inductive","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind","doc":"The kind of a tactic metavariable, used for additional error reporting. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TacticMVarKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">TacticMVarKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L32-L32","name":"Lean.Elab.Term.SavedContext.levelNames","line":32,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.levelNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.levelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedContext</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L31-L31","name":"Lean.Elab.Term.SavedContext.errToSorry","line":31,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.errToSorry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.errToSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedContext</span>.<span class=\"name\">errToSorry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L30-L30","name":"Lean.Elab.Term.SavedContext.macroStack","line":30,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.macroStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.macroStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedContext</span>.<span class=\"name\">macroStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Util.html#Lean.Elab.MacroStack\">MacroStack</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L29-L29","name":"Lean.Elab.Term.SavedContext.openDecls","line":29,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.openDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedContext</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L28-L28","name":"Lean.Elab.Term.SavedContext.options","line":28,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.options","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.options\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedContext</span>.<span class=\"name\">options</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L27-L27","name":"Lean.Elab.Term.SavedContext.declName?","line":27,"kind":"def","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.declName?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.declName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedContext</span>.<span class=\"name\">declName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L26-L26","name":"Lean.Elab.Term.SavedContext.mk","line":26,"kind":"ctor","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">options</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">openDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">macroStack</span> : <a href=\"./Lean/Elab/Util.html#Lean.Elab.MacroStack\">MacroStack</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">errToSorry</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\">SavedContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Term.lean#L25-L32","name":"Lean.Elab.Term.SavedContext","line":25,"kind":"structure","docLink":"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext","doc":"Saved context for postponed terms and tactics to be executed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Term.html#Lean.Elab.Term.SavedContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">SavedContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}