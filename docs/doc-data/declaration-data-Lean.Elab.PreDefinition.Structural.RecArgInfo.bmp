{"name":"Lean.Elab.PreDefinition.Structural.RecArgInfo","instances":[{"typeNames":["Lean.Elab.Structural.RecArgInfo"],"name":"Lean.Elab.Structural.instInhabitedRecArgInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.Structural.RecArgInfo"],"name":"Lean.Elab.Structural.instReprRecArgInfo","className":"Repr"}],"imports":["Lean.Meta.Basic","Lean.Meta.ForEachExpr","Lean.Elab.PreDefinition.FixedParams","Lean.Elab.PreDefinition.Structural.IndGroupInfo"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L64-L68","name":"Lean.Elab.Structural.RecArgInfo.indName!","line":64,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.indName!","doc":"Name of the recursive data type. Assumes that it is not one of the auxiliary ones.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.indName!\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indName!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L44-L62","name":"Lean.Elab.Structural.RecArgInfo.pickIndicesMajor","line":44,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.pickIndicesMajor","doc":"If `xs` are the varying parameters of the functions, partitions them into indices and major\narguments, and other parameters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.pickIndicesMajor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">pickIndicesMajor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L40-L42","name":"Lean.Elab.Structural.RecArgInfo.indicesAndRecArgPos","line":40,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.indicesAndRecArgPos","doc":"position of the argument and its indices we are recursing on, among all parameters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.indicesAndRecArgPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indicesAndRecArgPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L38-L38","name":"Lean.Elab.Structural.instReprRecArgInfo","line":38,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.instReprRecArgInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.instReprRecArgInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">instReprRecArgInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L38-L38","name":"Lean.Elab.Structural.instInhabitedRecArgInfo","line":38,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.instInhabitedRecArgInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.instInhabitedRecArgInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">instInhabitedRecArgInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L37-L37","name":"Lean.Elab.Structural.RecArgInfo.indIdx","line":37,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.indIdx","doc":"index of the inductive datatype of the argument we are recursing on.\nIf `< indAll.all`, a normal data type, else an auxiliary data type due to nested recursion\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.indIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L32-L32","name":"Lean.Elab.Structural.RecArgInfo.indGroupInst","line":32,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.indGroupInst","doc":"The inductive group (with parameters) of the argument's type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.indGroupInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indGroupInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Structural/IndGroupInfo.html#Lean.Elab.Structural.IndGroupInst\">IndGroupInst</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L30-L30","name":"Lean.Elab.Structural.RecArgInfo.indicesPos","line":30,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.indicesPos","doc":"position of the indices of the inductive datatype we are recursing on, among all parameters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.indicesPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">indicesPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L28-L28","name":"Lean.Elab.Structural.RecArgInfo.recArgPos","line":28,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.recArgPos","doc":"position of the argument we are recursing on, among all parameters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.recArgPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">recArgPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L26-L26","name":"Lean.Elab.Structural.RecArgInfo.fixedParamPerm","line":26,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.fixedParamPerm","doc":"Information which arguments are fixed "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.fixedParamPerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">fixedParamPerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L24-L24","name":"Lean.Elab.Structural.RecArgInfo.fnName","line":24,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.fnName","doc":"the name of the recursive function "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.fnName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">fnName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L22-L22","name":"Lean.Elab.Structural.RecArgInfo.mk","line":22,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fnName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgPos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indicesPos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indGroupInst</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/IndGroupInfo.html#Lean.Elab.Structural.IndGroupInst\">IndGroupInst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/RecArgInfo.lean#L15-L38","name":"Lean.Elab.Structural.RecArgInfo","line":15,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo","doc":"Information about the argument of interest of a structurally recursive function.\n\nThe `Expr`s in this data structure expect the fixed parameters to be in scope, but not the other\nparameters of the function. This ensures that this data structure makes sense in the other functions\nof a mutually recursive group.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">RecArgInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}