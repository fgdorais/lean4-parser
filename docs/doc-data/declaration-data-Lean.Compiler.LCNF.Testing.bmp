{"name":"Lean.Compiler.LCNF.Testing","instances":[],"imports":["Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.PrettyPrinter"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L245-L250","name":"Lean.Compiler.LCNF.Testing.assertNoFun","line":245,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertNoFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertNoFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertNoFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L233-L243","name":"Lean.Compiler.LCNF.Testing.assertDoesNotContainConstAfter","line":233,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertDoesNotContainConstAfter","doc":"Assert that the pass under test produces `Decl`s that do not contain\n`Expr.const constName` in their `Code.let` values anymore.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertDoesNotContainConstAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertDoesNotContainConstAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L226-L231","name":"Lean.Compiler.LCNF.Testing.assertReducesOrPreservesSize","line":226,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesOrPreservesSize","doc":"Assert that the overall size of the `Decl`s in the compilation pipeline gets reduced or stays unchanged\nby `passUnderTestName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesOrPreservesSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertReducesOrPreservesSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L220-L224","name":"Lean.Compiler.LCNF.Testing.assertReducesSize","line":220,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesSize","doc":"Assert that the overall size of the `Decl`s in the compilation pipeline gets reduced by `passUnderTestName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertReducesSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertReducesSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L213-L218","name":"Lean.Compiler.LCNF.Testing.assertPreservesSize","line":213,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertPreservesSize","doc":"Assert that the overall size of the `Decl`s in the compilation pipeline does not change\nafter `passUnderTestName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertPreservesSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertPreservesSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L204-L211","name":"Lean.Compiler.LCNF.Testing.assertSize","line":204,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertSize","doc":"Compare the overall sizes of the input and output of `passUnderTest` with `assertion`.\nIf `assertion inputSize outputSize` is `false` throw an exception with `msg`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assertion</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L183-L202","name":"Lean.Compiler.LCNF.Testing.assertIsAtFixPoint","line":183,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertIsAtFixPoint","doc":"Insert a pass after `passUnderTestName`, that ensures, that if\n`passUnderTestName` is executed twice in a row, no change in the resulting\nexpression will occur, i.e. the pass is at a fix point.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertIsAtFixPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertIsAtFixPoint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L164-L172","name":"Lean.Compiler.LCNF.Testing.assertAroundEachOccurrence","line":164,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAroundEachOccurrence","doc":"Replace all occurrences of a pass with a wrapper one that allows\nthe user to provide an assertion which takes into account both the\ndeclarations that were sent to and produced by the pass under test.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAroundEachOccurrence\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAroundEachOccurrence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest\">InOutTest</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L154-L162","name":"Lean.Compiler.LCNF.Testing.assertAround","line":154,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAround","doc":"Replace a specific occurrence, default is first, of a pass with a wrapper one that allows\nthe user to provide an assertion which takes into account both the\ndeclarations that were sent to and produced by the pass under test.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAround\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAround</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest\">InOutTest</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occurrence</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L132-L139","name":"Lean.Compiler.LCNF.Testing.assertForEachDeclAfterEachOccurrence","line":132,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfterEachOccurrence","doc":"Install an assertion pass right after the each occurrence of a pass. The\nassertion operates on a per declaration basis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfterEachOccurrence\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertForEachDeclAfterEachOccurrence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assertion</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L122-L130","name":"Lean.Compiler.LCNF.Testing.assertForEachDeclAfter","line":122,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfter","doc":"Install an assertion pass right after a specific occurrence of a pass,\ndefault is first. The assertion operates on a per declaration basis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertForEachDeclAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertForEachDeclAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assertion</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occurrence</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L114-L120","name":"Lean.Compiler.LCNF.Testing.assertAfterEachOccurrence","line":114,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfterEachOccurrence","doc":"Install an assertion pass right after each occurrence of a pass.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfterEachOccurrence\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAfterEachOccurrence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest\">SimpleTest</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L105-L112","name":"Lean.Compiler.LCNF.Testing.assertAfter","line":105,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfter","doc":"Install an assertion pass right after a specific occurrence of a pass,\ndefault is first.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assertAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assertAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">test</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest\">SimpleTest</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occurrence</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L86-L91","name":"Lean.Compiler.LCNF.Testing.assert","line":86,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assert","doc":"If `property` is `false` throw an exception with `msg`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.assert\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">assert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">property</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">TestM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L83-L84","name":"Lean.Compiler.LCNF.Testing.getOutputDecls","line":83,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getOutputDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getOutputDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getOutputDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\">InOutAssertionM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L80-L81","name":"Lean.Compiler.LCNF.Testing.getInputDecls","line":80,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getInputDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getInputDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getInputDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\">InOutAssertionM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L77-L78","name":"Lean.Compiler.LCNF.Testing.getDecls","line":77,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM\">SimpleAssertionM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L74-L75","name":"Lean.Compiler.LCNF.Testing.getPassUnderTest","line":74,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getPassUnderTest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getPassUnderTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getPassUnderTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">TestM</a> <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L71-L72","name":"Lean.Compiler.LCNF.Testing.getTestName","line":71,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getTestName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.getTestName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">getTestName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">TestM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L68-L69","name":"Lean.Compiler.LCNF.Testing.InOutAssertionM.run","line":68,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\">InOutAssertionM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input </span><span class=\"fn\">output</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTest</span> : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L65-L66","name":"Lean.Compiler.LCNF.Testing.SimpleAssertionM.run","line":65,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM\">SimpleAssertionM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTest</span> : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L62-L63","name":"Lean.Compiler.LCNF.Testing.TestM.run","line":62,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\">TestM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTest</span> : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L59-L60","name":"Lean.Compiler.LCNF.Testing.TestInstaller.install","line":59,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller.install","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller.install\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstaller</span>.<span class=\"name\">install</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\">TestInstaller</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTestName </span><span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.PassInstaller\">PassInstaller</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L57-L57","name":"Lean.Compiler.LCNF.Testing.InOutTest","line":57,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L56-L56","name":"Lean.Compiler.LCNF.Testing.SimpleTest","line":56,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleTest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L55-L55","name":"Lean.Compiler.LCNF.Testing.InOutAssertionM","line":55,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L54-L54","name":"Lean.Compiler.LCNF.Testing.SimpleAssertionM","line":54,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L53-L53","name":"Lean.Compiler.LCNF.Testing.TestM","line":53,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L51-L51","name":"Lean.Compiler.LCNF.Testing.TestInstaller","line":51,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstaller\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstaller</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L50-L50","name":"Lean.Compiler.LCNF.Testing.TestInstallerM","line":50,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L48-L48","name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext.output","line":48,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.output","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.output\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span>.<span class=\"name\">output</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\">InOutAssertionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L47-L47","name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext.input","line":47,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.input","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.input\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span>.<span class=\"name\">input</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\">InOutAssertionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L46-L46","name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext.mk","line":46,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input </span><span class=\"fn\">output</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\">InOutAssertionContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L46-L48","name":"Lean.Compiler.LCNF.Testing.InOutAssertionContext","line":46,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.InOutAssertionContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">InOutAssertionContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L44-L44","name":"Lean.Compiler.LCNF.Testing.SimpleAssertionContext.decls","line":44,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.decls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext\">SimpleAssertionContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L43-L43","name":"Lean.Compiler.LCNF.Testing.SimpleAssertionContext.mk","line":43,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext\">SimpleAssertionContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L43-L44","name":"Lean.Compiler.LCNF.Testing.SimpleAssertionContext","line":43,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.SimpleAssertionContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">SimpleAssertionContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L41-L41","name":"Lean.Compiler.LCNF.Testing.TestContext.testName","line":41,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.testName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.testName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span>.<span class=\"name\">testName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\">TestContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L40-L40","name":"Lean.Compiler.LCNF.Testing.TestContext.passUnderTest","line":40,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.passUnderTest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.passUnderTest\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span>.<span class=\"name\">passUnderTest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\">TestContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L39-L39","name":"Lean.Compiler.LCNF.Testing.TestContext.mk","line":39,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTest</span> : <a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\">TestContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L39-L41","name":"Lean.Compiler.LCNF.Testing.TestContext","line":39,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L37-L37","name":"Lean.Compiler.LCNF.Testing.TestInstallerContext.testName","line":37,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.testName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.testName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span>.<span class=\"name\">testName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\">TestInstallerContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L36-L36","name":"Lean.Compiler.LCNF.Testing.TestInstallerContext.passUnderTestName","line":36,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.passUnderTestName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.passUnderTestName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span>.<span class=\"name\">passUnderTestName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\">TestInstallerContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L35-L35","name":"Lean.Compiler.LCNF.Testing.TestInstallerContext.mk","line":35,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">passUnderTestName </span><span class=\"fn\">testName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\">TestInstallerContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L35-L37","name":"Lean.Compiler.LCNF.Testing.TestInstallerContext","line":35,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Testing.TestInstallerContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Testing</span>.<span class=\"name\">TestInstallerContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L28-L31","name":"Lean.Compiler.LCNF.Code.containsConst.goLetValue","line":28,"kind":"def","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst.goLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst.goLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">containsConst</span>.<span class=\"name\">goLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L20-L27","name":"Lean.Compiler.LCNF.Code.containsConst.goExpr","line":20,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst.goExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst.goExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">containsConst</span>.<span class=\"name\">goExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Testing.lean#L12-L31","name":"Lean.Compiler.LCNF.Code.containsConst","line":12,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Testing.html#Lean.Compiler.LCNF.Code.containsConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">containsConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"}]}