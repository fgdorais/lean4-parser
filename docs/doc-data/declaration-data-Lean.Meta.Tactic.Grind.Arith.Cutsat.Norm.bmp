{"name":"Lean.Meta.Tactic.Grind.Arith.Cutsat.Norm","instances":[],"imports":["Lean.Meta.Tactic.Grind.Arith.Cutsat.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Norm.lean#L16-L47","name":"Lean.Meta.Grind.Arith.Cutsat.toLinearExpr","line":16,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Norm.html#Lean.Meta.Grind.Arith.Cutsat.toLinearExpr","doc":"Converts the given integer expression into `Int.Linear.Expr` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Norm.html#Lean.Meta.Grind.Arith.Cutsat.toLinearExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">toLinearExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a></span></div></div>"}]}