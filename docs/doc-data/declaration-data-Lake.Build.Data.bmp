{"name":"Lake.Build.Data","instances":[{"typeNames":[],"name":"Lake.OptDataKind.anonymous","className":"Lake.OptDataKind"},{"typeNames":["Lake.OptDataKind"],"name":"Lake.instInhabitedOptDataKind","className":"Inhabited"},{"typeNames":[],"name":"Lake.instOptDataKindOfDataKind","className":"Lake.OptDataKind"},{"typeNames":["Lake.OptDataKind","Lean.Name"],"name":"Lake.instCoeOutOptDataKindName","className":"CoeOut"},{"typeNames":["Lake.OptDataKind"],"name":"Lake.instToStringOptDataKind","className":"ToString"},{"typeNames":["Lake.FacetData"],"name":"Lake.instFamilyDefNameFacetDataOfFacetOutHAppend","className":"Lake.FamilyDef"},{"typeNames":["Lake.FacetOut","HAppend.hAppend"],"name":"Lake.instFamilyDefNameFacetOutHAppendOfFacetData","className":"Lake.FamilyDef"},{"typeNames":["Lake.CustomData"],"name":"Lake.instFamilyDefNameCustomDataOfProdCustomOutMk","className":"Lake.FamilyDef"},{"typeNames":["Lake.BuildData","Lake.BuildKey.packageTarget","Lake.CustomData"],"name":"Lake.instFamilyDefBuildKeyBuildDataPackageTargetCustomData","className":"Lake.FamilyDef"},{"typeNames":["Lake.BuildData","Lake.BuildKey.facet","Lake.FacetOut"],"name":"Lake.instFamilyDefBuildKeyBuildDataFacetFacetOut","className":"Lake.FamilyDef"},{"typeNames":["Lake.BuildData","Lake.BuildKey.packageTarget"],"name":"Lake.instFamilyDefBuildKeyBuildDataPackageTargetOfFamilyOutNameCustomData","className":"Lake.FamilyDef"},{"typeNames":["Lake.BuildData","Lake.BuildKey.module"],"name":"Lake.instFamilyDefBuildKeyBuildDataModuleOfFamilyOutNameDataTypeFacetKind","className":"Lake.FamilyDef"},{"typeNames":["Lake.BuildData","Lake.BuildKey.package"],"name":"Lake.instFamilyDefBuildKeyBuildDataPackageOfFamilyOutNameDataTypeFacetKind","className":"Lake.FamilyDef"},{"typeNames":["Unit"],"name":"Lake.instDataKindUnit","className":"Lake.DataKind"},{"typeNames":["Lake.DataType","Lean.Name.mkStr1","Unit"],"name":"Lake.instFamilyDefNameDataTypeMkStr1Unit","className":"Lake.FamilyDef"},{"typeNames":["Lake.DataType","Lean.Name.mkStr1","Bool"],"name":"Lake.instFamilyDefNameDataTypeMkStr1Bool","className":"Lake.FamilyDef"},{"typeNames":["Bool"],"name":"Lake.instDataKindBool","className":"Lake.DataKind"},{"typeNames":["System.FilePath"],"name":"Lake.instDataKindFilePath","className":"Lake.DataKind"},{"typeNames":["Lake.DataType","Lean.Name.mkStr1","System.FilePath"],"name":"Lake.instFamilyDefNameDataTypeMkStr1FilePath","className":"Lake.FamilyDef"},{"typeNames":["Lake.DataType","Lean.Name.mkStr1","Lake.Dynlib"],"name":"Lake.instFamilyDefNameDataTypeMkStr1Dynlib","className":"Lake.FamilyDef"},{"typeNames":["Lake.Dynlib"],"name":"Lake.instDataKindDynlib","className":"Lake.DataKind"}],"imports":["Lake.Build.Key","Lake.Util.Family","Lake.Config.Dynlib"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L260-L267","name":"Lake.customDataDecl","line":260,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.customDataDecl","doc":"Macro for declaring new `CustomData`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.customDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">customDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L252-L257","name":"Lake.targetDataDecl","line":252,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.targetDataDecl","doc":"Macro for declaring new `TargetData`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.targetDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">targetDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L247-L249","name":"Lake.libraryDataDecl","line":247,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.libraryDataDecl","doc":"Macro for declaring new `LibraryData`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.libraryDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">libraryDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L242-L244","name":"Lake.moduleDataDecl","line":242,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.moduleDataDecl","doc":"Macro for declaring new `ModuleData`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.moduleDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">moduleDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L237-L239","name":"Lake.packageDataDecl","line":237,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.packageDataDecl","doc":"Macro for declaring new `PackageData`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.packageDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">packageDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L223-L234","name":"Lake.facetDataDecl","line":223,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.facetDataDecl","doc":"Macro for declaring new `FacetData`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.facetDataDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">facetDataDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L192-L220","name":"Lake.builtinFacetCommand","line":192,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.builtinFacetCommand","doc":"Internal macro for declaring new facet within Lake. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.builtinFacetCommand\"><span class=\"name\">Lake</span>.<span class=\"name\">builtinFacetCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L189-L189","name":"Lake.instDataKindDynlib","line":189,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instDataKindDynlib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instDataKindDynlib\"><span class=\"name\">Lake</span>.<span class=\"name\">instDataKindDynlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L189-L189","name":"Lake.DataType.dynlib","line":189,"kind":"axiom","docLink":"./Lake/Build/Data.html#Lake.DataType.dynlib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">axiom</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataType.dynlib\"><span class=\"name\">Lake</span>.<span class=\"name\">DataType</span>.<span class=\"name\">dynlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`dynlib</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L189-L189","name":"Lake.instFamilyDefNameDataTypeMkStr1Dynlib","line":189,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Dynlib","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Dynlib\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameDataTypeMkStr1Dynlib</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`dynlib</span> <a href=\"./Lake/Config/Dynlib.html#Lake.Dynlib\">Dynlib</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L188-L188","name":"Lake.instFamilyDefNameDataTypeMkStr1FilePath","line":188,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1FilePath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1FilePath\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameDataTypeMkStr1FilePath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`filepath</span> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L188-L188","name":"Lake.DataType.filepath","line":188,"kind":"axiom","docLink":"./Lake/Build/Data.html#Lake.DataType.filepath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">axiom</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataType.filepath\"><span class=\"name\">Lake</span>.<span class=\"name\">DataType</span>.<span class=\"name\">filepath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`filepath</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L188-L188","name":"Lake.instDataKindFilePath","line":188,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instDataKindFilePath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instDataKindFilePath\"><span class=\"name\">Lake</span>.<span class=\"name\">instDataKindFilePath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L187-L187","name":"Lake.instDataKindBool","line":187,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instDataKindBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instDataKindBool\"><span class=\"name\">Lake</span>.<span class=\"name\">instDataKindBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L187-L187","name":"Lake.instFamilyDefNameDataTypeMkStr1Bool","line":187,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Bool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Bool\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameDataTypeMkStr1Bool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`bool</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L187-L187","name":"Lake.DataType.bool","line":187,"kind":"axiom","docLink":"./Lake/Build/Data.html#Lake.DataType.bool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">axiom</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataType.bool\"><span class=\"name\">Lake</span>.<span class=\"name\">DataType</span>.<span class=\"name\">bool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`bool</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L186-L186","name":"Lake.DataType.unit","line":186,"kind":"axiom","docLink":"./Lake/Build/Data.html#Lake.DataType.unit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">axiom</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataType.unit\"><span class=\"name\">Lake</span>.<span class=\"name\">DataType</span>.<span class=\"name\">unit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`unit</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L186-L186","name":"Lake.instFamilyDefNameDataTypeMkStr1Unit","line":186,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Unit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameDataTypeMkStr1Unit\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameDataTypeMkStr1Unit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">`unit</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L186-L186","name":"Lake.instDataKindUnit","line":186,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instDataKindUnit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instDataKindUnit\"><span class=\"name\">Lake</span>.<span class=\"name\">instDataKindUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L178-L184","name":"Lake.dataTypeDecl","line":178,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.dataTypeDecl","doc":"Macro for declaring new `DatayType`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.dataTypeDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">dataTypeDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L167-L169","name":"Lake.instFamilyDefBuildKeyBuildDataPackageOfFamilyOutNameDataTypeFacetKind","line":167,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageOfFamilyOutNameDataTypeFacetKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageOfFamilyOutNameDataTypeFacetKind\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefBuildKeyBuildDataPackageOfFamilyOutNameDataTypeFacetKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">FamilyOut</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <a href=\"./Lake/Config/Kinds.html#Lake.Package.facetKind\">Package.facetKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.BuildData\">BuildData</a> <span class=\"fn\">(<a href=\"./Lake/Build/Key.html#Lake.BuildKey.package\">BuildKey.package</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L163-L165","name":"Lake.instFamilyDefBuildKeyBuildDataModuleOfFamilyOutNameDataTypeFacetKind","line":163,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataModuleOfFamilyOutNameDataTypeFacetKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataModuleOfFamilyOutNameDataTypeFacetKind\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefBuildKeyBuildDataModuleOfFamilyOutNameDataTypeFacetKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">FamilyOut</a> <a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <a href=\"./Lake/Config/Kinds.html#Lake.Module.facetKind\">Module.facetKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.BuildData\">BuildData</a> <span class=\"fn\">(<a href=\"./Lake/Build/Key.html#Lake.BuildKey.module\">BuildKey.module</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L159-L161","name":"Lake.instFamilyDefBuildKeyBuildDataPackageTargetOfFamilyOutNameCustomData","line":159,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageTargetOfFamilyOutNameCustomData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageTargetOfFamilyOutNameCustomData\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefBuildKeyBuildDataPackageTargetOfFamilyOutNameCustomData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">FamilyOut</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.CustomData\">CustomData</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.BuildData\">BuildData</a> <span class=\"fn\">(<a href=\"./Lake/Build/Key.html#Lake.BuildKey.packageTarget\">BuildKey.packageTarget</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L157-L157","name":"Lake.instFamilyDefBuildKeyBuildDataFacetFacetOut","line":157,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataFacetFacetOut","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataFacetFacetOut\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefBuildKeyBuildDataFacetFacetOut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Lake/Build/Key.html#Lake.BuildKey\">BuildKey</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.BuildData\">BuildData</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Lake/Build/Key.html#Lake.BuildKey.facet\">facet</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.FacetOut\">FacetOut</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L156-L156","name":"Lake.instFamilyDefBuildKeyBuildDataPackageTargetCustomData","line":156,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageTargetCustomData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefBuildKeyBuildDataPackageTargetCustomData\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefBuildKeyBuildDataPackageTargetCustomData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.BuildData\">BuildData</a> <span class=\"fn\">(<a href=\"./Lake/Build/Key.html#Lake.BuildKey.packageTarget\">BuildKey.packageTarget</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.CustomData\">CustomData</a> <span class=\"fn\">p</span> <span class=\"fn\">t</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L145-L154","name":"Lake.BuildData","line":145,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.BuildData","doc":"A mapping between a build key and its associated build data in the store.\nIt is a simple type function composed of the separate open type families for\nmodules facets, package facets, Lake target facets, and custom targets.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.BuildData\"><span class=\"name\">Lake</span>.<span class=\"name\">BuildData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Key.html#Lake.BuildKey\">BuildKey</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L138-L139","name":"Lake.instFamilyDefNameCustomDataOfProdCustomOutMk","line":138,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameCustomDataOfProdCustomOutMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameCustomDataOfProdCustomOutMk\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameCustomDataOfProdCustomOutMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.CustomOut\">CustomOut</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">t</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.CustomData\">CustomData</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L130-L136","name":"Lake.CustomData","line":130,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.CustomData","doc":"The open type family which maps a custom package targetto its output type.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `custom_data`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.CustomData\"><span class=\"name\">Lake</span>.<span class=\"name\">CustomData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">package </span><span class=\"fn\">target</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L121-L128","name":"Lake.CustomOut","line":121,"kind":"opaque","docLink":"./Lake/Build/Data.html#Lake.CustomOut","doc":"The open type family which maps a custom package target\n(package × target name) to its output type.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `custom_data`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.CustomOut\"><span class=\"name\">Lake</span>.<span class=\"name\">CustomOut</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L118-L119","name":"Lake.LeanLibData","line":118,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.LeanLibData","doc":"The open type family which maps a Lean library facet's name to its output type.\nFor example, the `FilePath` pf the generated static library for the `static` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `library_data`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.LeanLibData\"><span class=\"name\">Lake</span>.<span class=\"name\">LeanLibData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L109-L116","name":"Lake.LibraryData","line":109,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.LibraryData","doc":"The open type family which maps a Lean library facet's name to its output type.\nFor example, the `FilePath` pf the generated static library for the `static` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `library_data`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.LibraryData\"><span class=\"name\">Lake</span>.<span class=\"name\">LibraryData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L100-L107","name":"Lake.PackageData","line":100,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.PackageData","doc":"The open type family which maps a package facet's name to output type.\nFor example, an `Arrry Package` of direct dependencies for the `deps` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `package_data`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.PackageData\"><span class=\"name\">Lake</span>.<span class=\"name\">PackageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L91-L98","name":"Lake.ModuleData","line":91,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.ModuleData","doc":"The open type family which maps a module facet's name to its output type.\nFor example, a `FilePath` for the module `olean` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `module_data`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.ModuleData\"><span class=\"name\">Lake</span>.<span class=\"name\">ModuleData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L88-L89","name":"Lake.instFamilyDefNameFacetOutHAppendOfFacetData","line":88,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameFacetOutHAppendOfFacetData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameFacetOutHAppendOfFacetData\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameFacetOutHAppendOfFacetData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">kind </span><span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.FacetData\">FacetData</a> <span class=\"fn\">kind</span>)</span> <span class=\"fn\">facet</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.FacetOut\">FacetOut</a> (<span class=\"fn\">kind</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">facet</span>) <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L85-L86","name":"Lake.instFamilyDefNameFacetDataOfFacetOutHAppend","line":85,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instFamilyDefNameFacetDataOfFacetOutHAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instFamilyDefNameFacetDataOfFacetOutHAppend\"><span class=\"name\">Lake</span>.<span class=\"name\">instFamilyDefNameFacetDataOfFacetOutHAppend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">kind </span><span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <a href=\"./Lake/Build/Data.html#Lake.FacetOut\">FacetOut</a> (<span class=\"fn\">kind</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">facet</span>) <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyDef\">FamilyDef</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.FacetData\">FacetData</a> <span class=\"fn\">kind</span>)</span> <span class=\"fn\">facet</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L76-L83","name":"Lake.FacetData","line":76,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.FacetData","doc":"The open type family which maps a Lake facet kind and name to its output type.\nFor example, a `FilePath` for the `module` `olean` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `facet_data`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.FacetData\"><span class=\"name\">Lake</span>.<span class=\"name\">FacetData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind </span><span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L67-L74","name":"Lake.FacetOut","line":67,"kind":"opaque","docLink":"./Lake/Build/Data.html#Lake.FacetOut","doc":"The open type family which maps a Lake facet to its output type.\nFor example, a `FilePath` for the `module.olean` facet.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `facet_data`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.FacetOut\"><span class=\"name\">Lake</span>.<span class=\"name\">FacetOut</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facet</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L65-L65","name":"Lake.TargetData","line":65,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.TargetData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.TargetData\"><span class=\"name\">Lake</span>.<span class=\"name\">TargetData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L63-L63","name":"Lake.instToStringOptDataKind","line":63,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instToStringOptDataKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instToStringOptDataKind\"><span class=\"name\">Lake</span>.<span class=\"name\">instToStringOptDataKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L62-L62","name":"Lake.instCoeOutOptDataKindName","line":62,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instCoeOutOptDataKindName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instCoeOutOptDataKindName\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeOutOptDataKindName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L58-L60","name":"Lake.instOptDataKindOfDataKind","line":58,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instOptDataKindOfDataKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instOptDataKindOfDataKind\"><span class=\"name\">Lake</span>.<span class=\"name\">instOptDataKindOfDataKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L54-L56","name":"Lake.OptDataKind.eq_data_type","line":54,"kind":"theorem","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.eq_data_type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.eq_data_type\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">eq_data_type</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Lake/Build/Data.html#Lake.OptDataKind.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind.name\">name</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L51-L52","name":"Lake.OptDataKind.isAnonymous","line":51,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.isAnonymous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.isAnonymous\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">isAnonymous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L49-L49","name":"Lake.instInhabitedOptDataKind","line":49,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.instInhabitedOptDataKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.instInhabitedOptDataKind\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedOptDataKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L44-L47","name":"Lake.OptDataKind.anonymous","line":44,"kind":"instance","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.anonymous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.anonymous\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">anonymous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L42-L42","name":"Lake.OptDataKind.wf","line":42,"kind":"theorem","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.wf","doc":"Proof that `α` is the data type described by `name` (if valid). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.wf\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind.name\">name</a> <span class=\"fn\">α</span>)</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.OptDataKind.name\">name</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L40-L40","name":"Lake.OptDataKind.name","line":40,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.name","doc":"The name which describes `α` (or `Name.anonymous` if none). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.name\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L38-L38","name":"Lake.OptDataKind.mk","line":38,"kind":"ctor","docLink":"./Lake/Build/Data.html#Lake.OptDataKind.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wf</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">name</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">name</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.OptDataKind\">OptDataKind</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L34-L42","name":"Lake.OptDataKind","line":34,"kind":"class","docLink":"./Lake/Build/Data.html#Lake.OptDataKind","doc":"Tries to synthesize a `Name` descriptor of a data type.\nOtherwise uses `Name.anonymous` to indicate none was found.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.OptDataKind\"><span class=\"name\">Lake</span>.<span class=\"name\">OptDataKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L32-L32","name":"Lake.DataKind.wf","line":32,"kind":"theorem","docLink":"./Lake/Build/Data.html#Lake.DataKind.wf","doc":"Proof that `α` is the data type described by `name`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataKind.wf\"><span class=\"name\">Lake</span>.<span class=\"name\">DataKind</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.DataKind.name\">name</a> <span class=\"fn\">α</span>)</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">(<a href=\"./Lake/Build/Data.html#Lake.DataKind.name\">name</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L30-L30","name":"Lake.DataKind.name","line":30,"kind":"def","docLink":"./Lake/Build/Data.html#Lake.DataKind.name","doc":"The name which describes `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataKind.name\"><span class=\"name\">Lake</span>.<span class=\"name\">DataKind</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L28-L28","name":"Lake.DataKind.mk","line":28,"kind":"ctor","docLink":"./Lake/Build/Data.html#Lake.DataKind.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataKind.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">DataKind</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wf</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">name</span>.<a href=\"./Lean/Data/Name.html#Lean.Name.isAnonymous\">isAnonymous</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataType\">DataType</a> <span class=\"fn\">name</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Build/Data.html#Lake.DataKind\">DataKind</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L27-L32","name":"Lake.DataKind","line":27,"kind":"class","docLink":"./Lake/Build/Data.html#Lake.DataKind","doc":"A `Name` descriptor of a data type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataKind\"><span class=\"name\">Lake</span>.<span class=\"name\">DataKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Build/Data.lean#L18-L25","name":"Lake.DataType","line":18,"kind":"opaque","docLink":"./Lake/Build/Data.html#Lake.DataType","doc":"The open type family which maps a Lake data kind to its associated type.\nFor example, `LeanLib.facetKind` maps to `LeanLib`.\n\nIt is an open type, meaning additional mappings can be add lazily\nas needed (via `data_type`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Build/Data.html#Lake.DataType\"><span class=\"name\">Lake</span>.<span class=\"name\">DataType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}