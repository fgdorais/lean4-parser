{"name":"Lean.Elab.PreDefinition.EqUnfold","instances":[],"imports":["Lean.Meta.Eqns","Lean.Meta.Tactic.Util","Lean.Meta.Tactic.Rfl","Lean.Meta.Tactic.Intro","Lean.Meta.Tactic.Apply"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/EqUnfold.lean#L20-L55","name":"Lean.Meta.getConstUnfoldEqnFor?","line":20,"kind":"def","docLink":"./Lean/Elab/PreDefinition/EqUnfold.html#Lean.Meta.getConstUnfoldEqnFor?","doc":"Returns the \"const unfold\" theorem (`f.eq_unfold`) for the given declaration.\nThis is not extensible, and always builds on the unfold theorem (`f.eq_def`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/EqUnfold.html#Lean.Meta.getConstUnfoldEqnFor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getConstUnfoldEqnFor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/EqUnfold.lean#L15-L18","name":"Lean.Meta.tryURefl","line":15,"kind":"def","docLink":"./Lean/Elab/PreDefinition/EqUnfold.html#Lean.Meta.tryURefl","doc":"Try to close goal using `rfl` with smart unfolding turned off. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/EqUnfold.html#Lean.Meta.tryURefl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">tryURefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}