{"name":"Lean.Meta.Tactic.Lets","instances":[{"typeNames":["Lean.Meta.ExtractLets.State"],"name":"Lean.Meta.ExtractLets.instInhabitedState","className":"Inhabited"}],"imports":["Lean.Meta.Tactic.Replace"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L414-L437","name":"Lean.MVarId.liftLetsLocalDecl","line":414,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.liftLetsLocalDecl","doc":"Like `Lean.MVarId.liftLets` but lifts lets in a local declaration.\nIf the local declaration has a value, then both its type and value are modified.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.liftLetsLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">liftLetsLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\">Meta.LiftLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L399-L412","name":"Lean.MVarId.liftLets","line":399,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.liftLets","doc":"Lifts `let` and `letFun` expressions in target as far out as possible.\nThrows an exception if nothing is lifted.\n\nLike `Lean.MVarId.extractLets`, but top-level lets are not added to the local context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.liftLets\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">liftLets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\">Meta.LiftLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L371-L397","name":"Lean.MVarId.extractLetsLocalDecl","line":371,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.extractLetsLocalDecl","doc":"Like `Lean.MVarId.extractLets` but extracts lets from a local declaration.\nIf the local declaration has a value, then both its type and value are modified.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.extractLetsLocalDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">extractLetsLocalDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">Meta.ExtractLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> ((<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>) <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L351-L369","name":"Lean.MVarId.extractLets","line":351,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.extractLets","doc":"Extracts `let` and `letFun` expressions from the target,\nreturning `FVarId`s for the extracted let declarations along with the new goal.\n- The `givenNames` is a list of explicit names to use for extracted local declarations.\n  If a name is `_` (or if there is no provided given name and `config.onlyGivenNames` is true) then uses a hygienic name\n  based on the existing binder name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.MVarId.extractLets\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">extractLets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">Meta.ExtractLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> ((<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>) <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L339-L344","name":"Lean.Meta.liftLets","line":339,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.liftLets","doc":"Lifts `let` and `letFun` expressions in the given expression as far out as possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.liftLets\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">liftLets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\">LiftLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L328-L337","name":"Lean.Meta.extractLets","line":328,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.extractLets","doc":"Extracts `let` and `letFun` expressions into local definitions,\nevaluating `k` at the post-extracted expressions and the extracted fvarids, within a context containing those local declarations.\n- The `givenNames` is a list of explicit names to use for extracted local declarations.\n  If a name is `_` (or if there is no provided given name and `config.onlyGivenNames` is true) then uses a hygienic name\n  based on the existing binder name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.extractLets\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">extractLets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">{</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L304-L311","name":"Lean.Meta.ExtractLets.extract","line":304,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extract","doc":"Main entry point for extracting lets.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extract\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L300-L302","name":"Lean.Meta.ExtractLets.extractTopLevel","line":300,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractTopLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractTopLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extractTopLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L284-L298","name":"Lean.Meta.ExtractLets.extractCore.extractApp","line":284,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore.extractApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore.extractApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extractCore</span>.<span class=\"name\">extractApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L275-L283","name":"Lean.Meta.ExtractLets.extractCore.extractLetFun","line":275,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore.extractLetFun","doc":"`e` is the letFun expression "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore.extractLetFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extractCore</span>.<span class=\"name\">extractLetFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">topLevel</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L253-L273","name":"Lean.Meta.ExtractLets.extractCore.extractLetLike","line":253,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore.extractLetLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore.extractLetLike\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extractCore</span>.<span class=\"name\">extractLetLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">v </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">topLevel</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L240-L252","name":"Lean.Meta.ExtractLets.extractCore.extractBinder","line":240,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore.extractBinder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore.extractBinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extractCore</span>.<span class=\"name\">extractBinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L197-L298","name":"Lean.Meta.ExtractLets.extractCore","line":197,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore","doc":"Extracts lets from `e`.\n- `fvars` is an array of all the local variables from going under binders,\n  used to detect whether an expression is extractable. Extracted `let`s do not have their fvarids in this list.\n  This is not part of the cache key since it's an optimization and in principle derivable.\n- `topLevel` is whether we are still looking at the top-level expression.\n  The body of an extracted top-level let is also considered to be top-level.\n  This is part of the cache key since it affects what is extracted.\n\nNote: the return value may refer to fvars that are not in the current local context, but they are in the `decls` list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extractCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">topLevel</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L189-L195","name":"Lean.Meta.ExtractLets.containsLet","line":189,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.containsLet","doc":"Returns `true` if the expression contains a `let` expression or a `letFun`\n(this does not verify that the `letFun`s are well-formed).\nIts purpose is to be a check for whether a subexpression can be skipped.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.containsLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">containsLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L178-L187","name":"Lean.Meta.ExtractLets.initializeValueMap","line":178,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.initializeValueMap","doc":"Initializes the `valueMap` with all the local definitions that aren't implementation details.\nUsed for `merge` feature when `useContext` is enabled.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.initializeValueMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">initializeValueMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L161-L176","name":"Lean.Meta.ExtractLets.withDeclInContext","line":161,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.withDeclInContext","doc":"Ensures that the given `fvarId` is in context by adding `decls` from the state.\nSimplification: since we are not recording which decls depend on which, but we do know all dependencies\ncome before a particular decl, we add all the decls up to and including `fvarId`.\n\nUsed for `merge` feature.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.withDeclInContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">withDeclInContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L151-L159","name":"Lean.Meta.ExtractLets.ensureIsLet","line":151,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.ensureIsLet","doc":"Makes sure the declaration for `fvarId` is marked with `isLet := true`.\nUsed in `lift + merge` mode to ensure that, after merging, if any version was a `let` then it's a `let` rather than a `letFun`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.ensureIsLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">ensureIsLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L133-L149","name":"Lean.Meta.ExtractLets.mkLetDecls","line":133,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.mkLetDecls","doc":"Closes all the local declarations in `e`, creating `let` and `letFun` expressions.\nDoes not require that any of the declarations are in context.\nAssumes that `e` contains no metavariables with local contexts that contain any of these metavariables\n(the extraction procedure creates no new metavariables, so this is the case).\n\nThis should *not* be used when closing lets for new goal metavariables, since\n1. The goal contains the decls in its local context, violating the assumption.\n2. We need to use true `let`s in that case, since tactics may zeta-delta reduce these declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.mkLetDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">mkLetDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L125-L131","name":"Lean.Meta.ExtractLets.withEnsuringDeclsInContext","line":125,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.withEnsuringDeclsInContext","doc":"Ensures that the given local declarations are in context. Runs `k` in that context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.withEnsuringDeclsInContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">withEnsuringDeclsInContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.MonadLCtx\">MonadLCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L108-L123","name":"Lean.Meta.ExtractLets.flushDecls","line":108,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.flushDecls","doc":"Removes and returns all local declarations that (transitively) depend on `fvar`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.flushDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">flushDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L98-L106","name":"Lean.Meta.ExtractLets.addDecl","line":98,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.addDecl","doc":"Adds the `decl` to the `decls` list. Assumes that `decl` is an ldecl.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.addDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">addDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L84-L96","name":"Lean.Meta.ExtractLets.isExtractableLet","line":84,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.isExtractableLet","doc":"Returns whether a let-like expression with the given type and value is extractable,\ngiven the list `fvars` of binders that inhibit extraction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.isExtractableLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">isExtractableLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">v</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L78-L82","name":"Lean.Meta.ExtractLets.extractable","line":78,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractable","doc":"Returns 'true' if `e` does not depend on any of the fvars in `fvars`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.extractable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">extractable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L59-L76","name":"Lean.Meta.ExtractLets.nextNameForBinderName?","line":59,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.nextNameForBinderName?","doc":"Generate a name to use for a new local declaration, derived possibly from the given binder name.\nReturns `none` iff `hasNextName` is false.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.nextNameForBinderName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">nextNameForBinderName?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L51-L57","name":"Lean.Meta.ExtractLets.nextName?","line":51,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.nextName?","doc":"Gets the next name to use for extracted `let`s "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.nextName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">nextName?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L47-L49","name":"Lean.Meta.ExtractLets.hasNextName","line":47,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.hasNextName","doc":"Returns `true` if `nextName?` would return a name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.hasNextName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">hasNextName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L45-L45","name":"Lean.Meta.ExtractLets.M","line":45,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L42-L42","name":"Lean.Meta.ExtractLets.instInhabitedState","line":42,"kind":"instance","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L41-L41","name":"Lean.Meta.ExtractLets.State.valueMap","line":41,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.valueMap","doc":"Map from `let` values to fvars. To support the `merge` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.valueMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">State</span>.<span class=\"name\">valueMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprStructMap\">ExprStructMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L39-L39","name":"Lean.Meta.ExtractLets.State.decls","line":39,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.decls","doc":"Saved declarations for the extracted `let`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">State</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L37-L37","name":"Lean.Meta.ExtractLets.State.givenNames","line":37,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.givenNames","doc":"Names to use for local definitions for the extracted lets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.givenNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">State</span>.<span class=\"name\">givenNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L35-L35","name":"Lean.Meta.ExtractLets.State.mk","line":35,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">valueMap</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprStructMap\">ExprStructMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L35-L42","name":"Lean.Meta.ExtractLets.State","line":35,"kind":"structure","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L33-L33","name":"Lean.Meta.ExtractLets.LocalDecl'.isLet","line":33,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.isLet","doc":"If true, is a `let`, if false, is a `letFun`.\nUsed in `lift` mode.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.isLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">LocalDecl'</span>.<span class=\"name\">isLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L28-L28","name":"Lean.Meta.ExtractLets.LocalDecl'.decl","line":28,"kind":"def","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.decl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">LocalDecl'</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L27-L27","name":"Lean.Meta.ExtractLets.LocalDecl'.mk","line":27,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">LocalDecl'</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\">LocalDecl'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Lets.lean#L27-L33","name":"Lean.Meta.ExtractLets.LocalDecl'","line":27,"kind":"structure","docLink":"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Lets.html#Lean.Meta.ExtractLets.LocalDecl'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLets</span>.<span class=\"name\">LocalDecl'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}