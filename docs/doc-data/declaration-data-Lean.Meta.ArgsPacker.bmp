{"name":"Lean.Meta.ArgsPacker","instances":[],"imports":["Lean.Meta.AppBuilder","Lean.Meta.PProdN","Lean.Meta.ArgsPacker.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L582-L611","name":"Lean.Meta.ArgsPacker.curryParam","line":582,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryParam","doc":"Given `value : type` where `type` is\n```\n(m : (x : a ⊗' b ⊕' c ⊗' d) → s[x]) → r[m]\n```\nbrings `m1 : (x : a) → (y : b) → s[.inl ⟨x,y⟩]` and `m2 : (x : c) → (y : d) → s[.inr ⟨x,y⟩]` into scope. The continuation receives\n\n * FVars for `m1`…\n * `e[m]`\n * `t[m]`\n\nwhere `m : a ⊗' b ⊕' c ⊗' d → s` is the uncurried form of `m1` and `m2`.\n\nThe variable names `m1` and `m2` are taken from the parameter name in `t`, with numbers added\nunless `numFuns = 1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curryParam</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value </span><span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L553-L564","name":"Lean.Meta.ArgsPacker.curry","line":553,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curry","doc":"Given expression `e` of type `(x : a ⊗' b ⊕' c ⊗' d) → e[x]`, wraps that expression\nto produce an expression of the isomorphic type\n```\n((x: a) → (y : b) → e[.inl (x,y)]) ∧ ((x : c) → (y : d) → e[.inr (x,y)])\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L543-L551","name":"Lean.Meta.ArgsPacker.curryType","line":543,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryType","doc":"Given type `(x : a ⊗' b ⊕' c ⊗' d) → R` (dependent), return types\n```\n#[(x: a) → (y : b) → R, (x : c) → (y : d) → R]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L518-L540","name":"Lean.Meta.ArgsPacker.curryProj","line":518,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryProj","doc":"Given expression `e` of type `(x : a₁ ⊗' b₁ ⊕' a₂ ⊗' d₂ …) → e[x]`, uncurries the expression and\nprojects to the `i`th function of type,\n```\n((x : aᵢ) → (y : bᵢ) → e[.inr….inl (x,y)])\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.curryProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">curryProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L507-L516","name":"Lean.Meta.ArgsPacker.uncurryND","line":507,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryND","doc":"Given expressions `e₁`, `e₂` with types `(x : A) → (y : B[x]) → R`\nand `(z : C) → R`, returns an expression of type\n```\n(x : (A ⊗ B) ⊕ C) → R\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryND\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurryND</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L503-L505","name":"Lean.Meta.ArgsPacker.uncurryWithType","line":503,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryWithType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryWithType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurryWithType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L492-L501","name":"Lean.Meta.ArgsPacker.uncurry","line":492,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurry","doc":"Given expressions `e₁`, `e₂` with types `(x : A) → (y : B[x]) → R₁[x,y]`\nand `(z : C) → R₂[z]`, returns an expression of type\n```\n(x : (A ⊗ B) ⊕ C) → (match x with | .inl (x, y) => R₁[x,y] | .inr R₂[z]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L482-L490","name":"Lean.Meta.ArgsPacker.uncurryType","line":482,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryType","doc":"Given types `(x : A) → (y : B[x]) → R₁[x,y]` and `(z : C) → R₂[z]`, returns the type uncurried type\n```\n(x : (A ⊗ B) ⊕ C) → (match x with | .inl (x, y) => R₁[x,y] | .inr R₂[z]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.uncurryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">uncurryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L469-L480","name":"Lean.Meta.ArgsPacker.unpack","line":469,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.unpack","doc":"Given the packed argument of a (possibly) mutual and (possibly) nary call,\nreturn the function index that is called and the arguments individually.\n\nWe expect precisely the expressions produced by `pack`, with manifest\n`PSum.inr`, `PSum.inl` and `PSigma.mk` constructors, and thus take them apart\nrather than using projections.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.unpack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">unpack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L461-L467","name":"Lean.Meta.ArgsPacker.pack","line":461,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.pack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.pack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">pack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">domain</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fidx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L457-L459","name":"Lean.Meta.ArgsPacker.onlyOneUnary","line":457,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.onlyOneUnary","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.onlyOneUnary\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">onlyOneUnary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L454-L455","name":"Lean.Meta.ArgsPacker.arities","line":454,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.arities","doc":"The arities of the functions being packed "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.arities\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">arities</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L451-L452","name":"Lean.Meta.ArgsPacker.numFuncs","line":451,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.numFuncs","doc":"The number of functions being packed "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.numFuncs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">numFuncs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argsPacker</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L438-L445","name":"Lean.Meta.ArgsPacker.Mutual.curryType","line":438,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.curryType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.curryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">curryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L417-L430","name":"Lean.Meta.ArgsPacker.Mutual.uncurryND","line":417,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryND","doc":"Given unary expressions `e₁`, `e₂` with types `(x : A) → R`\nand `(z : C) → R`, returns an expression of type\n```\n(x : A ⊕' C) → R\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryND\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryND</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L412-L415","name":"Lean.Meta.ArgsPacker.Mutual.uncurry","line":412,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L399-L410","name":"Lean.Meta.ArgsPacker.Mutual.uncurryWithType","line":399,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryWithType","doc":"Given unary expressions `e₁`, `e₂` with types `(x : A) → R₁[x]`\nand `(z : C) → R₂[z]`, returns an expression of type\n```\n(x : A ⊕' C) → (match x with | .inl x => R₁[x] | .inr R₂[z])\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryWithType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryWithType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L358-L370","name":"Lean.Meta.ArgsPacker.Mutual.uncurryTypeND","line":358,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryTypeND","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryTypeND\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryTypeND</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L340-L350","name":"Lean.Meta.ArgsPacker.Mutual.uncurryType","line":340,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.uncurryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">uncurryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L309-L324","name":"Lean.Meta.ArgsPacker.Mutual.mkCodomain.go","line":309,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.mkCodomain.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.mkCodomain.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">mkCodomain</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L300-L326","name":"Lean.Meta.ArgsPacker.Mutual.mkCodomain","line":300,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.mkCodomain","doc":"Given unary types `(x : Aᵢ) → Rᵢ[x]`, and `(x : A₁ ⊕ A₂ …)`, calculate the packed codomain\n```\nmatch x with | inl x₁ => R₁[x₁] | inr x₂ => R₂[x₂] | …\n```\nThis function assumes (and does not check) that `Rᵢ` all have the same level.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.mkCodomain\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">mkCodomain</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">types</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L279-L297","name":"Lean.Meta.ArgsPacker.Mutual.unpack","line":279,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.unpack","doc":"Unpacks a mutually packed argument created with `Mutual.mk` returning the\nargument and function index.\n\nThrows an error if the expression is not of that form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.unpack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">unpack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numFuncs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L265-L275","name":"Lean.Meta.ArgsPacker.Mutual.pack.go","line":265,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.pack.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.pack.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">pack</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numFuncs </span><span class=\"fn\">fidx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L259-L277","name":"Lean.Meta.ArgsPacker.Mutual.pack","line":259,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.pack","doc":"If `arg` is the argument to the `fidx`th of the `argsPacker.numFuncs` in the recursive group,\nthen `mk` packs that argument in `PSum.inl` and `PSum.inr` constructors\nto create the mutual-packed argument of type `domain`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.pack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">pack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numFuncs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">domain</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fidx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L242-L247","name":"Lean.Meta.ArgsPacker.Mutual.packType","line":242,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.packType","doc":"Given types `#[t₁, t₂,…]`, returns the type `t₁ ⊕' t₂ …`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Mutual.packType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Mutual</span>.<span class=\"name\">packType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L163-L177","name":"Lean.Meta.ArgsPacker.Unary.uncurry","line":163,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurry","doc":"Given expression `e` of type `(x : A) → (y : B[x]) → … → (z : D[x,y]) → R[x,y,z]`\nreturns an expression of type `(x : A ⊗' B ⊗' … ⊗' D) → R[x.1, x.2.1, x.2.2]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">uncurry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L123-L138","name":"Lean.Meta.ArgsPacker.Unary.uncurryType","line":123,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurryType","doc":"Given a type `t` of the form `(x : A) → (y : B[x]) → … → (z : D[x,y]) → R[x,y,z]`\nreturns the curried type `(x : A ⊗' B ⊗' … ⊗' D) → R[x.1, x.2.1, x.2.2]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.uncurryType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">uncurryType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L91-L107","name":"Lean.Meta.ArgsPacker.Unary.unpack","line":91,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.unpack","doc":"Unpacks a unary packed argument created with `Unary.pack`.\n\nThrows an error if the expression is not of that form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.unpack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">unpack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L77-L89","name":"Lean.Meta.ArgsPacker.Unary.pack.go","line":77,"kind":"opaque","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.pack.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.pack.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">pack</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L67-L89","name":"Lean.Meta.ArgsPacker.Unary.pack","line":67,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.pack","doc":"Create a unary application by packing the given arguments using `PSigma.mk`.\nThe `type` should be the expected type of the packed argument, as created with `packType`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.pack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">pack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker.lean#L58-L64","name":"Lean.Meta.ArgsPacker.Unary.packType","line":58,"kind":"def","docLink":"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.packType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker.html#Lean.Meta.ArgsPacker.Unary.packType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">Unary</span>.<span class=\"name\">packType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}