{"name":"Batteries.Lean.Float","instances":[],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Float.lean#L95-L102","name":"Int.divFloat","line":95,"kind":"def","docLink":"./Batteries/Lean/Float.html#Int.divFloat","doc":"Divide two integers, to produce a correctly rounded (nearest-ties-to-even) `Float` result.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Int.divFloat\"><span class=\"name\">Int</span>.<span class=\"name\">divFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Float.lean#L77-L93","name":"Nat.divFloat","line":77,"kind":"def","docLink":"./Batteries/Lean/Float.html#Nat.divFloat","doc":"Divide two natural numbers, to produce a correctly rounded (nearest-ties-to-even) `Float` result.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Nat.divFloat\"><span class=\"name\">Nat</span>.<span class=\"name\">divFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Float.lean#L56-L73","name":"Float.toStringFull","line":56,"kind":"def","docLink":"./Batteries/Lean/Float.html#Float.toStringFull","doc":"Converts `f` to a string, including all decimal digits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.toStringFull\"><span class=\"name\">Float</span>.<span class=\"name\">toStringFull</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Float.lean#L53-L54","name":"Float.toRatParts'.trailingZeros","line":53,"kind":"opaque","docLink":"./Batteries/Lean/Float.html#Float.toRatParts'.trailingZeros","doc":"Calculates the number of trailing bits in a `UInt64`. Requires `v ≠ 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.toRatParts'.trailingZeros\"><span class=\"name\">Float</span>.<span class=\"name\">toRatParts'</span>.<span class=\"name\">trailingZeros</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Float.lean#L36-L54","name":"Float.toRatParts'","line":36,"kind":"def","docLink":"./Batteries/Lean/Float.html#Float.toRatParts'","doc":"Returns `v, exp` integers such that `f = v * 2^exp`.\nLike `toRatParts`, but `e` is guaranteed to be minimal (`n` is always odd), unless `n = 0`.\n`n.abs` will be at most `2^53 - 1` because `Float` has 53 bits of precision.\nReturns `none` when `f` is not finite (i.e. `inf`, `-inf` or a `nan`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.toRatParts'\"><span class=\"name\">Float</span>.<span class=\"name\">toRatParts'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Float.lean#L22-L34","name":"Float.toRatParts","line":22,"kind":"def","docLink":"./Batteries/Lean/Float.html#Float.toRatParts","doc":"Returns `v, exp` integers such that `f = v * 2^exp`.\n(`e` is not minimal, but `v.abs` will be at most `2^53 - 1`.)\nReturns `none` when `f` is not finite (i.e. `inf`, `-inf` or a `nan`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.toRatParts\"><span class=\"name\">Float</span>.<span class=\"name\">toRatParts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Float.html#Float\">Float</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Float.lean#L15-L20","name":"Float.nan","line":15,"kind":"def","docLink":"./Batteries/Lean/Float.html#Float.nan","doc":"The floating point value \"not a number\", used to represent erroneous numerical computations\nsuch as `0 / 0`. Using `nan` in any float operation will return `nan`, and all comparisons\ninvolving `nan` return `false`, including in particular `nan == nan`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.nan\"><span class=\"name\">Float</span>.<span class=\"name\">nan</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Float.lean#L9-L13","name":"Float.inf","line":9,"kind":"def","docLink":"./Batteries/Lean/Float.html#Float.inf","doc":"The floating point value \"positive infinity\", also used to represent numerical computations\nwhich produce finite values outside of the representable range of `Float`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Float.html#Float.inf\"><span class=\"name\">Float</span>.<span class=\"name\">inf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#Float\">Float</a></div></div>"}]}