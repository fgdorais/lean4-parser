{"name":"Batteries.Linter.UnnecessarySeqFocus","instances":[],"imports":["Init","Lean.Elab.Command","Lean.Linter.Util","Batteries.Lean.AttributeExtra"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L150-L170","name":"Batteries.Linter.UnnecessarySeqFocus.unnecessarySeqFocusLinter","line":150,"kind":"def","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.unnecessarySeqFocusLinter","doc":"Enables the 'unnecessary `<;>`' linter. This will warn whenever the `<;>` tactic combinator\nis used when `;` would work.\n\n```\nexample : True := by apply id <;> trivial\n```\nThe `<;>` is unnecessary here because `apply id` only makes one subgoal.\nPrefer `apply id; trivial` instead.\n\nIn some cases, the `<;>` is syntactically necessary because a single tactic is expected:\n```\nexample : True := by\n  cases () with apply id <;> apply id\n  | unit => trivial\n```\nIn this case, you should use parentheses, as in `(apply id; apply id)`:\n```\nexample : True := by\n  cases () with (apply id; apply id)\n  | unit => trivial\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.unnecessarySeqFocusLinter\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">unnecessarySeqFocusLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L118-L146","name":"Batteries.Linter.UnnecessarySeqFocus.markUsedTactics","line":118,"kind":"opaque","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.markUsedTactics","doc":"Search for tactic executions in the info tree and remove executed tactic syntaxes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.markUsedTactics\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">markUsedTactics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a> → <span class=\"fn\"><a href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.M\">M</a> <span class=\"fn\">ω</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L114-L116","name":"Batteries.Linter.UnnecessarySeqFocus.markUsedTacticsList","line":114,"kind":"opaque","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.markUsedTacticsList","doc":"Search for tactic executions in the info tree and remove executed tactic syntaxes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.markUsedTacticsList\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">markUsedTacticsList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trees</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.M\">M</a> <span class=\"fn\">ω</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L101-L110","name":"Batteries.Linter.UnnecessarySeqFocus.getPath","line":101,"kind":"def","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.getPath","doc":"Traverse the info tree down a given path.\nEach `(n, i)` means that the array must have length `n` and we will descend into the `i`'th child.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.getPath\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">getPath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">Lean.PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Lean.Elab.InfoTree</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) × <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Lean.Elab.Info</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L92-L99","name":"Batteries.Linter.UnnecessarySeqFocus.getTactics","line":92,"kind":"opaque","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.getTactics","doc":"Accumulates the set of tactic syntaxes that should be evaluated at least once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.getTactics\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">getTactics</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.M\">M</a> <span class=\"fn\">ω</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L88-L90","name":"Batteries.Linter.UnnecessarySeqFocus.isSeqFocus","line":88,"kind":"def","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.isSeqFocus","doc":"True if this is a `<;>` node in either `tactic` or `conv` classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.isSeqFocus\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">isSeqFocus</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L85-L86","name":"Batteries.Linter.UnnecessarySeqFocus.M","line":85,"kind":"def","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.M","doc":"The monad for collecting used tactic syntaxes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.M\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ω </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L83-L83","name":"Batteries.Linter.UnnecessarySeqFocus.Entry.used","line":83,"kind":"def","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry.used","doc":"* `true`: this `<;>` has been used unnecessarily at least once\n* `false`: it has never been executed\n* If it has been used properly at least once, the entry is removed from the table.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry.used\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">Entry</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L77-L77","name":"Batteries.Linter.UnnecessarySeqFocus.Entry.stx","line":77,"kind":"def","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry.stx","doc":"The `<;>` node itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry.stx\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">Entry</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L75-L75","name":"Batteries.Linter.UnnecessarySeqFocus.Entry.mk","line":75,"kind":"ctor","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">Entry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">used</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry\">Entry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L74-L83","name":"Batteries.Linter.UnnecessarySeqFocus.Entry","line":74,"kind":"structure","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry","doc":"The information we record for each `<;>` node appearing in the syntax. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.Entry\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">Entry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L50-L72","name":"Batteries.Linter.UnnecessarySeqFocus.multigoalAttr","line":50,"kind":"opaque","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.multigoalAttr","doc":"The `multigoal` attribute keeps track of tactics that operate on multiple goals,\nmeaning that `tac` acts differently from `focus tac`. This is used by the\n'unnecessary `<;>`' linter to prevent false positives where `tac <;> tac'` cannot\nbe replaced by `(tac; tac')` because the latter would expose `tac` to a different set of goals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.multigoalAttr\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">multigoalAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Lean/AttributeExtra.html#Lean.TagAttributeExtra\">Lean.TagAttributeExtra</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L46-L48","name":"Batteries.Linter.UnnecessarySeqFocus.getLinterUnnecessarySeqFocus","line":46,"kind":"def","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.getLinterUnnecessarySeqFocus","doc":"Gets the value of the `linter.unnecessarySeqFocus` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.UnnecessarySeqFocus.getLinterUnnecessarySeqFocus\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnnecessarySeqFocus</span>.<span class=\"name\">getLinterUnnecessarySeqFocus</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Lean.Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Linter/UnnecessarySeqFocus.lean#L13-L39","name":"Batteries.Linter.linter.unnecessarySeqFocus","line":13,"kind":"opaque","docLink":"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.linter.unnecessarySeqFocus","doc":"Enables the 'unnecessary `<;>`' linter. This will warn whenever the `<;>` tactic combinator\nis used when `;` would work.\n\n```\nexample : True := by apply id <;> trivial\n```\nThe `<;>` is unnecessary here because `apply id` only makes one subgoal.\nPrefer `apply id; trivial` instead.\n\nIn some cases, the `<;>` is syntactically necessary because a single tactic is expected:\n```\nexample : True := by\n  cases () with apply id <;> apply id\n  | unit => trivial\n```\nIn this case, you should use parentheses, as in `(apply id; apply id)`:\n```\nexample : True := by\n  cases () with (apply id; apply id)\n  | unit => trivial\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Linter/UnnecessarySeqFocus.html#Batteries.Linter.linter.unnecessarySeqFocus\"><span class=\"name\">Batteries</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">unnecessarySeqFocus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}