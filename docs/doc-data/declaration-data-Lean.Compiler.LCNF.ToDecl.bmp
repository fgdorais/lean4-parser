{"name":"Lean.Compiler.LCNF.ToDecl","instances":[],"imports":["Lean.Meta.Transform","Lean.Meta.Match.MatcherInfo","Lean.Compiler.ExternAttr","Lean.Compiler.InitAttr","Lean.Compiler.ImplementedByAttr","Lean.Compiler.LCNF.ToLCNF"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ToDecl.lean#L89-L147","name":"Lean.Compiler.LCNF.toDecl","line":89,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.toDecl","doc":"Convert the given declaration from the Lean environment into `Decl`.\nThe steps for this are roughly:\n- partially erasing type information of the declaration\n- eta-expanding the declaration value.\n- if the declaration has an unsafe-rec version, use it.\n- expand declarations tagged with the `[macro_inline]` attribute\n- turn the resulting term into LCNF declaration\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.toDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">toDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ToDecl.lean#L80-L87","name":"Lean.Compiler.LCNF.getDeclInfo?","line":80,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.getDeclInfo?","doc":"Return the declaration `ConstantInfo` for the code generator.\n\nRemark: the unsafe recursive version is tried first.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.getDeclInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getDeclInfo?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ToDecl.lean#L54-L64","name":"Lean.Compiler.LCNF.inlineMatchers.inlineMatcher","line":54,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.inlineMatchers.inlineMatcher","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.inlineMatchers.inlineMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">inlineMatchers</span>.<span class=\"name\">inlineMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.Match.MatcherInfo\">Meta.MatcherInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args </span><span class=\"fn\">letFVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ToDecl.lean#L37-L65","name":"Lean.Compiler.LCNF.inlineMatchers","line":37,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.inlineMatchers","doc":"Inline auxiliary `matcher` applications.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.inlineMatchers\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">inlineMatchers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ToDecl.lean#L15-L23","name":"Lean.Compiler.LCNF.macroInline","line":15,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.macroInline","doc":"Inline constants tagged with the `[macro_inline]` attribute occurring in `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToDecl.html#Lean.Compiler.LCNF.macroInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">macroInline</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}