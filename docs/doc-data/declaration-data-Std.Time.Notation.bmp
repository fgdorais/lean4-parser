{"name":"Std.Time.Notation","instances":[],"imports":["Std.Time.Date","Std.Time.Time","Std.Time.Zoned","Std.Time.DateTime","Std.Time.Format"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Notation.lean#L197-L204","name":"Std.Time.«termTimezone(_)»","line":197,"kind":"def","docLink":"./Std/Time/Notation.html#Std.Time.«termTimezone(_)»","doc":"Defines a syntax for timezone identifiers. The input string should be a valid timezone name or\nabbreviation.\n\nExample:\n`timezone(\"America/Sao_Paulo\")`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Notation.html#Std.Time.«termTimezone(_)»\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">«termTimezone(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Notation.lean#L188-L195","name":"Std.Time.«termOffset(_)»","line":188,"kind":"def","docLink":"./Std/Time/Notation.html#Std.Time.«termOffset(_)»","doc":"Defines a syntax for UTC offset values. The string should indicate the time difference from UTC\n(e.g., \"-03:00\").\n\nExample:\n`offset(\"-03:00\")`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Notation.html#Std.Time.«termOffset(_)»\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">«termOffset(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Notation.lean#L179-L186","name":"Std.Time.«termTime(_)»","line":179,"kind":"def","docLink":"./Std/Time/Notation.html#Std.Time.«termTime(_)»","doc":"Defines a syntax for time-only values. The string should represent a time, either in 24-hour or\n12-hour format.\n\nExample:\n`time(\"15:00:00\")` or `time(\"03:00:00 PM\")`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Notation.html#Std.Time.«termTime(_)»\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">«termTime(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Notation.lean#L171-L177","name":"Std.Time.«termDate(_)»","line":171,"kind":"def","docLink":"./Std/Time/Notation.html#Std.Time.«termDate(_)»","doc":"Defines a syntax for date-only values. The input string represents a date in formats like \"YYYY-MM-DD\".\n\nExample:\n`date(\"2024-10-13\")`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Notation.html#Std.Time.«termDate(_)»\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">«termDate(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Notation.lean#L162-L169","name":"Std.Time.«termDatetime(_)»","line":162,"kind":"def","docLink":"./Std/Time/Notation.html#Std.Time.«termDatetime(_)»","doc":"Defines a syntax for datetime values without timezone. The input should be a string in an\nISO8601-like format.\n\nExample:\n`datetime(\"2024-10-13T15:00:00\")`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Notation.html#Std.Time.«termDatetime(_)»\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">«termDatetime(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Notation.lean#L152-L159","name":"Std.Time.«termZoned(_,_)»","line":152,"kind":"def","docLink":"./Std/Time/Notation.html#Std.Time.«termZoned(_,_)»","doc":"Defines a syntax for zoned datetime values. It expects a string representing a datetime and a\ntimezone information as a term.\n\nExample:\n`zoned(\"2024-10-13T15:00:00\", timezone)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Notation.html#Std.Time.«termZoned(_,_)»\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">«termZoned(_,_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Notation.lean#L143-L150","name":"Std.Time.«termZoned(_)»","line":143,"kind":"def","docLink":"./Std/Time/Notation.html#Std.Time.«termZoned(_)»","doc":"Defines a syntax for zoned datetime values. It expects a string representing a datetime with\ntimezone information.\n\nExample:\n`zoned(\"2024-10-13T15:00:00-03:00\")`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Notation.html#Std.Time.«termZoned(_)»\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">«termZoned(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}