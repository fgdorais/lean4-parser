{"name":"Init.Omega.IntList","instances":[{"typeNames":["Lean.Omega.IntList"],"name":"Lean.Omega.IntList.instAdd","className":"Add"},{"typeNames":["Lean.Omega.IntList"],"name":"Lean.Omega.IntList.instMul","className":"Mul"},{"typeNames":["Lean.Omega.IntList"],"name":"Lean.Omega.IntList.instNeg","className":"Neg"},{"typeNames":["Lean.Omega.IntList"],"name":"Lean.Omega.IntList.instSub","className":"Sub"},{"typeNames":["Int","Lean.Omega.IntList","Lean.Omega.IntList"],"name":"Lean.Omega.IntList.instHMulInt","className":"HMul"}],"imports":["Init.Data.List.Zip","Init.Data.Int.DivMod.Bootstrap","Init.Data.Nat.Gcd"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L391-L409","name":"Lean.Omega.IntList.dvd_bmod_dot_sub_dot_bmod","line":391,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_bmod_dot_sub_dot_bmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_bmod_dot_sub_dot_bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dvd_bmod_dot_sub_dot_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_dot_sub_dot_bmod\">bmod_dot_sub_dot_bmod</a> <span class=\"fn\">m</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L384-L389","name":"Lean.Omega.IntList.bmod_dot_sub_dot_bmod","line":384,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_dot_sub_dot_bmod","doc":"The difference between the balanced mod of a dot product,\nand the dot product with balanced mod applied to each entry of the left factor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_dot_sub_dot_bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">bmod_dot_sub_dot_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L381-L382","name":"Lean.Omega.IntList.bmod_length","line":381,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_length\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">bmod_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod\">bmod</a></span> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L378-L379","name":"Lean.Omega.IntList.bmod","line":378,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod","doc":"Apply \"balanced mod\" to each entry in an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L365-L376","name":"Lean.Omega.IntList.dot_sdiv_left","line":365,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_sdiv_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_sdiv_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_sdiv_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a></span> <span class=\"fn\">d</span>)</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L363-L363","name":"Lean.Omega.IntList.nil_dot","line":363,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_dot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_dot\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">nil_dot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L353-L361","name":"Lean.Omega.IntList.dot_eq_zero_of_left_eq_zero","line":353,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_eq_zero_of_left_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_eq_zero_of_left_eq_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_eq_zero_of_left_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L350-L351","name":"Lean.Omega.IntList.gcd_dvd_dot_left","line":350,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd_dot_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd_dot_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_dvd_dot_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L338-L348","name":"Lean.Omega.IntList.dot_mod_gcd_left","line":338,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_mod_gcd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_mod_gcd_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_mod_gcd_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L335-L336","name":"Lean.Omega.IntList.gcd_eq_zero","line":335,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L319-L331","name":"Lean.Omega.IntList.gcd_eq_iff","line":319,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span>)</span> → <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L304-L317","name":"Lean.Omega.IntList.dvd_gcd","line":304,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_gcd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_gcd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dvd_gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L294-L302","name":"Lean.Omega.IntList.gcd_dvd","line":294,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L290-L292","name":"Lean.Omega.IntList.gcd_cons_div_right'","line":290,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>))</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <span class=\"fn\">xs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L286-L288","name":"Lean.Omega.IntList.gcd_cons_div_right","line":286,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L282-L284","name":"Lean.Omega.IntList.gcd_cons_div_left","line":282,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>))</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L280-L280","name":"Lean.Omega.IntList.gcd_cons","line":280,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <span class=\"fn\">xs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L279-L279","name":"Lean.Omega.IntList.gcd_nil","line":279,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L276-L277","name":"Lean.Omega.IntList.gcd","line":276,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd","doc":"The gcd of the absolute values of the entries of an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L274-L274","name":"Lean.Omega.IntList.sdiv_cons","line":274,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sdiv_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a> <span class=\"fn\">xs</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L273-L273","name":"Lean.Omega.IntList.sdiv_nil","line":273,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sdiv_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L270-L271","name":"Lean.Omega.IntList.sdiv","line":270,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv","doc":"Division of an `IntList` by a integer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L257-L268","name":"Lean.Omega.IntList.dot_of_left_zero","line":257,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_of_left_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_of_left_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_of_left_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L254-L255","name":"Lean.Omega.IntList.dot_smul_left","line":254,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_smul_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_smul_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L251-L252","name":"Lean.Omega.IntList.dot_neg_left","line":251,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_neg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_neg_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_neg_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L248-L249","name":"Lean.Omega.IntList.dot_distrib_left","line":248,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_distrib_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_distrib_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys </span><span class=\"fn\">zs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">zs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L228-L246","name":"Lean.Omega.IntList.dot_set_left","line":228,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_set_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_set_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_set_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a></span> <span class=\"fn\">i</span> <span class=\"fn\">z</span>)</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L223-L223","name":"Lean.Omega.IntList.dot_cons₂","line":223,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_cons₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_cons₂\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L222-L222","name":"Lean.Omega.IntList.dot_nil_right","line":222,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L221-L221","name":"Lean.Omega.IntList.dot_nil_left","line":221,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L215-L216","name":"Lean.Omega.IntList.dot","line":215,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot","doc":"The dot product of two `IntList`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L209-L213","name":"Lean.Omega.IntList.sum_smul","line":209,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L203-L207","name":"Lean.Omega.IntList.sum_neg","line":203,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L195-L201","name":"Lean.Omega.IntList.sum_add","line":195,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L192-L192","name":"Lean.Omega.IntList.sum_cons","line":192,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L191-L191","name":"Lean.Omega.IntList.sum_nil","line":191,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L188-L189","name":"Lean.Omega.IntList.sum","line":188,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum","doc":"The sum of the entries of an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L180-L186","name":"Lean.Omega.IntList.mul_smul_left","line":180,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_smul_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_smul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L172-L178","name":"Lean.Omega.IntList.sub_eq_add_neg","line":172,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_eq_add_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">ys</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L163-L169","name":"Lean.Omega.IntList.mul_neg_left","line":163,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_neg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_neg_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_neg_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L146-L161","name":"Lean.Omega.IntList.mul_distrib_left","line":146,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_distrib_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_distrib_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys </span><span class=\"fn\">zs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L135-L143","name":"Lean.Omega.IntList.combo_eq_smul_add_smul","line":135,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.combo_eq_smul_add_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.combo_eq_smul_add_smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">combo_eq_smul_add_smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.combo\">combo</a> <span class=\"fn\">a</span> <span class=\"fn\">xs</span> <span class=\"fn\">b</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L131-L133","name":"Lean.Omega.IntList.combo","line":131,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.combo","doc":"A linear combination of two `IntList`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.combo\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">combo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L129-L129","name":"Lean.Omega.IntList.smul_cons","line":129,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L128-L128","name":"Lean.Omega.IntList.smul_nil","line":128,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L124-L126","name":"Lean.Omega.IntList.smul_get","line":124,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L122-L122","name":"Lean.Omega.IntList.smul_def","line":122,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L119-L120","name":"Lean.Omega.IntList.instHMulInt","line":119,"kind":"instance","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instHMulInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instHMulInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instHMulInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMul\">HMul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L115-L117","name":"Lean.Omega.IntList.smul","line":115,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul","doc":"Implementation of scalar multiplication by an integer on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L111-L113","name":"Lean.Omega.IntList.sub_def","line":111,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sub_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L109-L109","name":"Lean.Omega.IntList.instSub","line":109,"kind":"instance","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L105-L107","name":"Lean.Omega.IntList.sub","line":105,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sub","doc":"Implementation of subtraction on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L103-L103","name":"Lean.Omega.IntList.neg_cons","line":103,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L102-L102","name":"Lean.Omega.IntList.neg_nil","line":102,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L98-L100","name":"Lean.Omega.IntList.neg_get","line":98,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L96-L96","name":"Lean.Omega.IntList.neg_def","line":96,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>)</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L94-L94","name":"Lean.Omega.IntList.instNeg","line":94,"kind":"instance","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instNeg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L91-L92","name":"Lean.Omega.IntList.neg","line":91,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg","doc":"Implementation of negation on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L89-L89","name":"Lean.Omega.IntList.mul_cons₂","line":89,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_cons₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_cons₂\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L88-L88","name":"Lean.Omega.IntList.mul_nil_right","line":88,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L87-L87","name":"Lean.Omega.IntList.mul_nil_left","line":87,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L83-L85","name":"Lean.Omega.IntList.mul_get","line":83,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L80-L81","name":"Lean.Omega.IntList.mul_def","line":80,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L78-L78","name":"Lean.Omega.IntList.instMul","line":78,"kind":"instance","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L75-L76","name":"Lean.Omega.IntList.mul","line":75,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul","doc":"Implementation of `*` on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L72-L73","name":"Lean.Omega.IntList.cons_add_cons","line":72,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.cons_add_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.cons_add_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">cons_add_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#List.cons\">::</a> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L71-L71","name":"Lean.Omega.IntList.nil_add","line":71,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">nil_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L70-L70","name":"Lean.Omega.IntList.add_nil","line":70,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add_nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L66-L68","name":"Lean.Omega.IntList.add_get","line":66,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L62-L64","name":"Lean.Omega.IntList.add_def","line":62,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L60-L60","name":"Lean.Omega.IntList.instAdd","line":60,"kind":"instance","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L56-L58","name":"Lean.Omega.IntList.add","line":56,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add","doc":"Implementation of `+` on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L53-L54","name":"Lean.Omega.IntList.leading","line":53,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.leading","doc":"Returns the leading coefficient, i.e. the first non-zero entry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.leading\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">leading</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L51-L51","name":"Lean.Omega.IntList.set_cons_succ","line":51,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_succ\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L50-L50","name":"Lean.Omega.IntList.set_cons_zero","line":50,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">0</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L49-L49","name":"Lean.Omega.IntList.set_nil_succ","line":49,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_succ\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_nil_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L48-L48","name":"Lean.Omega.IntList.set_nil_zero","line":48,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_nil_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">0</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">y</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L40-L46","name":"Lean.Omega.IntList.set","line":40,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set","doc":"Like `List.set`, but right-pad with zeroes as necessary first. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L36-L38","name":"Lean.Omega.IntList.get_of_length_le","line":36,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_of_length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_of_length_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_of_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L32-L34","name":"Lean.Omega.IntList.get_map","line":32,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_map\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L30-L30","name":"Lean.Omega.IntList.get_cons_succ","line":30,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_succ\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L29-L29","name":"Lean.Omega.IntList.get_cons_zero","line":29,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L28-L28","name":"Lean.Omega.IntList.get_nil","line":28,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L25-L26","name":"Lean.Omega.IntList.get","line":25,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get","doc":"Get the `i`-th element (interpreted as `0` if the list is not long enough). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/IntList.lean#L15-L21","name":"Lean.Omega.IntList","line":15,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList","doc":"A type synonym for `List Int`, used by `omega` for dense representation of coefficients.\n\nWe define algebraic operations,\ninterpreting `List Int` as a finitely supported function `Nat → Int`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}