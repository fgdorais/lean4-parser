{"name":"Lean.Compiler.LCNF.Simp.ConstantFold","instances":[{"typeNames":["Nat"],"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralNat","className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal"},{"typeNames":["String"],"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralString","className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal"},{"typeNames":["Bool"],"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralBool","className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal"},{"typeNames":["UInt8"],"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt8","className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal"},{"typeNames":["UInt16"],"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt16","className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal"},{"typeNames":["UInt32"],"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt32","className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal"},{"typeNames":["UInt64"],"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt64","className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal"},{"typeNames":["Char"],"name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralChar","className":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal"}],"imports":["Init.Data.UInt.Log2","Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.InferType","Lean.Compiler.LCNF.PassManager"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L426-L430","name":"Lean.Compiler.LCNF.Simp.ConstantFold.foldConstants","line":426,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.foldConstants","doc":"Apply a list of default folders to `decl`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.foldConstants\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">foldConstants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L423-L424","name":"Lean.Compiler.LCNF.Simp.ConstantFold.getFolders","line":423,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getFolders","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Lean/Data/SMap.html#Lean.SMap\">SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L419-L421","name":"Lean.Compiler.LCNF.Simp.ConstantFold.registerFolder","line":419,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.registerFolder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.registerFolder\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">registerFolder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">folderDeclName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L400-L417","name":"Lean.Compiler.LCNF.Simp.ConstantFold.folderExt","line":400,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.folderExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.folderExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">folderExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\">FolderEntry</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\">FolderEntry</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L398-L398","name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.folder","line":398,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.folder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.folder\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderEntry</span>.<span class=\"name\">folder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\">FolderEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L397-L397","name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.mk","line":397,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toFolderOleanEntry</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folder</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\">FolderEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L397-L398","name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.toFolderOleanEntry","line":397,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.toFolderOleanEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry.toFolderOleanEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderEntry</span>.<span class=\"name\">toFolderOleanEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\">FolderEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L397-L398","name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry","line":397,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderEntry</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L395-L395","name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.folderDeclName","line":395,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.folderDeclName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.folderDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderOleanEntry</span>.<span class=\"name\">folderDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L394-L394","name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.declName","line":394,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.declName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderOleanEntry</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L393-L393","name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.mk","line":393,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderOleanEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">folderDeclName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\">FolderOleanEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L393-L395","name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry","line":393,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderOleanEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderOleanEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L389-L391","name":"Lean.Compiler.LCNF.Simp.ConstantFold.builtinFolders","line":389,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.builtinFolders","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.builtinFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">builtinFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L367-L378","name":"Lean.Compiler.LCNF.Simp.ConstantFold.applyFolders","line":367,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.applyFolders","doc":"Apply all known folders to `decl`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.applyFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">applyFolders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folders</span> : <span class=\"fn\"><a href=\"./Lean/Data/SMap.html#Lean.SMap\">SMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L358-L365","name":"Lean.Compiler.LCNF.Simp.ConstantFold.stringFolders","line":358,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.stringFolders","doc":"All string folders.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.stringFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">stringFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L338-L356","name":"Lean.Compiler.LCNF.Simp.ConstantFold.relationFolders","line":338,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.relationFolders","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.relationFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">relationFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L311-L336","name":"Lean.Compiler.LCNF.Simp.ConstantFold.arithmeticFolders","line":311,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.arithmeticFolders","doc":"All arithmetic folders.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.arithmeticFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">arithmeticFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L308-L309","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulShift","line":308,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulShift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulShift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mulShift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftLeft</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pow2 </span><span class=\"fn\">log2</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L301-L306","name":"Lean.Compiler.LCNF.Simp.ConstantFold.higherOrderLiteralFolders","line":301,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.higherOrderLiteralFolders","doc":"Literal folders for higher order datastructures.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.higherOrderLiteralFolders\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">higherOrderLiteralFolders</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L295-L299","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightAnnihilator","line":295,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightAnnihilator","doc":"Provide a folder for an operation that has the same left and right annihilator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightAnnihilator\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">leftRightAnnihilator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">annihilator </span><span class=\"fn\">zero</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L289-L293","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightNeutral","line":289,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightNeutral","doc":"Provide a folder for an operation that has the same left and right neutral element.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftRightNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">leftRightNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">neutral</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L277-L287","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.first","line":277,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.first","doc":"Pick the first folder out of `folders` that succeeds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.first\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">first</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folders</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L268-L275","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulLhsShift","line":268,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulLhsShift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulLhsShift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mulLhsShift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftLeft</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pow2 </span><span class=\"fn\">log2</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L259-L266","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulRhsShift","line":259,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulRhsShift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mulRhsShift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mulRhsShift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftLeft</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pow2 </span><span class=\"fn\">log2</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L250-L257","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.divShift","line":250,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.divShift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.divShift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">divShift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shiftRight</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pow2 </span><span class=\"fn\">log2</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L241-L248","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightAnnihilator","line":241,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightAnnihilator","doc":"Provide a folder for an operation with a right annihilator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightAnnihilator\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">rightAnnihilator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">annihilator </span><span class=\"fn\">zero</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L232-L239","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftAnnihilator","line":232,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftAnnihilator","doc":"Provide a folder for an operation with a left annihilator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftAnnihilator\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">leftAnnihilator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">annihilator </span><span class=\"fn\">zero</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L223-L230","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightNeutral","line":223,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightNeutral","doc":"Provide a folder for an operation with a right neutral element.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.rightNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">rightNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">neutral</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L214-L221","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftNeutral","line":214,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftNeutral","doc":"Provide a folder for an operation with a left neutral element.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.leftNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">leftNeutral</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">neutral</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L205-L212","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinaryDecisionProcedure","line":205,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinaryDecisionProcedure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinaryDecisionProcedure\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mkBinaryDecisionProcedure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î± </span><span class=\"fn\">Î²</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î²</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\"><span class=\"fn\">Î²</span> â†’ <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folder</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">Î±</span>) â†’ <span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">Î²</span>) â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L196-L203","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinary","line":196,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinary","doc":"Turn a binary function such as `Nat.add` into a constant folder.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkBinary\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mkBinary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î± </span><span class=\"fn\">Î² </span><span class=\"fn\">Î³</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î²</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î³</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folder</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\"><span class=\"fn\">Î²</span> â†’ <span class=\"fn\">Î³</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L187-L194","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkUnary","line":187,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkUnary","doc":"Turn a unary function such as `Nat.succ` into a constant folder.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder.mkUnary\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span>.<span class=\"name\">mkUnary</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î± </span><span class=\"fn\">Î²</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î²</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">folder</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\">Î²</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L162-L185","name":"Lean.Compiler.LCNF.Simp.ConstantFold.foldArrayLiteral","line":162,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.foldArrayLiteral","doc":"Evaluate array literals at compile time, that is turn:\n```\nlet _x.1 := @List.nil _\nlet _x.2 := @List.cons _ z _x.1\nlet _x.3 := @List.cons _ y _x.2\nlet _x.4 := @List.cons _ x _x.3\nlet _x.5 := @List.toArray _ _x.4\n```\nTo its array form:\n```\nlet _x.12 := 3\nlet _x.8 := @Array.mkEmpty _ _x.12\nlet _x.22 := @Array.push _ _x.8 x\nlet _x.24 := @Array.push _ _x.22 y\nlet _x.26 := @Array.push _ _x.24 z\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.foldArrayLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">foldArrayLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\">Folder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L144-L160","name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkPseudoArrayLiteral","line":144,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkPseudoArrayLiteral","doc":"Turn an `#[a, b, c]` into:\n```\nlet _x.12 := 3\nlet _x.8 := @Array.mkEmpty _ _x.12\nlet _x.22 := @Array.push _ _x.8 x\nlet _x.24 := @Array.push _ _x.22 y\nlet _x.26 := @Array.push _ _x.24 z\n_x.26\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkPseudoArrayLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkPseudoArrayLiteral</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elements</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typLevel</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L135-L142","name":"Lean.Compiler.LCNF.Simp.ConstantFold.getPseudoListLiteral.go","line":135,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getPseudoListLiteral.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getPseudoListLiteral.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getPseudoListLiteral</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L120-L142","name":"Lean.Compiler.LCNF.Simp.ConstantFold.getPseudoListLiteral","line":120,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getPseudoListLiteral","doc":"Turns an expression chain of the form\n```\nlet _x.1 := @List.nil _\nlet _x.2 := @List.cons _ a _x.1\nlet _x.3 := @List.cons _ b _x.2\nlet _x.4 := @List.cons _ c _x.3\nlet _x.5 := @List.cons _ d _x.4\nlet _x.6 := @List.cons _ e _x.5\n```\ninto: `[a, b, c, d ,e]` + The type contained in the list\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getPseudoListLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getPseudoListLiteral</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L116-L116","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralChar","line":116,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralChar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralChar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L115-L115","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt64","line":115,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt64\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L114-L114","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt32","line":114,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt32\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L113-L113","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt16","line":113,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt16\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L112-L112","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt8","line":112,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralUInt8\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L106-L110","name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkNatWrapperInstance","line":106,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkNatWrapperInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkNatWrapperInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkNatWrapperInstance</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ofNat</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ofNatName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toNat</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L96-L98","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralBool","line":96,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralBool\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L92-L94","name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkBoolLit","line":92,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkBoolLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkBoolLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkBoolLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L88-L90","name":"Lean.Compiler.LCNF.Simp.ConstantFold.getBoolLit","line":88,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getBoolLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getBoolLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getBoolLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L84-L86","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralString","line":84,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralString\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L81-L82","name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkStringLit","line":81,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkStringLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkStringLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkStringLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L77-L79","name":"Lean.Compiler.LCNF.Simp.ConstantFold.getStringLit","line":77,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getStringLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getStringLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getStringLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L73-L75","name":"Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralNat","line":73,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.instLiteralNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">instLiteralNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L70-L71","name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkNatLit","line":70,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkNatLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkNatLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkNatLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L66-L68","name":"Lean.Compiler.LCNF.Simp.ConstantFold.getNatLit","line":66,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getNatLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.getNatLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">getNatLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L59-L64","name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLit","line":59,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLit","doc":"A wrapper around `mkAuxLetDecl` that also calls `mkLit`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkAuxLit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prefixName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`_x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L48-L55","name":"Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLetDecl","line":48,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLetDecl","doc":"A wrapper around `LCNF.mkAuxLetDecl` that will automatically store the\n`LetDecl` in the state of `FolderM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.mkAuxLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">mkAuxLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prefixName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`_x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L44-L44","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mkLit","line":44,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mkLit","doc":"Turn a value of type `Î±` into a series of auxiliary `LetDecl`s + a\nfinal `Expr` putting them all together into a literal of type `Î±`,\nwhere again the idea of what a literal is depends on `Î±`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mkLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Literal</span>.<span class=\"name\">mkLit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L38-L38","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal.getLit","line":38,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.getLit","doc":"Attempt to turn the provided `Expr` into a value of type `Î±` if\nit is whatever concept of a literal `Î±` has. Note that this function\ndoes assume that the provided `Expr` does indeed have type `Î±`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.getLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Literal</span>.<span class=\"name\">getLit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Î±</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L32-L32","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mk","line":32,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Literal</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getLit</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Î±</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkLit</span> : <span class=\"fn\"><span class=\"fn\">Î±</span> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\">FolderM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\">Literal</a> <span class=\"fn\">Î±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L28-L44","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Literal","line":28,"kind":"class","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal","doc":"A typeclass for detecting and producing literals of arbitrary types\ninside of LCNF.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Literal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Literal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L21-L26","name":"Lean.Compiler.LCNF.Simp.ConstantFold.Folder","line":21,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder","doc":"A constant folder for a specific function, takes all the arguments of a\ncertain function and produces a new `Expr` + auxiliary declarations in\nthe `FolderM` monad on success. If the folding fails it returns `none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.Folder\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">Folder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/ConstantFold.lean#L15-L19","name":"Lean.Compiler.LCNF.Simp.ConstantFold.FolderM","line":15,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM","doc":"A constant folding monad, the additional state stores auxiliary declarations\nrequired to build the new constant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/ConstantFold.html#Lean.Compiler.LCNF.Simp.ConstantFold.FolderM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConstantFold</span>.<span class=\"name\">FolderM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}