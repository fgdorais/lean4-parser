{"name":"Lean.Meta.Tactic.Grind.MBTC","instances":[],"imports":["Lean.Meta.Tactic.Grind.Types","Lean.Meta.Tactic.Grind.Combinators","Lean.Meta.Tactic.Grind.Canon"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/MBTC.lean#L97-L102","name":"Lean.Meta.Grind.mbtcTac","line":97,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.mbtcTac","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.mbtcTac\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mbtcTac</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">MBTC.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Combinators.html#Lean.Meta.Grind.GrindTactic\">GrindTactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/MBTC.lean#L51-L95","name":"Lean.Meta.Grind.mbtc","line":51,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.mbtc","doc":"Model-based theory combination. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.mbtc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mbtc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">MBTC.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/MBTC.lean#L34-L34","name":"Lean.Meta.Grind.MBTC.Context.eqAssignment","line":34,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.eqAssignment","doc":"`eqAssignment x y` returns `true` it the theory variables for `x` and `y` have the same\ninterpretation/assignment in the target theory. For example, suppose we have the\nconstraint `x + y ≤ 0`, and cutsat satified it by assignining both `x` and `y` to\n`0`. Then, `eqAssignment x y` must return `true`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.eqAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MBTC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eqAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/MBTC.lean#L27-L27","name":"Lean.Meta.Grind.MBTC.Context.hasTheoryVar","line":27,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.hasTheoryVar","doc":"`hasTheoryVar e` returns `true` if `e` has a theory variable in the target theory.\nFor example, suppose we have the constraint `x + y ≤ 0`, then `x` and `y` have theory\nvars in the cutsat procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.hasTheoryVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MBTC</span>.<span class=\"name\">Context</span>.<span class=\"name\">hasTheoryVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/MBTC.lean#L21-L21","name":"Lean.Meta.Grind.MBTC.Context.isInterpreted","line":21,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.isInterpreted","doc":"`isInterpreted e` returns `true` if `e` is an interpreted symbol in the target theory.\nExample: `+` for cutsat\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.isInterpreted\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MBTC</span>.<span class=\"name\">Context</span>.<span class=\"name\">isInterpreted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/MBTC.lean#L16-L16","name":"Lean.Meta.Grind.MBTC.Context.mk","line":16,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MBTC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isInterpreted </span><span class=\"fn\">hasTheoryVar</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eqAssignment</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/MBTC.lean#L13-L34","name":"Lean.Meta.Grind.MBTC.Context","line":13,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context","doc":"Model-based theory combination context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MBTC</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}