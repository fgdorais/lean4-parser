{"name":"Batteries.Tactic.PrintDependents","instances":[],"imports":["Init","Lean.Elab.Command","Lean.Util.FoldConsts"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/PrintDependents.lean#L63-L117","name":"Batteries.Tactic.«command#printDependents___»","line":63,"kind":"def","docLink":"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.«command#printDependents___»","doc":"The command `#print dependents X Y` prints a list of all the declarations in the file that\ntransitively depend on `X` or `Y`. After each declaration, it shows the list of all declarations\nreferred to directly in the body which also depend on `X` or `Y`.\n\nFor example, `#print axioms bar'` below shows that `bar'` depends on `Classical.choice`, but not\nwhy. `#print dependents Classical.choice` says that `bar'` depends on `Classical.choice` because\nit uses `foo` and `foo` uses `Classical.em`. `bar` is not listed because it is proved without using\n`Classical.choice`.\n```\nimport Batteries.Tactic.PrintDependents\n\ntheorem foo : x = y ∨ x ≠ y := Classical.em _\ntheorem bar : 1 = 1 ∨ 1 ≠ 1 := by simp\ntheorem bar' : 1 = 1 ∨ 1 ≠ 1 := foo\n\n#print axioms bar'\n-- 'bar'' depends on axioms: [Classical.choice, Quot.sound, propext]\n\n#print dependents Classical.choice\n-- foo: Classical.em\n-- bar': foo\n```\n\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.«command#printDependents___»\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">«command#printDependents___»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/PrintDependents.lean#L41-L59","name":"Batteries.Tactic.CollectDependents.collect","line":41,"kind":"opaque","docLink":"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.collect","doc":"Collect the results for a given constant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.collect\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CollectDependents</span>.<span class=\"name\">collect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/PrintDependents.lean#L32-L39","name":"Batteries.Tactic.CollectDependents.mkState","line":32,"kind":"def","docLink":"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.mkState","doc":"Constructs the initial state, marking the constants in `cs`. The result of `collect` will say\nwhether a given declaration depends transitively on one of these constants.\n\nIf `otherAxiom` is true, any axiom not specified in `cs` will also be tracked.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.mkState\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CollectDependents</span>.<span class=\"name\">mkState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">otherAxiom</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/PrintDependents.lean#L29-L30","name":"Batteries.Tactic.CollectDependents.M","line":29,"kind":"def","docLink":"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.M","doc":"The monad used by `CollectDependents`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.M\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CollectDependents</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/PrintDependents.lean#L27-L27","name":"Batteries.Tactic.CollectDependents.State.result","line":27,"kind":"def","docLink":"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State.result","doc":"The cached results on visited constants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State.result\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CollectDependents</span>.<span class=\"name\">State</span>.<span class=\"name\">result</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/PrintDependents.lean#L25-L25","name":"Batteries.Tactic.CollectDependents.State.otherAxiom","line":25,"kind":"def","docLink":"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State.otherAxiom","doc":"If true, an axiom not in the initial list will be considered as marked. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State.otherAxiom\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CollectDependents</span>.<span class=\"name\">State</span>.<span class=\"name\">otherAxiom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/PrintDependents.lean#L23-L23","name":"Batteries.Tactic.CollectDependents.State.mk","line":23,"kind":"ctor","docLink":"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CollectDependents</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">otherAxiom</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/PrintDependents.lean#L22-L27","name":"Batteries.Tactic.CollectDependents.State","line":22,"kind":"structure","docLink":"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State","doc":"Collects the result of a `CollectDependents` query. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/PrintDependents.html#Batteries.Tactic.CollectDependents.State\"><span class=\"name\">Batteries</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CollectDependents</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}