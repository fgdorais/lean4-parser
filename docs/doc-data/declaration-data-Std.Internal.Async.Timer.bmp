{"name":"Std.Internal.Async.Timer","instances":[],"imports":["Std.Time","Std.Internal.UV.Timer","Std.Internal.Async.Select"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L150-L159","name":"Std.Internal.IO.Async.Interval.stop","line":150,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.stop","doc":"If:\n- `i` is still running this stops `i` without resolving any remaining `AsyncTask` that were created\n  through `tick`. Note that if another `AsyncTask` is binding on any of these it is going hang\n  forever without further intervention.\n- `i` is not yet or not anymore running this is a no-op.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.stop\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span>.<span class=\"name\">stop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\">Interval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L140-L148","name":"Std.Internal.IO.Async.Interval.reset","line":140,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.reset","doc":"If:\n- `Interval.tick` was called on `i` before the timer restarts counting from now and the next tick\n   happens in `duration`.\n- `i` is not yet or not anymore running this is a no-op.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.reset\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span>.<span class=\"name\">reset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\">Interval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L124-L138","name":"Std.Internal.IO.Async.Interval.tick","line":124,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.tick","doc":"If:\n- `i` is not yet running start it and return an `AsyncTask` that resolves right away as the 0th\n  multiple of `duration` has elapsed.\n- `i` is already running and:\n  - the tick from the last call of `i` has not yet finished return the same `AsyncTask` as the last\n    call\n  - the tick from the last call of `i` has finished return a new `AsyncTask` that waits for the\n    closest next tick from the time of calling this function.\n- `i` is not running anymore this is a no-op.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.tick\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span>.<span class=\"name\">tick</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\">Interval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.AsyncTask\">AsyncTask</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L115-L122","name":"Std.Internal.IO.Async.Interval.mk","line":115,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.mk","doc":"Setup up an `Interval` that waits for `duration` milliseconds.\nThis function only initializes but does not yet start the timer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">duration</span> : <a href=\"./Std/Time/Time/Unit/Millisecond.html#Std.Time.Millisecond.Offset\">Time.Millisecond.Offset</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">duration</span>) <a href=\"./Std/Internal/Async/Timer.html#_auto._@.Std.Internal.Async.Timer._hyg.314\">_auto✝</a></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\">Interval</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L110-L110","name":"Std.Internal.IO.Async.Interval.native","line":110,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.native","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.native\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span>.<span class=\"name\">native</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\">Interval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/UV/Timer.html#Std.Internal.UV.Timer\">UV.Timer</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L104-L110","name":"Std.Internal.IO.Async.Interval","line":104,"kind":"structure","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval","doc":"`Interval` can be used to repeatedly wait for some duration like a clock.\nThe underlying timer has millisecond resolution.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L97-L102","name":"Std.Internal.IO.Async.Selector.sleep","line":97,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Selector.sleep","doc":"Return a `Selector` that resolves after `duration`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Selector.sleep\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selector</span>.<span class=\"name\">sleep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">duration</span> : <a href=\"./Std/Time/Time/Unit/Millisecond.html#Std.Time.Millisecond.Offset\">Time.Millisecond.Offset</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L90-L95","name":"Std.Internal.IO.Async.sleep","line":90,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.sleep","doc":"Return an `AsyncTask` that resolves after `duration`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.sleep\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">sleep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">duration</span> : <a href=\"./Std/Time/Time/Unit/Millisecond.html#Std.Time.Millisecond.Offset\">Time.Millisecond.Offset</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.AsyncTask\">AsyncTask</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L68-L86","name":"Std.Internal.IO.Async.Sleep.selector","line":68,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.selector","doc":"Create a `Selector` that resolves once `s` has finished. Note that calling this function starts `s`\nif it hasn't already started.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.selector\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">selector</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L57-L66","name":"Std.Internal.IO.Async.Sleep.stop","line":57,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.stop","doc":"If:\n- `s` is still running this stops `s` without resolving any remaining `AsyncTask`s that were created\n  through `wait`. Note that if another `AsyncTask` is binding on any of these it is going hang\n  forever without further intervention.\n- `s` is not yet or not anymore running this is a no-op.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.stop\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">stop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L47-L55","name":"Std.Internal.IO.Async.Sleep.reset","line":47,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.reset","doc":"If:\n- `s` is still running the timer restarts counting from now and finishes after `duration`\n  milliseconds.\n- `s` is not yet or not anymore running this is a no-op.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.reset\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">reset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L36-L45","name":"Std.Internal.IO.Async.Sleep.wait","line":36,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.wait","doc":"If:\n- `s` is not yet running start it and return an `AsyncTask` that will resolve once the previously\n   configured `duration` has run out.\n- `s` is already or not anymore running return the same `AsyncTask` as the first call to `wait`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.wait\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">wait</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.AsyncTask\">AsyncTask</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L27-L34","name":"Std.Internal.IO.Async.Sleep.mk","line":27,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.mk","doc":"Set up a `Sleep` that waits for `duration` milliseconds.\nThis function only initializes but does not yet start the timer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">duration</span> : <a href=\"./Std/Time/Time/Unit/Millisecond.html#Std.Time.Millisecond.Offset\">Time.Millisecond.Offset</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L23-L23","name":"Std.Internal.IO.Async.Sleep.native","line":23,"kind":"def","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.native","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.native\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">native</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/UV/Timer.html#Std.Internal.UV.Timer\">UV.Timer</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Internal/Async/Timer.lean#L17-L23","name":"Std.Internal.IO.Async.Sleep","line":17,"kind":"structure","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep","doc":"`Sleep` can be used to sleep for some duration once.\nThe underlying timer has millisecond resolution.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}