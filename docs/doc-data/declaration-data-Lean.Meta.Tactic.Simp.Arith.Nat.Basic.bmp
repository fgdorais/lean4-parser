{"name":"Lean.Meta.Tactic.Simp.Arith.Nat.Basic","instances":[{"typeNames":["Nat.Linear.Expr"],"name":"Lean.Meta.Simp.Arith.Nat.instReprExpr_lean","className":"Repr"},{"typeNames":["Nat.Linear.ExprCnstr"],"name":"Lean.Meta.Simp.Arith.Nat.instReprExprCnstr_lean","className":"Repr"},{"typeNames":["Nat.Linear.PolyCnstr"],"name":"Lean.Meta.Simp.Arith.Nat.instReprPolyCnstr_lean","className":"Repr"},{"typeNames":["Lean.Meta.Simp.Arith.Nat.LinearExpr"],"name":"Lean.Meta.Simp.Arith.Nat.instToExprLinearExpr","className":"Lean.ToExpr"},{"typeNames":["Lean.Meta.Simp.Arith.Nat.LinearCnstr"],"name":"Lean.Meta.Simp.Arith.Nat.instToExprLinearCnstr","className":"Lean.ToExpr"}],"imports":["Lean.Util.SortExprs","Lean.Meta.Check","Lean.Meta.Offset","Lean.Meta.AppBuilder","Lean.Meta.KExprMap","Lean.Data.RArray"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L182-L186","name":"Lean.Meta.Simp.Arith.Nat.toContextExpr","line":182,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.toContextExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.toContextExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">toContextExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L172-L180","name":"Lean.Meta.Simp.Arith.Nat.toLinearCnstr?","line":172,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.toLinearCnstr?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.toLinearCnstr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">toLinearCnstr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr\">LinearCnstr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L163-L170","name":"Lean.Meta.Simp.Arith.Nat.toLinearExpr","line":163,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.toLinearExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.toLinearExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">toLinearExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr\">LinearExpr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L157-L159","name":"Lean.Meta.Simp.Arith.Nat.ToLinear.run","line":157,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L134-L155","name":"Lean.Meta.Simp.Arith.Nat.ToLinear.toLinearCnstr?","line":134,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.toLinearCnstr?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.toLinearCnstr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">toLinearCnstr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr\">LinearCnstr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L106-L132","name":"Lean.Meta.Simp.Arith.Nat.ToLinear.toLinearExpr.visit","line":106,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.toLinearExpr.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.toLinearExpr.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">toLinearExpr</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.M\">M</a> <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr\">LinearExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L97-L132","name":"Lean.Meta.Simp.Arith.Nat.ToLinear.toLinearExpr","line":97,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.toLinearExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.toLinearExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">toLinearExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.M\">M</a> <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr\">LinearExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L88-L95","name":"Lean.Meta.Simp.Arith.Nat.ToLinear.addAsVar","line":88,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.addAsVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.addAsVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">addAsVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.M\">M</a> <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr\">LinearExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L84-L84","name":"Lean.Meta.Simp.Arith.Nat.ToLinear.M","line":84,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L82-L82","name":"Lean.Meta.Simp.Arith.Nat.ToLinear.State.vars","line":82,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State.vars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">State</span>.<span class=\"name\">vars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L81-L81","name":"Lean.Meta.Simp.Arith.Nat.ToLinear.State.varMap","line":81,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State.varMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State.varMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">State</span>.<span class=\"name\">varMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/KExprMap.html#Lean.Meta.KExprMap\">KExprMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L80-L80","name":"Lean.Meta.Simp.Arith.Nat.ToLinear.State.mk","line":80,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varMap</span> : <span class=\"fn\"><a href=\"./Lean/Meta/KExprMap.html#Lean.Meta.KExprMap\">KExprMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L80-L82","name":"Lean.Meta.Simp.Arith.Nat.ToLinear.State","line":80,"kind":"structure","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.ToLinear.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L72-L76","name":"Lean.Meta.Simp.Arith.Nat.LinearCnstr.toArith","line":72,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr.toArith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr.toArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">LinearCnstr</span>.<span class=\"name\">toArith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr\">LinearCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L64-L70","name":"Lean.Meta.Simp.Arith.Nat.LinearExpr.toArith","line":64,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr.toArith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr.toArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">LinearExpr</span>.<span class=\"name\">toArith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr\">LinearExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L59-L61","name":"Lean.Meta.Simp.Arith.Nat.instToExprLinearCnstr","line":59,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.instToExprLinearCnstr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.instToExprLinearCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">instToExprLinearCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">ToExpr</a> <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr\">LinearCnstr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L56-L57","name":"Lean.Meta.Simp.Arith.Nat.LinearCnstr.toExpr","line":56,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr.toExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr.toExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">LinearCnstr</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr\">LinearCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L52-L54","name":"Lean.Meta.Simp.Arith.Nat.instToExprLinearExpr","line":52,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.instToExprLinearExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.instToExprLinearExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">instToExprLinearExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">ToExpr</a> <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr\">LinearExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L43-L50","name":"Lean.Meta.Simp.Arith.Nat.LinearExpr.toExpr","line":43,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr.toExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr.toExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">LinearExpr</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr\">LinearExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L41-L41","name":"Lean.Meta.Simp.Arith.Nat.PolyExpr","line":41,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.PolyExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.PolyExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">PolyExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L40-L40","name":"Lean.Meta.Simp.Arith.Nat.LinearCnstr","line":40,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearCnstr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">LinearCnstr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L39-L39","name":"Lean.Meta.Simp.Arith.Nat.LinearExpr","line":39,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.LinearExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">LinearExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L37-L37","name":"Lean.Meta.Simp.Arith.Nat.instReprPolyCnstr_lean","line":37,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.instReprPolyCnstr_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.instReprPolyCnstr_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">instReprPolyCnstr_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Nat/Linear.html#Nat.Linear.PolyCnstr\">Nat.Linear.PolyCnstr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L36-L36","name":"Lean.Meta.Simp.Arith.Nat.instReprExprCnstr_lean","line":36,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.instReprExprCnstr_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.instReprExprCnstr_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">instReprExprCnstr_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Nat/Linear.html#Nat.Linear.ExprCnstr\">Nat.Linear.ExprCnstr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L35-L35","name":"Lean.Meta.Simp.Arith.Nat.instReprExpr_lean","line":35,"kind":"instance","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.instReprExpr_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Lean.Meta.Simp.Arith.Nat.instReprExpr_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Nat</span>.<span class=\"name\">instReprExpr_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Nat/Linear.html#Nat.Linear.Expr\">Nat.Linear.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L27-L29","name":"Nat.Linear.ExprCnstr.applyPerm","line":27,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Nat.Linear.ExprCnstr.applyPerm","doc":"Applies the given variable permutation to the given expression constraint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Nat.Linear.ExprCnstr.applyPerm\"><span class=\"name\">Nat</span>.<span class=\"name\">Linear</span>.<span class=\"name\">ExprCnstr</span>.<span class=\"name\">applyPerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Util/SortExprs.html#Lean.Perm\">Lean.Perm</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Nat/Linear.html#Nat.Linear.ExprCnstr\">ExprCnstr</a> → <a href=\"./Init/Data/Nat/Linear.html#Nat.Linear.ExprCnstr\">ExprCnstr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L20-L25","name":"Nat.Linear.Expr.applyPerm.go","line":20,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Nat.Linear.Expr.applyPerm.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Nat.Linear.Expr.applyPerm.go\"><span class=\"name\">Nat</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">applyPerm</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Util/SortExprs.html#Lean.Perm\">Lean.Perm</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Nat/Linear.html#Nat.Linear.Expr\">Expr</a> → <a href=\"./Init/Data/Nat/Linear.html#Nat.Linear.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Simp/Arith/Nat/Basic.lean#L16-L25","name":"Nat.Linear.Expr.applyPerm","line":16,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Nat.Linear.Expr.applyPerm","doc":"Applies the given variable permutation to `e` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Nat/Basic.html#Nat.Linear.Expr.applyPerm\"><span class=\"name\">Nat</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">applyPerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Util/SortExprs.html#Lean.Perm\">Lean.Perm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Nat/Linear.html#Nat.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Nat/Linear.html#Nat.Linear.Expr\">Expr</a></div></div>"}]}