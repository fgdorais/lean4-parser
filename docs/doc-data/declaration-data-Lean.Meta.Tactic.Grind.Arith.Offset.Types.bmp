{"name":"Lean.Meta.Tactic.Grind.Arith.Offset.Types","instances":[{"typeNames":["Lean.Meta.Grind.Arith.Offset.Cnstr"],"name":"Lean.Meta.Grind.Arith.Offset.instToMessageDataCnstrNodeId","className":"Lean.ToMessageData"},{"typeNames":["Lean.Meta.Grind.Arith.Offset.ProofInfo"],"name":"Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Arith.Offset.ToPropagate"],"name":"Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Arith.Offset.State"],"name":"Lean.Meta.Grind.Arith.Offset.instInhabitedState","className":"Inhabited"}],"imports":["Lean.Data.AssocList","Lean.Data.PersistentArray","Lean.Meta.Tactic.Grind.ENodeKey","Lean.Meta.Tactic.Grind.Arith.Util","Lean.Meta.Tactic.Grind.Arith.Offset.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L73-L73","name":"Lean.Meta.Grind.Arith.Offset.instInhabitedState","line":73,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedState\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instInhabitedState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L72-L72","name":"Lean.Meta.Grind.Arith.Offset.State.propagate","line":72,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.propagate","doc":"Truth values and equalities to propagate to core. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.propagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">propagate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L70-L70","name":"Lean.Meta.Grind.Arith.Offset.State.proofs","line":70,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.proofs","doc":"Proof reconstruction information. For each node with id `u`, `proofs[u]` contains\npairs `(v, { w, proof })` s.t. there is a path from `u` to `v`, and\n`w` is the penultimate node in the path, and `proof` is the justification for\nthe last edge.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.proofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">proofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L63-L63","name":"Lean.Meta.Grind.Arith.Offset.State.targets","line":63,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.targets","doc":"For each node with id `u`, `targets[u]` contains\npairs `(v, k)` s.t. there is a path from `u` to `v` with weight `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.targets\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">targets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L58-L58","name":"Lean.Meta.Grind.Arith.Offset.State.sources","line":58,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.sources","doc":"For each node with id `u`, `sources[u]` contains\npairs `(v, k)` s.t. there is a path from `v` to `u` with weight `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.sources\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">sources</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L53-L53","name":"Lean.Meta.Grind.Arith.Offset.State.cnstrsOf","line":53,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.cnstrsOf","doc":"Mapping from pairs `(u, v)` to a list of offset constraints on `u` and `v`.\nWe use this mapping to implement exhaustive constraint propagation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.cnstrsOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">cnstrsOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Util.html#Lean.Meta.Grind.Arith.Offset.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L48-L48","name":"Lean.Meta.Grind.Arith.Offset.State.cnstrs","line":48,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.cnstrs","doc":"Mapping from `Expr` representing inequalites to constraints. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.cnstrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">cnstrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ENodeKey.html#Lean.Meta.Grind.ENodeKey\">ENodeKey</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Util.html#Lean.Meta.Grind.Arith.Offset.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L46-L46","name":"Lean.Meta.Grind.Arith.Offset.State.nodeMap","line":46,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.nodeMap","doc":"Mapping from `Expr` to a node representing it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.nodeMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">nodeMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ENodeKey.html#Lean.Meta.Grind.ENodeKey\">ENodeKey</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L44-L44","name":"Lean.Meta.Grind.Arith.Offset.State.nodes","line":44,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.nodes","doc":"Mapping from `NodeId` to the `Expr` represented by the node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.nodes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">nodes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L42-L42","name":"Lean.Meta.Grind.Arith.Offset.State.mk","line":42,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nodes</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nodeMap</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ENodeKey.html#Lean.Meta.Grind.ENodeKey\">ENodeKey</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnstrs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/ENodeKey.html#Lean.Meta.Grind.ENodeKey\">ENodeKey</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Util.html#Lean.Meta.Grind.Arith.Offset.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnstrsOf</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Util.html#Lean.Meta.Grind.Arith.Offset.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sources </span><span class=\"fn\">targets</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proofs</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <span class=\"fn\">(<a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">propagate</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L41-L73","name":"Lean.Meta.Grind.Arith.Offset.State","line":41,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State","doc":"State of the constraint offset procedure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L39-L39","name":"Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate","line":39,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedToPropagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instInhabitedToPropagate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L38-L38","name":"Lean.Meta.Grind.Arith.Offset.ToPropagate.eq","line":38,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ToPropagate</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L37-L37","name":"Lean.Meta.Grind.Arith.Offset.ToPropagate.eqFalse","line":37,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eqFalse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eqFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ToPropagate</span>.<span class=\"name\">eqFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L36-L36","name":"Lean.Meta.Grind.Arith.Offset.ToPropagate.eqTrue","line":36,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eqTrue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate.eqTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ToPropagate</span>.<span class=\"name\">eqTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\">ToPropagate</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L27-L39","name":"Lean.Meta.Grind.Arith.Offset.ToPropagate","line":27,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate","doc":"Auxiliary inductive type for representing constraints and equalities\nthat should be propagated to core.\nRecall that we cannot compute proofs until the short-distance\ndata-structures have been fully updated when a new edge is inserted.\nThus, we store the information to be propagated into a list.\nSee field `propagate` in `State`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ToPropagate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ToPropagate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L25-L25","name":"Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo","line":25,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instInhabitedProofInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instInhabitedProofInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L24-L24","name":"Lean.Meta.Grind.Arith.Offset.ProofInfo.proof","line":24,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.proof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L23-L23","name":"Lean.Meta.Grind.Arith.Offset.ProofInfo.k","line":23,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.k","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.k\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L22-L22","name":"Lean.Meta.Grind.Arith.Offset.ProofInfo.w","line":22,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.w","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.w\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">w</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L21-L21","name":"Lean.Meta.Grind.Arith.Offset.ProofInfo.mk","line":21,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ProofInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\">ProofInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L20-L25","name":"Lean.Meta.Grind.Arith.Offset.ProofInfo","line":20,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo","doc":"Auxiliary structure used for proof extraction.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.ProofInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ProofInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L17-L18","name":"Lean.Meta.Grind.Arith.Offset.instToMessageDataCnstrNodeId","line":17,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instToMessageDataCnstrNodeId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.instToMessageDataCnstrNodeId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">instToMessageDataCnstrNodeId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Util.html#Lean.Meta.Grind.Arith.Offset.Cnstr\">Cnstr</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\">NodeId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Offset/Types.lean#L15-L15","name":"Lean.Meta.Grind.Arith.Offset.NodeId","line":15,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Offset/Types.html#Lean.Meta.Grind.Arith.Offset.NodeId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Offset</span>.<span class=\"name\">NodeId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}