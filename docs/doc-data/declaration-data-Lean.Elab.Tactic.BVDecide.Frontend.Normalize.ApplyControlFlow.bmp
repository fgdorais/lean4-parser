{"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.ApplyControlFlow","instances":[],"imports":["Lean.Meta.Tactic.Simp"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.lean#L59-L71","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.mkApplyUnaryControlDiscrPath","line":59,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.mkApplyUnaryControlDiscrPath","doc":"For `f`, `SomeType α β` and `ite` this function creates the path: `f (ite (SomeType _ _) _ _ _ _)`.\nThis path can be used to match on applications of unary functions onto control flow primitives.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.mkApplyUnaryControlDiscrPath\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">mkApplyUnaryControlDiscrPath</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName </span><span class=\"fn\">controlFlow</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">controlFlowParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Meta.DiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.lean#L45-L57","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.mkApplyProjControlDiscrPath","line":45,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.mkApplyProjControlDiscrPath","doc":"For `Prod.fst` and `ite` this function creates the path: `Prod.fst (ite (Prod _ _) _ _ _ _)`.\nThis path can be used to match on applications of structure projections onto control flow primitives.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.mkApplyProjControlDiscrPath\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">mkApplyProjControlDiscrPath</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structParams </span><span class=\"fn\">projIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">controlFlow</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">controlFlowParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">Meta.DiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.lean#L32-L43","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.applyCondSimproc","line":32,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.applyCondSimproc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.applyCondSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">applyCondSimproc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Meta.Simp.Simproc</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.lean#L19-L30","name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.applyIteSimproc","line":19,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.applyIteSimproc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/ApplyControlFlow.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.applyIteSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">applyIteSimproc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Meta.Simp.Simproc</a></div></div>"}]}