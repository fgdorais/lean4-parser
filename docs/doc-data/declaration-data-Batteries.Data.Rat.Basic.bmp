{"name":"Batteries.Data.Rat.Basic","instances":[{"typeNames":["Eq"],"name":"instDecidableEqRat","className":"Decidable"},{"typeNames":["Rat"],"name":"instInhabitedRat","className":"Inhabited"},{"typeNames":["Rat"],"name":"instToStringRat","className":"ToString"},{"typeNames":["Rat"],"name":"instReprRat","className":"Repr"},{"typeNames":["Rat"],"name":"Rat.instNatCast","className":"NatCast"},{"typeNames":["Rat"],"name":"Rat.instIntCast","className":"IntCast"},{"typeNames":["Rat"],"name":"Rat.instOfNat","className":"OfNat"},{"typeNames":["Rat"],"name":"Rat.instOfScientific","className":"OfScientific"},{"typeNames":["Rat"],"name":"Rat.instLT","className":"LT"},{"typeNames":["LT.lt"],"name":"Rat.instDecidableLt","className":"Decidable"},{"typeNames":["Rat"],"name":"Rat.instLE","className":"LE"},{"typeNames":["LE.le"],"name":"Rat.instDecidableLe","className":"Decidable"},{"typeNames":["Rat"],"name":"Rat.instMul","className":"Mul"},{"typeNames":["Rat"],"name":"Rat.instDiv","className":"Div"},{"typeNames":["Rat"],"name":"Rat.instAdd","className":"Add"},{"typeNames":["Rat"],"name":"Rat.instNeg","className":"Neg"},{"typeNames":["Rat"],"name":"Rat.instSub","className":"Sub"}],"imports":["Init","Batteries.Data.Nat.Gcd"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L281-L286","name":"Rat.ceil","line":281,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.ceil","doc":"The ceiling of a rational number `a` is the smallest integer greater than or equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.ceil\"><span class=\"name\">Rat</span>.<span class=\"name\">ceil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L274-L279","name":"Rat.floor","line":274,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.floor","doc":"The floor of a rational number `a` is the largest integer less than or equal to `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.floor\"><span class=\"name\">Rat</span>.<span class=\"name\">floor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L272-L272","name":"Rat.instSub","line":272,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instSub\"><span class=\"name\">Rat</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L253-L270","name":"Rat.sub","line":253,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.sub","doc":"Subtraction of rational numbers. (This definition is `@[irreducible]` because you don't want to\nunfold it. Use `Rat.sub_def` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.sub\"><span class=\"name\">Rat</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L245-L251","name":"Rat.sub.aux","line":245,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.sub.aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.sub.aux\"><span class=\"name\">Rat</span>.<span class=\"name\">sub</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">ad </span><span class=\"fn\">bd</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">had</span> : <span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbd</span> : <span class=\"fn\">bd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">den</span> := <span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span>;\n<span class=\"fn\">let <span class=\"fn\">num</span> := <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.num\">num</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">bd</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.num\">num</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">ad</span></span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L243-L243","name":"Rat.instNeg","line":243,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instNeg\"><span class=\"name\">Rat</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L239-L241","name":"Rat.neg","line":239,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.neg","doc":"Negation of rational numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.neg\"><span class=\"name\">Rat</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L237-L237","name":"Rat.instAdd","line":237,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instAdd\"><span class=\"name\">Rat</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L217-L235","name":"Rat.add","line":217,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.add","doc":"Addition of rational numbers. (This definition is `@[irreducible]` because you don't want to\nunfold it. Use `Rat.add_def` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.add\"><span class=\"name\">Rat</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L189-L215","name":"Rat.add.aux","line":189,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.add.aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.add.aux\"><span class=\"name\">Rat</span>.<span class=\"name\">add</span>.<span class=\"name\">aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">ad </span><span class=\"fn\">bd</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">had</span> : <span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbd</span> : <span class=\"fn\">bd</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">den</span> := <span class=\"fn\">ad</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span>;\n<span class=\"fn\">let <span class=\"fn\">num</span> := <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.num\">num</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">bd</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.num\">num</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">ad</span></span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L185-L187","name":"Rat.instDiv","line":185,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instDiv","doc":"Division of rational numbers. Note: `div a 0 = 0`.  Written with a separate function `Rat.div`\nas a wrapper so that the definition is not unfolded at `.instance` transparency. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instDiv\"><span class=\"name\">Rat</span>.<span class=\"name\">instDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L182-L183","name":"Rat.div","line":182,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.div","doc":"Division of rational numbers. Note: `div a 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.div\"><span class=\"name\">Rat</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a> → <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a> → <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L166-L180","name":"Rat.inv","line":166,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.inv","doc":"The inverse of a rational number. Note: `inv 0 = 0`. (This definition is `@[irreducible]`\nbecause you don't want to unfold it. Use `Rat.inv_def` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.inv\"><span class=\"name\">Rat</span>.<span class=\"name\">inv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L164-L164","name":"Rat.instMul","line":164,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instMul\"><span class=\"name\">Rat</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L145-L162","name":"Rat.mul","line":145,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.mul","doc":"Multiplication of rational numbers. (This definition is `@[irreducible]` because you don't\nwant to unfold it. Use `Rat.mul_def` instead.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.mul\"><span class=\"name\">Rat</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L142-L143","name":"Rat.instDecidableLe","line":142,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instDecidableLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instDecidableLe\"><span class=\"name\">Rat</span>.<span class=\"name\">instDecidableLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L140-L140","name":"Rat.instLE","line":140,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instLE\"><span class=\"name\">Rat</span>.<span class=\"name\">instLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L137-L138","name":"Rat.instDecidableLt","line":137,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instDecidableLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instDecidableLt\"><span class=\"name\">Rat</span>.<span class=\"name\">instDecidableLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L135-L135","name":"Rat.instLT","line":135,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instLT\"><span class=\"name\">Rat</span>.<span class=\"name\">instLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L123-L133","name":"Rat.blt","line":123,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.blt","doc":"Rational number strictly less than relation, as a `Bool`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.blt\"><span class=\"name\">Rat</span>.<span class=\"name\">blt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L120-L121","name":"Rat.instOfScientific","line":120,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instOfScientific","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instOfScientific\"><span class=\"name\">Rat</span>.<span class=\"name\">instOfScientific</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/OfScientific.html#OfScientific\">OfScientific</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L111-L118","name":"Rat.ofScientific","line":111,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.ofScientific","doc":"Implements \"scientific notation\" `123.4e-5` for rational numbers. (This definition is\n`@[irreducible]` because you don't want to unfold it. Use `Rat.ofScientific_def`,\n`Rat.ofScientific_true_def`, or `Rat.ofScientific_false_def` instead.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.ofScientific\"><span class=\"name\">Rat</span>.<span class=\"name\">ofScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L109-L109","name":"Rat.«term_/._»","line":109,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.«term_/._»","doc":"Form the quotient `n / d` where `n d : Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.«term_/._»\"><span class=\"name\">Rat</span>.<span class=\"name\">«term_/</span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L104-L107","name":"Rat.divInt","line":104,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.divInt","doc":"Form the quotient `n / d` where `n d : Int`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.divInt\"><span class=\"name\">Rat</span>.<span class=\"name\">divInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L101-L102","name":"Rat.isInt","line":101,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.isInt","doc":"Is this rational number integral? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.isInt\"><span class=\"name\">Rat</span>.<span class=\"name\">isInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L99-L99","name":"Rat.instOfNat","line":99,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instOfNat\"><span class=\"name\">Rat</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L97-L97","name":"Rat.instIntCast","line":97,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instIntCast\"><span class=\"name\">Rat</span>.<span class=\"name\">instIntCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L95-L96","name":"Rat.instNatCast","line":95,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#Rat.instNatCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.instNatCast\"><span class=\"name\">Rat</span>.<span class=\"name\">instNatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L92-L93","name":"Rat.ofInt","line":92,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.ofInt","doc":"Embedding of `Int` in the rational numbers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.ofInt\"><span class=\"name\">Rat</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L81-L88","name":"mkRat","line":81,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#mkRat","doc":"Construct a rational number from a numerator and denominator.\nThis is a \"smart constructor\" that divides the numerator and denominator by\nthe gcd to ensure that the resulting rational number is normalized, and returns\nzero if `den` is zero.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#mkRat\"><span class=\"name\">mkRat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L71-L79","name":"Rat.normalize","line":71,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.normalize","doc":"Construct a normalized `Rat` from a numerator and nonzero denominator.\nThis is a \"smart constructor\" that divides the numerator and denominator by\nthe gcd to ensure that the resulting rational number is normalized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.normalize\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den_nz</span> : <span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> := by decide)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L65-L69","name":"Rat.normalize.reduced","line":65,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.normalize.reduced","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.normalize.reduced\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">reduced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">den </span><span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den_nz</span> : <span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">g</span></span>).<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Batteries/Data/Nat/Gcd.html#Nat.Coprime\">Coprime</a></span> (<span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L61-L63","name":"Rat.normalize.den_nz","line":61,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.normalize.den_nz","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.normalize.den_nz\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">den_nz</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">den </span><span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den_nz</span> : <span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L57-L59","name":"Rat.normalize.dvd_den","line":57,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.normalize.dvd_den","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.normalize.dvd_den\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">dvd_den</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">den </span><span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">den</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L52-L55","name":"Rat.normalize.dvd_num","line":52,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.normalize.dvd_num","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.normalize.dvd_num\"><span class=\"name\">Rat</span>.<span class=\"name\">normalize</span>.<span class=\"name\">dvd_num</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">den </span><span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">den</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">num</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L39-L50","name":"Rat.maybeNormalize","line":39,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.maybeNormalize","doc":"Auxiliary definition for `Rat.normalize`. Constructs `num / den` as a rational number,\ndividing both `num` and `den` by `g` (which is the gcd of the two) if it is not 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.maybeNormalize\"><span class=\"name\">Rat</span>.<span class=\"name\">maybeNormalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den </span><span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dvd_num</span> : <span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">num</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dvd_den</span> : <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">den</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den_nz</span> : <span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reduced</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">g</span></span>).<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Batteries/Data/Nat/Gcd.html#Nat.Coprime\">Coprime</a></span> (<span class=\"fn\">den</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L37-L37","name":"Rat.den_pos","line":37,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.den_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.den_pos\"><span class=\"name\">Rat</span>.<span class=\"name\">den_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L34-L35","name":"instReprRat","line":34,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#instReprRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#instReprRat\"><span class=\"name\">instReprRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L31-L32","name":"instToStringRat","line":31,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#instToStringRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#instToStringRat\"><span class=\"name\">instToStringRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L29-L29","name":"instInhabitedRat","line":29,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#instInhabitedRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#instInhabitedRat\"><span class=\"name\">instInhabitedRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L27-L27","name":"instDecidableEqRat","line":27,"kind":"instance","docLink":"./Batteries/Data/Rat/Basic.html#instDecidableEqRat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#instDecidableEqRat\"><span class=\"name\">instDecidableEqRat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L26-L26","name":"Rat.reduced","line":26,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.reduced","doc":"The numerator and denominator are coprime: it is in \"reduced form\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.reduced\"><span class=\"name\">Rat</span>.<span class=\"name\">reduced</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.num\">num</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Batteries/Data/Nat/Gcd.html#Nat.Coprime\">Coprime</a></span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L24-L24","name":"Rat.den_nz","line":24,"kind":"theorem","docLink":"./Batteries/Data/Rat/Basic.html#Rat.den_nz","doc":"The denominator is nonzero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.den_nz\"><span class=\"name\">Rat</span>.<span class=\"name\">den_nz</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/Rat/Basic.html#Rat.den\">den</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L22-L22","name":"Rat.den","line":22,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.den","doc":"The denominator of the rational number is a natural number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.den\"><span class=\"name\">Rat</span>.<span class=\"name\">den</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L20-L20","name":"Rat.num","line":20,"kind":"def","docLink":"./Batteries/Data/Rat/Basic.html#Rat.num","doc":"The numerator of the rational number is an integer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.num\"><span class=\"name\">Rat</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L18-L18","name":"Rat.mk'","line":18,"kind":"ctor","docLink":"./Batteries/Data/Rat/Basic.html#Rat.mk'","doc":"Constructs a rational number from components.\nWe rename the constructor to `mk'` to avoid a clash with the smart constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat.mk'\"><span class=\"name\">Rat</span>.<span class=\"name\">mk'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">den_nz</span> : <span class=\"fn\">den</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> := by decide)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reduced</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">num</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Batteries/Data/Nat/Gcd.html#Nat.Coprime\">Coprime</a></span> <span class=\"fn\">den</span></span> := by decide)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Batteries/Data/Rat/Basic.html#Rat\">Rat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/Rat/Basic.lean#L10-L27","name":"Rat","line":10,"kind":"structure","docLink":"./Batteries/Data/Rat/Basic.html#Rat","doc":"Rational numbers, implemented as a pair of integers `num / den` such that the\ndenominator is positive and the numerator and denominator are coprime.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/Rat/Basic.html#Rat\"><span class=\"name\">Rat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}