{"name":"Init.WFTactics","instances":[],"imports":["Init.SizeOf","Init.MetaTypes","Init.WF"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/WFTactics.lean#L78-L79","name":"tacticDecreasing_tactic","line":78,"kind":"def","docLink":"./Init/WFTactics.html#tacticDecreasing_tactic","doc":"`decreasing_tactic` is called by default on well-founded recursions in order\nto synthesize a proof that recursive calls decrease along the selected\nwell founded relation. It can be locally overridden by using `decreasing_by tac`\non the recursive definition, and it can also be globally extended by adding\nmore definitions for `decreasing_tactic` (or `decreasing_trivial`,\nwhich this tactic calls). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/WFTactics.html#tacticDecreasing_tactic\"><span class=\"name\">tacticDecreasing_tactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/WFTactics.lean#L58-L70","name":"tacticDecreasing_with_","line":58,"kind":"def","docLink":"./Init/WFTactics.html#tacticDecreasing_with_","doc":"Constructs a proof of decreasing along a well founded relation, by simplifying, then applying\nlexicographic order lemmas and finally using `ts` to solve the base case. If it fails,\nit prints a message to help the user diagnose an ill-founded recursive definition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/WFTactics.html#tacticDecreasing_with_\"><span class=\"name\">tacticDecreasing_with_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/WFTactics.lean#L45-L49","name":"tacticDecreasing_trivial_pre_omega","line":45,"kind":"def","docLink":"./Init/WFTactics.html#tacticDecreasing_trivial_pre_omega","doc":"Variant of `decreasing_trivial` that does not use `omega`, intended to be used in core modules\nbefore `omega` is available.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/WFTactics.html#tacticDecreasing_trivial_pre_omega\"><span class=\"name\">tacticDecreasing_trivial_pre_omega</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/WFTactics.lean#L32-L39","name":"tacticDecreasing_trivial","line":32,"kind":"def","docLink":"./Init/WFTactics.html#tacticDecreasing_trivial","doc":"Extensible helper tactic for `decreasing_tactic`. This handles the \"base case\"\nreasoning after applying lexicographic order lemmas.\nIt can be extended by adding more macro definitions, e.g.\n```\nmacro_rules | `(tactic| decreasing_trivial) => `(tactic| linarith)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/WFTactics.html#tacticDecreasing_trivial\"><span class=\"name\">tacticDecreasing_trivial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/WFTactics.lean#L27-L30","name":"tacticClean_wf","line":27,"kind":"def","docLink":"./Init/WFTactics.html#tacticClean_wf","doc":"This tactic is used internally by lean before presenting the proof obligations from a well-founded\ndefinition to the user via `decreasing_by`. It is not necessary to use this tactic manually.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/WFTactics.html#tacticClean_wf\"><span class=\"name\">tacticClean_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/WFTactics.lean#L20-L21","name":"tacticSimp_wf","line":20,"kind":"def","docLink":"./Init/WFTactics.html#tacticSimp_wf","doc":"Unfold definitions commonly used in well founded relation definitions.\n\nSince Lean 4.12, Lean unfolds these definitions automatically before presenting the goal to the\nuser, and this tactic should no longer be necessary. Calls to `simp_wf` can be removed or replaced\nby plain calls to `simp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/WFTactics.html#tacticSimp_wf\"><span class=\"name\">tacticSimp_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}