{"name":"Lean.Compiler.LCNF.FloatLetIn","instances":[{"typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"],"name":"Lean.Compiler.LCNF.FloatLetIn.instHashableDecision","className":"Hashable"},{"typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"],"name":"Lean.Compiler.LCNF.FloatLetIn.instBEqDecision","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"],"name":"Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.FloatLetIn.Decision"],"name":"Lean.Compiler.LCNF.FloatLetIn.instReprDecision","className":"Repr"}],"imports":["Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.FVarUtil","Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L306-L307","name":"Lean.Compiler.LCNF.floatLetIn","line":306,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.floatLetIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.floatLetIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">floatLetIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a> := <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase.base\">Phase.base</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occurrence</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L303-L304","name":"Lean.Compiler.LCNF.Decl.floatLetIn","line":303,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.Decl.floatLetIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.Decl.floatLetIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">floatLetIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L264-L299","name":"Lean.Compiler.LCNF.FloatLetIn.floatLetIn.go","line":264,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">floatLetIn</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L250-L262","name":"Lean.Compiler.LCNF.FloatLetIn.floatLetIn.goCases","line":250,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn.goCases","doc":"Iterate through the collected declarations,\ndetermining from the bottom up whether they (and the declarations they refer to)\nshould get moved down into the arms of the cases statement or not.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn.goCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">floatLetIn</span>.<span class=\"name\">goCases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L237-L299","name":"Lean.Compiler.LCNF.FloatLetIn.floatLetIn","line":237,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn","doc":"Iterate through `decl`, pushing local declarations that are only used in one\ncontrol flow arm into said arm in order to avoid useless computations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.floatLetIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">floatLetIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L230-L235","name":"Lean.Compiler.LCNF.FloatLetIn.float.goFVar","line":230,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.float.goFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.float.goFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">float</span>.<span class=\"name\">goFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arm</span> : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L179-L235","name":"Lean.Compiler.LCNF.FloatLetIn.float","line":179,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.float","doc":"Will:\n- put `decl` into the arm it is marked to be moved into\n- for any variables that might occur in `decl` and are of interest:\n  - if they are already meant to be floated into the same arm or not at all leave them untouched:\n    ```\n    let x := ...\n    let y := x + z\n    cases z with\n    | n => x * y\n    | m => z\n    ```\n    If we are at `y` `x` is already marked to be floated into `n` as well.\n  - if there hasn't be a decision yet, that is they are marked with `.unknown` we float\n    them into the same arm as the current value:\n    ```\n    let x := ..\n    let y := x + 2\n    cases z with\n    | n => y\n    | m => z\n    ```\n    Here `x` is initially marked as `.unknown` since it occurs in no branch, however\n    since we want to move `y` into the `n` branch we can also decide to move `x`\n    into the `n` branch. Note that this decision might be revoked later on in the case of:\n    ```\n    let x := ..\n    let a := x + 1\n    let y := x + 2\n    cases z with\n    | n => y\n    | m => a\n    ```\n    When we visit `a` `x` is now marked as getting moved into `n` but since it also occurs\n    in `a` which wants to be moved somewhere else we will instead decide to not move `x`\n    at all.\n  - if they are meant to be floated somewhere else decide that they won't get floated:\n    ```\n    let x := ...\n    let y := x + z\n    cases z with\n    | n => y\n    | m => x\n    ```\n    If we are at `y` `x` is still marked to be moved but we don't want that.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.float\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">float</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L175-L177","name":"Lean.Compiler.LCNF.FloatLetIn.dontFloat.goFVar","line":175,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.dontFloat.goFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.dontFloat.goFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">dontFloat</span>.<span class=\"name\">goFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L155-L177","name":"Lean.Compiler.LCNF.FloatLetIn.dontFloat","line":155,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.dontFloat","doc":"Will:\n- put `decl` into the `dont` arm\n- decide that any free variable that occurs in `decl` and is a declaration\n  of interest as not getting moved either.\n```\nlet x := ...\nlet y := ...\nlet z := x + y\ncases z with\n| n => z * x\n| m => z * y\n```\nHere `x` and `y` are originally marked as getting floated into `n` and `m`\nrespectively but since `z` can't be moved we don't want that to move `x` and `y`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.dontFloat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">dontFloat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\">FloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L146-L153","name":"Lean.Compiler.LCNF.FloatLetIn.initialNewArms","line":146,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialNewArms","doc":"Compute the initial new arms. This will just set up a map from all arms of\n`cs` to empty `Array`s, plus one additional entry for `dont`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialNewArms\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialNewArms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L143-L144","name":"Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goCases","line":143,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goCases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialDecisions</span>.<span class=\"name\">goCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a>)</span> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L141-L142","name":"Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goAlt","line":141,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialDecisions</span>.<span class=\"name\">goAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a>)</span> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L133-L138","name":"Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goFVar","line":133,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions.goFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialDecisions</span>.<span class=\"name\">goFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">plannedDecision</span> : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a>)</span> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L109-L144","name":"Lean.Compiler.LCNF.FloatLetIn.initialDecisions","line":109,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions","doc":"Compute the initial decision for all declarations that `BaseFloatM` collected\nup to this point, with respect to `cs`. The initial decisions are:\n- `dont` if the declaration is detected by `ignore?`\n- `dont` if the declaration is the discriminant of `cs` since we obviously need\n  the discriminant to be computed before the match.\n- `dont` if we see the declaration being used in more than one cases arm\n- `arm` or `default` if we see the declaration only being used in exactly one cases arm\n- `unknown` otherwise\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.initialDecisions\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">initialDecisions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L96-L107","name":"Lean.Compiler.LCNF.FloatLetIn.ignore?","line":96,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.ignore?","doc":"Whether to ignore `decl` for the floating mechanism. We want to do this if:\n- `decl`' is storing a typeclass instance\n- `decl` is a projection from a variable that is storing a typeclass instance\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.ignore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">ignore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L89-L94","name":"Lean.Compiler.LCNF.FloatLetIn.withNewScope","line":89,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewScope","doc":"Run `x` with an empty list of declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">withNewScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L82-L87","name":"Lean.Compiler.LCNF.FloatLetIn.withNewCandidate","line":82,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewCandidate","doc":"Add `decl` to the list of declarations and run `x` with that updated context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.withNewCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">withNewCandidate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\">BaseFloatM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L77-L80","name":"Lean.Compiler.LCNF.FloatLetIn.FloatM","line":77,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM","doc":"Use to compute the actual floating.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L72-L75","name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatM","line":72,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM","doc":"Use to collect relevant declarations for the floating mechanism.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L70-L70","name":"Lean.Compiler.LCNF.FloatLetIn.FloatState.newArms","line":70,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.newArms","doc":"A map from decisions (excluding `unknown`) to the declarations with\nthese decisions (in correct order). Basically:\n- Which declarations do we not move\n- Which declarations do we move into a certain arm\n- Which declarations do we move into the default arm\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.newArms\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span>.<span class=\"name\">newArms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\">FloatState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L62-L62","name":"Lean.Compiler.LCNF.FloatLetIn.FloatState.decision","line":62,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.decision","doc":"A map from identifiers of declarations to their current decision.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.decision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span>.<span class=\"name\">decision</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\">FloatState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L58-L58","name":"Lean.Compiler.LCNF.FloatLetIn.FloatState.mk","line":58,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decision</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newArms</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\">FloatState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L55-L70","name":"Lean.Compiler.LCNF.FloatLetIn.FloatState","line":55,"kind":"structure","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState","doc":"The state for `FloatM`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.FloatState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">FloatState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L53-L53","name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.decls","line":53,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.decls","doc":"All the declarations that were collected in the current LCNF basic\nblock up to the current statement (in reverse order for efficiency).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext\">BaseFloatContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L48-L48","name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.mk","line":48,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext\">BaseFloatContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L45-L53","name":"Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext","line":45,"kind":"structure","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext","doc":"The context for `BaseFloatM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.BaseFloatContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">BaseFloatContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L41-L43","name":"Lean.Compiler.LCNF.FloatLetIn.Decision.ofAlt","line":41,"kind":"def","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.ofAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.ofAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">ofAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a> → <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L39-L39","name":"Lean.Compiler.LCNF.FloatLetIn.instReprDecision","line":39,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instReprDecision","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instReprDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instReprDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L39-L39","name":"Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision","line":39,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instInhabitedDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instInhabitedDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L39-L39","name":"Lean.Compiler.LCNF.FloatLetIn.instBEqDecision","line":39,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instBEqDecision","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instBEqDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instBEqDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L39-L39","name":"Lean.Compiler.LCNF.FloatLetIn.instHashableDecision","line":39,"kind":"instance","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instHashableDecision","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.instHashableDecision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">instHashableDecision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L34-L38","name":"Lean.Compiler.LCNF.FloatLetIn.Decision.unknown","line":34,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.unknown","doc":"No decision has been made yet.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.unknown\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">unknown</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L29-L33","name":"Lean.Compiler.LCNF.FloatLetIn.Decision.dont","line":29,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.dont","doc":"Dont move this declaration it is needed where it is right now.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.dont\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">dont</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L25-L28","name":"Lean.Compiler.LCNF.FloatLetIn.Decision.default","line":25,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.default","doc":"Push into the default arm.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L20-L24","name":"Lean.Compiler.LCNF.FloatLetIn.Decision.arm","line":20,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.arm","doc":"Push into the arm with name `name`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision.arm\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span>.<span class=\"name\">arm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\">Decision</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/FloatLetIn.lean#L16-L39","name":"Lean.Compiler.LCNF.FloatLetIn.Decision","line":16,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision","doc":"The decision of the float mechanism.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/FloatLetIn.html#Lean.Compiler.LCNF.FloatLetIn.Decision\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FloatLetIn</span>.<span class=\"name\">Decision</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}