{"name":"Std.Sync.Channel","instances":[{"typeNames":["Std.CloseableChannel.Error"],"name":"Std.CloseableChannel.instReprError","className":"Repr"},{"typeNames":["Eq"],"name":"Std.CloseableChannel.instDecidableEqError","className":"Decidable"},{"typeNames":["Std.CloseableChannel.Error"],"name":"Std.CloseableChannel.instHashableError","className":"Hashable"},{"typeNames":["Std.CloseableChannel.Error"],"name":"Std.CloseableChannel.instToStringError","className":"ToString"},{"typeNames":["EIO","IO"],"name":"Std.CloseableChannel.instMonadLiftEIOErrorIO","className":"MonadLift"},{"typeNames":["_private.Std.Sync.Channel.0.Std.CloseableChannel.Unbounded.State"],"name":"Std.CloseableChannel.Unbounded.instNonemptyState","className":"Nonempty"},{"typeNames":["_private.Std.Sync.Channel.0.Std.CloseableChannel.Unbounded"],"name":"Std.CloseableChannel.instNonemptyUnbounded","className":"Nonempty"},{"typeNames":["_private.Std.Sync.Channel.0.Std.CloseableChannel.Flavors"],"name":"Std.CloseableChannel.instNonemptyFlavors","className":"Nonempty"},{"typeNames":["Std.CloseableChannel"],"name":"Std.instNonemptyCloseableChannel","className":"Nonempty"},{"typeNames":["Std.CloseableChannel.Sync"],"name":"Std.instNonemptySync","className":"Nonempty"},{"typeNames":["Std.CloseableChannel.Sync"],"name":"Std.CloseableChannel.Sync.instForInOfMonadLiftTBaseIO","className":"ForIn"},{"typeNames":["Std.Channel"],"name":"Std.instNonemptyChannel","className":"Nonempty"},{"typeNames":["Std.Channel.Sync"],"name":"Std.instNonemptySync_1","className":"Nonempty"},{"typeNames":["Std.Channel.Sync"],"name":"Std.Channel.Sync.instForInOfInhabitedOfMonadLiftTBaseIO","className":"ForIn"}],"imports":["Init.System.Promise","Init.Data.Queue","Std.Sync.Mutex","Std.Internal.Async.Select"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L924-L926","name":"Std.Channel.Sync.instForInOfInhabitedOfMonadLiftTBaseIO","line":924,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.instForInOfInhabitedOfMonadLiftTBaseIO","doc":"`for msg in ch.sync do ...` receives all messages in the channel until it is closed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.instForInOfInhabitedOfMonadLiftTBaseIO\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">instForInOfInhabitedOfMonadLiftTBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L911-L915","name":"Std.Channel.Sync.recv","line":911,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.recv","doc":"Receive a value from the channel, blocking unitl the transmission could be completed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.recv\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L908-L909","name":"Std.Channel.Sync.tryRecv","line":908,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.tryRecv","doc":"Try to receive a value from the channel, if this can be completed right away without blocking return\n`some value`, otherwise return `none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L902-L906","name":"Std.Channel.Sync.send","line":902,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.send","doc":"Send a value through the channel, blocking until the transmission could be completed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.send\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L899-L900","name":"Std.Channel.Sync.trySend","line":899,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.trySend","doc":"Try to send a value to the channel, if this can be completed right away without blocking return\n`true`, otherwise don't send the value and return `false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.trySend\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">trySend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L896-L897","name":"Std.Channel.Sync.new","line":896,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync.new","doc":"Create a new channel, if:\n- `capacity` is `none` it will be unbounded (the default)\n- `capacity` is `some 0` it will always force a rendezvous between sender and receiver\n- `capacity` is `some n` with `n > 0` it will use a buffer of size `n` and begin blocking once it\n  is filled\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync.new\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L891-L892","name":"Std.Channel.sync","line":891,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.sync","doc":"This function is a no-op and just a convenient way to expose the synchronous API of the channel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.sync\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">sync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Sync</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L886-L889","name":"Std.Channel.forAsync","line":886,"kind":"opaque","docLink":"./Std/Sync/Channel.html#Std.Channel.forAsync","doc":"`ch.forAsync f` calls `f` for every message received on `ch`.\n\nNote that if this function is called twice, each message will only arrive at exactly one invocation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.forAsync\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">forAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L864-L884","name":"Std.Channel.recvSelector","line":864,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.recvSelector","doc":"Creates a `Selector` that resolves once `ch` has data available and provides that that data.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.recvSelector\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">recvSelector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Internal.IO.Async.Selector</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L856-L861","name":"Std.Channel.recv","line":856,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.recv","doc":"Receive a value from the channel, returning a task that will resolve once the transmission could be\ncompleted. Note that the task may resolve to `none` if the channel was closed before it could be\ncompleted.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.recv\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L852-L854","name":"Std.Channel.tryRecv","line":852,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.tryRecv","doc":"Try to receive a value from the channel, if this can be completed right away without blocking return\n`some value`, otherwise return `none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L842-L850","name":"Std.Channel.send","line":842,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.send","doc":"Send a value through the channel, returning a task that will resolve once the transmission could be\ncompleted.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.send\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L838-L840","name":"Std.Channel.trySend","line":838,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.trySend","doc":"Try to send a value to the channel, if this can be completed right away without blocking return\n`true`, otherwise don't send the value and return `false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.trySend\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">trySend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L834-L836","name":"Std.Channel.new","line":834,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.new","doc":"Create a new channel, if:\n- `capacity` is `none` it will be unbounded (the default)\n- `capacity` is `some 0` it will always force a rendezvous between sender and receiver\n- `capacity` is `some n` with `n > 0` it will use a buffer of size `n` and begin blocking once it\n  is filled\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.new\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L829-L830","name":"Std.instNonemptySync_1","line":829,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.instNonemptySync_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.instNonemptySync_1\"><span class=\"name\">Std</span>.<span class=\"name\">instNonemptySync_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel.Sync\">Channel.Sync</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L818-L827","name":"Std.Channel.Sync","line":818,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.Channel.Sync","doc":"A multi-producer multi-consumer FIFO channel that offers both bounded and unbounded buffering\nand a synchronous API. This type acts as a convenient layer to use a channel in a blocking fashion\nand is not actually different from the original channel.\n\nIf a channel needs to be closed to indicate some sort of completion event use\n`Std.CloseableChannel.Sync` instead. Note that `Std.CloseableChannel.Sync` introduces a need for error\nhandling in some cases, thus `Std.Channel.Sync` is usually easier to use if applicable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel.Sync\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span>.<span class=\"name\">Sync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L816-L816","name":"Std.instNonemptyChannel","line":816,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.instNonemptyChannel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.instNonemptyChannel\"><span class=\"name\">Std</span>.<span class=\"name\">instNonemptyChannel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.Channel\">Channel</a> <span class=\"fn\">α✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L805-L816","name":"Std.Channel","line":805,"kind":"structure","docLink":"./Std/Sync/Channel.html#Std.Channel","doc":"A multi-producer multi-consumer FIFO channel that offers both bounded and unbounded buffering\nand an asynchronous API, to switch into synchronous mode use `Channel.sync`.\n\nIf a channel needs to be closed to indicate some sort of completion event use `Std.CloseableChannel`\ninstead. Note that `Std.CloseableChannel` introduces a need for error handling in some cases, thus\n`Std.Channel` is usually easier to use if applicable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.Channel\"><span class=\"name\">Std</span>.<span class=\"name\">Channel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L797-L799","name":"Std.CloseableChannel.Sync.instForInOfMonadLiftTBaseIO","line":797,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.instForInOfMonadLiftTBaseIO","doc":"`for msg in ch.sync do ...` receives all messages in the channel until it is closed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.instForInOfMonadLiftTBaseIO\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">instForInOfMonadLiftTBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L781-L786","name":"Std.CloseableChannel.Sync.recv","line":781,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.recv","doc":"Receive a value from the channel, blocking unitl the transmission could be completed. Note that the\nreturn value may be `none` if the channel was closed before it could be completed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.recv\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L778-L779","name":"Std.CloseableChannel.Sync.tryRecv","line":778,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.tryRecv","doc":"Try to receive a value from the channel, if this can be completed right away without blocking return\n`some value`, otherwise return `none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L775-L776","name":"Std.CloseableChannel.Sync.isClosed","line":775,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.isClosed","doc":"Return `true` if the channel is closed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.isClosed\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">isClosed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L772-L773","name":"Std.CloseableChannel.Sync.close","line":772,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.close","doc":"Closes the channel, returns `Except.ok` when called the first time, otherwise `Except.error`.\nWhen a channel is closed:\n- no new values can be sent successfully anymore\n- all blocked consumers are resolved to `none` (as no new messages can be sent they will never\n  resolve)\n- if there are already values waiting to be received they can still be received by subsequent `recv`\n  calls\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.close\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">close</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L765-L770","name":"Std.CloseableChannel.Sync.send","line":765,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.send","doc":"Send a value through the channel, blocking until the transmission could be completed. Note that this\nfunction may throw an error when trying to send to an already closed channel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.send\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L762-L763","name":"Std.CloseableChannel.Sync.trySend","line":762,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.trySend","doc":"Try to send a value to the channel, if this can be completed right away without blocking return\n`true`, otherwise don't send the value and return `false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.trySend\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">trySend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L759-L760","name":"Std.CloseableChannel.Sync.new","line":759,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.new","doc":"Create a new channel, if:\n- `capacity` is `none` it will be unbounded (the default)\n- `capacity` is `some 0` it will always force a rendezvous between sender and receiver\n- `capacity` is `some n` with `n > 0` it will use a buffer of size `n` and begin blocking once it\n  is filled\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync.new\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L751-L755","name":"Std.CloseableChannel.sync","line":751,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.sync","doc":"This function is a no-op and just a convenient way to expose the synchronous API of the channel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.sync\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">sync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">Sync</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L740-L749","name":"Std.CloseableChannel.forAsync","line":740,"kind":"opaque","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.forAsync","doc":"`ch.forAsync f` calls `f` for every message received on `ch`.\n\nNote that if this function is called twice, each message will only arrive at exactly one invocation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.forAsync\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">forAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Core.html#Task.Priority\">Task.Priority</a> := <a href=\"./Init/Core.html#Task.Priority.default\">Task.Priority.default</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L729-L738","name":"Std.CloseableChannel.recvSelector","line":729,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.recvSelector","doc":"Creates a `Selector` that resolves once `ch` has data available and provides that that data.\nIn particular if `ch` is closed while waiting on this `Selector` and no data is available already\nthis will resolve to `none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.recvSelector\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">recvSelector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Internal.IO.Async.Selector</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L717-L726","name":"Std.CloseableChannel.recv","line":717,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.recv","doc":"Receive a value from the channel, returning a task that will resolve once the transmission could be\ncompleted. Note that the task may resolve to `none` if the channel was closed before it could be\ncompleted.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.recv\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">recv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L707-L715","name":"Std.CloseableChannel.tryRecv","line":707,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.tryRecv","doc":"Try to receive a value from the channel, if this can be completed right away without blocking return\n`some value`, otherwise return `none`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.tryRecv\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">tryRecv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L698-L705","name":"Std.CloseableChannel.isClosed","line":698,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.isClosed","doc":"Return `true` if the channel is closed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.isClosed\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">isClosed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L683-L696","name":"Std.CloseableChannel.close","line":683,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.close","doc":"Closes the channel, returns `Except.ok` when called the first time, otherwise `Except.error`.\nWhen a channel is closed:\n- no new values can be sent successfully anymore\n- all blocked consumers are resolved to `none` (as no new messages can be sent they will never\n  resolve)\n- if there are already values waiting to be received they can still be received by subsequent `recv`\n  calls\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.close\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">close</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L672-L681","name":"Std.CloseableChannel.send","line":672,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.send","doc":"Send a value through the channel, returning a task that will resolve once the transmission could be\ncompleted. Note that the task may resolve to `Except.error` if the channel was closed before it\ncould be completed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.send\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">send</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L662-L670","name":"Std.CloseableChannel.trySend","line":662,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.trySend","doc":"Try to send a value to the channel, if this can be completed right away without blocking return\n`true`, otherwise don't send the value and return `false`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.trySend\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">trySend</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ch</span> : <span class=\"fn\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L649-L660","name":"Std.CloseableChannel.new","line":649,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.new","doc":"Create a new channel, if:\n- `capacity` is `none` it will be unbounded (the default)\n- `capacity` is `some 0` it will always force a rendezvous between sender and receiver\n- `capacity` is `some n` with `n > 0` it will use a buffer of size `n` and begin blocking once it\n  is filled\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.new\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L644-L645","name":"Std.instNonemptySync","line":644,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.instNonemptySync","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.instNonemptySync\"><span class=\"name\">Std</span>.<span class=\"name\">instNonemptySync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\">CloseableChannel.Sync</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L641-L642","name":"Std.instNonemptyCloseableChannel","line":641,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.instNonemptyCloseableChannel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.instNonemptyCloseableChannel\"><span class=\"name\">Std</span>.<span class=\"name\">instNonemptyCloseableChannel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#Std.CloseableChannel\">CloseableChannel</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L630-L639","name":"Std.CloseableChannel.Sync","line":630,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Sync","doc":"A multi-producer multi-consumer FIFO channel that offers both bounded and unbounded buffering\nand a synchronous API. This type acts as a convenient layer to use a channel in a blocking fashion\nand is not actually different from the original channel.\n\nAdditionally `Std.CloseableChannel.Sync` can be closed if necessary, unlike `Std.Channel.Sync`.\nThis introduces the need to handle errors in some cases, thus it is usually easier to use\n`Std.Channel` if applicable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Sync\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Sync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L620-L628","name":"Std.CloseableChannel","line":620,"kind":"def","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel","doc":"A multi-producer multi-consumer FIFO channel that offers both bounded and unbounded buffering\nand an asynchronous API, to switch into synchronous mode use `CloseableChannel.sync`.\n\nAdditionally `Std.CloseableChannel` can be closed if necessary, unlike `Std.Channel`.\nThis introduces a need for error handling in some cases, thus it is usually easier to use\n`Std.Channel` if applicable.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L616-L616","name":"Std.CloseableChannel.instNonemptyFlavors","line":616,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instNonemptyFlavors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instNonemptyFlavors\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instNonemptyFlavors</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#_private.Std.Sync.Channel.0.Std.CloseableChannel.Flavors\">Std.CloseableChannel.Flavors✝</a> <span class=\"fn\">α✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L88-L88","name":"Std.CloseableChannel.instNonemptyUnbounded","line":88,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instNonemptyUnbounded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instNonemptyUnbounded\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instNonemptyUnbounded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#_private.Std.Sync.Channel.0.Std.CloseableChannel.Unbounded\">Std.CloseableChannel.Unbounded✝</a> <span class=\"fn\">α✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L84-L84","name":"Std.CloseableChannel.Unbounded.instNonemptyState","line":84,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Unbounded.instNonemptyState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Unbounded.instNonemptyState\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Unbounded</span>.<span class=\"name\">instNonemptyState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/Channel.html#_private.Std.Sync.Channel.0.Std.CloseableChannel.Unbounded.State\">Std.CloseableChannel.Unbounded.State✝</a> <span class=\"fn\">α✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L45-L46","name":"Std.CloseableChannel.instMonadLiftEIOErrorIO","line":45,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instMonadLiftEIOErrorIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instMonadLiftEIOErrorIO\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instMonadLiftEIOErrorIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a>)</span> <a href=\"./Init/System/IO.html#IO\">IO</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L40-L43","name":"Std.CloseableChannel.instToStringError","line":40,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instToStringError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instToStringError\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instToStringError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L38-L38","name":"Std.CloseableChannel.instHashableError","line":38,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instHashableError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instHashableError\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instHashableError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L38-L38","name":"Std.CloseableChannel.instDecidableEqError","line":38,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instDecidableEqError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instDecidableEqError\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instDecidableEqError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L38-L38","name":"Std.CloseableChannel.instReprError","line":38,"kind":"instance","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.instReprError","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.instReprError\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">instReprError</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L34-L37","name":"Std.CloseableChannel.Error.alreadyClosed","line":34,"kind":"ctor","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Error.alreadyClosed","doc":"Tried to close an already closed channel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error.alreadyClosed\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Error</span>.<span class=\"name\">alreadyClosed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L30-L33","name":"Std.CloseableChannel.Error.closed","line":30,"kind":"ctor","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Error.closed","doc":"Tried to send to a closed channel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error.closed\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Error</span>.<span class=\"name\">closed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\">Error</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/Channel.lean#L26-L38","name":"Std.CloseableChannel.Error","line":26,"kind":"inductive","docLink":"./Std/Sync/Channel.html#Std.CloseableChannel.Error","doc":"Errors that may be thrown while interacting with the channel API.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/Channel.html#Std.CloseableChannel.Error\"><span class=\"name\">Std</span>.<span class=\"name\">CloseableChannel</span>.<span class=\"name\">Error</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}