{"name":"Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.ReifiedBVLogical","instances":[],"imports":["Lean.Elab.Tactic.BVDecide.Frontend.BVDecide.ReifiedBVPred"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.lean#L111-L144","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkIte","line":111,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkIte","doc":"Construct the reified version of `if discrExpr then lhsExpr else rhsExpr`.\nThis function assumes that `discrExpr`, lhsExpr` and `rhsExpr` are the corresponding expressions to\n`discr`, `lhs` and `rhs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkIte\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">mkIte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrExpr </span><span class=\"fn\">lhsExpr </span><span class=\"fn\">rhsExpr </span><span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.lean#L97-L109","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkNot","line":97,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkNot","doc":"Construct the reified version of `Bool.not subExpr`.\nThis function assumes that `subExpr` is the expression corresponding to `sub`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkNot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">mkNot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sub</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subExpr </span><span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.lean#L90-L95","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkGate.congrThmOfGate","line":90,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkGate.congrThmOfGate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkGate.congrThmOfGate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">mkGate</span>.<span class=\"name\">congrThmOfGate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gate</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.Gate\">Std.Tactic.BVDecide.Gate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.lean#L57-L95","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkGate","line":57,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkGate","doc":"Construct the reified version of applying the gate in `gate` to `lhs` and `rhs`.\nThis function assumes that `lhsExpr` and `rhsExpr` are the corresponding expressions to `lhs`\nand `rhs`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkGate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">mkGate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhsExpr </span><span class=\"fn\">rhsExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gate</span> : <a href=\"./Std/Tactic/BVDecide/Bitblast/BoolExpr/Basic.html#Std.Tactic.BVDecide.Gate\">Std.Tactic.BVDecide.Gate</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.lean#L47-L55","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkBoolConst","line":47,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkBoolConst","doc":"Build a reified version of the constant `val`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkBoolConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">mkBoolConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.lean#L40-L45","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.boolAtom","line":40,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.boolAtom","doc":"Construct an uninterrpeted `Bool` atom from `t`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.boolAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">boolAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.lean#L30-L38","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.ofPred","line":30,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.ofPred","doc":"Construct a `ReifiedBVLogical` from `ReifiedBVPred` by wrapping it as an atom.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.ofPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">ofPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bvPred</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVPred\">ReifiedBVPred</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical\">ReifiedBVLogical</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.lean#L27-L28","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkEvalExpr","line":27,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkEvalExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkEvalExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">mkEvalExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/Reflect.html#Lean.Elab.Tactic.BVDecide.Frontend.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.lean#L24-L25","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkTrans","line":24,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkTrans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkTrans\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">mkTrans</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z </span><span class=\"fn\">hxy </span><span class=\"fn\">hyz</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.lean#L21-L22","name":"Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkRefl","line":21,"kind":"def","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkRefl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/BVDecide/ReifiedBVLogical.html#Lean.Elab.Tactic.BVDecide.Frontend.ReifiedBVLogical.mkRefl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">ReifiedBVLogical</span>.<span class=\"name\">mkRefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"}]}