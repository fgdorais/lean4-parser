{"name":"Lean.Parser.StrInterpolation","instances":[],"imports":["Lean.Parser.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/StrInterpolation.lean#L60-L72","name":"Lean.Parser.interpolatedStr","line":60,"kind":"def","docLink":"./Lean/Parser/StrInterpolation.html#Lean.Parser.interpolatedStr","doc":"The parser `interpolatedStr(p)` parses a string literal like `\"foo\"` (see `str`), but the string\nmay also contain `{}` escapes, and within the escapes the parser `p` is used. For example,\n`interpolatedStr(term)` will parse `\"foo {2 + 2}\"`, where `2 + 2` is parsed as a term rather than\nas a string. Note that the full Lean term grammar is available here, including string literals,\nso for example `\"foo {\"bar\" ++ \"baz\"}\"` is a legal interpolated string (which evaluates to\n`foo barbaz`).\n\nThis parser has arity 1, and returns a `interpolatedStrKind` with an odd number of arguments,\nalternating between chunks of literal text and results from `p`. The literal chunks contain\nuninterpreted substrings of the input. For example, `\"foo\\n{2 + 2}\"` would have three arguments:\nan atom `\"foo\\n{`, the parsed `2 + 2` term, and then the atom `}\"`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/StrInterpolation.html#Lean.Parser.interpolatedStr\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">interpolatedStr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/StrInterpolation.lean#L55-L58","name":"Lean.Parser.interpolatedStrNoAntiquot","line":55,"kind":"def","docLink":"./Lean/Parser/StrInterpolation.html#Lean.Parser.interpolatedStrNoAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/StrInterpolation.html#Lean.Parser.interpolatedStrNoAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">interpolatedStrNoAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/StrInterpolation.lean#L16-L43","name":"Lean.Parser.interpolatedStrFn.parse","line":16,"kind":"opaque","docLink":"./Lean/Parser/StrInterpolation.html#Lean.Parser.interpolatedStrFn.parse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/StrInterpolation.html#Lean.Parser.interpolatedStrFn.parse\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">interpolatedStrFn</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stackSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startPos</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserContext\">ParserContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserState\">ParserState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/StrInterpolation.lean#L13-L53","name":"Lean.Parser.interpolatedStrFn","line":13,"kind":"def","docLink":"./Lean/Parser/StrInterpolation.html#Lean.Parser.interpolatedStrFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/StrInterpolation.html#Lean.Parser.interpolatedStrFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">interpolatedStrFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">ParserFn</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/StrInterpolation.lean#L10-L11","name":"Lean.Parser.isQuotableCharForStrInterpolant","line":10,"kind":"def","docLink":"./Lean/Parser/StrInterpolation.html#Lean.Parser.isQuotableCharForStrInterpolant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/StrInterpolation.html#Lean.Parser.isQuotableCharForStrInterpolant\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">isQuotableCharForStrInterpolant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"}]}