{"name":"Lean.Parser.Tactic.Doc","instances":[],"imports":["Lean.Attributes","Lean.DocString.Extension","Lean.Elab.InfoTree.Main","Lean.Parser.Attr","Lean.Parser.Extension"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L273-L287","name":"Lean.Parser.Tactic.Doc.tacticDocsOnTactics","line":273,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.tacticDocsOnTactics","doc":"Validates that a tactic alternative is actually a tactic and that syntax tagged as tactics are\ntactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.tacticDocsOnTactics\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">tacticDocsOnTactics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Extension.html#Lean.Parser.ParserAttributeHook\">ParserAttributeHook</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L261-L266","name":"Lean.Parser.Tactic.Doc.getTacticExtensionString.bullet","line":261,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.getTacticExtensionString.bullet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.getTacticExtensionString.bullet\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getTacticExtensionString</span>.<span class=\"name\">bullet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">str</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L259-L260","name":"Lean.Parser.Tactic.Doc.getTacticExtensionString.indentLine","line":259,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.getTacticExtensionString.indentLine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.getTacticExtensionString.indentLine\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getTacticExtensionString</span>.<span class=\"name\">indentLine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">str</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L253-L266","name":"Lean.Parser.Tactic.Doc.getTacticExtensionString","line":253,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.getTacticExtensionString","doc":"Gets the rendered extensions for the given canonical tactic name "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.getTacticExtensionString\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getTacticExtensionString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tactic</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L242-L251","name":"Lean.Parser.Tactic.Doc.getTacticExtensions","line":242,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.getTacticExtensions","doc":"Gets the extensions declared for the documentation for the given canonical tactic name "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.getTacticExtensions\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getTacticExtensions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tactic</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L226-L240","name":"Lean.Parser.Tactic.Doc.tacticDocExtExt","line":226,"kind":"opaque","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.tacticDocExtExt","doc":"Extensions to tactic documentation.\n\nThis provides a structured way to indicate that an extensible tactic has been extended (for\ninstance, new cases tried by `trivial`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.tacticDocExtExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">tacticDocExtExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>) (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L155-L177","name":"Lean.Parser.Tactic.Doc.tacticTagExt","line":155,"kind":"opaque","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.tacticTagExt","doc":"The mapping between tags and tactics. Tags may be applied in any module, not just the defining\nmodule for the tactic.\n\nBecause this is expected to be augmented regularly, but queried rarely (only when generating\ndocumentation indices), it is just stored as flat unsorted arrays of pairs. Before it is used for\nsome other purpose, consider a new representation.\n\nThe first projection in each pair is the tactic name, and the second is the tag name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.tacticTagExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">tacticTagExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L143-L153","name":"Lean.Parser.Tactic.Doc.allTagsWithInfo","line":143,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.allTagsWithInfo","doc":"Enumerate the tactic tags that are available, with their user-facing name and docstring "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.allTagsWithInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">allTagsWithInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L132-L141","name":"Lean.Parser.Tactic.Doc.allTags","line":132,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.allTags","doc":"Enumerate the tactic tags that are available "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.allTags\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">allTags</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L120-L130","name":"Lean.Parser.Tactic.Doc.tagInfo","line":120,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.tagInfo","doc":"Get the user-facing name and docstring for a tactic tag.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.tagInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">tagInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L104-L118","name":"Lean.Parser.Tactic.Doc.knownTacticTagExt","line":104,"kind":"opaque","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.knownTacticTagExt","doc":"The known tactic tags that allow tactics to be grouped by purpose.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.knownTacticTagExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">knownTacticTagExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>) (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)\n  <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L54-L65","name":"Lean.Parser.Tactic.Doc.aliases","line":54,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.aliases","doc":"Find all alternatives for a given canonical tactic name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.aliases\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">aliases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L42-L52","name":"Lean.Parser.Tactic.Doc.alternativeOfTactic","line":42,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.alternativeOfTactic","doc":"If `tac` is registered as the alternative form of another tactic, then return the canonical name for\nit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.alternativeOfTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">alternativeOfTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L28-L40","name":"Lean.Parser.Tactic.Doc.tacticAlternativeExt","line":28,"kind":"opaque","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.tacticAlternativeExt","doc":"Stores a collection of *tactic alternatives*, to track which new syntax rules represent new forms of\nexisting tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.tacticAlternativeExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">tacticAlternativeExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Parser/Tactic/Doc.lean#L20-L26","name":"Lean.Parser.Tactic.Doc.isTactic","line":20,"kind":"def","docLink":"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.isTactic","doc":"Check whether a name is a tactic syntax kind "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Parser/Tactic/Doc.html#Lean.Parser.Tactic.Doc.isTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Doc</span>.<span class=\"name\">isTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"}]}