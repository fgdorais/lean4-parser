{"name":"Lean.Linter.List","instances":[],"imports":["Lean.Elab.Command","Lean.Server.InfoUtils"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L225-L259","name":"Lean.Linter.List.listVariablesLinter","line":225,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.listVariablesLinter","doc":"A linter which validates that all `List`/`Array`/`Vector` variables use allowed names.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.listVariablesLinter\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">listVariablesLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L205-L223","name":"Lean.Linter.List.binders","line":205,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.binders","doc":"Find all binders appearing in the given info tree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.binders\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">binders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L202-L203","name":"Lean.Linter.List.allowedVectorNames","line":202,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedVectorNames","doc":"Allowed names for `Vector` variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedVectorNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedVectorNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L199-L200","name":"Lean.Linter.List.allowedArrayNames","line":199,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedArrayNames","doc":"Allowed names for `Array` variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedArrayNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedArrayNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L196-L197","name":"Lean.Linter.List.allowedListNames","line":196,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedListNames","doc":"Allowed names for `List` variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedListNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedListNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L166-L192","name":"Lean.Linter.List.indexLinter","line":166,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.indexLinter","doc":"A linter which validates that the only variables used as \"indices\" (e.g. in `xs[i]` or `xs.take i`)\nare `i`, `j`, or `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.indexLinter\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">indexLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L163-L164","name":"Lean.Linter.List.allowedBitVecWidths","line":163,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedBitVecWidths","doc":"Allowed names for BitVec width variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedBitVecWidths\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedBitVecWidths</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L160-L161","name":"Lean.Linter.List.allowedWidths","line":160,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedWidths","doc":"Allowed names for width variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedWidths\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedWidths</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L157-L158","name":"Lean.Linter.List.allowedIndices","line":157,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.allowedIndices","doc":"Allowed names for index variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.allowedIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">allowedIndices</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L153-L155","name":"Lean.Linter.List.stripBinderName","line":153,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.stripBinderName","doc":"Strip optional suffixes from a binder name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.stripBinderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">stripBinderName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L131-L151","name":"Lean.Linter.List.bitVecWidths","line":131,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.bitVecWidths","doc":"Return the syntax for all expressions in which an `fvarId` appears as a \"BitVec width\", along with the user name of that `fvarId`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.bitVecWidths\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">bitVecWidths</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L100-L129","name":"Lean.Linter.List.numericalWidths","line":100,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.numericalWidths","doc":"Return the syntax for all expressions in which an `fvarId` appears as a \"numerical width\", along with the user name of that `fvarId`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.numericalWidths\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">numericalWidths</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L42-L98","name":"Lean.Linter.List.numericalIndices","line":42,"kind":"def","docLink":"./Lean/Linter/List.html#Lean.Linter.List.numericalIndices","doc":"Return the syntax for all expressions in which an `fvarId` appears as a \"numerical index\", along with the user name of that `fvarId`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.numericalIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">numericalIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">Elab.InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L31-L38","name":"Lean.Linter.List.linter.listVariables","line":31,"kind":"opaque","docLink":"./Lean/Linter/List.html#Lean.Linter.List.linter.listVariables","doc":"`set_option linter.listVariables true` enables a strict linter that\nvalidates that all `List`/`Array`/`Vector` variables use standardized names.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.linter.listVariables\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">linter</span>.<span class=\"name\">listVariables</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Linter/List.lean#L19-L29","name":"Lean.Linter.List.linter.indexVariables","line":19,"kind":"opaque","docLink":"./Lean/Linter/List.html#Lean.Linter.List.linter.indexVariables","doc":"`set_option linter.indexVariables true` enables a strict linter that\nvalidates that the only variables appearing as an index (e.g. in `xs[i]` or `xs.take i`)\nare `i`, `j`, or `k`,\nand similarly that the only variables appearing as a width (e.g. in `List.replicate n a` or `Vector α n`)\nare `n` or `m`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Linter/List.html#Lean.Linter.List.linter.indexVariables\"><span class=\"name\">Lean</span>.<span class=\"name\">Linter</span>.<span class=\"name\">List</span>.<span class=\"name\">linter</span>.<span class=\"name\">indexVariables</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}