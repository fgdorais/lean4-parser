{"name":"Batteries.Tactic.OpenPrivate","instances":[{"typeNames":["Eq"],"name":"Lean.instDecidableEqModuleIdx_batteries","className":"Decidable"}],"imports":["Init","Lean.Elab.Command","Lean.Util.FoldConsts","Lean.Parser.Module"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/OpenPrivate.lean#L125-L143","name":"Lean.Elab.Command.elabExportPrivate","line":125,"kind":"def","docLink":"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.Command.elabExportPrivate","doc":"Elaborator for `export private`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.Command.elabExportPrivate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabExportPrivate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/OpenPrivate.lean#L111-L123","name":"Lean.Elab.Command.exportPrivate","line":111,"kind":"def","docLink":"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.Command.exportPrivate","doc":"The command `export private a b c in foo bar` is similar to `open private`, but instead of opening\nthem in the current scope it will create public aliases to the private definition. The definition\nwill exist at exactly the original location and name, as if the `private` keyword was not used\noriginally.\n\nIt will also open the newly created alias definition under the provided short name, like\n`open private`.\nIt is also possible to specify the module instead with\n`export private a b c from Other.Module`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.Command.exportPrivate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">exportPrivate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/OpenPrivate.lean#L105-L109","name":"Lean.Elab.Command.elabOpenPrivate","line":105,"kind":"def","docLink":"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.Command.elabOpenPrivate","doc":"Elaborator for `open private`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.Command.elabOpenPrivate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabOpenPrivate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/OpenPrivate.lean#L91-L103","name":"Lean.Elab.Command.openPrivate","line":91,"kind":"def","docLink":"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.Command.openPrivate","doc":"The command `open private a b c in foo bar` will look for private definitions named `a`, `b`, `c`\nin declarations `foo` and `bar` and open them in the current scope. This does not make the\ndefinitions public, but rather makes them accessible in the current section by the short name `a`\ninstead of the (unnameable) internal name for the private declaration, something like\n`_private.Other.Module.0.Other.Namespace.foo.a`, which cannot be typed directly because of the `0`\nname component.\n\nIt is also possible to specify the module instead with\n`open private a b c from Other.Module`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.Command.openPrivate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">openPrivate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/OpenPrivate.lean#L47-L89","name":"Lean.Elab.Command.elabOpenPrivateLike","line":47,"kind":"def","docLink":"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.Command.elabOpenPrivateLike","doc":"Core elaborator for `open private` and `export private`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.Command.elabOpenPrivateLike\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabOpenPrivateLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ids</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tgts </span><span class=\"fn\">mods</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/OpenPrivate.lean#L35-L43","name":"Lean.Elab.addModuleInfo","line":35,"kind":"def","docLink":"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.addModuleInfo","doc":"Add info to the info tree corresponding to a module name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/OpenPrivate.html#Lean.Elab.addModuleInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">addModuleInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/OpenPrivate.lean#L31-L33","name":"Lean.Environment.declsInModuleIdx","line":31,"kind":"def","docLink":"./Batteries/Tactic/OpenPrivate.html#Lean.Environment.declsInModuleIdx","doc":"Get the list of declarations in a module (referenced by index). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/OpenPrivate.html#Lean.Environment.declsInModuleIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">declsInModuleIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/OpenPrivate.lean#L29-L29","name":"Lean.instDecidableEqModuleIdx_batteries","line":29,"kind":"instance","docLink":"./Batteries/Tactic/OpenPrivate.html#Lean.instDecidableEqModuleIdx_batteries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/OpenPrivate.html#Lean.instDecidableEqModuleIdx_batteries\"><span class=\"name\">Lean</span>.<span class=\"name\">instDecidableEqModuleIdx_batteries</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/OpenPrivate.lean#L25-L27","name":"Lean.Environment.moduleIdxForModule?","line":25,"kind":"def","docLink":"./Batteries/Tactic/OpenPrivate.html#Lean.Environment.moduleIdxForModule?","doc":"Get the module index given a module name. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/OpenPrivate.html#Lean.Environment.moduleIdxForModule?\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">moduleIdxForModule?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mod</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Tactic/OpenPrivate.lean#L14-L23","name":"Lean.Meta.collectPrivateIn","line":14,"kind":"def","docLink":"./Batteries/Tactic/OpenPrivate.html#Lean.Meta.collectPrivateIn","doc":"Collects the names of private declarations referenced in definition `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Tactic/OpenPrivate.html#Lean.Meta.collectPrivateIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">collectPrivateIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">set</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a> := <a href=\"./Lean/Data/NameMap.html#Lean.NameSet.empty\">NameSet.empty</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></span></div></div>"}]}