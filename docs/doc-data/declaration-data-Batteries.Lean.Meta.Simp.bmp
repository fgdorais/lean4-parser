{"name":"Batteries.Lean.Meta.Simp","instances":[],"imports":["Init","Lean.Elab.Tactic.Simp","Batteries.Tactic.OpenPrivate"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Meta/Simp.lean#L37-L75","name":"Lean.Meta.Simp.mkSimpContext'","line":37,"kind":"def","docLink":"./Batteries/Lean/Meta/Simp.html#Lean.Meta.Simp.mkSimpContext'","doc":"If `ctx == false`, the config argument is assumed to have type `Meta.Simp.Config`,\nand `Meta.Simp.ConfigCtx` otherwise.\nIf `ctx == false`, the `discharge` option must be none\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/Simp.html#Lean.Meta.Simp.mkSimpContext'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkSimpContext'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpTheorems</span> : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">SimpTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eraseLocal</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">Elab.Tactic.SimpKind</a> := <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simp\">Elab.Tactic.SimpKind.simp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx </span><span class=\"fn\">ignoreStarArg</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Elab.Tactic.TacticM</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">Elab.Tactic.MkSimpContextResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Meta/Simp.lean#L33-L34","name":"Lean.Elab.Tactic.mkDischargeWrapper","line":33,"kind":"def","docLink":"./Batteries/Lean/Meta/Simp.html#Lean.Elab.Tactic.mkDischargeWrapper","doc":"Construct a `Simp.DischargeWrapper` from the `Syntax` for a `simp` discharger. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/Simp.html#Lean.Elab.Tactic.mkDischargeWrapper\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkDischargeWrapper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optDischargeSyntax</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">Simp.DischargeWrapper</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Meta/Simp.lean#L27-L29","name":"Lean.Meta.Simp.mkCast","line":27,"kind":"def","docLink":"./Batteries/Lean/Meta/Simp.html#Lean.Meta.Simp.mkCast","doc":"Construct the `Expr` `cast h e`, from a `Simp.Result` with proof `h`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/Simp.html#Lean.Meta.Simp.mkCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Result</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Lean/Meta/Simp.lean#L20-L25","name":"Lean.Meta.Simp.mkEqSymm","line":20,"kind":"def","docLink":"./Batteries/Lean/Meta/Simp.html#Lean.Meta.Simp.mkEqSymm","doc":"Flip the proof in a `Simp.Result`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Lean/Meta/Simp.html#Lean.Meta.Simp.mkEqSymm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">mkEqSymm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Result\">Result</a></span></div></div>"}]}