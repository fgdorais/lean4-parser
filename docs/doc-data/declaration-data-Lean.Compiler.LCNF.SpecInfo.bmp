{"name":"Lean.Compiler.LCNF.SpecInfo","instances":[{"typeNames":["Lean.Compiler.LCNF.SpecParamInfo"],"name":"Lean.Compiler.LCNF.instInhabitedSpecParamInfo","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.SpecParamInfo"],"name":"Lean.Compiler.LCNF.instReprSpecParamInfo","className":"Repr"},{"typeNames":["Lean.Compiler.LCNF.SpecParamInfo"],"name":"Lean.Compiler.LCNF.instToMessageDataSpecParamInfo","className":"Lean.ToMessageData"},{"typeNames":["Lean.Compiler.LCNF.SpecState"],"name":"Lean.Compiler.LCNF.instInhabitedSpecState","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.SpecEntry"],"name":"Lean.Compiler.LCNF.instInhabitedSpecEntry","className":"Inhabited"}],"imports":["Lean.Compiler.Specialize","Lean.Compiler.LCNF.FixedParams","Lean.Compiler.LCNF.InferType"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L213-L214","name":"Lean.Compiler.LCNF.isSpecCandidate","line":213,"kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.isSpecCandidate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.isSpecCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">isSpecCandidate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L210-L211","name":"Lean.Compiler.LCNF.getSpecParamInfo?","line":210,"kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.getSpecParamInfo?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.getSpecParamInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getSpecParamInfo?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L201-L208","name":"Lean.Compiler.LCNF.getSpecParamInfoCore?","line":201,"kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.getSpecParamInfoCore?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.getSpecParamInfoCore?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">getSpecParamInfoCore?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L142-L199","name":"Lean.Compiler.LCNF.saveSpecParamInfo","line":142,"kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.saveSpecParamInfo","doc":"Save parameter information for `decls`.\n\nRemark: this function, similarly to `mkFixedArgMap`,\nassumes that if a function `f` was declared in a mutual block, then `decls`\ncontains all (computationally relevant) functions in the mutual block.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.saveSpecParamInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">saveSpecParamInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L79-L91","name":"Lean.Compiler.LCNF.specExtension","line":79,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.specExtension","doc":"Extension for storing `SpecParamInfo` for declarations being compiled.\nRemark: we only store information for declarations that will be specialized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.specExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">specExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L64-L66","name":"Lean.Compiler.LCNF.SpecState.addEntry","line":64,"kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.addEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.addEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecState</span>.<span class=\"name\">addEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L60-L60","name":"Lean.Compiler.LCNF.instInhabitedSpecEntry","line":60,"kind":"instance","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedSpecEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L59-L59","name":"Lean.Compiler.LCNF.SpecEntry.paramsInfo","line":59,"kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.paramsInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.paramsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecEntry</span>.<span class=\"name\">paramsInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L58-L58","name":"Lean.Compiler.LCNF.SpecEntry.declName","line":58,"kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.declName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecEntry</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L57-L57","name":"Lean.Compiler.LCNF.SpecEntry.mk","line":57,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramsInfo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\">SpecEntry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L57-L60","name":"Lean.Compiler.LCNF.SpecEntry","line":57,"kind":"structure","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L55-L55","name":"Lean.Compiler.LCNF.instInhabitedSpecState","line":55,"kind":"instance","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedSpecState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L54-L54","name":"Lean.Compiler.LCNF.SpecState.specInfo","line":54,"kind":"def","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.specInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.specInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecState</span>.<span class=\"name\">specInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L53-L53","name":"Lean.Compiler.LCNF.SpecState.mk","line":53,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">specInfo</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\">SpecState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L53-L55","name":"Lean.Compiler.LCNF.SpecState","line":53,"kind":"structure","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L45-L51","name":"Lean.Compiler.LCNF.instToMessageDataSpecParamInfo","line":45,"kind":"instance","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instToMessageDataSpecParamInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instToMessageDataSpecParamInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instToMessageDataSpecParamInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L43-L43","name":"Lean.Compiler.LCNF.instReprSpecParamInfo","line":43,"kind":"instance","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instReprSpecParamInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instReprSpecParamInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instReprSpecParamInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L43-L43","name":"Lean.Compiler.LCNF.instInhabitedSpecParamInfo","line":43,"kind":"instance","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecParamInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.instInhabitedSpecParamInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedSpecParamInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L39-L42","name":"Lean.Compiler.LCNF.SpecParamInfo.other","line":39,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.other","doc":"Parameter is not going to be specialized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.other\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span>.<span class=\"name\">other</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L33-L38","name":"Lean.Compiler.LCNF.SpecParamInfo.user","line":33,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.user","doc":"An argument that has been specified in the `@[specialize]` attribute. Lean specializes it even if it is\nnot fixed in recursive declarations. Non-termination can happen, and Lean interrupts it with an error message\nbased on the stack depth.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.user\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span>.<span class=\"name\">user</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L28-L32","name":"Lean.Compiler.LCNF.SpecParamInfo.fixedNeutral","line":28,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedNeutral","doc":"Computationally irrelevant parameters that are fixed in recursive declarations,\n*and* there is a `fixedInst`, `fixedHO`, or `user` param that depends on it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedNeutral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span>.<span class=\"name\">fixedNeutral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L22-L27","name":"Lean.Compiler.LCNF.SpecParamInfo.fixedHO","line":22,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedHO","doc":"A parameter that is a function and is fixed in recursive declarations. If the user tags a declaration\nwith `@[specialize]` without specifying which arguments should be specialized, Lean will specialize\n`.fixedHO` arguments in addition to `.fixedInst`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedHO\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span>.<span class=\"name\">fixedHO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L17-L21","name":"Lean.Compiler.LCNF.SpecParamInfo.fixedInst","line":17,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedInst","doc":"A parameter that is an type class instance (or an arrow that produces a type class instance),\nand is fixed in recursive declarations. By default, Lean always specializes this kind of argument.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo.fixedInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span>.<span class=\"name\">fixedInst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\">SpecParamInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/SpecInfo.lean#L13-L43","name":"Lean.Compiler.LCNF.SpecParamInfo","line":13,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo","doc":"Each parameter is associated with a `SpecParamInfo`. This information is used by `LCNF/Specialize.lean`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/SpecInfo.html#Lean.Compiler.LCNF.SpecParamInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">SpecParamInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}