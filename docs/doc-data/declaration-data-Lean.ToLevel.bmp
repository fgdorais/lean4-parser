{"name":"Lean.ToLevel","instances":[{"typeNames":[],"name":"Lean.instToLevel","className":"Lean.ToLevel"},{"typeNames":[],"name":"Lean.instToLevel_1","className":"Lean.ToLevel"}],"imports":["Lean.Expr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ToLevel.lean#L36-L38","name":"Lean.ToLevel.imax","line":36,"kind":"def","docLink":"./Lean/ToLevel.html#Lean.ToLevel.imax","doc":"`ToLevel` for `imax u v`. This is not an instance since it causes divergence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ToLevel.html#Lean.ToLevel.imax\"><span class=\"name\">Lean</span>.<span class=\"name\">ToLevel</span>.<span class=\"name\">imax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ToLevel.lean#L32-L34","name":"Lean.ToLevel.max","line":32,"kind":"def","docLink":"./Lean/ToLevel.html#Lean.ToLevel.max","doc":"`ToLevel` for `max u v`. This is not an instance since it causes divergence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ToLevel.html#Lean.ToLevel.max\"><span class=\"name\">Lean</span>.<span class=\"name\">ToLevel</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ToLevel.lean#L29-L30","name":"Lean.instToLevel_1","line":29,"kind":"instance","docLink":"./Lean/ToLevel.html#Lean.instToLevel_1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ToLevel.html#Lean.instToLevel_1\"><span class=\"name\">Lean</span>.<span class=\"name\">instToLevel_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ToLevel.lean#L26-L27","name":"Lean.instToLevel","line":26,"kind":"instance","docLink":"./Lean/ToLevel.html#Lean.instToLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ToLevel.html#Lean.instToLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">instToLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ToLevel.lean#L23-L23","name":"Lean.ToLevel.univ","line":23,"kind":"theorem","docLink":"./Lean/ToLevel.html#Lean.ToLevel.univ","doc":"A hack to avoid the \"unused universe parameter\" error.\nWe can remove this field pending issue https://github.com/leanprover/lean4/issues/2116 "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ToLevel.html#Lean.ToLevel.univ\"><span class=\"name\">Lean</span>.<span class=\"name\">ToLevel</span>.<span class=\"name\">univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u), <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ToLevel.lean#L20-L20","name":"Lean.ToLevel.toLevel","line":20,"kind":"def","docLink":"./Lean/ToLevel.html#Lean.ToLevel.toLevel","doc":"A `Level` that represents the universe level `u`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ToLevel.html#Lean.ToLevel.toLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">ToLevel</span>.<span class=\"name\">toLevel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Level.html#Lean.Level\">Level</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ToLevel.lean#L18-L18","name":"Lean.ToLevel.mk","line":18,"kind":"ctor","docLink":"./Lean/ToLevel.html#Lean.ToLevel.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ToLevel.html#Lean.ToLevel.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ToLevel</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toLevel</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">univ</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Sort</a> u), <a href=\"./Init/Prelude.html#True\">True</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/ToLevel.html#Lean.ToLevel\">ToLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ToLevel.lean#L16-L23","name":"Lean.ToLevel","line":16,"kind":"class","docLink":"./Lean/ToLevel.html#Lean.ToLevel","doc":"A class to create `Level` expressions that denote particular universe levels in Lean.\n`Lean.ToLevel.toLevel.{u}` evaluates to a `Lean.Level` term representing `u` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ToLevel.html#Lean.ToLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">ToLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}