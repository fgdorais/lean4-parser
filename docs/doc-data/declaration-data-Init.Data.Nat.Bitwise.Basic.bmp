{"name":"Init.Data.Nat.Bitwise.Basic","instances":[{"typeNames":["Nat"],"name":"Nat.instAndOp","className":"AndOp"},{"typeNames":["Nat"],"name":"Nat.instOrOp","className":"OrOp"},{"typeNames":["Nat"],"name":"Nat.instXor","className":"Xor"},{"typeNames":["Nat"],"name":"Nat.instShiftLeft","className":"ShiftLeft"},{"typeNames":["Nat"],"name":"Nat.instShiftRight","className":"ShiftRight"}],"imports":["Init.Data.Nat.Basic","Init.Data.Nat.Div.Basic","Init.Coe"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L135-L140","name":"Nat.testBit","line":135,"kind":"def","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.testBit","doc":"Returns `true` if the `(n+1)`th least significant bit is `1`, or `false` if it is `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.testBit\"><span class=\"name\">Nat</span>.<span class=\"name\">testBit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L125-L127","name":"Nat.shiftRight_le","line":125,"kind":"theorem","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_le\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">â‰¤</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L122-L123","name":"Nat.shiftRight_eq_zero","line":122,"kind":"theorem","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_eq_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L116-L120","name":"Nat.shiftRight_eq_div_pow","line":116,"kind":"theorem","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_eq_div_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_eq_div_pow\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_eq_div_pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L112-L114","name":"Nat.shiftRight_add","line":112,"kind":"theorem","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_add\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L110-L110","name":"Nat.shiftRight_succ","line":110,"kind":"theorem","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L108-L108","name":"Nat.shiftRight_zero","line":108,"kind":"theorem","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L102-L106","name":"Nat.shiftLeft_eq","line":102,"kind":"theorem","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftLeft_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftLeft_eq\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftLeft_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L100-L100","name":"Nat.instShiftRight","line":100,"kind":"instance","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.instShiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.instShiftRight\"><span class=\"name\">Nat</span>.<span class=\"name\">instShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L99-L99","name":"Nat.instShiftLeft","line":99,"kind":"instance","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.instShiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.instShiftLeft\"><span class=\"name\">Nat</span>.<span class=\"name\">instShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L98-L98","name":"Nat.instXor","line":98,"kind":"instance","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.instXor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.instXor\"><span class=\"name\">Nat</span>.<span class=\"name\">instXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L97-L97","name":"Nat.instOrOp","line":97,"kind":"instance","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.instOrOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.instOrOp\"><span class=\"name\">Nat</span>.<span class=\"name\">instOrOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L96-L96","name":"Nat.instAndOp","line":96,"kind":"instance","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.instAndOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.instAndOp\"><span class=\"name\">Nat</span>.<span class=\"name\">instAndOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L80-L94","name":"Nat.shiftRight","line":80,"kind":"def","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight","doc":"Shifts the binary representation of a value right by the specified number of bits. Usually accessed\nvia the `>>>` operator.\n\nExamples:\n * `4 >>> 2 = 1`\n * `8 >>> 2 = 2`\n * `8 >>> 3 = 1`\n * `0 >>> 3 = 0`\n * `0xf13a >>> 8 = 0xf1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L65-L78","name":"Nat.shiftLeft","line":65,"kind":"def","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftLeft","doc":"Shifts the binary representation of a value left by the specified number of bits. Usually accessed\nvia the `<<<` operator.\n\nExamples:\n * `1 <<< 2 = 4`\n * `1 <<< 3 = 8`\n * `0 <<< 3 = 0`\n * `0xf1 <<< 4 = 0xf10`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftLeft\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L57-L63","name":"Nat.xor","line":57,"kind":"def","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.xor","doc":"Bitwise exclusive or. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting value is set if the corresponding bit is set in exactly one of the inputs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.xor\"><span class=\"name\">Nat</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L49-L55","name":"Nat.lor","line":49,"kind":"def","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.lor","doc":"Bitwise or. Usually accessed via the `|||` operator.\n\nEach bit of the resulting value is set if the corresponding bit is set in at least one of the inputs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.lor\"><span class=\"name\">Nat</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L41-L47","name":"Nat.land","line":41,"kind":"def","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.land","doc":"Bitwise and. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting value is set if the corresponding bit is set in both of the inputs.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.land\"><span class=\"name\">Nat</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L18-L39","name":"Nat.bitwise","line":18,"kind":"def","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.bitwise","doc":"A helper for implementing bitwise operators on `Nat`.\n\nEach bit of the resulting `Nat` is the result of applying `f` to the corresponding bits of the input\n`Nat`s, up to the position of the highest set bit in either input.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.bitwise\"><span class=\"name\">Nat</span>.<span class=\"name\">bitwise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Nat/Bitwise/Basic.lean#L15-L16","name":"Nat.bitwise_rec_lemma","line":15,"kind":"theorem","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.bitwise_rec_lemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.bitwise_rec_lemma\"><span class=\"name\">Nat</span>.<span class=\"name\">bitwise_rec_lemma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hNe</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">â‰ </a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"}]}