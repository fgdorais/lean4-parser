{"name":"Std.Time.Zoned.ZoneRules","instances":[{"typeNames":["Std.Time.TimeZone.UTLocal"],"name":"Std.Time.TimeZone.instReprUTLocal","className":"Repr"},{"typeNames":["Std.Time.TimeZone.UTLocal"],"name":"Std.Time.TimeZone.instInhabitedUTLocal","className":"Inhabited"},{"typeNames":["Std.Time.TimeZone.StdWall"],"name":"Std.Time.TimeZone.instReprStdWall","className":"Repr"},{"typeNames":["Std.Time.TimeZone.StdWall"],"name":"Std.Time.TimeZone.instInhabitedStdWall","className":"Inhabited"},{"typeNames":["Std.Time.TimeZone.LocalTimeType"],"name":"Std.Time.TimeZone.instReprLocalTimeType","className":"Repr"},{"typeNames":["Std.Time.TimeZone.LocalTimeType"],"name":"Std.Time.TimeZone.instInhabitedLocalTimeType","className":"Inhabited"},{"typeNames":["Std.Time.TimeZone.Transition"],"name":"Std.Time.TimeZone.instReprTransition","className":"Repr"},{"typeNames":["Std.Time.TimeZone.Transition"],"name":"Std.Time.TimeZone.instInhabitedTransition","className":"Inhabited"},{"typeNames":["Std.Time.TimeZone.ZoneRules"],"name":"Std.Time.TimeZone.instReprZoneRules","className":"Repr"},{"typeNames":["Std.Time.TimeZone.ZoneRules"],"name":"Std.Time.TimeZone.instInhabitedZoneRules","className":"Inhabited"}],"imports":["Std.Time.DateTime","Std.Time.Zoned.TimeZone"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L215-L221","name":"Std.Time.TimeZone.ZoneRules.ofTimeZone","line":215,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.ofTimeZone","doc":"Creates `ZoneRules` for the given `TimeZone`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.ofTimeZone\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">ZoneRules</span>.<span class=\"name\">ofTimeZone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\">ZoneRules</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L206-L213","name":"Std.Time.TimeZone.ZoneRules.timezoneAt","line":206,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.timezoneAt","doc":"Find the current `TimeZone` out of a `Transition` in a `ZoneRules`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.timezoneAt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">ZoneRules</span>.<span class=\"name\">timezoneAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zr</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\">ZoneRules</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tm</span> : <a href=\"./Std/Time/DateTime/Timestamp.html#Std.Time.Timestamp\">Timestamp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L195-L204","name":"Std.Time.TimeZone.ZoneRules.findLocalTimeTypeForTimestamp","line":195,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.findLocalTimeTypeForTimestamp","doc":"Finds the `LocalTimeType` corresponding to a given `Timestamp` in `ZoneRules`.\nIf the timestamp falls between two transitions, it returns the most recent transition before the timestamp.\nIf no transition is found, it falls back to `initialLocalTimeType`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.findLocalTimeTypeForTimestamp\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">ZoneRules</span>.<span class=\"name\">findLocalTimeTypeForTimestamp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zr</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\">ZoneRules</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">timestamp</span> : <a href=\"./Std/Time/DateTime/Timestamp.html#Std.Time.Timestamp\">Timestamp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L188-L193","name":"Std.Time.TimeZone.ZoneRules.UTC","line":188,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.UTC","doc":"Creates ZoneRules with a fixed offset of UTC (GMT+0).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.UTC\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">ZoneRules</span>.<span class=\"name\">UTC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\">ZoneRules</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L172-L186","name":"Std.Time.TimeZone.ZoneRules.fixedOffsetZone","line":172,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.fixedOffsetZone","doc":"Creates ZoneRules with a fixed GMT offset.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.fixedOffsetZone\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">ZoneRules</span>.<span class=\"name\">fixedOffsetZone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">second</span> : <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Second.Offset</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">identifier </span><span class=\"fn\">abbreviation</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\">ZoneRules</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L161-L167","name":"Std.Time.TimeZone.Transition.timezoneAt","line":161,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.timezoneAt","doc":"Find the current `TimeZone` out of a `Transition` in a `Array Transition`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.timezoneAt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Transition</span>.<span class=\"name\">timezoneAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transitions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tm</span> : <a href=\"./Std/Time/DateTime/Timestamp.html#Std.Time.Timestamp\">Timestamp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L152-L159","name":"Std.Time.TimeZone.Transition.findTransitionForTimestamp","line":152,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.findTransitionForTimestamp","doc":"Finds the transition corresponding to a given timestamp in `Array Transition`.\nIf the timestamp falls between two transitions, it returns the most recent transition before the timestamp.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.findTransitionForTimestamp\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Transition</span>.<span class=\"name\">findTransitionForTimestamp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transitions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">timestamp</span> : <a href=\"./Std/Time/DateTime/Timestamp.html#Std.Time.Timestamp\">Timestamp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L144-L150","name":"Std.Time.TimeZone.Transition.findTransitionIndexForTimestamp","line":144,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.findTransitionIndexForTimestamp","doc":"Finds the transition corresponding to a given timestamp in `Array Transition`.\nIf the timestamp falls between two transitions, it returns the most recent transition before the timestamp.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.findTransitionIndexForTimestamp\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Transition</span>.<span class=\"name\">findTransitionIndexForTimestamp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transitions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">timestamp</span> : <a href=\"./Std/Time/DateTime/Timestamp.html#Std.Time.Timestamp\">Timestamp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L137-L142","name":"Std.Time.TimeZone.Transition.apply","line":137,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.apply","doc":"Applies the transition to a Timestamp.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.apply\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Transition</span>.<span class=\"name\">apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">timestamp</span> : <a href=\"./Std/Time/DateTime/Timestamp.html#Std.Time.Timestamp\">Timestamp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transition</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/DateTime/Timestamp.html#Std.Time.Timestamp\">Timestamp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L128-L135","name":"Std.Time.TimeZone.Transition.createTimeZoneFromTransition","line":128,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.createTimeZoneFromTransition","doc":"Create a TimeZone from a Transition.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.createTimeZoneFromTransition\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Transition</span>.<span class=\"name\">createTimeZoneFromTransition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transition</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L124-L124","name":"Std.Time.TimeZone.instInhabitedZoneRules","line":124,"kind":"instance","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instInhabitedZoneRules","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instInhabitedZoneRules\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">instInhabitedZoneRules</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\">ZoneRules</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L124-L124","name":"Std.Time.TimeZone.instReprZoneRules","line":124,"kind":"instance","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instReprZoneRules","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instReprZoneRules\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">instReprZoneRules</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\">ZoneRules</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L122-L122","name":"Std.Time.TimeZone.ZoneRules.transitions","line":122,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.transitions","doc":"The array of transitions for the time zone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.transitions\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">ZoneRules</span>.<span class=\"name\">transitions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\">ZoneRules</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L117-L117","name":"Std.Time.TimeZone.ZoneRules.initialLocalTimeType","line":117,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.initialLocalTimeType","doc":"The first `LocalTimeType` used as a fallback when no matching transition is found.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.initialLocalTimeType\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">ZoneRules</span>.<span class=\"name\">initialLocalTimeType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\">ZoneRules</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L112-L112","name":"Std.Time.TimeZone.ZoneRules.mk","line":112,"kind":"ctor","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">ZoneRules</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initialLocalTimeType</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transitions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\">ZoneRules</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L109-L124","name":"Std.Time.TimeZone.ZoneRules","line":109,"kind":"structure","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules","doc":"Represents the rules for a time zone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.ZoneRules\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">ZoneRules</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L107-L107","name":"Std.Time.TimeZone.instInhabitedTransition","line":107,"kind":"instance","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instInhabitedTransition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instInhabitedTransition\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">instInhabitedTransition</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L107-L107","name":"Std.Time.TimeZone.instReprTransition","line":107,"kind":"instance","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instReprTransition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instReprTransition\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">instReprTransition</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L106-L106","name":"Std.Time.TimeZone.Transition.localTimeType","line":106,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.localTimeType","doc":"The local time type associated with this transition.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.localTimeType\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Transition</span>.<span class=\"name\">localTimeType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L101-L101","name":"Std.Time.TimeZone.Transition.time","line":101,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.time","doc":"The specific time of the transition event.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.time\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Transition</span>.<span class=\"name\">time</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Second.Offset</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L96-L96","name":"Std.Time.TimeZone.Transition.mk","line":96,"kind":"ctor","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Transition</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">time</span> : <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Second.Offset</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localTimeType</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\">Transition</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L93-L107","name":"Std.Time.TimeZone.Transition","line":93,"kind":"structure","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition","doc":"Represents a time zone transition, mapping a time to a local time type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.Transition\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Transition</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L85-L89","name":"Std.Time.TimeZone.LocalTimeType.getTimeZone","line":85,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.getTimeZone","doc":"Gets the `TimeZone` offset from a `LocalTimeType`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.getTimeZone\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">LocalTimeType</span>.<span class=\"name\">getTimeZone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">time</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L81-L81","name":"Std.Time.TimeZone.instInhabitedLocalTimeType","line":81,"kind":"instance","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instInhabitedLocalTimeType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instInhabitedLocalTimeType\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">instInhabitedLocalTimeType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L81-L81","name":"Std.Time.TimeZone.instReprLocalTimeType","line":81,"kind":"instance","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instReprLocalTimeType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instReprLocalTimeType\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">instReprLocalTimeType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L80-L80","name":"Std.Time.TimeZone.LocalTimeType.identifier","line":80,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.identifier","doc":"ID of the timezone\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.identifier\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">LocalTimeType</span>.<span class=\"name\">identifier</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L75-L75","name":"Std.Time.TimeZone.LocalTimeType.utLocal","line":75,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.utLocal","doc":"Distinguishes between universal time and local time.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.utLocal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">LocalTimeType</span>.<span class=\"name\">utLocal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal\">UTLocal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L70-L70","name":"Std.Time.TimeZone.LocalTimeType.wall","line":70,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.wall","doc":"Indicates if the time is wall clock or standard time.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.wall\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">LocalTimeType</span>.<span class=\"name\">wall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall\">StdWall</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L65-L65","name":"Std.Time.TimeZone.LocalTimeType.abbreviation","line":65,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.abbreviation","doc":"The abbreviation for this local time type (e.g., \"EST\", \"PDT\").\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.abbreviation\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">LocalTimeType</span>.<span class=\"name\">abbreviation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L60-L60","name":"Std.Time.TimeZone.LocalTimeType.isDst","line":60,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.isDst","doc":"Indicates if daylight saving time is observed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.isDst\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">LocalTimeType</span>.<span class=\"name\">isDst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L55-L55","name":"Std.Time.TimeZone.LocalTimeType.gmtOffset","line":55,"kind":"def","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.gmtOffset","doc":"The offset from GMT for this local time.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.gmtOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">LocalTimeType</span>.<span class=\"name\">gmtOffset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/Offset.html#Std.Time.TimeZone.Offset\">Offset</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L50-L50","name":"Std.Time.TimeZone.LocalTimeType.mk","line":50,"kind":"ctor","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">LocalTimeType</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gmtOffset</span> : <a href=\"./Std/Time/Zoned/Offset.html#Std.Time.TimeZone.Offset\">Offset</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isDst</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">abbreviation</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wall</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall\">StdWall</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">utLocal</span> : <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal\">UTLocal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">identifier</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\">LocalTimeType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L47-L81","name":"Std.Time.TimeZone.LocalTimeType","line":47,"kind":"structure","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType","doc":"Represents a type of local time, including offset and daylight saving information.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.LocalTimeType\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">LocalTimeType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L45-L45","name":"Std.Time.TimeZone.instInhabitedStdWall","line":45,"kind":"instance","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instInhabitedStdWall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instInhabitedStdWall\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">instInhabitedStdWall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall\">StdWall</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L45-L45","name":"Std.Time.TimeZone.instReprStdWall","line":45,"kind":"instance","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instReprStdWall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instReprStdWall\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">instReprStdWall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall\">StdWall</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L41-L44","name":"Std.Time.TimeZone.StdWall.standard","line":41,"kind":"ctor","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall.standard","doc":"Standard time without adjustments for daylight saving.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall.standard\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">StdWall</span>.<span class=\"name\">standard</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall\">StdWall</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L36-L39","name":"Std.Time.TimeZone.StdWall.wall","line":36,"kind":"ctor","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall.wall","doc":"Time based on a wall clock, which can include daylight saving adjustments.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall.wall\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">StdWall</span>.<span class=\"name\">wall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall\">StdWall</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L32-L45","name":"Std.Time.TimeZone.StdWall","line":32,"kind":"inductive","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall","doc":"Represents types of wall clocks or standard times.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.StdWall\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">StdWall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L30-L30","name":"Std.Time.TimeZone.instInhabitedUTLocal","line":30,"kind":"instance","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instInhabitedUTLocal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instInhabitedUTLocal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">instInhabitedUTLocal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal\">UTLocal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L30-L30","name":"Std.Time.TimeZone.instReprUTLocal","line":30,"kind":"instance","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instReprUTLocal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.instReprUTLocal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">instReprUTLocal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal\">UTLocal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L26-L29","name":"Std.Time.TimeZone.UTLocal.local","line":26,"kind":"ctor","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal.local","doc":"Local time that is not necessarily UTC.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal.local\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">UTLocal</span>.<span class=\"name\">local</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal\">UTLocal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L21-L24","name":"Std.Time.TimeZone.UTLocal.ut","line":21,"kind":"ctor","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal.ut","doc":"Universal Time (UT), often referred to as UTC.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal.ut\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">UTLocal</span>.<span class=\"name\">ut</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal\">UTLocal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Zoned/ZoneRules.lean#L17-L30","name":"Std.Time.TimeZone.UTLocal","line":17,"kind":"inductive","docLink":"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal","doc":"Represents the type of local time in relation to UTC.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Zoned/ZoneRules.html#Std.Time.TimeZone.UTLocal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">UTLocal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}