{"name":"Init.Omega.Constraint","instances":[{"typeNames":["Lean.Omega.Constraint"],"name":"Lean.Omega.instBEqConstraint","className":"BEq"},{"typeNames":["Eq"],"name":"Lean.Omega.instDecidableEqConstraint","className":"Decidable"},{"typeNames":["Lean.Omega.Constraint"],"name":"Lean.Omega.instReprConstraint","className":"Repr"},{"typeNames":["Lean.Omega.Constraint"],"name":"Lean.Omega.Constraint.instToString","className":"ToString"}],"imports":["Init.Omega.LinearCombo","Init.Omega.Int"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L370-L380","name":"Lean.Omega.bmod_sat","line":370,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.bmod_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">bmod_sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_div_term\">bmod_div_term</a> <span class=\"fn\">m</span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact\">Constraint.exact</a> <span class=\"fn\">r</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact\">Constraint.exact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">m</span>)</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_coeffs\">bmod_coeffs</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L366-L368","name":"Lean.Omega.bmod_coeffs","line":366,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.bmod_coeffs","doc":"The coefficients of the new equation generated when solving a hard equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_coeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">bmod_coeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L363-L364","name":"Lean.Omega.bmod_div_term","line":363,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.bmod_div_term","doc":"The value of the new variable introduced when solving a hard equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_div_term\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">bmod_div_term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L355-L361","name":"Lean.Omega.combo_sat'","line":355,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.combo_sat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.combo_sat'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">combo_sat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wx</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wy</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">y</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo\">Constraint.combo</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.combo\">Coeffs.combo</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L345-L353","name":"Lean.Omega.tidy_sat","line":345,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.tidy_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.tidy_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">tidy_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.tidyConstraint\">tidyConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.tidyCoeffs\">tidyCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L342-L343","name":"Lean.Omega.tidyCoeffs","line":342,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.tidyCoeffs","doc":"Shorthand for the second component of `tidy`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.tidyCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">tidyCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L340-L341","name":"Lean.Omega.tidyConstraint","line":340,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.tidyConstraint","doc":"Shorthand for the first component of `tidy`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.tidyConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">tidyConstraint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L336-L338","name":"Lean.Omega.tidy","line":336,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.tidy","doc":"`positivize` and `normalize` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.tidy\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">tidy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L327-L334","name":"Lean.Omega.tidy?","line":327,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.tidy?","doc":"`positivize` and `normalize`, returning `none` if neither does anything. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.tidy?\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">tidy?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L318-L325","name":"Lean.Omega.positivize_sat","line":318,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivize_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivize_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivize_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeConstraint\">positivizeConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeCoeffs\">positivizeCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L314-L316","name":"Lean.Omega.positivize?_eq_some","line":314,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivize?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivize?_eq_some\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivize?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s'</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x'</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.positivize?\">positivize?</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeConstraint\">positivizeConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeCoeffs\">positivizeCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L310-L312","name":"Lean.Omega.positivizeCoeffs","line":310,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivizeCoeffs","doc":"Shorthand for the second component of `positivize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivizeCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L307-L309","name":"Lean.Omega.positivizeConstraint","line":307,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivizeConstraint","doc":"Shorthand for the first component of `positivize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivizeConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivizeConstraint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L303-L305","name":"Lean.Omega.positivize","line":303,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivize","doc":"Multiply by `-1` if the leading coefficient is negative, otherwise do nothing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivize\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L295-L301","name":"Lean.Omega.positivize?","line":295,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.positivize?","doc":"Multiply by `-1` if the leading coefficient is negative, otherwise return `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.positivize?\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">positivize?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L281-L293","name":"Lean.Omega.normalize_sat","line":281,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalize_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalize_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalize_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">v</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeConstraint\">normalizeConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeCoeffs\">normalizeCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L277-L279","name":"Lean.Omega.normalize?_eq_some","line":277,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalize?_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalize?_eq_some\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalize?_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s'</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x'</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.normalize?\">normalize?</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeConstraint\">normalizeConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s'</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeCoeffs\">normalizeCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L273-L275","name":"Lean.Omega.normalizeCoeffs","line":273,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalizeCoeffs","doc":"Shorthand for the second component of `normalize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalizeCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L269-L272","name":"Lean.Omega.normalizeConstraint","line":269,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalizeConstraint","doc":"Shorthand for the first component of `normalize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalizeConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalizeConstraint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L265-L267","name":"Lean.Omega.normalize","line":265,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalize","doc":"Normalize a constraint, by dividing through by the GCD. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L247-L263","name":"Lean.Omega.normalize?","line":247,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.normalize?","doc":"Normalize a constraint, by dividing through by the GCD.\n\nReturn `none` if there is nothing to do, to avoid adding unnecessary steps to the proof term.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.normalize?\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">normalize?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L239-L243","name":"Lean.Omega.Constraint.addEquality_sat","line":239,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.addEquality_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.addEquality_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">addEquality_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.dot\">dot</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk\">{</a> <span class=\"fn\">lowerBound</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">c</span>)</span>, <span class=\"fn\">upperBound</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">c</span>)</span> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk\">}</a>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L233-L237","name":"Lean.Omega.Constraint.addInequality_sat","line":233,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.addInequality_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.addInequality_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">addInequality_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.dot\">dot</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk\">{</a> <span class=\"fn\">lowerBound</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">c</span>)</span>, <span class=\"fn\">upperBound</span> := <a href=\"./Init/Prelude.html#Option.none\">none</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk\">}</a>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L230-L231","name":"Lean.Omega.Constraint.not_sat'_of_isImpossible","line":230,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.not_sat'_of_isImpossible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.not_sat'_of_isImpossible\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">not_sat'_of_isImpossible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isImpossible\">isImpossible</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L224-L228","name":"Lean.Omega.Constraint.div_sat'","line":224,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div_sat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div_sat'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">div_sat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.gcd\">gcd</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.dot\">dot</a></span> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div\">div</a></span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.gcd\">gcd</a></span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.sdiv\">sdiv</a></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.gcd\">gcd</a></span></span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L221-L222","name":"Lean.Omega.Constraint.combine_sat'","line":221,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine_sat'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine_sat'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">combine_sat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ws</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wt</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine\">combine</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\">sat'</a></span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L215-L219","name":"Lean.Omega.Constraint.sat'","line":215,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'","doc":"It is convenient below to say that a constraint is satisfied at the dot product of two vectors,\nso we make an abbreviation `sat'` for this.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">sat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L193-L213","name":"Lean.Omega.Constraint.div_sat","line":193,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">div_sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\">k</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div\">div</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L185-L191","name":"Lean.Omega.Constraint.div","line":185,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div","doc":"Dividing a constraint by a natural number, and tightened to integer bounds.\nThus the lower bound is rounded up, and the upper bound is rounded down.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.div\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L174-L183","name":"Lean.Omega.Constraint.combine_sat","line":174,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">combine_sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">c'</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine\">combine</a></span> <span class=\"fn\">c'</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c'</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L169-L172","name":"Lean.Omega.Constraint.combine","line":169,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine","doc":"The conjunction of two constraints. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L165-L167","name":"Lean.Omega.Constraint.combo_sat","line":165,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">combo_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">x₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">x₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo\">combo</a> <span class=\"fn\">a</span> <span class=\"fn\">c₁</span> <span class=\"fn\">b</span> <span class=\"fn\">c₂</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L161-L163","name":"Lean.Omega.Constraint.combo","line":161,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo","doc":"A linear combination of two constraints. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">combo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L148-L159","name":"Lean.Omega.Constraint.add_sat","line":148,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.add_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.add_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">add_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x₁ </span><span class=\"fn\">x₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₁</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">x₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c₂</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">x₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c₁</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.add\">add</a></span> <span class=\"fn\">c₂</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<span class=\"fn\">x₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L143-L146","name":"Lean.Omega.Constraint.add","line":143,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.add","doc":"The sum of two constraints. `[a, b] + [c, d] = [a + c, b + d]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L123-L141","name":"Lean.Omega.Constraint.scale_sat","line":123,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.scale_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.scale_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">scale_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.scale\">scale</a> <span class=\"fn\">k</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">t</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L108-L121","name":"Lean.Omega.Constraint.scale","line":108,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.scale","doc":"Scale a constraint by multiplying by an integer.\n* If `k = 0` this is either impossible, if the original constraint was impossible,\n  or the `= 0` exact constraint.\n* If `k` is positive this takes `[x, y]` to `[k * x, k * y]`\n* If `k` is negative this takes `[x, y]` to `[k * y, k * x]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.scale\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">scale</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L104-L106","name":"Lean.Omega.Constraint.not_sat_of_isImpossible","line":104,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.not_sat_of_isImpossible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.not_sat_of_isImpossible\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">not_sat_of_isImpossible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isImpossible\">isImpossible</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L99-L102","name":"Lean.Omega.Constraint.isExact","line":99,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isExact","doc":"Check if a constraint requires an exact value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isExact\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">isExact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L94-L97","name":"Lean.Omega.Constraint.isImpossible","line":94,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isImpossible","doc":"Check if a constraint is unsatisfiable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.isImpossible\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">isImpossible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L90-L92","name":"Lean.Omega.Constraint.exact_sat","line":90,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">exact_sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r </span><span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact\">exact</a> <span class=\"fn\">r</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">t</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L87-L88","name":"Lean.Omega.Constraint.trivial_say","line":87,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.trivial_say","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.trivial_say\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">trivial_say</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.trivial\">trivial</a>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L84-L85","name":"Lean.Omega.Constraint.exact","line":84,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact","doc":"An exact constraint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L82-L83","name":"Lean.Omega.Constraint.impossible","line":82,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.impossible","doc":"The impossible constraint, unsatisfiable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.impossible\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">impossible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L80-L81","name":"Lean.Omega.Constraint.trivial","line":80,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.trivial","doc":"The trivial constraint, satisfied everywhere. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.trivial\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">trivial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L77-L78","name":"Lean.Omega.Constraint.neg_sat","line":77,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.neg_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.neg_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">neg_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.neg\">neg</a></span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">v</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L72-L75","name":"Lean.Omega.Constraint.neg","line":72,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.neg","doc":"Negate a constraint. `[x, y]` becomes `[-y, -x]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L64-L70","name":"Lean.Omega.Constraint.flip","line":64,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.flip","doc":"Flip a constraint.\nThis operation is not useful by itself, but is used to implement `neg` and `scale`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.flip\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">flip</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L61-L62","name":"Lean.Omega.Constraint.translate_sat","line":61,"kind":"theorem","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.translate_sat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.translate_sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">translate_sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.translate\">translate</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\">sat</a></span> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">t</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L58-L59","name":"Lean.Omega.Constraint.translate","line":58,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.translate","doc":"Translate a constraint. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.translate\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">translate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L53-L56","name":"Lean.Omega.Constraint.map","line":53,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.map","doc":"Apply a function to both the lower bound and upper bound. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.map\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L50-L51","name":"Lean.Omega.Constraint.sat","line":50,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat","doc":"A constraint is satisfied at `t` is both the lower bound and upper bound are satisfied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L42-L48","name":"Lean.Omega.Constraint.instToString","line":42,"kind":"instance","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L38-L38","name":"Lean.Omega.instReprConstraint","line":38,"kind":"instance","docLink":"./Init/Omega/Constraint.html#Lean.Omega.instReprConstraint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.instReprConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instReprConstraint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L38-L38","name":"Lean.Omega.instDecidableEqConstraint","line":38,"kind":"instance","docLink":"./Init/Omega/Constraint.html#Lean.Omega.instDecidableEqConstraint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.instDecidableEqConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instDecidableEqConstraint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L38-L38","name":"Lean.Omega.instBEqConstraint","line":38,"kind":"instance","docLink":"./Init/Omega/Constraint.html#Lean.Omega.instBEqConstraint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.instBEqConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instBEqConstraint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L37-L37","name":"Lean.Omega.Constraint.upperBound","line":37,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.upperBound","doc":"An upper bound. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.upperBound\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">upperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.UpperBound\">UpperBound</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L35-L35","name":"Lean.Omega.Constraint.lowerBound","line":35,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.lowerBound","doc":"A lower bound. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.lowerBound\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">lowerBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.LowerBound\">LowerBound</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L33-L33","name":"Lean.Omega.Constraint.mk","line":33,"kind":"ctor","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lowerBound</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.LowerBound\">LowerBound</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">upperBound</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.UpperBound\">UpperBound</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Constraint</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L29-L38","name":"Lean.Omega.Constraint","line":29,"kind":"structure","docLink":"./Init/Omega/Constraint.html#Lean.Omega.Constraint","doc":"A `Constraint` consists of an optional lower and upper bound (inclusive),\nconstraining a value to a set of the form `∅`, `{x}`, `[x, y]`, `[x, ∞)`, `(-∞, y]`, or `(-∞, ∞)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Constraint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L26-L27","name":"Lean.Omega.UpperBound.sat","line":26,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.UpperBound.sat","doc":"A upper bound at `y` is satisfied at `t` if `t ≤ y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.UpperBound.sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">UpperBound</span>.<span class=\"name\">sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.UpperBound\">UpperBound</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L24-L25","name":"Lean.Omega.LowerBound.sat","line":24,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.LowerBound.sat","doc":"A lower bound at `x` is satisfied at `t` if `x ≤ t`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.LowerBound.sat\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LowerBound</span>.<span class=\"name\">sat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.LowerBound\">LowerBound</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L21-L22","name":"Lean.Omega.UpperBound","line":21,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.UpperBound","doc":"An optional upper bound on a integer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.UpperBound\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">UpperBound</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Omega/Constraint.lean#L19-L20","name":"Lean.Omega.LowerBound","line":19,"kind":"def","docLink":"./Init/Omega/Constraint.html#Lean.Omega.LowerBound","doc":"An optional lower bound on a integer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/Constraint.html#Lean.Omega.LowerBound\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">LowerBound</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}