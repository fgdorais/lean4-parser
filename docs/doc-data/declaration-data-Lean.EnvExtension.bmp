{"name":"Lean.EnvExtension","instances":[{"typeNames":["Lean.SimplePersistentEnvExtension"],"name":"Lean.SimplePersistentEnvExtension.instInhabited","className":"Inhabited"},{"typeNames":["Lean.TagDeclarationExtension"],"name":"Lean.TagDeclarationExtension.instInhabited","className":"Inhabited"},{"typeNames":["Lean.MapDeclarationExtension"],"name":"Lean.instInhabitedMapDeclarationExtension","className":"Inhabited"}],"imports":["Lean.Environment"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L165-L168","name":"Lean.MapDeclarationExtension.contains","line":165,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.MapDeclarationExtension.contains","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">MapDeclarationExtension</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension\">MapDeclarationExtension</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L156-L163","name":"Lean.MapDeclarationExtension.find?","line":156,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.MapDeclarationExtension.find?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">MapDeclarationExtension</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension\">MapDeclarationExtension</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeServer</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L150-L154","name":"Lean.MapDeclarationExtension.insert","line":150,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.MapDeclarationExtension.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">MapDeclarationExtension</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension\">MapDeclarationExtension</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L131-L146","name":"Lean.mkMapDeclarationExtension","line":131,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.mkMapDeclarationExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.mkMapDeclarationExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">mkMapDeclarationExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exportEntriesFn</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><a href=\"./Lean/Data/RBMap.html#Lean.RBMap.toArray\">RBMap.toArray</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension\">MapDeclarationExtension</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L129-L129","name":"Lean.instInhabitedMapDeclarationExtension","line":129,"kind":"instance","docLink":"./Lean/EnvExtension.html#Lean.instInhabitedMapDeclarationExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.instInhabitedMapDeclarationExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedMapDeclarationExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension\">MapDeclarationExtension</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L128-L128","name":"Lean.MapDeclarationExtension.mk","line":128,"kind":"ctor","docLink":"./Lean/EnvExtension.html#Lean.MapDeclarationExtension.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MapDeclarationExtension</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toPersistentEnvExtension</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension\">MapDeclarationExtension</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L128-L129","name":"Lean.MapDeclarationExtension.toPersistentEnvExtension","line":128,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.MapDeclarationExtension.toPersistentEnvExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension.toPersistentEnvExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">MapDeclarationExtension</span>.<span class=\"name\">toPersistentEnvExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension\">MapDeclarationExtension</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L125-L129","name":"Lean.MapDeclarationExtension","line":125,"kind":"structure","docLink":"./Lean/EnvExtension.html#Lean.MapDeclarationExtension","doc":"Environment extension for mapping declarations to values.\nDeclarations must only be inserted into the mapping in the module where they were declared. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.MapDeclarationExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">MapDeclarationExtension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">Lean.PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span>)</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L115-L121","name":"Lean.TagDeclarationExtension.isTagged","line":115,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.TagDeclarationExtension.isTagged","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.TagDeclarationExtension.isTagged\"><span class=\"name\">Lean</span>.<span class=\"name\">TagDeclarationExtension</span>.<span class=\"name\">isTagged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Lean/EnvExtension.html#Lean.TagDeclarationExtension\">TagDeclarationExtension</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L109-L113","name":"Lean.TagDeclarationExtension.tag","line":109,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.TagDeclarationExtension.tag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.TagDeclarationExtension.tag\"><span class=\"name\">Lean</span>.<span class=\"name\">TagDeclarationExtension</span>.<span class=\"name\">tag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <a href=\"./Lean/EnvExtension.html#Lean.TagDeclarationExtension\">TagDeclarationExtension</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L106-L107","name":"Lean.TagDeclarationExtension.instInhabited","line":106,"kind":"instance","docLink":"./Lean/EnvExtension.html#Lean.TagDeclarationExtension.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.TagDeclarationExtension.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">TagDeclarationExtension</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/EnvExtension.html#Lean.TagDeclarationExtension\">TagDeclarationExtension</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L94-L102","name":"Lean.mkTagDeclarationExtension","line":94,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.mkTagDeclarationExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.mkTagDeclarationExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">mkTagDeclarationExtension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncMode</span> : <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">EnvExtension.AsyncMode</a> := <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.mainOnly\">EnvExtension.AsyncMode.mainOnly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/EnvExtension.html#Lean.TagDeclarationExtension\">TagDeclarationExtension</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L90-L92","name":"Lean.TagDeclarationExtension","line":90,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.TagDeclarationExtension","doc":"Environment extension for tagging declarations.\nDeclarations must only be tagged in the module where they were declared. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.TagDeclarationExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">TagDeclarationExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L83-L86","name":"Lean.SimplePersistentEnvExtension.findStateAsync","line":83,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.findStateAsync","doc":"Returns the final extension state on the environment branch corresponding to the passed declaration\nname, if any, or otherwise the state on the current branch. In other words, at most one environment\nbranch will be blocked on.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.findStateAsync\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtension</span>.<span class=\"name\">findStateAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declPrefix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L79-L81","name":"Lean.SimplePersistentEnvExtension.modifyState","line":79,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.modifyState","doc":"Modify the state of the given extension in the given environment by applying the given function. This change is *not* persisted across files. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.modifyState\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtension</span>.<span class=\"name\">modifyState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L75-L77","name":"Lean.SimplePersistentEnvExtension.setState","line":75,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.setState","doc":"Set the current state of the given `SimplePersistentEnvExtension`. This change is *not* persisted across files. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.setState\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtension</span>.<span class=\"name\">setState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L70-L73","name":"Lean.SimplePersistentEnvExtension.getState","line":70,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.getState","doc":"Get the current state of the given `SimplePersistentEnvExtension`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.getState\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtension</span>.<span class=\"name\">getState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncMode</span> : <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">EnvExtension.AsyncMode</a> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ext</span>.<a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.toEnvExtension\">toEnvExtension</a></span>.<a href=\"./Lean/Environment.html#Lean.EnvExtension.asyncMode\">asyncMode</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L65-L68","name":"Lean.SimplePersistentEnvExtension.getEntries","line":65,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.getEntries","doc":"Get the list of values used to update the state of the given\n`SimplePersistentEnvExtension` in the current file. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.getEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtension</span>.<span class=\"name\">getEntries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L62-L63","name":"Lean.SimplePersistentEnvExtension.instInhabited","line":62,"kind":"instance","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtension</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L43-L58","name":"Lean.registerSimplePersistentEnvExtension","line":43,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.registerSimplePersistentEnvExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.registerSimplePersistentEnvExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">registerSimplePersistentEnvExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">descr</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr\">SimplePersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L32-L41","name":"Lean.SimplePersistentEnvExtension.replayOfFilter","line":32,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.replayOfFilter","doc":"Returns a function suitable for `SimplePersistentEnvExtensionDescr.replay?` that replays all new\nentries onto the state using `addEntryFn`. `p` should filter out entries that have already been\nadded to the state by a prior replay of the same realizable constant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension.replayOfFilter\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtension</span>.<span class=\"name\">replayOfFilter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addEntryFn</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L30-L30","name":"Lean.SimplePersistentEnvExtensionDescr.exported","line":30,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.exported","doc":"Whether entries should be imported into other modules. Entries are always accessible in the\nlanguage server via `getModuleEntries (includeServer := true)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.exported\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtensionDescr</span>.<span class=\"name\">exported</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr\">SimplePersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L25-L25","name":"Lean.SimplePersistentEnvExtensionDescr.replay?","line":25,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.replay?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.replay?\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtensionDescr</span>.<span class=\"name\">replay?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr\">SimplePersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L24-L24","name":"Lean.SimplePersistentEnvExtensionDescr.asyncMode","line":24,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.asyncMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.asyncMode\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtensionDescr</span>.<span class=\"name\">asyncMode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr\">SimplePersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">EnvExtension.AsyncMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L23-L23","name":"Lean.SimplePersistentEnvExtensionDescr.toArrayFn","line":23,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.toArrayFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.toArrayFn\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtensionDescr</span>.<span class=\"name\">toArrayFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr\">SimplePersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L22-L22","name":"Lean.SimplePersistentEnvExtensionDescr.addImportedFn","line":22,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.addImportedFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.addImportedFn\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtensionDescr</span>.<span class=\"name\">addImportedFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr\">SimplePersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L21-L21","name":"Lean.SimplePersistentEnvExtensionDescr.addEntryFn","line":21,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.addEntryFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.addEntryFn\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtensionDescr</span>.<span class=\"name\">addEntryFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr\">SimplePersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L20-L20","name":"Lean.SimplePersistentEnvExtensionDescr.name","line":20,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.name\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtensionDescr</span>.<span class=\"name\">name</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr\">SimplePersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L19-L19","name":"Lean.SimplePersistentEnvExtensionDescr.mk","line":19,"kind":"ctor","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtensionDescr</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addEntryFn</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addImportedFn</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toArrayFn</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncMode</span> : <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">EnvExtension.AsyncMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">replay?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exported</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr\">SimplePersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L19-L30","name":"Lean.SimplePersistentEnvExtensionDescr","line":19,"kind":"structure","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtensionDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtensionDescr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L16-L17","name":"Lean.mkStateFromImportedEntries","line":16,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.mkStateFromImportedEntries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.mkStateFromImportedEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">mkStateFromImportedEntries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addEntryFn</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initState</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/EnvExtension.lean#L13-L14","name":"Lean.SimplePersistentEnvExtension","line":13,"kind":"def","docLink":"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension","doc":"Simple `PersistentEnvExtension` that implements `exportEntriesFn` using a list of entries. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">SimplePersistentEnvExtension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}