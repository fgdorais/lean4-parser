{"name":"Lean.Compiler.LCNF.Basic","instances":[{"typeNames":["Lean.Compiler.LCNF.Param"],"name":"Lean.Compiler.LCNF.instInhabitedParam","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.Param"],"name":"Lean.Compiler.LCNF.instBEqParam","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.AltCore"],"name":"Lean.Compiler.LCNF.instInhabitedAltCore","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.LitValue"],"name":"Lean.Compiler.LCNF.instInhabitedLitValue","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.LitValue"],"name":"Lean.Compiler.LCNF.instBEqLitValue","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.LitValue"],"name":"Lean.Compiler.LCNF.instHashableLitValue","className":"Hashable"},{"typeNames":["Lean.Compiler.LCNF.Arg"],"name":"Lean.Compiler.LCNF.instInhabitedArg","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.Arg"],"name":"Lean.Compiler.LCNF.instBEqArg","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.Arg"],"name":"Lean.Compiler.LCNF.instHashableArg","className":"Hashable"},{"typeNames":["Lean.Compiler.LCNF.LetValue"],"name":"Lean.Compiler.LCNF.instInhabitedLetValue","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.LetValue"],"name":"Lean.Compiler.LCNF.instBEqLetValue","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.LetValue"],"name":"Lean.Compiler.LCNF.instHashableLetValue","className":"Hashable"},{"typeNames":["Lean.Compiler.LCNF.LetDecl"],"name":"Lean.Compiler.LCNF.instInhabitedLetDecl","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.LetDecl"],"name":"Lean.Compiler.LCNF.instBEqLetDecl","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.FunDeclCore"],"name":"Lean.Compiler.LCNF.instInhabitedFunDeclCore","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.CasesCore"],"name":"Lean.Compiler.LCNF.instInhabitedCasesCore","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.Code"],"name":"Lean.Compiler.LCNF.instInhabitedCode","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.CodeDecl"],"name":"Lean.Compiler.LCNF.instInhabitedCodeDecl","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.Code"],"name":"Lean.Compiler.LCNF.instBEqCode","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.FunDecl"],"name":"Lean.Compiler.LCNF.instBEqFunDecl","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.DeclValue"],"name":"Lean.Compiler.LCNF.instInhabitedDeclValue","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.DeclValue"],"name":"Lean.Compiler.LCNF.instBEqDeclValue","className":"BEq"},{"typeNames":["Lean.Compiler.LCNF.Decl"],"name":"Lean.Compiler.LCNF.instInhabitedDecl","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.Decl"],"name":"Lean.Compiler.LCNF.instBEqDecl","className":"BEq"}],"imports":["Init.Data.List.BasicAux","Lean.Expr","Lean.Meta.Instances","Lean.Compiler.ExternAttr","Lean.Compiler.InlineAttrs","Lean.Compiler.Specialize","Lean.Compiler.LCNF.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L739-L743","name":"Lean.Compiler.LCNF.instantiateRevRangeArgs","line":739,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instantiateRevRangeArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instantiateRevRangeArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instantiateRevRangeArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beginIdx </span><span class=\"fn\">endIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L733-L737","name":"Lean.Compiler.LCNF.instantiateRangeArgs","line":733,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instantiateRangeArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instantiateRangeArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instantiateRangeArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beginIdx </span><span class=\"fn\">endIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L730-L731","name":"Lean.Compiler.LCNF.markRecDecls.go","line":730,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.markRecDecls.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.markRecDecls.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">markRecDecls</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L719-L728","name":"Lean.Compiler.LCNF.markRecDecls.visit","line":719,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.markRecDecls.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.markRecDecls.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">markRecDecls</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L703-L731","name":"Lean.Compiler.LCNF.markRecDecls","line":703,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.markRecDecls","doc":"Traverse the given block of potentially mutually recursive functions\nand mark a declaration `f` as recursive if there is an application\n`f ...` in the block.\nThis is an overapproximation, and relies on the fact that our frontend\ncomputes strongly connected components.\nSee comment at `recursive` field.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.markRecDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">markRecDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L700-L701","name":"Lean.Compiler.LCNF.collectUsedAtExpr","line":700,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.collectUsedAtExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.collectUsedAtExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">collectUsedAtExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L684-L697","name":"Lean.Compiler.LCNF.Code.collectUsed","line":684,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.collectUsed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.collectUsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">collectUsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L681-L682","name":"Lean.Compiler.LCNF.FunDeclCore.collectUsed","line":681,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.collectUsed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.collectUsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">collectUsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L638-L649","name":"Lean.Compiler.LCNF.Decl.isTemplateLike","line":638,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.isTemplateLike","doc":"Return `true` if `decl` is supposed to be inlined/specialized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.isTemplateLike\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">isTemplateLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L630-L636","name":"Lean.Compiler.LCNF.hasLocalInst","line":630,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.hasLocalInst","doc":"Return `true` if the arrow type contains an instance implicit argument.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.hasLocalInst\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">hasLocalInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L627-L628","name":"Lean.Compiler.LCNF.Decl.instantiateParamsLevelParams","line":627,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.instantiateParamsLevelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.instantiateParamsLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">instantiateParamsLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L624-L625","name":"Lean.Compiler.LCNF.Decl.instantiateTypeLevelParams","line":624,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.instantiateTypeLevelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.instantiateTypeLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">instantiateTypeLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L618-L622","name":"Lean.Compiler.LCNF.Decl.isCasesOnParam?.go","line":618,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.isCasesOnParam?.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.isCasesOnParam?.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">isCasesOnParam?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L600-L622","name":"Lean.Compiler.LCNF.Decl.isCasesOnParam?","line":600,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.isCasesOnParam?","doc":"Return `some i` if `decl` is of the form\n```\ndef f (a_0 ... a_i ...) :=\n  ...\n  cases a_i\n  | ...\n  | ...\n```\nThat is, `f` is a sequence of declarations followed by a `cases` on the parameter `i`.\nWe use this function to decide whether we should inline a declaration tagged with\n`[inline_if_reduce]` or not.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.isCasesOnParam?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">isCasesOnParam?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L593-L598","name":"Lean.Compiler.LCNF.Decl.inlineable","line":593,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.inlineable","doc":"Return `true` if the given declaration has been annotated with `[inline]`, `[inline_if_reduce]`, `[macro_inline]`, or `[always_inline]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.inlineable\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">inlineable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L590-L591","name":"Lean.Compiler.LCNF.Decl.alwaysInlineAttr","line":590,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.alwaysInlineAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.alwaysInlineAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">alwaysInlineAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L587-L588","name":"Lean.Compiler.LCNF.Decl.inlineIfReduceAttr","line":587,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.inlineIfReduceAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.inlineIfReduceAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">inlineIfReduceAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L584-L585","name":"Lean.Compiler.LCNF.Decl.noinlineAttr","line":584,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.noinlineAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.noinlineAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">noinlineAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L581-L582","name":"Lean.Compiler.LCNF.Decl.inlineAttr","line":581,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.inlineAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.inlineAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">inlineAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L578-L579","name":"Lean.Compiler.LCNF.Decl.getArity","line":578,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.getArity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.getArity\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">getArity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L575-L576","name":"Lean.Compiler.LCNF.Decl.size","line":575,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L573-L573","name":"Lean.Compiler.LCNF.instBEqDecl","line":573,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instBEqDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L573-L573","name":"Lean.Compiler.LCNF.instInhabitedDecl","line":573,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L572-L572","name":"Lean.Compiler.LCNF.Decl.inlineAttr?","line":572,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.inlineAttr?","doc":"We store the inline attribute at LCNF declarations to make sure we can set them for\nauxiliary declarations created during compilation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.inlineAttr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">inlineAttr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/InlineAttrs.html#Lean.Compiler.InlineAttributeKind\">InlineAttributeKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L567-L567","name":"Lean.Compiler.LCNF.Decl.safe","line":567,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.safe","doc":"We set this flag to false during LCNF conversion if the Lean function\nassociated with this function was tagged as partial or unsafe. This\ninformation affects how static analyzers treat function applications\nof this kind. See `DefinitionSafety`.\n`partial` and `unsafe` functions may not be terminating, but Lean\nfunctions terminate, and some static analyzers exploit this\nfact. So, we use the following semantics. Suppose we have a (large) natural\nnumber `C`. We consider a nondeterministic model for computation of Lean expressions as\nfollows:\nEach call to a partial/unsafe function uses up one \"recursion token\".\nPrior to consuming `C` recursion tokens all partial functions must be called\nas normal. Once the model has used up `C` recursion tokens, a subsequent call to\na partial function has the following nondeterministic options: it can either call\nthe function again, or return any value of the target type (even a noncomputable one).\nLarger values of `C` yield less nondeterminism in the model, but even the intersection of\nall choices of `C` yields nondeterminism where `def loop : A := loop` returns any value of type `A`.\nThe compiler fixes a choice for `C`. This is a fixed constant greater than 2^2^64,\nwhich is allowed to be compiler and architecture dependent, and promises that it will\nproduce an execution consistent with every possible nondeterministic outcome of the `C`-model.\nIn the event that different nondeterministic executions disagree, the compiler is required to\nexhaust resources or output a looping computation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.safe\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">safe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L543-L543","name":"Lean.Compiler.LCNF.Decl.recursive","line":543,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.recursive","doc":"We set this flag to true during LCNF conversion. When we receive\na block of functions to be compiled, we set this flag to `true`\nif there is an application to the function in the block containing\nit. This is an approximation, but it should be good enough because\nin the frontend, we invoke the compiler with blocks of strongly connected\ncomponents only.\nWe use this information to control inlining.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.recursive\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">recursive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L533-L533","name":"Lean.Compiler.LCNF.Decl.value","line":533,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.value","doc":"The body of the declaration, usually changes as it progresses\nthrough compiler passes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L528-L528","name":"Lean.Compiler.LCNF.Decl.params","line":528,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.params","doc":"Parameters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L524-L524","name":"Lean.Compiler.LCNF.Decl.type","line":524,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.type","doc":"The type of the declaration. Note that this is an erased LCNF type\ninstead of the fully dependent one that might have been the original\ntype of the declaration in the `Environment`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L518-L518","name":"Lean.Compiler.LCNF.Decl.levelParams","line":518,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.levelParams","doc":"Universe level parameter names.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.levelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">levelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L514-L514","name":"Lean.Compiler.LCNF.Decl.name","line":514,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.name","doc":"The name of the declaration from the `Environment` it came from\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L510-L510","name":"Lean.Compiler.LCNF.Decl.mk","line":510,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recursive </span><span class=\"fn\">safe</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inlineAttr?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/InlineAttrs.html#Lean.Compiler.InlineAttributeKind\">InlineAttributeKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L507-L573","name":"Lean.Compiler.LCNF.Decl","line":507,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl","doc":"Declaration being processed by the Lean to Lean compiler passes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L502-L505","name":"Lean.Compiler.LCNF.DeclValue.isCodeAndM","line":502,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.isCodeAndM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.isCodeAndM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">DeclValue</span>.<span class=\"name\">isCodeAndM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L496-L500","name":"Lean.Compiler.LCNF.DeclValue.forCodeM","line":496,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.forCodeM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.forCodeM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">DeclValue</span>.<span class=\"name\">forCodeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L490-L494","name":"Lean.Compiler.LCNF.DeclValue.mapCodeM","line":490,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.mapCodeM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.mapCodeM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">DeclValue</span>.<span class=\"name\">mapCodeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L485-L488","name":"Lean.Compiler.LCNF.DeclValue.mapCode","line":485,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.mapCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.mapCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">DeclValue</span>.<span class=\"name\">mapCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a> → <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L481-L483","name":"Lean.Compiler.LCNF.DeclValue.size","line":481,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">DeclValue</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L479-L479","name":"Lean.Compiler.LCNF.instBEqDeclValue","line":479,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqDeclValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqDeclValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instBEqDeclValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L479-L479","name":"Lean.Compiler.LCNF.instInhabitedDeclValue","line":479,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedDeclValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedDeclValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedDeclValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L478-L478","name":"Lean.Compiler.LCNF.DeclValue.extern","line":478,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.extern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.extern\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">DeclValue</span>.<span class=\"name\">extern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">externAttrData</span> : <a href=\"./Lean/Compiler/ExternAttr.html#Lean.ExternAttrData\">ExternAttrData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L477-L477","name":"Lean.Compiler.LCNF.DeclValue.code","line":477,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.code","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue.code\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">DeclValue</span>.<span class=\"name\">code</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\">DeclValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L476-L479","name":"Lean.Compiler.LCNF.DeclValue","line":476,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.DeclValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">DeclValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L467-L474","name":"Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instCode","line":467,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">instantiateValueLevelParams</span>.<span class=\"name\">instCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L464-L465","name":"Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instFunDecl","line":464,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instFunDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">instantiateValueLevelParams</span>.<span class=\"name\">instFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L461-L462","name":"Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instLetDecl","line":461,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instLetDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">instantiateValueLevelParams</span>.<span class=\"name\">instLetDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L455-L459","name":"Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instLetValue","line":455,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">instantiateValueLevelParams</span>.<span class=\"name\">instLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L450-L453","name":"Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instArg","line":450,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">instantiateValueLevelParams</span>.<span class=\"name\">instArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L445-L448","name":"Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instAlt","line":445,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">instantiateValueLevelParams</span>.<span class=\"name\">instAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore\">AltCore</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L442-L443","name":"Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instParams","line":442,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">instantiateValueLevelParams</span>.<span class=\"name\">instParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L439-L440","name":"Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instExpr","line":439,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">instantiateValueLevelParams</span>.<span class=\"name\">instExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L436-L437","name":"Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instLevel","line":436,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams.instLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">instantiateValueLevelParams</span>.<span class=\"name\">instLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Level.html#Lean.Level\">Level</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L433-L474","name":"Lean.Compiler.LCNF.Code.instantiateValueLevelParams","line":433,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.instantiateValueLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">instantiateValueLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L425-L431","name":"Lean.Compiler.LCNF.Code.forM.go","line":425,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.forM.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.forM.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">forM</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L422-L431","name":"Lean.Compiler.LCNF.Code.forM","line":422,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.forM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.forM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L414-L420","name":"Lean.Compiler.LCNF.Code.sizeLe.go","line":414,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.sizeLe.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.sizeLe.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">sizeLe</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L410-L412","name":"Lean.Compiler.LCNF.Code.sizeLe.inc","line":410,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.sizeLe.inc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.sizeLe.inc\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">sizeLe</span>.<span class=\"name\">inc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L404-L420","name":"Lean.Compiler.LCNF.Code.sizeLe","line":404,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.sizeLe","doc":"Return true iff `c.size ≤ n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.sizeLe\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">sizeLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L396-L402","name":"Lean.Compiler.LCNF.Code.size.go","line":396,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.size.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.size.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">size</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L393-L402","name":"Lean.Compiler.LCNF.Code.size","line":393,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L389-L391","name":"Lean.Compiler.LCNF.Code.isReturnOf","line":389,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.isReturnOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.isReturnOf\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">isReturnOf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L385-L387","name":"Lean.Compiler.LCNF.Code.isFun","line":385,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.isFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.isFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">isFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L381-L383","name":"Lean.Compiler.LCNF.Code.isDecl","line":381,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.isDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.isDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">isDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L378-L379","name":"Lean.Compiler.LCNF.AltCore.mapCodeM","line":378,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.mapCodeM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.mapCodeM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">mapCodeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L369-L376","name":"Lean.Compiler.LCNF.CasesCore.extractAlt!","line":369,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.extractAlt!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.extractAlt!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CasesCore</span>.<span class=\"name\">extractAlt!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L362-L367","name":"Lean.Compiler.LCNF.FunDeclCore.updateCore","line":362,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.updateCore","doc":"Low-level update `FunDecl` function. It does not update the local context.\nConsider using `FunDecl.update : LetDecl → Expr → Array Param → Code → CompilerM FunDecl` if you want the local context\nto be updated.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.updateCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">updateCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L349-L354","name":"Lean.Compiler.LCNF.LetDecl.updateCore","line":349,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.updateCore","doc":"Low-level update `LetDecl` function. It does not update the local context.\nConsider using `LetDecl.update : LetDecl → Expr → Expr → CompilerM LetDecl` if you want the local context\nto be updated.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.updateCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span>.<span class=\"name\">updateCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L336-L341","name":"Lean.Compiler.LCNF.Param.updateCore","line":336,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.updateCore","doc":"Low-level update `Param` function. It does not update the local context.\nConsider using `Param.update : Param → Expr → CompilerM Param` if you want the local context\nto be updated.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.updateCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">updateCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L328-L328","name":"Lean.Compiler.LCNF.Code.updateUnreach!","line":328,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateUnreach!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateUnreach!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">updateUnreach!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type'</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L321-L321","name":"Lean.Compiler.LCNF.Code.updateJmp!","line":321,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateJmp!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateJmp!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">updateJmp!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId'</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L314-L314","name":"Lean.Compiler.LCNF.Code.updateReturn!","line":314,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateReturn!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateReturn!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">updateReturn!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId'</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L307-L307","name":"Lean.Compiler.LCNF.Code.updateFun!","line":307,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateFun!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateFun!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">updateFun!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl'</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k'</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L299-L299","name":"Lean.Compiler.LCNF.Code.updateCont!","line":299,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateCont!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateCont!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">updateCont!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">k'</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L290-L290","name":"Lean.Compiler.LCNF.Code.updateLet!","line":290,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateLet!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateLet!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">updateLet!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl'</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k'</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L283-L283","name":"Lean.Compiler.LCNF.Code.updateCases!","line":283,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateCases!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateCases!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">updateCases!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L276-L276","name":"Lean.Compiler.LCNF.Code.updateAlts!","line":276,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateAlts!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.updateAlts!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">updateAlts!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L269-L269","name":"Lean.Compiler.LCNF.AltCore.updateAlt!","line":269,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.updateAlt!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.updateAlt!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">updateAlt!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k'</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L262-L262","name":"Lean.Compiler.LCNF.AltCore.updateCode","line":262,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.updateCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.updateCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">updateCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L252-L255","name":"Lean.Compiler.LCNF.AltCore.forCodeM","line":252,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.forCodeM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.forCodeM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">forCodeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L248-L250","name":"Lean.Compiler.LCNF.AltCore.getParams","line":248,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.getParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.getParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">getParams</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L244-L246","name":"Lean.Compiler.LCNF.AltCore.getCode","line":244,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.getCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.getCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">getCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\">Alt</a> → <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L241-L242","name":"Lean.Compiler.LCNF.instBEqFunDecl","line":241,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqFunDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instBEqFunDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L239-L239","name":"Lean.Compiler.LCNF.FunDecl.beq","line":239,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDecl</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a> → <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L236-L237","name":"Lean.Compiler.LCNF.instBEqCode","line":236,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instBEqCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L234-L234","name":"Lean.Compiler.LCNF.Code.beq","line":234,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L192-L199","name":"Lean.Compiler.LCNF.attachCodeDecls.go","line":192,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.attachCodeDecls.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.attachCodeDecls.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">attachCodeDecls</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L189-L199","name":"Lean.Compiler.LCNF.attachCodeDecls","line":189,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.attachCodeDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.attachCodeDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">attachCodeDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L186-L187","name":"Lean.Compiler.LCNF.CodeDecl.fvarId","line":186,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CodeDecl</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a> → <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L184-L184","name":"Lean.Compiler.LCNF.instInhabitedCodeDecl","line":184,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedCodeDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedCodeDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedCodeDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L183-L183","name":"Lean.Compiler.LCNF.CodeDecl.jp","line":183,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl.jp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl.jp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CodeDecl</span>.<span class=\"name\">jp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L182-L182","name":"Lean.Compiler.LCNF.CodeDecl.fun","line":182,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl.fun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl.fun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CodeDecl</span>.<span class=\"name\">fun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L181-L181","name":"Lean.Compiler.LCNF.CodeDecl.let","line":181,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl.let","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl.let\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CodeDecl</span>.<span class=\"name\">let</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L180-L184","name":"Lean.Compiler.LCNF.CodeDecl","line":180,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CodeDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L171-L178","name":"Lean.Compiler.LCNF.CasesCore.getCtorNames","line":171,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.getCtorNames","doc":"Return the constructor names that have an explicit (non-default) alternative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.getCtorNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CasesCore</span>.<span class=\"name\">getCtorNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L169-L169","name":"Lean.Compiler.LCNF.Cases","line":169,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Cases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L168-L168","name":"Lean.Compiler.LCNF.FunDecl","line":168,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L167-L167","name":"Lean.Compiler.LCNF.Alt","line":167,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L165-L165","name":"Lean.Compiler.LCNF.instInhabitedCode","line":165,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L164-L164","name":"Lean.Compiler.LCNF.Code.unreach","line":164,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.unreach","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.unreach\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">unreach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L163-L163","name":"Lean.Compiler.LCNF.Code.return","line":163,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.return","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.return\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">return</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L162-L162","name":"Lean.Compiler.LCNF.Code.cases","line":162,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore\">CasesCore</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L161-L161","name":"Lean.Compiler.LCNF.Code.jmp","line":161,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.jmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.jmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">jmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L160-L160","name":"Lean.Compiler.LCNF.Code.jp","line":160,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.jp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.jp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">jp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\">FunDeclCore</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L159-L159","name":"Lean.Compiler.LCNF.Code.fun","line":159,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.fun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.fun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">fun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\">FunDeclCore</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L158-L158","name":"Lean.Compiler.LCNF.Code.let","line":158,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.let","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code.let\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">let</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L157-L165","name":"Lean.Compiler.LCNF.Code","line":157,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L155-L155","name":"Lean.Compiler.LCNF.instInhabitedCasesCore","line":155,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedCasesCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedCasesCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedCasesCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore\">CasesCore</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L154-L154","name":"Lean.Compiler.LCNF.CasesCore.alts","line":154,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.alts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.alts\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CasesCore</span>.<span class=\"name\">alts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore\">CasesCore</a> <span class=\"fn\">Code</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore\">AltCore</a> <span class=\"fn\">Code</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L153-L153","name":"Lean.Compiler.LCNF.CasesCore.discr","line":153,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.discr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.discr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CasesCore</span>.<span class=\"name\">discr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore\">CasesCore</a> <span class=\"fn\">Code</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L152-L152","name":"Lean.Compiler.LCNF.CasesCore.resultType","line":152,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.resultType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.resultType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CasesCore</span>.<span class=\"name\">resultType</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore\">CasesCore</a> <span class=\"fn\">Code</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L151-L151","name":"Lean.Compiler.LCNF.CasesCore.typeName","line":151,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.typeName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.typeName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CasesCore</span>.<span class=\"name\">typeName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore\">CasesCore</a> <span class=\"fn\">Code</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L150-L150","name":"Lean.Compiler.LCNF.CasesCore.mk","line":150,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CasesCore</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore\">AltCore</a> <span class=\"fn\">Code</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore\">CasesCore</a> <span class=\"fn\">Code</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L150-L155","name":"Lean.Compiler.LCNF.CasesCore","line":150,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">CasesCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L147-L148","name":"Lean.Compiler.LCNF.FunDeclCore.getArity","line":147,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.getArity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.getArity\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">getArity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\">FunDeclCore</a> <span class=\"fn\">Code</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L145-L145","name":"Lean.Compiler.LCNF.instInhabitedFunDeclCore","line":145,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedFunDeclCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedFunDeclCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedFunDeclCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\">FunDeclCore</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L144-L144","name":"Lean.Compiler.LCNF.FunDeclCore.value","line":144,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">value</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\">FunDeclCore</a> <span class=\"fn\">Code</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Code</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L143-L143","name":"Lean.Compiler.LCNF.FunDeclCore.type","line":143,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">type</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\">FunDeclCore</a> <span class=\"fn\">Code</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L142-L142","name":"Lean.Compiler.LCNF.FunDeclCore.params","line":142,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.params","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">params</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\">FunDeclCore</a> <span class=\"fn\">Code</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L141-L141","name":"Lean.Compiler.LCNF.FunDeclCore.binderName","line":141,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.binderName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.binderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">binderName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\">FunDeclCore</a> <span class=\"fn\">Code</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L140-L140","name":"Lean.Compiler.LCNF.FunDeclCore.fvarId","line":140,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">fvarId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\">FunDeclCore</a> <span class=\"fn\">Code</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L139-L139","name":"Lean.Compiler.LCNF.FunDeclCore.mk","line":139,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\">Code</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\">FunDeclCore</a> <span class=\"fn\">Code</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L139-L145","name":"Lean.Compiler.LCNF.FunDeclCore","line":139,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDeclCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L137-L137","name":"Lean.Compiler.LCNF.instBEqLetDecl","line":137,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqLetDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instBEqLetDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L137-L137","name":"Lean.Compiler.LCNF.instInhabitedLetDecl","line":137,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedLetDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedLetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedLetDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L136-L136","name":"Lean.Compiler.LCNF.LetDecl.value","line":136,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L135-L135","name":"Lean.Compiler.LCNF.LetDecl.type","line":135,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L134-L134","name":"Lean.Compiler.LCNF.LetDecl.binderName","line":134,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.binderName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.binderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span>.<span class=\"name\">binderName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L133-L133","name":"Lean.Compiler.LCNF.LetDecl.fvarId","line":133,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L132-L132","name":"Lean.Compiler.LCNF.LetDecl.mk","line":132,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L132-L137","name":"Lean.Compiler.LCNF.LetDecl","line":132,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L123-L130","name":"Lean.Compiler.LCNF.LetValue.toExpr","line":123,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.toExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.toExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L121-L121","name":"Lean.Compiler.LCNF.LetValue.updateArgs!","line":121,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.updateArgs!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.updateArgs!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">updateArgs!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L113-L113","name":"Lean.Compiler.LCNF.LetValue.updateFVar!","line":113,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.updateFVar!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.updateFVar!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">updateFVar!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId'</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L106-L106","name":"Lean.Compiler.LCNF.LetValue.updateConst!","line":106,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.updateConst!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.updateConst!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">updateConst!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName'</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L99-L99","name":"Lean.Compiler.LCNF.LetValue.updateProj!","line":99,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.updateProj!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.updateProj!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">updateProj!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId'</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L89-L92","name":"Lean.Compiler.LCNF.Arg.toLetValue","line":89,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.toLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.toLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Arg</span>.<span class=\"name\">toLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L87-L87","name":"Lean.Compiler.LCNF.instHashableLetValue","line":87,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instHashableLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instHashableLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instHashableLetValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L87-L87","name":"Lean.Compiler.LCNF.instBEqLetValue","line":87,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instBEqLetValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L87-L87","name":"Lean.Compiler.LCNF.instInhabitedLetValue","line":87,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedLetValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L85-L85","name":"Lean.Compiler.LCNF.LetValue.fvar","line":85,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.fvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.fvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L84-L84","name":"Lean.Compiler.LCNF.LetValue.const","line":84,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.const\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L83-L83","name":"Lean.Compiler.LCNF.LetValue.proj","line":83,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">struct</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L82-L82","name":"Lean.Compiler.LCNF.LetValue.erased","line":82,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.erased","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L81-L81","name":"Lean.Compiler.LCNF.LetValue.value","line":81,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L80-L87","name":"Lean.Compiler.LCNF.LetValue","line":80,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L78-L78","name":"Lean.Compiler.LCNF.Arg.updateFVar!","line":78,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.updateFVar!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.updateFVar!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Arg</span>.<span class=\"name\">updateFVar!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId'</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L71-L71","name":"Lean.Compiler.LCNF.Arg.updateType!","line":71,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.updateType!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.updateType!\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Arg</span>.<span class=\"name\">updateType!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L60-L64","name":"Lean.Compiler.LCNF.Arg.toExpr","line":60,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.toExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.toExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Arg</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L57-L58","name":"Lean.Compiler.LCNF.Param.toArg","line":57,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.toArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.toArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">toArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L55-L55","name":"Lean.Compiler.LCNF.instHashableArg","line":55,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instHashableArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instHashableArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instHashableArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L55-L55","name":"Lean.Compiler.LCNF.instBEqArg","line":55,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instBEqArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L55-L55","name":"Lean.Compiler.LCNF.instInhabitedArg","line":55,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L54-L54","name":"Lean.Compiler.LCNF.Arg.type","line":54,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Arg</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L53-L53","name":"Lean.Compiler.LCNF.Arg.fvar","line":53,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.fvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.fvar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Arg</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L52-L52","name":"Lean.Compiler.LCNF.Arg.erased","line":52,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.erased","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Arg</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L51-L55","name":"Lean.Compiler.LCNF.Arg","line":51,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L47-L49","name":"Lean.Compiler.LCNF.LitValue.toExpr","line":47,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue.toExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue.toExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LitValue</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L45-L45","name":"Lean.Compiler.LCNF.instHashableLitValue","line":45,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instHashableLitValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instHashableLitValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instHashableLitValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L45-L45","name":"Lean.Compiler.LCNF.instBEqLitValue","line":45,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqLitValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqLitValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instBEqLitValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L45-L45","name":"Lean.Compiler.LCNF.instInhabitedLitValue","line":45,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedLitValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedLitValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedLitValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L43-L43","name":"Lean.Compiler.LCNF.LitValue.strVal","line":43,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue.strVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue.strVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LitValue</span>.<span class=\"name\">strVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L42-L42","name":"Lean.Compiler.LCNF.LitValue.natVal","line":42,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue.natVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue.natVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LitValue</span>.<span class=\"name\">natVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L41-L45","name":"Lean.Compiler.LCNF.LitValue","line":41,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LitValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L39-L39","name":"Lean.Compiler.LCNF.instInhabitedAltCore","line":39,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedAltCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedAltCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedAltCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore\">AltCore</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L38-L38","name":"Lean.Compiler.LCNF.AltCore.default","line":38,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <span class=\"fn\">Code</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore\">AltCore</a> <span class=\"fn\">Code</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L37-L37","name":"Lean.Compiler.LCNF.AltCore.alt","line":37,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.alt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore.alt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AltCore</span>.<span class=\"name\">alt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <span class=\"fn\">Code</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore\">AltCore</a> <span class=\"fn\">Code</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L36-L39","name":"Lean.Compiler.LCNF.AltCore","line":36,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.AltCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">AltCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Code</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L33-L34","name":"Lean.Compiler.LCNF.Param.toExpr","line":33,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.toExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.toExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L31-L31","name":"Lean.Compiler.LCNF.instBEqParam","line":31,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instBEqParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instBEqParam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L31-L31","name":"Lean.Compiler.LCNF.instInhabitedParam","line":31,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedParam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.instInhabitedParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">instInhabitedParam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L30-L30","name":"Lean.Compiler.LCNF.Param.borrow","line":30,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.borrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.borrow\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">borrow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L29-L29","name":"Lean.Compiler.LCNF.Param.type","line":29,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L28-L28","name":"Lean.Compiler.LCNF.Param.binderName","line":28,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.binderName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.binderName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">binderName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L27-L27","name":"Lean.Compiler.LCNF.Param.fvarId","line":27,"kind":"def","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L26-L26","name":"Lean.Compiler.LCNF.Param.mk","line":26,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">borrow</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Basic.lean#L26-L31","name":"Lean.Compiler.LCNF.Param","line":26,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}