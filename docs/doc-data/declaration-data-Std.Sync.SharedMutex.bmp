{"name":"Std.Sync.SharedMutex","instances":[{"typeNames":["Std.BaseSharedMutex"],"name":"Std.instNonemptyBaseSharedMutex","className":"Nonempty"},{"typeNames":["Std.SharedMutex"],"name":"Std.instNonemptySharedMutex","className":"Nonempty"},{"typeNames":["Std.SharedMutex","Std.BaseSharedMutex"],"name":"Std.instCoeOutSharedMutexBaseSharedMutex","className":"CoeOut"}],"imports":["Std.Sync.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L149-L166","name":"Std.SharedMutex.tryAtomicallyRead","line":149,"kind":"def","docLink":"./Std/Sync/SharedMutex.html#Std.SharedMutex.tryAtomicallyRead","doc":"`mutex.tryAtomicallyRead k` tries to lock `mutex` for shared read access and runs `k` with read\naccess to the mutex's state if it succeeds. If successful, it returns the value of `k`\nas `some`, otherwise `none`.\n\nCalling `mutex.tryAtomicallyRead` while already holding the underlying `BaseSharedMutex` in the\nsame thread is undefined behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex.tryAtomicallyRead\"><span class=\"name\">Std</span>.<span class=\"name\">SharedMutex</span>.<span class=\"name\">tryAtomicallyRead</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutex</span> : <span class=\"fn\"><a href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex\">SharedMutex</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L133-L147","name":"Std.SharedMutex.atomicallyRead","line":133,"kind":"def","docLink":"./Std/Sync/SharedMutex.html#Std.SharedMutex.atomicallyRead","doc":"`mutex.atomicallyRead k` runs `k` with read access to the mutex's state while locking the mutex\nfor shared read access.\n\nCalling `mutex.atomicallyRead` while already holding the underlying `BaseSharedMutex` in the same\nthread is undefined behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex.atomicallyRead\"><span class=\"name\">Std</span>.<span class=\"name\">SharedMutex</span>.<span class=\"name\">atomicallyRead</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutex</span> : <span class=\"fn\"><a href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex\">SharedMutex</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L115-L131","name":"Std.SharedMutex.tryAtomically","line":115,"kind":"def","docLink":"./Std/Sync/SharedMutex.html#Std.SharedMutex.tryAtomically","doc":"`mutex.tryAtomically k` tries to lock `mutex` for exclusive write access and runs `k` with read\nand write access to the mutex's state if it succeeds. If successful, it returns the value of `k`\nas `some`, otherwise `none`.\n\nCalling `mutex.tryAtomically` while already holding the underlying `BaseSharedMutex` in the same\nthread is undefined behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex.tryAtomically\"><span class=\"name\">Std</span>.<span class=\"name\">SharedMutex</span>.<span class=\"name\">tryAtomically</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutex</span> : <span class=\"fn\"><a href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex\">SharedMutex</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Std/Sync/Basic.html#Std.AtomicT\">AtomicT</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L100-L113","name":"Std.SharedMutex.atomically","line":100,"kind":"def","docLink":"./Std/Sync/SharedMutex.html#Std.SharedMutex.atomically","doc":"`mutex.atomically k` runs `k` with read and write access to the mutex's state while locking the\nmutex for exclusive write access.\n\nCalling `mutex.atomically` while already holding the underlying `BaseSharedMutex` in the same thread\nis undefined behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex.atomically\"><span class=\"name\">Std</span>.<span class=\"name\">SharedMutex</span>.<span class=\"name\">atomically</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutex</span> : <span class=\"fn\"><a href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex\">SharedMutex</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Std/Sync/Basic.html#Std.AtomicT\">AtomicT</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L96-L98","name":"Std.SharedMutex.new","line":96,"kind":"def","docLink":"./Std/Sync/SharedMutex.html#Std.SharedMutex.new","doc":"Creates a new shared mutex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex.new\"><span class=\"name\">Std</span>.<span class=\"name\">SharedMutex</span>.<span class=\"name\">new</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex\">SharedMutex</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L94-L94","name":"Std.instCoeOutSharedMutexBaseSharedMutex","line":94,"kind":"instance","docLink":"./Std/Sync/SharedMutex.html#Std.instCoeOutSharedMutexBaseSharedMutex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.instCoeOutSharedMutexBaseSharedMutex\"><span class=\"name\">Std</span>.<span class=\"name\">instCoeOutSharedMutexBaseSharedMutex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex\">SharedMutex</a> <span class=\"fn\">α</span>)</span> <a href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\">BaseSharedMutex</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L92-L92","name":"Std.instNonemptySharedMutex","line":92,"kind":"instance","docLink":"./Std/Sync/SharedMutex.html#Std.instNonemptySharedMutex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.instNonemptySharedMutex\"><span class=\"name\">Std</span>.<span class=\"name\">instNonemptySharedMutex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex\">SharedMutex</a> <span class=\"fn\">α✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L91-L91","name":"Std.SharedMutex.mutex","line":91,"kind":"def","docLink":"./Std/Sync/SharedMutex.html#Std.SharedMutex.mutex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex.mutex\"><span class=\"name\">Std</span>.<span class=\"name\">SharedMutex</span>.<span class=\"name\">mutex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex\">SharedMutex</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\">BaseSharedMutex</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L85-L92","name":"Std.SharedMutex","line":85,"kind":"structure","docLink":"./Std/Sync/SharedMutex.html#Std.SharedMutex","doc":"An exclusion primitive that allows a number of readers or at most one writer access to a shared\nstate of type `α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.SharedMutex\"><span class=\"name\">Std</span>.<span class=\"name\">SharedMutex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L76-L83","name":"Std.BaseSharedMutex.unlockRead","line":76,"kind":"opaque","docLink":"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.unlockRead","doc":"Unlocks a `BaseSharedMutex` read lock.\n\nThe current thread must have already locked the mutex for read access.\nUnlocking an unlocked mutex is undefined behavior (inherited from the C++ implementation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.unlockRead\"><span class=\"name\">Std</span>.<span class=\"name\">BaseSharedMutex</span>.<span class=\"name\">unlockRead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutex</span> : <a href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\">BaseSharedMutex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L66-L74","name":"Std.BaseSharedMutex.tryRead","line":66,"kind":"opaque","docLink":"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.tryRead","doc":"Attempts to lock a `BaseSharedMutex` for shared read access. If the mutex is not available\nreturn `false`, otherwise lock it and return `true`.\n\nThe current thread must not have already locked the mutex.\nReentrant locking is undefined behavior (inherited from the C++ implementation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.tryRead\"><span class=\"name\">Std</span>.<span class=\"name\">BaseSharedMutex</span>.<span class=\"name\">tryRead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutex</span> : <a href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\">BaseSharedMutex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L55-L64","name":"Std.BaseSharedMutex.read","line":55,"kind":"opaque","docLink":"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.read","doc":"Locks a `BaseSharedMutex` for shared read access. This function blocks until there are no more\nwriters which hold the lock. There may be other readers currently inside the lock when this method\nreturns.\n\nThe current thread must not have already locked the mutex.\nReentrant locking is undefined behavior (inherited from the C++ implementation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.read\"><span class=\"name\">Std</span>.<span class=\"name\">BaseSharedMutex</span>.<span class=\"name\">read</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutex</span> : <a href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\">BaseSharedMutex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L46-L53","name":"Std.BaseSharedMutex.unlockWrite","line":46,"kind":"opaque","docLink":"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.unlockWrite","doc":"Unlocks a `BaseSharedMutex` write lock.\n\nThe current thread must have already locked the mutex for write access.\nUnlocking an unlocked mutex is undefined behavior (inherited from the C++ implementation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.unlockWrite\"><span class=\"name\">Std</span>.<span class=\"name\">BaseSharedMutex</span>.<span class=\"name\">unlockWrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutex</span> : <a href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\">BaseSharedMutex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L36-L44","name":"Std.BaseSharedMutex.tryWrite","line":36,"kind":"opaque","docLink":"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.tryWrite","doc":"Attempts to lock a `BaseSharedMutex` for exclusive write access. If the mutex is not available\nreturn `false`, otherwise lock it and return `true`.\n\nThe current thread must not have already locked the mutex.\nReentrant locking is undefined behavior (inherited from the C++ implementation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.tryWrite\"><span class=\"name\">Std</span>.<span class=\"name\">BaseSharedMutex</span>.<span class=\"name\">tryWrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutex</span> : <a href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\">BaseSharedMutex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L26-L34","name":"Std.BaseSharedMutex.write","line":26,"kind":"opaque","docLink":"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.write","doc":"Locks a `BaseSharedMutex` for exclusive write access. This function blocks until no other\nwriters or readers have access to the lock.\n\nThe current thread must not have already locked the mutex.\nReentrant locking is undefined behavior (inherited from the C++ implementation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.write\"><span class=\"name\">Std</span>.<span class=\"name\">BaseSharedMutex</span>.<span class=\"name\">write</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutex</span> : <a href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\">BaseSharedMutex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L22-L24","name":"Std.BaseSharedMutex.new","line":22,"kind":"opaque","docLink":"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.new","doc":"Creates a new `BaseSharedMutex`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex.new\"><span class=\"name\">Std</span>.<span class=\"name\">BaseSharedMutex</span>.<span class=\"name\">new</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\">BaseSharedMutex</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L20-L20","name":"Std.instNonemptyBaseSharedMutex","line":20,"kind":"instance","docLink":"./Std/Sync/SharedMutex.html#Std.instNonemptyBaseSharedMutex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.instNonemptyBaseSharedMutex\"><span class=\"name\">Std</span>.<span class=\"name\">instNonemptyBaseSharedMutex</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\">BaseSharedMutex</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Sync/SharedMutex.lean#L13-L18","name":"Std.BaseSharedMutex","line":13,"kind":"def","docLink":"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex","doc":"An exclusion primitive that allows a number of readers or at most one writer.\n\nIf you want to guard shared state, use `SharedMutex α` instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sync/SharedMutex.html#Std.BaseSharedMutex\"><span class=\"name\">Std</span>.<span class=\"name\">BaseSharedMutex</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}