{"name":"Lean.Elab.App","instances":[{"typeNames":["Lean.Elab.Term.Arg"],"name":"Lean.Elab.Term.instToStringArg","className":"ToString"},{"typeNames":["Lean.Elab.Term.NamedArg"],"name":"Lean.Elab.Term.instToStringNamedArg","className":"ToString"},{"typeNames":["Lean.Elab.Term.ElabElimInfo"],"name":"Lean.Elab.Term.instReprElabElimInfo","className":"Repr"},{"typeNames":["Lean.Elab.Term.ElabElimInfo"],"name":"Lean.Elab.Term.instInhabitedElabElimInfo","className":"Inhabited"}],"imports":["Lean.Util.FindMVar","Lean.Util.CollectFVars","Lean.Parser.Term","Lean.Meta.KAbstract","Lean.Meta.Tactic.ElimInfo","Lean.Elab.Term","Lean.Elab.Binders","Lean.Elab.SyntheticMVars","Lean.Elab.Arg","Lean.Elab.RecAppSyntax"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1721-L1721","name":"Lean.Elab.Term.elabProj","line":1721,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabProj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabProj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1720-L1720","name":"Lean.Elab.Term.elabChoice","line":1720,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabChoice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabChoice\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabChoice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1710-L1718","name":"Lean.Elab.Term.elabExplicit","line":1710,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabExplicit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1700-L1708","name":"Lean.Elab.Term.elabPipeProj","line":1700,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabPipeProj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabPipeProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabPipeProj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1699-L1699","name":"Lean.Elab.Term.elabExplicitUniv","line":1699,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicitUniv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicitUniv\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabExplicitUniv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1698-L1698","name":"Lean.Elab.Term.elabDotIdent","line":1698,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabDotIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabDotIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabDotIdent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1697-L1697","name":"Lean.Elab.Term.elabNamedPattern","line":1697,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabNamedPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabNamedPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabNamedPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1696-L1696","name":"Lean.Elab.Term.elabIdent","line":1696,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabIdent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1688-L1691","name":"Lean.Elab.Term.elabApp","line":1688,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabApp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1434-L1435","name":"Lean.Elab.Term.elabExplicitUnivs","line":1434,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicitUnivs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicitUnivs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabExplicitUnivs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lvls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1145-L1147","name":"Lean.Elab.Term.LValResolution.localRec","line":1145,"kind":"ctor","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution.localRec","doc":"Like `const`, but with `fvar` instead of `constName`.\nThe `fullName` is the name of the recursive function, and `baseName` is the base name of the type to search for in the parameter list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution.localRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LValResolution</span>.<span class=\"name\">localRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">baseName </span><span class=\"fn\">fullName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution\">LValResolution</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1141-L1144","name":"Lean.Elab.Term.LValResolution.const","line":1141,"kind":"ctor","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution.const","doc":"When applied to `f`, effectively expands to `constName ... (Struct.toBase f)`, with the argument placed in the correct\npositional argument if possible, or otherwise as a named argument. The `Struct.toBase` is not present if `baseStructName == structName`,\nin which case these do not need to be structures. Supports generalized field notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution.const\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LValResolution</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">baseStructName </span><span class=\"fn\">structName </span><span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution\">LValResolution</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1139-L1140","name":"Lean.Elab.Term.LValResolution.projIdx","line":1139,"kind":"ctor","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution.projIdx","doc":"Similar to `projFn`, but for extracting field indexed by `idx`. Works for structure-like inductive types in general. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution.projIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LValResolution</span>.<span class=\"name\">projIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution\">LValResolution</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1136-L1138","name":"Lean.Elab.Term.LValResolution.projFn","line":1136,"kind":"ctor","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution.projFn","doc":"When applied to `f`, effectively expands to `BaseStruct.fieldName (self := Struct.toBase f)`.\nThis is a special named argument where it suppresses any explicit arguments depending on it so that type parameters don't need to be supplied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution.projFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LValResolution</span>.<span class=\"name\">projFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">baseStructName </span><span class=\"fn\">structName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution\">LValResolution</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1134-L1147","name":"Lean.Elab.Term.LValResolution","line":1134,"kind":"inductive","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution","doc":"Auxiliary inductive datatype that represents the resolution of an `LVal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">LValResolution</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1097-L1131","name":"Lean.Elab.Term.elabAppArgs.elabAsElim?","line":1097,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabAppArgs.elabAsElim?","doc":"Return `some info` if we should elaborate as an eliminator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabAppArgs.elabAsElim?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabAppArgs</span>.<span class=\"name\">elabAsElim?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namedArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicit </span><span class=\"fn\">ellipsis</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1052-L1131","name":"Lean.Elab.Term.elabAppArgs","line":1052,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabAppArgs","doc":"Elaborate a `f`-application using `namedArgs` and `args` as the arguments.\n- `expectedType?` the expected type if available. It is used to propagate typing information only. This method does **not** ensure the result has this type.\n- `explicit = true` when notation `@` is used, and implicit arguments are assumed to be provided at `namedArgs` and `args`.\n- `ellipsis = true` when notation `..` is used. That is, we add `_` for missing arguments.\n- `resultIsOutParamSupport` is used to control whether special support is used when processing applications of functions that return\n   output parameter of some local instance. Example:\n   ```\n   GetElem.getElem : {Cont : Type u_1} → {Idx : Type u_2} → {elem : Type u_3} → {dom : cont → idx → Prop} → [self : GetElem cont idx elem dom] → (xs : cont) → (i : idx) → dom xs i → elem\n   ```\n   The result type `elem` is the output parameter of the local instance `self`.\n   When this parameter is set to `true`, we execute `synthesizeSyntheticMVarsUsingDefault`. For additional details, see comment at\n   `ElabAppArgs.resultIsOutParam`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabAppArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabAppArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namedArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicit </span><span class=\"fn\">ellipsis</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultIsOutParamSupport</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L1001-L1032","name":"Lean.Elab.Term.ElabElim.main","line":1001,"kind":"opaque","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.main","doc":"Main loop of the `elimAsElab` procedure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L994-L999","name":"Lean.Elab.Term.ElabElim.mkImplicitArg","line":994,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.mkImplicitArg","doc":"Create an implicit argument using the given `BinderInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.mkImplicitArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">mkImplicitArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argExpectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bi</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L989-L992","name":"Lean.Elab.Term.ElabElim.saveArgInfo","line":989,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.saveArgInfo","doc":"Save information for producing error messages. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.saveArgInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">saveArgInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L977-L979","name":"Lean.Elab.Term.ElabElim.setMotive","line":977,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.setMotive","doc":"Set the `motive` field in the state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.setMotive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">setMotive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motive</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L957-L975","name":"Lean.Elab.Term.ElabElim.getNextArg?","line":957,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.getNextArg?","doc":"Return the next argument to be processed.\nThe result is `.none` if it is an implicit argument which was not provided using a named argument.\nThe result is `.undef` if `args` is empty and `namedArgs` does contain an entry for `binderName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.getNextArg?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">getNextArg?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderInfo</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.M\">M</a> <span class=\"fn\">(<a href=\"./Lean/Data/LOption.html#Lean.LOption\">LOption</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L907-L955","name":"Lean.Elab.Term.ElabElim.finalize","line":907,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.finalize","doc":"Construct the resulting application after all discriminants have been elaborated, and we have\nconsumed as many given arguments as possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.finalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">finalize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L890-L905","name":"Lean.Elab.Term.ElabElim.revertArgs","line":890,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.revertArgs","doc":"If the eliminator is over-applied, we \"revert\" the extra arguments.\nReturns the function with the reverted arguments applied and the new generalized expected type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.revertArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">revertArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L881-L888","name":"Lean.Elab.Term.ElabElim.mkMotive","line":881,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.mkMotive","doc":"Infer the `motive` using the expected type by `kabstract`ing the discriminants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.mkMotive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">mkMotive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L879-L879","name":"Lean.Elab.Term.ElabElim.M","line":879,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L877-L877","name":"Lean.Elab.Term.ElabElim.State.motive?","line":877,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.motive?","doc":"Store the metavariable used to represent the motive that will be computed at `finalize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.motive?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">State</span>.<span class=\"name\">motive?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L875-L875","name":"Lean.Elab.Term.ElabElim.State.idx","line":875,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.idx","doc":"Position of the next argument to be processed. We use it to decide whether the argument is the motive or a discriminant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">State</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L873-L873","name":"Lean.Elab.Term.ElabElim.State.instMVars","line":873,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.instMVars","doc":"Instance implicit arguments collected so far. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.instMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">State</span>.<span class=\"name\">instMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L871-L871","name":"Lean.Elab.Term.ElabElim.State.args","line":871,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.args","doc":"User-provided arguments that still have to be processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">State</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L869-L869","name":"Lean.Elab.Term.ElabElim.State.namedArgs","line":869,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.namedArgs","doc":"User-provided named arguments that still have to be processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.namedArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">State</span>.<span class=\"name\">namedArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L867-L867","name":"Lean.Elab.Term.ElabElim.State.fType","line":867,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.fType","doc":"`f : fType "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.fType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">State</span>.<span class=\"name\">fType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L865-L865","name":"Lean.Elab.Term.ElabElim.State.f","line":865,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.f","doc":"The resultant expression being built. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.f\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">State</span>.<span class=\"name\">f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L863-L863","name":"Lean.Elab.Term.ElabElim.State.mk","line":863,"kind":"ctor","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">fType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namedArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motive?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L862-L877","name":"Lean.Elab.Term.ElabElim.State","line":862,"kind":"structure","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State","doc":"State of the `elab_as_elim` elaboration procedure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L860-L860","name":"Lean.Elab.Term.ElabElim.Context.expectedType","line":860,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context.expectedType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context.expectedType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">Context</span>.<span class=\"name\">expectedType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L859-L859","name":"Lean.Elab.Term.ElabElim.Context.elimInfo","line":859,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context.elimInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context.elimInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">Context</span>.<span class=\"name\">elimInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L858-L858","name":"Lean.Elab.Term.ElabElim.Context.mk","line":858,"kind":"ctor","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimInfo</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L857-L860","name":"Lean.Elab.Term.ElabElim.Context","line":857,"kind":"structure","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context","doc":"Context of the `elab_as_elim` elaboration procedure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElim</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L838-L853","name":"Lean.Elab.Term.elabAsElim","line":838,"kind":"opaque","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabAsElim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabAsElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabAsElim</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L835-L836","name":"Lean.Elab.Term.getElabElimInfo","line":835,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.getElabElimInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.getElabElimInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getElabElimInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L789-L833","name":"Lean.Elab.Term.getElabElimExprInfo","line":789,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.getElabElimExprInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.getElabElimExprInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getElabElimExprInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L787-L787","name":"Lean.Elab.Term.instInhabitedElabElimInfo","line":787,"kind":"instance","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.instInhabitedElabElimInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.instInhabitedElabElimInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedElabElimInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L787-L787","name":"Lean.Elab.Term.instReprElabElimInfo","line":787,"kind":"instance","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.instReprElabElimInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.instReprElabElimInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instReprElabElimInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L786-L786","name":"Lean.Elab.Term.ElabElimInfo.majorsPos","line":786,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo.majorsPos","doc":"Positions of \"major\" parameters (those that should be eagerly elaborated\nbecause they can contribute to the motive inference procedure).\nAll parameters that are neither the motive nor a major parameter are \"minor\" parameters.\nThe major parameters include all of the parameters that transitively appear in the motive's arguments,\nas well as \"first-order\" arguments that include such parameters,\nsince they too can help with elaborating discriminants.\n\nFor example, in the following theorem the argument `h : a = b`\nshould be elaborated eagerly because it contains `b`, which occurs in `motive b`.\n```\ntheorem Eq.subst' {α} {motive : α → Prop} {a b : α} (h : a = b) : motive a → motive b\n```\nFor another example, the term `isEmptyElim (α := α)` is an underapplied eliminator, and it needs\nargument `α` to be elaborated eagerly to create a type-correct motive.\n```\ndef isEmptyElim [IsEmpty α] {p : α → Sort _} (a : α) : p a := ...\nexample {α : Type _} [IsEmpty α] : id (α → False) := isEmptyElim (α := α)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo.majorsPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElimInfo</span>.<span class=\"name\">majorsPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L765-L765","name":"Lean.Elab.Term.ElabElimInfo.motivePos","line":765,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo.motivePos","doc":"The position of the motive parameter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo.motivePos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElimInfo</span>.<span class=\"name\">motivePos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L763-L763","name":"Lean.Elab.Term.ElabElimInfo.elimType","line":763,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo.elimType","doc":"The type of the eliminator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo.elimType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElimInfo</span>.<span class=\"name\">elimType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L761-L761","name":"Lean.Elab.Term.ElabElimInfo.elimExpr","line":761,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo.elimExpr","doc":"The eliminator. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo.elimExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElimInfo</span>.<span class=\"name\">elimExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L759-L759","name":"Lean.Elab.Term.ElabElimInfo.mk","line":759,"kind":"ctor","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElimInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimExpr </span><span class=\"fn\">elimType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motivePos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">majorsPos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\">ElabElimInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L743-L787","name":"Lean.Elab.Term.ElabElimInfo","line":743,"kind":"structure","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo","doc":"Information about an eliminator used by the elab-as-elim elaborator.\nThis is not to be confused with `Lean.Meta.ElimInfo`, which is for `induction` and `cases`.\nThe elab-as-elim routine is less restrictive in what counts as an eliminator, and it doesn't need\nto have a strict notion of what is a \"target\" — all it cares about are\n1. that the return type of a function is of the form `m ...` where `m` is a parameter\n   (unlike `induction` and `cases` eliminators, the arguments to `m`, known as \"discriminants\",\n   can be any expressions, not just parameters), and\n2. which arguments should be eagerly elaborated, to make discriminants be as elaborated as\n   possible for the expected type generalization procedure,\n   and which should be postponed (since they are the \"minor premises\").\n\nNote that the routine isn't doing induction/cases *on* particular expressions.\nThe purpose of elab-as-elim is to successfully solve the higher-order unification problem\nbetween the return type of the function and the expected type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabElimInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabElimInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L711-L734","name":"Lean.Elab.Term.ElabAppArgs.main","line":711,"kind":"opaque","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.main","doc":"Elaborate function application arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L227-L229","name":"Lean.Elab.Term.ElabAppArgs.eraseNamedArg","line":227,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.eraseNamedArg","doc":"Remove named argument with name `binderName` from `namedArgs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.eraseNamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">eraseNamedArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L185-L191","name":"Lean.Elab.Term.ElabAppArgs.synthesizeAppInstMVars","line":185,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.synthesizeAppInstMVars","doc":"Try to synthesize metavariables are `instMVars` using type class resolution.\nThe ones that cannot be synthesized yet are registered.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.synthesizeAppInstMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">synthesizeAppInstMVars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L169-L183","name":"Lean.Elab.Term.ElabAppArgs.trySynthesizeAppInstMVars","line":169,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.trySynthesizeAppInstMVars","doc":"Try to synthesize metavariables are `instMVars` using type class resolution.\nThe ones that cannot be synthesized yet stay in the `instMVars` list.\nRemark: we use this method\n  - before trying to apply coercions to function,\n  - before unifying the expected type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.trySynthesizeAppInstMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">trySynthesizeAppInstMVars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L163-L163","name":"Lean.Elab.Term.ElabAppArgs.M","line":163,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L161-L161","name":"Lean.Elab.Term.ElabAppArgs.State.resultTypeOutParam?","line":161,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.resultTypeOutParam?","doc":"If the result type may be the `outParam` of some local instance.\nSee comment at `Context.resultIsOutParamSupport`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.resultTypeOutParam?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">resultTypeOutParam?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L156-L156","name":"Lean.Elab.Term.ElabAppArgs.State.propagateExpected","line":156,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.propagateExpected","doc":"The following field is used to implement the `propagateExpectedType` heuristic.\nIt is set to `true` true when `expectedType` still has to be propagated.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.propagateExpected\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">propagateExpected</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L151-L151","name":"Lean.Elab.Term.ElabAppArgs.State.instMVars","line":151,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.instMVars","doc":"Metavariables for the instance implicit arguments that have already been processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.instMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">instMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L149-L149","name":"Lean.Elab.Term.ElabAppArgs.State.toSetErrorCtx","line":149,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.toSetErrorCtx","doc":"Metavariables that we need to set the error context using the application being built. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.toSetErrorCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">toSetErrorCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L147-L147","name":"Lean.Elab.Term.ElabAppArgs.State.etaArgs","line":147,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.etaArgs","doc":"When named arguments are provided and explicit arguments occurring before them are missing,\nthe elaborator eta-expands the declaration. For example,\n```\ndef f (x y : Nat) := x + y\n#check f (y := 5)\n-- fun x => f x 5\n```\n`etaArgs` stores the fresh free variables for implementing the eta-expansion.\nWhen `..` is used, eta-expansion is disabled, and missing arguments are treated as `_`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.etaArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">etaArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L135-L135","name":"Lean.Elab.Term.ElabAppArgs.State.expectedType?","line":135,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.expectedType?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.expectedType?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">expectedType?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L134-L134","name":"Lean.Elab.Term.ElabAppArgs.State.namedArgs","line":134,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.namedArgs","doc":"remaining named arguments to be processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.namedArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">namedArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L132-L132","name":"Lean.Elab.Term.ElabAppArgs.State.args","line":132,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.args","doc":"Remaining regular arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L130-L130","name":"Lean.Elab.Term.ElabAppArgs.State.fType","line":130,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.fType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.fType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">fType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L129-L129","name":"Lean.Elab.Term.ElabAppArgs.State.f","line":129,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.f\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L128-L128","name":"Lean.Elab.Term.ElabAppArgs.State.mk","line":128,"kind":"ctor","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">fType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namedArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSetErrorCtx </span><span class=\"fn\">instMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">propagateExpected</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultTypeOutParam?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L127-L161","name":"Lean.Elab.Term.ElabAppArgs.State","line":127,"kind":"structure","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State","doc":"Auxiliary structure for elaborating the application `f args namedArgs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L125-L125","name":"Lean.Elab.Term.ElabAppArgs.Context.resultIsOutParamSupport","line":125,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context.resultIsOutParamSupport","doc":"If the result type of an application is the `outParam` of some local instance, then special support may be needed\nbecause type class resolution interacts poorly with coercions in this kind of situation.\nThis flag enables the special support.\n\nThe idea is quite simple, if the result type is the `outParam` of some local instance, we simply\nexecute `synthesizeSyntheticMVarsUsingDefault`. We added this feature to make sure examples as follows\nare correctly elaborated.\n```lean\nclass GetElem (Cont : Type u) (Idx : Type v) (Elem : outParam (Type w)) where\n  getElem (xs : Cont) (i : Idx) : Elem\n\nexport GetElem (getElem)\n\ninstance : GetElem (Array α) Nat α where\n  getElem xs i := xs.get ⟨i, sorry⟩\n\nopaque f : Option Bool → Bool\nopaque g : Bool → Bool\n\ndef bad (xs : Array Bool) : Bool :=\n  let x := getElem xs 0\n  f x && g x\n```\nWithout the special support, Lean fails at `g x` saying `x` has type `Option Bool` but is expected to have type `Bool`.\nFrom the user's point of view this is a bug, since `let x := getElem xs 0` clearly constrains `x` to be `Bool`, but\nwe only obtain this information after we apply the `OfNat` default instance for `0`.\n\nBefore converging to this solution, we have tried to create a \"coercion placeholder\" when `resultIsOutParamSupport = true`,\nbut it did not work well in practice. For example, it failed in the example above.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context.resultIsOutParamSupport\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">Context</span>.<span class=\"name\">resultIsOutParamSupport</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L93-L93","name":"Lean.Elab.Term.ElabAppArgs.Context.explicit","line":93,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context.explicit","doc":"`true` if `@` modifier was used\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context.explicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">Context</span>.<span class=\"name\">explicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L89-L89","name":"Lean.Elab.Term.ElabAppArgs.Context.ellipsis","line":89,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context.ellipsis","doc":"`true` if `..` was used\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context.ellipsis\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">Context</span>.<span class=\"name\">ellipsis</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L85-L85","name":"Lean.Elab.Term.ElabAppArgs.Context.mk","line":85,"kind":"ctor","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ellipsis </span><span class=\"fn\">explicit </span><span class=\"fn\">resultIsOutParamSupport</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L85-L125","name":"Lean.Elab.Term.ElabAppArgs.Context","line":85,"kind":"structure","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ElabAppArgs</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L70-L72","name":"Lean.Elab.Term.eraseNamedArg","line":70,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.eraseNamedArg","doc":"Erase entry for `binderName` from `namedArgs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.eraseNamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">eraseNamedArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namedArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L60-L64","name":"Lean.Elab.Term.synthesizeAppInstMVars","line":60,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.synthesizeAppInstMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.synthesizeAppInstMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">synthesizeAppInstMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L35-L38","name":"Lean.Elab.Term.throwInvalidNamedArg","line":35,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.throwInvalidNamedArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.throwInvalidNamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">throwInvalidNamedArg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namedArg</span> : <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L32-L33","name":"Lean.Elab.Term.instToStringNamedArg","line":32,"kind":"instance","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.instToStringNamedArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.instToStringNamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instToStringNamedArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.NamedArg\">NamedArg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L27-L30","name":"Lean.Elab.Term.instToStringArg","line":27,"kind":"instance","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.instToStringArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.instToStringArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instToStringArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/Arg.html#Lean.Elab.Term.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L24-L25","name":"Lean.Elab.Term.hasElabWithoutExpectedType","line":24,"kind":"def","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.hasElabWithoutExpectedType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.hasElabWithoutExpectedType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">hasElabWithoutExpectedType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/App.lean#L21-L22","name":"Lean.Elab.Term.elabWithoutExpectedTypeAttr","line":21,"kind":"opaque","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabWithoutExpectedTypeAttr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/App.html#Lean.Elab.Term.elabWithoutExpectedTypeAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabWithoutExpectedTypeAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a></div></div>"}]}