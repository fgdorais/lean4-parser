{"name":"Lean.Meta.Tactic.Grind.Intro","instances":[{"typeNames":["_private.Lean.Meta.Tactic.Grind.Intro.0.Lean.Meta.Grind.IntroResult"],"name":"Lean.Meta.Grind.instInhabitedIntroResult","className":"Inhabited"}],"imports":["Init.Grind.Lemmas","Lean.Meta.Tactic.Assert","Lean.Meta.Tactic.Grind.Simp","Lean.Meta.Tactic.Grind.Types","Lean.Meta.Tactic.Grind.Cases","Lean.Meta.Tactic.Grind.CasesMatch","Lean.Meta.Tactic.Grind.Injection","Lean.Meta.Tactic.Grind.Core","Lean.Meta.Tactic.Grind.Combinators"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Intro.lean#L265-L267","name":"Lean.Meta.Grind.assertAll","line":265,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertAll","doc":"Asserts all facts in the `goal` fact queue. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">assertAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Combinators.html#Lean.Meta.Grind.GrindTactic\">GrindTactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Intro.lean#L259-L263","name":"Lean.Meta.Grind.assertNext","line":259,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertNext","doc":"Asserts next fact in the `goal` fact queue. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertNext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">assertNext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Combinators.html#Lean.Meta.Grind.GrindTactic\">GrindTactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Intro.lean#L245-L257","name":"Lean.Meta.Grind.assertAt","line":245,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertAt","doc":"Asserts a new fact `prop` with proof `proof` to the given `goal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.assertAt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">assertAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof </span><span class=\"fn\">prop</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Combinators.html#Lean.Meta.Grind.GrindTactic'\">GrindTactic'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Intro.lean#L218-L241","name":"Lean.Meta.Grind.intros.go","line":218,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.intros.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.intros.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">intros</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Intro.lean#L216-L243","name":"Lean.Meta.Grind.intros","line":216,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.intros","doc":"Introduce new hypotheses (and apply `by_contra`) until goal is of the form `... ⊢ False` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.intros\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">intros</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Combinators.html#Lean.Meta.Grind.GrindTactic'\">GrindTactic'</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Intro.lean#L24-L24","name":"Lean.Meta.Grind.instInhabitedIntroResult","line":24,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.instInhabitedIntroResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Intro.html#Lean.Meta.Grind.instInhabitedIntroResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedIntroResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Intro.html#_private.Lean.Meta.Tactic.Grind.Intro.0.Lean.Meta.Grind.IntroResult\">Lean.Meta.Grind.IntroResult✝</a></span></div></div>"}]}