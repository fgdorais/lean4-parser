{"name":"Lean.Elab.Tactic.Conv.Pattern","instances":[],"imports":["Lean.Elab.Tactic.Simp","Lean.Elab.Tactic.Conv.Basic","Lean.HeadIndex"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Conv/Pattern.lean#L104-L141","name":"Lean.Elab.Tactic.Conv.evalPattern","line":104,"kind":"def","docLink":"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.evalPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.evalPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">evalPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Conv/Pattern.lean#L72-L79","name":"Lean.Elab.Tactic.Conv.PatternMatchState.accept","line":72,"kind":"def","docLink":"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.accept","doc":"Assuming `isReady` returned true, this adds the generated subgoal to the list\nand advances to the next match.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.accept\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">PatternMatchState</span>.<span class=\"name\">accept</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState\">PatternMatchState</a> → <a href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState\">PatternMatchState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Conv/Pattern.lean#L67-L70","name":"Lean.Elab.Tactic.Conv.PatternMatchState.skip","line":67,"kind":"def","docLink":"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.skip","doc":"Assuming `isReady` returned false, this advances to the next match. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.skip\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">PatternMatchState</span>.<span class=\"name\">skip</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState\">PatternMatchState</a> → <a href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState\">PatternMatchState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Conv/Pattern.lean#L61-L65","name":"Lean.Elab.Tactic.Conv.PatternMatchState.isReady","line":61,"kind":"def","docLink":"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.isReady","doc":"Is this pattern interested in accepting the next match? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.isReady\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">PatternMatchState</span>.<span class=\"name\">isReady</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState\">PatternMatchState</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Conv/Pattern.lean#L56-L59","name":"Lean.Elab.Tactic.Conv.PatternMatchState.isDone","line":56,"kind":"def","docLink":"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.isDone","doc":"Is this pattern no longer interested in accepting matches? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.isDone\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">PatternMatchState</span>.<span class=\"name\">isDone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState\">PatternMatchState</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Conv/Pattern.lean#L43-L52","name":"Lean.Elab.Tactic.Conv.PatternMatchState.occs","line":43,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.occs","doc":"The state corresponding to a partially consumed `(occs := a₁ a₂ ...)` pattern.\n* `subgoals` is the list of subgoals for patterns already matched,\n  along with their index in the original occs list\n* `idx` is the number of matches that have occurred so far\n* `remaining` is a list of `(i, orig)` pairs representing matches we have not yet reached.\n  We maintain the invariant that `idx :: remaining.map (·.1)` is sorted.\n  The number `i` is the value in the `occs` list and `orig` is its index in the list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.occs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">PatternMatchState</span>.<span class=\"name\">occs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subgoals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">remaining</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState\">PatternMatchState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Conv/Pattern.lean#L37-L42","name":"Lean.Elab.Tactic.Conv.PatternMatchState.all","line":37,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.all","doc":"The state corresponding to a `(occs := *)` pattern, which acts like `occs := 1 2 ... n` where\n`n` is the total number of pattern matches.\n* `subgoals` is the list of subgoals for patterns already matched\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">PatternMatchState</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subgoals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState\">PatternMatchState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Conv/Pattern.lean#L36-L52","name":"Lean.Elab.Tactic.Conv.PatternMatchState","line":36,"kind":"inductive","docLink":"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.PatternMatchState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">PatternMatchState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Conv/Pattern.lean#L25-L33","name":"Lean.Elab.Tactic.Conv.matchPattern?.go?","line":25,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.matchPattern?.go?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.matchPattern?.go?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">matchPattern?</span>.<span class=\"name\">go?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pattern </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Conv/Pattern.lean#L20-L34","name":"Lean.Elab.Tactic.Conv.matchPattern?","line":20,"kind":"def","docLink":"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.matchPattern?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Conv/Pattern.html#Lean.Elab.Tactic.Conv.matchPattern?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Conv</span>.<span class=\"name\">matchPattern?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pattern</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">Meta.AbstractMVarsResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>))</span></span></div></div>"}]}