{"name":"Lean.Replay","instances":[],"imports":["Lean.CoreM","Lean.AddDecl","Lean.Util.FoldConsts"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L150-L169","name":"Lean.Environment.replay","line":150,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.replay","doc":"\"Replay\" some constants into an `Environment`, sending them to the kernel for checking.\n\nThrows a `IO.userError` if the kernel rejects a constant,\nor if there are malformed recursors or constructors for inductive types.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.replay\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">replay</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newConstants</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L135-L144","name":"Lean.Environment.Replay.checkPostponedRecursors","line":135,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.checkPostponedRecursors","doc":"Check that all postponed recursors are identical to those generated\nwhen we replayed the inductives.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.checkPostponedRecursors\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">checkPostponedRecursors</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L124-L133","name":"Lean.Environment.Replay.checkPostponedConstructors","line":124,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.checkPostponedConstructors","doc":"Check that all postponed constructors are identical to those generated\nwhen we replayed the inductives.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.checkPostponedConstructors\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">checkPostponedConstructors</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L118-L120","name":"Lean.Environment.Replay.replayConstants","line":118,"kind":"opaque","docLink":"./Lean/Replay.html#Lean.Environment.Replay.replayConstants","doc":"Replay a set of constants one at a time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.replayConstants\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">replayConstants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">names</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L63-L116","name":"Lean.Environment.Replay.replayConstant","line":63,"kind":"opaque","docLink":"./Lean/Replay.html#Lean.Environment.Replay.replayConstant","doc":"Check if a `Name` still needs to be processed (i.e. is in `remaining`).\n\nIf so, recursively replay any constants it refers to,\nto ensure we add declarations in the right order.\n\nThe construct the `Declaration` from its stored `ConstantInfo`,\nand add it to the environment.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.replayConstant\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">replayConstant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L56-L60","name":"Lean.Environment.Replay.addDecl","line":56,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.addDecl","doc":"Add a declaration, possibly throwing a `Kernel.Exception`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.addDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">addDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L52-L54","name":"Lean.Environment.Replay.throwKernelException","line":52,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.throwKernelException","doc":"Use the current `Environment` to throw a `Kernel.Exception`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.throwKernelException\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">throwKernelException</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Kernel.Exception</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L43-L50","name":"Lean.Environment.Replay.isTodo","line":43,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.isTodo","doc":"Check if a `Name` still needs processing. If so, move it from `remaining` to `pending`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.isTodo\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">isTodo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L41-L41","name":"Lean.Environment.Replay.M","line":41,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L39-L39","name":"Lean.Environment.Replay.State.postponedRecursors","line":39,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.postponedRecursors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.postponedRecursors\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">postponedRecursors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L38-L38","name":"Lean.Environment.Replay.State.postponedConstructors","line":38,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.postponedConstructors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.postponedConstructors\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">postponedConstructors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L37-L37","name":"Lean.Environment.Replay.State.pending","line":37,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.pending","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.pending\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">pending</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L36-L36","name":"Lean.Environment.Replay.State.remaining","line":36,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.remaining","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.remaining\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">remaining</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L35-L35","name":"Lean.Environment.Replay.State.env","line":35,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.env","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.env\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L34-L34","name":"Lean.Environment.Replay.State.mk","line":34,"kind":"ctor","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">remaining </span><span class=\"fn\">pending </span><span class=\"fn\">postponedConstructors </span><span class=\"fn\">postponedRecursors</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L34-L39","name":"Lean.Environment.Replay.State","line":34,"kind":"structure","docLink":"./Lean/Replay.html#Lean.Environment.Replay.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L32-L32","name":"Lean.Environment.Replay.Context.newConstants","line":32,"kind":"def","docLink":"./Lean/Replay.html#Lean.Environment.Replay.Context.newConstants","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.Context.newConstants\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">Context</span>.<span class=\"name\">newConstants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Replay.html#Lean.Environment.Replay.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L31-L31","name":"Lean.Environment.Replay.Context.mk","line":31,"kind":"ctor","docLink":"./Lean/Replay.html#Lean.Environment.Replay.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newConstants</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Replay.html#Lean.Environment.Replay.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Replay.lean#L31-L32","name":"Lean.Environment.Replay.Context","line":31,"kind":"structure","docLink":"./Lean/Replay.html#Lean.Environment.Replay.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Replay.html#Lean.Environment.Replay.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Replay</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}