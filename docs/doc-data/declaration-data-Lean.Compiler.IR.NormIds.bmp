{"name":"Lean.Compiler.IR.NormIds","instances":[{"typeNames":["Lean.IR.NormalizeIds.M","Lean.IR.NormalizeIds.N"],"name":"Lean.IR.NormalizeIds.instMonadLiftMN","className":"MonadLift"}],"imports":["Lean.Compiler.IR.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L173-L175","name":"Lean.IR.FnBody.replaceVar","line":173,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.FnBody.replaceVar","doc":"Replace `x` with `y` in `b`. This function assumes `b` does not shadow `x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.FnBody.replaceVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">replaceVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L170-L171","name":"Lean.IR.FnBody.mapVars","line":170,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.FnBody.mapVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.FnBody.mapVars\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">mapVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L152-L166","name":"Lean.IR.MapVars.mapFnBody","line":152,"kind":"opaque","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MapVars</span>.<span class=\"name\">mapFnBody</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L137-L150","name":"Lean.IR.MapVars.mapExpr","line":137,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MapVars</span>.<span class=\"name\">mapExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L134-L135","name":"Lean.IR.MapVars.mapArgs","line":134,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MapVars</span>.<span class=\"name\">mapArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L130-L132","name":"Lean.IR.MapVars.mapArg","line":130,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.MapVars.mapArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">MapVars</span>.<span class=\"name\">mapArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L122-L124","name":"Lean.IR.Decl.normalizeIds","line":122,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.Decl.normalizeIds","doc":"Create a declaration equivalent to `d` s.t. `d.normalizeIds.uniqueIds == true` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.Decl.normalizeIds\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">normalizeIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L115-L118","name":"Lean.IR.NormalizeIds.normDecl","line":115,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">N</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L94-L113","name":"Lean.IR.NormalizeIds.normFnBody","line":94,"kind":"opaque","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">N</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L91-L92","name":"Lean.IR.NormalizeIds.instMonadLiftMN","line":91,"kind":"instance","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.instMonadLiftMN","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.instMonadLiftMN\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">instMonadLiftMN</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">M</a> <a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">N</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L84-L89","name":"Lean.IR.NormalizeIds.withParams","line":84,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">withParams</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">N</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">N</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L80-L82","name":"Lean.IR.NormalizeIds.withJP","line":80,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">withJP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">N</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">N</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L76-L78","name":"Lean.IR.NormalizeIds.withVar","line":76,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.withVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">withVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">N</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\">N</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L74-L74","name":"Lean.IR.NormalizeIds.N","line":74,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.N\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">N</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L59-L72","name":"Lean.IR.NormalizeIds.normExpr","line":59,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L56-L57","name":"Lean.IR.NormalizeIds.normArgs","line":56,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L52-L54","name":"Lean.IR.NormalizeIds.normArg","line":52,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normArg\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L49-L50","name":"Lean.IR.NormalizeIds.normJP","line":49,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normJP\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L46-L47","name":"Lean.IR.NormalizeIds.normVar","line":46,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normVar\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L41-L44","name":"Lean.IR.NormalizeIds.normIndex","line":41,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normIndex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.normIndex\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">normIndex</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L39-L39","name":"Lean.IR.NormalizeIds.M","line":39,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.NormalizeIds.M\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">NormalizeIds</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L33-L35","name":"Lean.IR.Decl.uniqueIds","line":33,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.Decl.uniqueIds","doc":"Return true if variable, parameter and join point ids are unique "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.Decl.uniqueIds\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">uniqueIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L27-L29","name":"Lean.IR.UniqueIds.checkDecl","line":27,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">UniqueIds</span>.<span class=\"name\">checkDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L21-L25","name":"Lean.IR.UniqueIds.checkFnBody","line":21,"kind":"opaque","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">UniqueIds</span>.<span class=\"name\">checkFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L18-L19","name":"Lean.IR.UniqueIds.checkParams","line":18,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">UniqueIds</span>.<span class=\"name\">checkParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L13-L16","name":"Lean.IR.UniqueIds.checkId","line":13,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.checkId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">UniqueIds</span>.<span class=\"name\">checkId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/NormIds.lean#L11-L11","name":"Lean.IR.UniqueIds.M","line":11,"kind":"def","docLink":"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/NormIds.html#Lean.IR.UniqueIds.M\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">UniqueIds</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}