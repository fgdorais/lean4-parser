{"name":"Std.Data.DTreeMap.Internal.WF.Lemmas","instances":[{"typeNames":["Ord.compare","Ord.compare"],"name":"Std.DTreeMap.Internal.Impl.instIsStrictCutCompare","className":"Std.Internal.IsStrictCut"},{"typeNames":["Ord.compare"],"name":"Std.DTreeMap.Internal.Impl.instIsStrictCutCompareLt","className":"Std.Internal.IsStrictCut"}],"imports":["Init.Data.Option.List","Init.Data.Array.Bootstrap","Std.Classes.Ord","Std.Data.DTreeMap.Internal.Model","Std.Data.Internal.Cut","Std.Data.Internal.List.Associative"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1865-L1868","name":"Std.DTreeMap.Internal.Impl.maxKeyD_eq_maxKeyD","line":1865,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.maxKeyD_eq_maxKeyD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.maxKeyD_eq_maxKeyD\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">maxKeyD_eq_maxKeyD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.maxKeyD\">maxKeyD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.maxKeyD\">Internal.List.maxKeyD</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1860-L1863","name":"Std.DTreeMap.Internal.Impl.maxKey!_eq_maxKey!","line":1860,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.maxKey!_eq_maxKey!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.maxKey!_eq_maxKey!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">maxKey!_eq_maxKey!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.maxKey!\">maxKey!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.maxKey!\">Internal.List.maxKey!</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1855-L1858","name":"Std.DTreeMap.Internal.Impl.maxKey_eq_maxKey","line":1855,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.maxKey_eq_maxKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.maxKey_eq_maxKey\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">maxKey_eq_maxKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.maxKey\">maxKey</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.maxKey\">Internal.List.maxKey</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1849-L1853","name":"Std.DTreeMap.Internal.Impl.maxKey?_eq_maxKey?","line":1849,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.maxKey?_eq_maxKey?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.maxKey?_eq_maxKey?\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">maxKey?_eq_maxKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.maxKey?\">maxKey?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.maxKey?\">Internal.List.maxKey?</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1844-L1847","name":"Std.DTreeMap.Internal.Impl.Ordered.reverse","line":1844,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Ordered.reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Ordered.reverse\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.reverse\">reverse</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1840-L1842","name":"Std.DTreeMap.Internal.Impl.toListModel_reverse","line":1840,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_reverse\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.reverse\">reverse</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1835-L1838","name":"Std.DTreeMap.Internal.Impl.minKeyD_eq_minKeyD","line":1835,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minKeyD_eq_minKeyD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minKeyD_eq_minKeyD\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">minKeyD_eq_minKeyD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.minKeyD\">minKeyD</a></span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.minKeyD\">Internal.List.minKeyD</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1830-L1833","name":"Std.DTreeMap.Internal.Impl.minKey!_eq_minKey!","line":1830,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minKey!_eq_minKey!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minKey!_eq_minKey!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">minKey!_eq_minKey!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.minKey!\">minKey!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.minKey!\">Internal.List.minKey!</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1824-L1828","name":"Std.DTreeMap.Internal.Impl.minKey_eq_minKey","line":1824,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minKey_eq_minKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minKey_eq_minKey\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">minKey_eq_minKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.minKey\">minKey</a></span> <span class=\"fn\">he</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.minKey\">Internal.List.minKey</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1820-L1822","name":"Std.DTreeMap.Internal.Impl.minKey?_eq_minKey?","line":1820,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minKey?_eq_minKey?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minKey?_eq_minKey?\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">minKey?_eq_minKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.minKey?\">minKey?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.minKey?\">Internal.List.minKey?</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1816-L1818","name":"Std.DTreeMap.Internal.Impl.minEntry?_eq_minEntry?","line":1816,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minEntry?_eq_minEntry?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minEntry?_eq_minEntry?\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">minEntry?_eq_minEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.minEntry?\">minEntry?</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.minEntry?\">Internal.List.minEntry?</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1803-L1814","name":"Std.DTreeMap.Internal.Impl.minEntry?ₘ_eq_minEntry?","line":1803,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minEntry?ₘ_eq_minEntry?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.minEntry?ₘ_eq_minEntry?\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">minEntry?ₘ_eq_minEntry?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.minEntry?ₘ\">minEntry?ₘ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.minEntry?\">Internal.List.minEntry?</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1798-L1801","name":"Std.DTreeMap.Internal.Impl.instIsStrictCutCompareLt","line":1798,"kind":"instance","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.instIsStrictCutCompareLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.instIsStrictCutCompareLt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">instIsStrictCutCompareLt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1791-L1792","name":"Std.DTreeMap.Internal.Impl.WF.map","line":1791,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.map\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.map\">Impl.map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1787-L1789","name":"Std.DTreeMap.Internal.Impl.size_map","line":1787,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.size_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.size_map\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">size_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1782-L1785","name":"Std.DTreeMap.Internal.Impl.sameKeys_map","line":1782,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.sameKeys_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.sameKeys_map\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">sameKeys_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1775-L1780","name":"Std.DTreeMap.Internal.Impl.toListModel_map","line":1775,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_map\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span></span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1766-L1769","name":"Std.DTreeMap.Internal.Impl.WF.filter!","line":1766,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.filter!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.filter!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">filter!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filter!\">Impl.filter!</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1756-L1764","name":"Std.DTreeMap.Internal.Impl.filter_eq_filter!","line":1756,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.filter_eq_filter!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.filter_eq_filter!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">filter_eq_filter!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filter!\">filter!</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1747-L1750","name":"Std.DTreeMap.Internal.Impl.WF.filterMap!","line":1747,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.filterMap!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.filterMap!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">filterMap!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">γ</span> <span class=\"fn\">a</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filterMap!\">Impl.filterMap!</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1737-L1745","name":"Std.DTreeMap.Internal.Impl.filterMap_eq_filterMap!","line":1737,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.filterMap_eq_filterMap!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.filterMap_eq_filterMap!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">filterMap_eq_filterMap!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">γ</span> <span class=\"fn\">a</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filterMap!\">filterMap!</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1729-L1731","name":"Std.DTreeMap.Internal.Impl.WF.filterMap","line":1729,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.filterMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.filterMap\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">γ</span> <span class=\"fn\">a</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwf</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filterMap\">Impl.filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1720-L1723","name":"Std.DTreeMap.Internal.Impl.WF.constMergeWith!","line":1720,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.constMergeWith!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.constMergeWith!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">constMergeWith!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">mergeFn</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.mergeWith!\">Const.mergeWith!</a> <span class=\"fn\">mergeFn</span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1704-L1718","name":"Std.DTreeMap.Internal.Impl.Const.mergeWith_eq_mergeWith!","line":1704,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.mergeWith_eq_mergeWith!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.mergeWith_eq_mergeWith!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">mergeWith_eq_mergeWith!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">mergeFn</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.mergeWith\">mergeWith</a> <span class=\"fn\">mergeFn</span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.mergeWith!\">mergeWith!</a> <span class=\"fn\">mergeFn</span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1699-L1702","name":"Std.DTreeMap.Internal.Impl.WF.mergeWith!","line":1699,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.mergeWith!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.mergeWith!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">mergeWith!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">mergeFn</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.mergeWith!\">Impl.mergeWith!</a> <span class=\"fn\">mergeFn</span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1683-L1697","name":"Std.DTreeMap.Internal.Impl.mergeWith_eq_mergeWith!","line":1683,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.mergeWith_eq_mergeWith!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.mergeWith_eq_mergeWith!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mergeWith_eq_mergeWith!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">mergeFn</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.mergeWith\">mergeWith</a> <span class=\"fn\">mergeFn</span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.mergeWith!\">mergeWith!</a> <span class=\"fn\">mergeFn</span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1674-L1677","name":"Std.DTreeMap.Internal.Impl.WF.constAlter!","line":1674,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.constAlter!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.constAlter!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">constAlter!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.alter!\">Const.alter!</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1669-L1672","name":"Std.DTreeMap.Internal.Impl.WF.alter!","line":1669,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.alter!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.alter!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">alter!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.alter!\">Impl.alter!</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1657-L1661","name":"Std.DTreeMap.Internal.Impl.Const.toListModel_insertManyIfNewUnit!_list","line":1657,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_insertManyIfNewUnit!_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_insertManyIfNewUnit!_list\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">toListModel_insertManyIfNewUnit!_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit!\">insertManyIfNewUnit!</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertListIfNewUnit\">Internal.List.insertListIfNewUnit</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1645-L1655","name":"Std.DTreeMap.Internal.Impl.Const.toListModel_insertManyIfNewUnit_list","line":1645,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_insertManyIfNewUnit_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_insertManyIfNewUnit_list\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">toListModel_insertManyIfNewUnit_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertListIfNewUnit\">Internal.List.insertListIfNewUnit</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1640-L1643","name":"Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit_eq_insertManyIfNewUnit!","line":1640,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit_eq_insertManyIfNewUnit!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit_eq_insertManyIfNewUnit!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertManyIfNewUnit_eq_insertManyIfNewUnit!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit!\">insertManyIfNewUnit!</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1634-L1638","name":"Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit!_eq_foldl","line":1634,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit!_eq_foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit!_eq_foldl\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertManyIfNewUnit!_eq_foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit!\">insertManyIfNewUnit!</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(fun (<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>) (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertIfNew!\">insertIfNew!</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a> <span class=\"fn\">acc</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1628-L1632","name":"Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit_eq_foldl","line":1628,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit_eq_foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit_eq_foldl\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertManyIfNewUnit_eq_foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit\">insertManyIfNewUnit</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(fun (<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>) (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertIfNew!\">insertIfNew!</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a> <span class=\"fn\">acc</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1623-L1626","name":"Std.DTreeMap.Internal.Impl.Const.toListModel_insertMany!_list","line":1623,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_insertMany!_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_insertMany!_list\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">toListModel_insertMany!_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertMany!\">insertMany!</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertListConst\">Internal.List.insertListConst</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1612-L1621","name":"Std.DTreeMap.Internal.Impl.Const.toListModel_insertMany_list","line":1612,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">toListModel_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertMany\">insertMany</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertListConst\">Internal.List.insertListConst</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1607-L1610","name":"Std.DTreeMap.Internal.Impl.Const.insertMany_eq_insertMany!","line":1607,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertMany_eq_insertMany!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertMany_eq_insertMany!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertMany_eq_insertMany!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertMany\">insertMany</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertMany!\">insertMany!</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1599-L1605","name":"Std.DTreeMap.Internal.Impl.Const.insertMany_eq_foldl","line":1599,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertMany_eq_foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertMany_eq_foldl\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertMany_eq_foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertMany\">insertMany</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insert!\">insert!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">acc</span></span></span>)</span>\n    <span class=\"fn\">t</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1593-L1597","name":"Std.DTreeMap.Internal.Impl.Const.insertMany!_eq_foldl","line":1593,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertMany!_eq_foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.insertMany!_eq_foldl\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertMany!_eq_foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertMany!\">insertMany!</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insert!\">insert!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">acc</span></span></span>)</span>\n    <span class=\"fn\">t</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1581-L1583","name":"Std.DTreeMap.Internal.Impl.WF.constInsertManyIfNewUnit!","line":1581,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.constInsertManyIfNewUnit!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.constInsertManyIfNewUnit!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">constInsertManyIfNewUnit!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertManyIfNewUnit!\">Const.insertManyIfNewUnit!</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1577-L1579","name":"Std.DTreeMap.Internal.Impl.WF.constInsertMany!","line":1577,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.constInsertMany!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.constInsertMany!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">constInsertMany!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.insertMany!\">Const.insertMany!</a> <span class=\"fn\">t</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1573-L1575","name":"Std.DTreeMap.Internal.Impl.WF.insertMany!","line":1573,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.insertMany!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.insertMany!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">insertMany!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertMany!\">insertMany!</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1568-L1571","name":"Std.DTreeMap.Internal.Impl.toListModel_insertMany!_list","line":1568,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertMany!_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertMany!_list\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_insertMany!_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertMany!\">insertMany!</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertList\">Internal.List.insertList</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1556-L1566","name":"Std.DTreeMap.Internal.Impl.toListModel_insertMany_list","line":1556,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertMany_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertMany_list\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_insertMany_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertMany\">insertMany</a></span> <span class=\"fn\">l</span> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertList\">Internal.List.insertList</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1551-L1554","name":"Std.DTreeMap.Internal.Impl.insertMany_eq_insertMany!","line":1551,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.insertMany_eq_insertMany!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.insertMany_eq_insertMany!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">insertMany_eq_insertMany!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertMany\">insertMany</a></span> <span class=\"fn\">l</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertMany!\">insertMany!</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1547-L1549","name":"Std.DTreeMap.Internal.Impl.insertMany_eq_foldl","line":1547,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.insertMany_eq_foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.insertMany_eq_foldl\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">insertMany_eq_foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertMany\">insertMany</a></span> <span class=\"fn\">l</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> =&gt; <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insert!\">insert!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">acc</span></span></span>)</span>\n    <span class=\"fn\">t</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1543-L1545","name":"Std.DTreeMap.Internal.Impl.insertMany!_eq_foldl","line":1543,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.insertMany!_eq_foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.insertMany!_eq_foldl\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">insertMany!_eq_foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertMany!\">insertMany!</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> =&gt; <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insert!\">insert!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">acc</span></span></span>)</span>\n    <span class=\"fn\">t</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1535-L1537","name":"Std.DTreeMap.Internal.Impl.WF.eraseMany!","line":1535,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.eraseMany!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.eraseMany!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">eraseMany!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.eraseMany!\">eraseMany!</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1524-L1529","name":"Std.DTreeMap.Internal.Impl.WF.constGetThenInsertIfNew?!","line":1524,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.constGetThenInsertIfNew?!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.constGetThenInsertIfNew?!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">constGetThenInsertIfNew?!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.getThenInsertIfNew?!\">Const.getThenInsertIfNew?!</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1517-L1522","name":"Std.DTreeMap.Internal.Impl.WF.getThenInsertIfNew?!","line":1517,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.getThenInsertIfNew?!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.getThenInsertIfNew?!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">getThenInsertIfNew?!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.getThenInsertIfNew?!\">getThenInsertIfNew?!</a></span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1508-L1509","name":"Std.DTreeMap.Internal.Impl.SameKeys.wf","line":1508,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.wf\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">SameKeys</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">t'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1498-L1506","name":"Std.DTreeMap.Internal.Impl.SameKeys.balanced","line":1498,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.balanced","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.balanced\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">SameKeys</span>.<span class=\"name\">balanced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">t'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1494-L1496","name":"Std.DTreeMap.Internal.Impl.SameKeys.ordered","line":1494,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.ordered","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.ordered\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">SameKeys</span>.<span class=\"name\">ordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">t'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1490-L1492","name":"Std.DTreeMap.Internal.Impl.SameKeys.size_eq","line":1490,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.size_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.size_eq\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">SameKeys</span>.<span class=\"name\">size_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">t'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1484-L1488","name":"Std.DTreeMap.Internal.Impl.SameKeys.keys_eq","line":1484,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.keys_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.keys_eq\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">SameKeys</span>.<span class=\"name\">keys_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">t'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β'</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>)</span> <span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1478-L1482","name":"Std.DTreeMap.Internal.Impl.SameKeys.symm","line":1478,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.symm\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">SameKeys</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β'</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">t'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t'</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1474-L1476","name":"Std.DTreeMap.Internal.Impl.SameKeys.ordered_iff_pairwise_keys","line":1474,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.ordered_iff_pairwise_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.ordered_iff_pairwise_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">SameKeys</span>.<span class=\"name\">ordered_iff_pairwise_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">x1</span> <span class=\"fn\">x2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span>\n    <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>)</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1466-L1468","name":"Std.DTreeMap.Internal.Impl.SameKeys.inner","line":1466,"kind":"ctor","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.inner","doc":"Internal implementation detail of the tree map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.inner\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">SameKeys</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β'</span> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r'</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">r'</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">l'</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">Impl.inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">Impl.inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k</span> <span class=\"fn\">v'</span> <span class=\"fn\">l'</span> <span class=\"fn\">r'</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1464-L1465","name":"Std.DTreeMap.Internal.Impl.SameKeys.leaf","line":1464,"kind":"ctor","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.leaf","doc":"Internal implementation detail of the tree map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys.leaf\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">SameKeys</span>.<span class=\"name\">leaf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.leaf\">Impl.leaf</a>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\">SameKeys</a></span> <a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.leaf\">Impl.leaf</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1462-L1468","name":"Std.DTreeMap.Internal.Impl.SameKeys","line":1462,"kind":"inductive","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys","doc":"Internal implementation detail of the tree map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.SameKeys\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">SameKeys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β'</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1440-L1455","name":"Std.DTreeMap.Internal.Impl.WF.ordered","line":1440,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.ordered","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.ordered\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">ordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1427-L1432","name":"Std.DTreeMap.Internal.Impl.Const.toList_eq_toListModel_map","line":1427,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toList_eq_toListModel_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toList_eq_toListModel_map\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">toList_eq_toListModel_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.Const.toList\">toList</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">k</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1416-L1421","name":"Std.DTreeMap.Internal.Impl.Const.ordered_mergeWith","line":1416,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.ordered_mergeWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.ordered_mergeWith\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">ordered_mergeWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.mergeWith\">mergeWith</a> <span class=\"fn\">f</span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1407-L1410","name":"Std.DTreeMap.Internal.Impl.Const.toListModel_modify","line":1407,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">toListModel_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.modify\">modify</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.Const.modifyKey\">Internal.List.Const.modifyKey</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1403-L1405","name":"Std.DTreeMap.Internal.Impl.Const.ordered_modify","line":1403,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.ordered_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.ordered_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">ordered_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.modify\">modify</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1390-L1401","name":"Std.DTreeMap.Internal.Impl.Const.modify_eq_alter","line":1390,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.modify_eq_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.modify_eq_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">modify_eq_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.modify\">modify</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.alter\">alter</a> <span class=\"fn\">a</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1381-L1384","name":"Std.DTreeMap.Internal.Impl.Const.toListModel_alter!","line":1381,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_alter!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_alter!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">toListModel_alter!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.alter!\">alter!</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.Const.alterKey\">Internal.List.Const.alterKey</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1365-L1379","name":"Std.DTreeMap.Internal.Impl.Const.alter_eq_alter!","line":1365,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.alter_eq_alter!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.alter_eq_alter!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">alter_eq_alter!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.alter\">alter</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.alter!\">alter!</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1356-L1359","name":"Std.DTreeMap.Internal.Impl.Const.ordered_alter","line":1356,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.ordered_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.ordered_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">ordered_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.alter\">alter</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1351-L1354","name":"Std.DTreeMap.Internal.Impl.Const.toListModel_alter","line":1351,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">toListModel_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.alter\">alter</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.Const.alterKey\">Internal.List.Const.alterKey</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1329-L1349","name":"Std.DTreeMap.Internal.Impl.Const.alter_eq_alterₘ","line":1329,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.alter_eq_alterₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.alter_eq_alterₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">alter_eq_alterₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.alter\">alter</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.Const.alterₘ\">alterₘ</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1313-L1327","name":"Std.DTreeMap.Internal.Impl.Const.toListModel_alterₘ","line":1313,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_alterₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.toListModel_alterₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">toListModel_alterₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.Const.alterₘ\">alterₘ</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.Const.alterKey\">Internal.List.Const.alterKey</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1302-L1307","name":"Std.DTreeMap.Internal.Impl.Const.WF.getThenInsertIfNew?!","line":1302,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.WF.getThenInsertIfNew?!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.WF.getThenInsertIfNew?!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">WF</span>.<span class=\"name\">getThenInsertIfNew?!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Const.getThenInsertIfNew?!\">Const.getThenInsertIfNew?!</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1283-L1292","name":"Std.DTreeMap.Internal.Impl.forIn_eq_forIn_toListModel","line":1283,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.forIn_eq_forIn_toListModel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.forIn_eq_forIn_toListModel\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">forIn_eq_forIn_toListModel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.forIn\">forIn</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">ForIn.forIn</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) (<span class=\"fn\">d</span> : <span class=\"fn\">δ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span> <span class=\"fn\">d</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1256-L1280","name":"Std.DTreeMap.Internal.Impl.forInStep_eq_foldlM","line":1256,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.forInStep_eq_foldlM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.forInStep_eq_foldlM\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">forInStep_eq_foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.forInStep\">forInStep</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.foldlM\">foldlM</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span></span>) =&gt;\n      <span class=\"fn\">match (motive := <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span></span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span></span>) <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">d</span></span> =&gt; <span class=\"fn\">fun (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">d</span></span></span>\n      | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">d</span></span> =&gt; <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">d</span>)</span></span></span></span>)</span>\n    <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">init</span>)</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1244-L1250","name":"Std.DTreeMap.Internal.Impl.forM_eq_forM","line":1244,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.forM_eq_forM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.forM_eq_forM\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">forM_eq_forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.forM\">forM</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Control.html#List.forM\">forM</a></span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1230-L1238","name":"Std.DTreeMap.Internal.Impl.keys_eq_keys","line":1230,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.keys_eq_keys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.keys_eq_keys\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">keys_eq_keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.keys\">keys</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Defs.html#Std.Internal.List.keys\">Internal.List.keys</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1219-L1224","name":"Std.DTreeMap.Internal.Impl.toList_eq_toListModel","line":1219,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toList_eq_toListModel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toList_eq_toListModel\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toList_eq_toListModel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1211-L1213","name":"Std.DTreeMap.Internal.Impl.foldr_eq_foldr","line":1211,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.foldr_eq_foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.foldr_eq_foldr\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">foldr_eq_foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.foldr\">foldr</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) (<span class=\"fn\">acc</span> : <span class=\"fn\">δ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span> <span class=\"fn\">acc</span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1198-L1205","name":"Std.DTreeMap.Internal.Impl.foldrM_eq_foldrM","line":1198,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.foldrM_eq_foldrM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.foldrM_eq_foldrM\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">foldrM_eq_foldrM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.foldrM\">foldrM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldrM\">List.foldrM</a> <span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) (<span class=\"fn\">acc</span> : <span class=\"fn\">δ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span> <span class=\"fn\">acc</span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1190-L1192","name":"Std.DTreeMap.Internal.Impl.foldl_eq_foldl","line":1190,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.foldl_eq_foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.foldl_eq_foldl\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">foldl_eq_foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.foldl\">foldl</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <span class=\"fn\">(fun (<span class=\"fn\">acc</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">acc</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1181-L1184","name":"Std.DTreeMap.Internal.Impl.foldlM_toListModel_eq_foldlM","line":1181,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.foldlM_toListModel_eq_foldlM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.foldlM_toListModel_eq_foldlM\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">foldlM_toListModel_eq_foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.foldlM\">foldlM</a> <span class=\"fn\">(fun (<span class=\"fn\">acc</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">acc</span> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1172-L1179","name":"Std.DTreeMap.Internal.Impl.foldlM_eq_foldlM_toListModel","line":1172,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.foldlM_eq_foldlM_toListModel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.foldlM_eq_foldlM_toListModel\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">foldlM_eq_foldlM_toListModel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.foldlM\">foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">(fun (<span class=\"fn\">acc</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">acc</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span></span>)</span> <span class=\"fn\">init</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1161-L1166","name":"Std.DTreeMap.Internal.Impl.ordered_mergeWith","line":1161,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_mergeWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_mergeWith\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_mergeWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t₁</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.mergeWith\">mergeWith</a> <span class=\"fn\">f</span> <span class=\"fn\">t₁</span> <span class=\"fn\">t₂</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1152-L1155","name":"Std.DTreeMap.Internal.Impl.toListModel_modify","line":1152,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.modify\">modify</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.modifyKey\">Internal.List.modifyKey</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1148-L1150","name":"Std.DTreeMap.Internal.Impl.ordered_modify","line":1148,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_modify","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_modify\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.modify\">modify</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1136-L1146","name":"Std.DTreeMap.Internal.Impl.modify_eq_alter","line":1136,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.modify_eq_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.modify_eq_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">modify_eq_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.modify\">modify</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.alter\">alter</a> <span class=\"fn\">a</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1127-L1130","name":"Std.DTreeMap.Internal.Impl.toListModel_alter!","line":1127,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_alter!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_alter!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_alter!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.alter!\">alter!</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.alterKey\">Internal.List.alterKey</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1111-L1125","name":"Std.DTreeMap.Internal.Impl.alter_eq_alter!","line":1111,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.alter_eq_alter!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.alter_eq_alter!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">alter_eq_alter!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.alter\">alter</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.alter!\">alter!</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1102-L1105","name":"Std.DTreeMap.Internal.Impl.ordered_alter","line":1102,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.alter\">alter</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1097-L1100","name":"Std.DTreeMap.Internal.Impl.toListModel_alter","line":1097,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_alter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_alter\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.alter\">alter</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.alterKey\">Internal.List.alterKey</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1075-L1095","name":"Std.DTreeMap.Internal.Impl.alter_eq_alterₘ","line":1075,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.alter_eq_alterₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.alter_eq_alterₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">alter_eq_alterₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.alter\">alter</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.alterₘ\">alterₘ</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1059-L1073","name":"Std.DTreeMap.Internal.Impl.toListModel_alterₘ","line":1059,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_alterₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_alterₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_alterₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.alterₘ\">alterₘ</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.alterKey\">Internal.List.alterKey</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1051-L1053","name":"Std.DTreeMap.Internal.Impl.ordered_filter","line":1051,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_filter\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1043-L1049","name":"Std.DTreeMap.Internal.Impl.filter_eq_filterMap","line":1043,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.filter_eq_filterMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.filter_eq_filterMap\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">filter_eq_filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filter\">filter</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filterMap\">filterMap</a> <span class=\"fn\">(fun (<span class=\"fn\">k</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1029-L1037","name":"Std.DTreeMap.Internal.Impl.ordered_filterMap","line":1029,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_filterMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_filterMap\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">γ</span> <span class=\"fn\">a</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1026-L1027","name":"Std.DTreeMap.Internal.Impl.balanced_filterMap","line":1026,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.balanced_filterMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.balanced_filterMap\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">balanced_filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">γ</span> <span class=\"fn\">a</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1016-L1024","name":"Std.DTreeMap.Internal.Impl.toListModel_filterMap","line":1016,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filterMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filterMap\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">γ</span> <span class=\"fn\">a</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.filterMap\">filterMap</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.BalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filterMap\">List.filterMap</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span>) =&gt; <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span>, <span class=\"fn\">x_1</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span>)</span></span>)</span>\n    <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1006-L1010","name":"Std.DTreeMap.Internal.Impl.toListModel_containsThenInsertIfNew!","line":1006,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_containsThenInsertIfNew!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_containsThenInsertIfNew!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_containsThenInsertIfNew!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsertIfNew\">containsThenInsertIfNew</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertEntryIfNew\">Internal.List.insertEntryIfNew</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L1002-L1004","name":"Std.DTreeMap.Internal.Impl.WF.containsThenInsertIfNew!","line":1002,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.containsThenInsertIfNew!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.containsThenInsertIfNew!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">containsThenInsertIfNew!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsertIfNew!\">Impl.containsThenInsertIfNew!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L998-L1000","name":"Std.DTreeMap.Internal.Impl.ordered_containsThenInsertIfNew!","line":998,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_containsThenInsertIfNew!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_containsThenInsertIfNew!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_containsThenInsertIfNew!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsertIfNew!\">containsThenInsertIfNew!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L988-L992","name":"Std.DTreeMap.Internal.Impl.toListModel_containsThenInsertIfNew","line":988,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_containsThenInsertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_containsThenInsertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_containsThenInsertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsertIfNew\">containsThenInsertIfNew</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertEntryIfNew\">Internal.List.insertEntryIfNew</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L984-L986","name":"Std.DTreeMap.Internal.Impl.ordered_containsThenInsertIfNew","line":984,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_containsThenInsertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_containsThenInsertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_containsThenInsertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsertIfNew\">containsThenInsertIfNew</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L975-L978","name":"Std.DTreeMap.Internal.Impl.toListModel_insertIfNew!","line":975,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertIfNew!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertIfNew!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_insertIfNew!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertIfNew!\">insertIfNew!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertEntryIfNew\">Internal.List.insertEntryIfNew</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L971-L973","name":"Std.DTreeMap.Internal.Impl.WF.insertIfNew!","line":971,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.insertIfNew!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.insertIfNew!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">insertIfNew!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertIfNew!\">Impl.insertIfNew!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L967-L969","name":"Std.DTreeMap.Internal.Impl.ordered_insertIfNew!","line":967,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_insertIfNew!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_insertIfNew!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_insertIfNew!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertIfNew!\">insertIfNew!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L954-L961","name":"Std.DTreeMap.Internal.Impl.toListModel_insertIfNew","line":954,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertIfNew\">insertIfNew</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">hlb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertEntryIfNew\">Internal.List.insertEntryIfNew</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L949-L952","name":"Std.DTreeMap.Internal.Impl.ordered_insertIfNew","line":949,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertIfNew\">insertIfNew</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L939-L943","name":"Std.DTreeMap.Internal.Impl.toListModel_containsThenInsert!","line":939,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_containsThenInsert!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_containsThenInsert!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_containsThenInsert!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsert!\">containsThenInsert!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertEntry\">Internal.List.insertEntry</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L935-L937","name":"Std.DTreeMap.Internal.Impl.WF.containsThenInsert!","line":935,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.containsThenInsert!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.containsThenInsert!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">containsThenInsert!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsert!\">Impl.containsThenInsert!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L925-L929","name":"Std.DTreeMap.Internal.Impl.toListModel_containsThenInsert","line":925,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_containsThenInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_containsThenInsert\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_containsThenInsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsert\">containsThenInsert</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertEntry\">Internal.List.insertEntry</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L921-L923","name":"Std.DTreeMap.Internal.Impl.ordered_containsThenInsert","line":921,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_containsThenInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_containsThenInsert\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_containsThenInsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsert\">containsThenInsert</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L913-L919","name":"Std.DTreeMap.Internal.Impl.containsThenInsert_fst_eq_containsₘ","line":913,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.containsThenInsert_fst_eq_containsₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.containsThenInsert_fst_eq_containsₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">containsThenInsert_fst_eq_containsₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsert\">containsThenInsert</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.containsₘ\">containsₘ</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L909-L911","name":"Std.DTreeMap.Internal.Impl.size_containsThenInsert_eq_size","line":909,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.size_containsThenInsert_eq_size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.size_containsThenInsert_eq_size\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">size_containsThenInsert_eq_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.containsThenInsert.size\">containsThenInsert.size</a> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L899-L903","name":"Std.DTreeMap.Internal.Impl.toListModel_erase!","line":899,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_erase!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_erase!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_erase!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.erase!\">erase!</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.eraseKey\">Internal.List.eraseKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L895-L897","name":"Std.DTreeMap.Internal.Impl.WF.erase!","line":895,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.erase!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.erase!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">erase!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.erase!\">Impl.erase!</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L885-L889","name":"Std.DTreeMap.Internal.Impl.toListModel_erase","line":885,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.erase\">erase</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.eraseKey\">Internal.List.eraseKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L881-L883","name":"Std.DTreeMap.Internal.Impl.ordered_erase","line":881,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_erase\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.erase\">erase</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L866-L875","name":"Std.DTreeMap.Internal.Impl.toListModel_eraseₘ","line":866,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_eraseₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_eraseₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_eraseₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.eraseₘ\">eraseₘ</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.eraseKey\">Internal.List.eraseKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L862-L864","name":"Std.DTreeMap.Internal.Impl.ordered_eraseₘ","line":862,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_eraseₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_eraseₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_eraseₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.eraseₘ\">eraseₘ</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span> <span class=\"fn\">htb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L852-L856","name":"Std.DTreeMap.Internal.Impl.toListModel_insert!","line":852,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insert!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insert!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_insert!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insert!\">insert!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertEntry\">Internal.List.insertEntry</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L848-L850","name":"Std.DTreeMap.Internal.Impl.WF.insert!","line":848,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.insert!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.WF.insert!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">WF</span>.<span class=\"name\">insert!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insert!\">Impl.insert!</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/WF/Defs.html#Std.DTreeMap.Internal.Impl.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L838-L842","name":"Std.DTreeMap.Internal.Impl.toListModel_insert","line":838,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insert\">insert</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">hlb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertEntry\">Internal.List.insertEntry</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L834-L836","name":"Std.DTreeMap.Internal.Impl.ordered_insert","line":834,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_insert\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insert\">insert</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">hlb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L819-L828","name":"Std.DTreeMap.Internal.Impl.toListModel_insertₘ","line":819,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_insertₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.insertₘ\">insertₘ</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">hlb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.insertEntry\">Internal.List.insertEntry</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L815-L817","name":"Std.DTreeMap.Internal.Impl.ordered_insertₘ","line":815,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_insertₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_insertₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_insertₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.insertₘ\">insertₘ</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">hlb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L808-L809","name":"Std.DTreeMap.Internal.Impl.ordered_empty","line":808,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.empty\">empty</a>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L804-L806","name":"Std.DTreeMap.Internal.Impl.toListModel_empty","line":804,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_empty\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.empty\">empty</a>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L789-L792","name":"Std.DTreeMap.Internal.Impl.Const.getD_eq_getValueD","line":789,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.getD_eq_getValueD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.getD_eq_getValueD\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD_eq_getValueD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.Const.getD\">getD</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValueD\">Internal.List.getValueD</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L784-L787","name":"Std.DTreeMap.Internal.Impl.Const.getDₘ_eq_getValueD","line":784,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.getDₘ_eq_getValueD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.getDₘ_eq_getValueD\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">getDₘ_eq_getValueD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.Const.getDₘ\">getDₘ</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValueD\">Internal.List.getValueD</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L776-L778","name":"Std.DTreeMap.Internal.Impl.Const.get!_eq_getValue!","line":776,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.get!_eq_getValue!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.get!_eq_getValue!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!_eq_getValue!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.Const.get!\">get!</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValue!\">Internal.List.getValue!</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L772-L774","name":"Std.DTreeMap.Internal.Impl.Const.get!ₘ_eq_getValue!","line":772,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.get!ₘ_eq_getValue!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.get!ₘ_eq_getValue!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!ₘ_eq_getValue!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.Const.get!ₘ\">get!ₘ</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValue!\">Internal.List.getValue!</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L762-L766","name":"Std.DTreeMap.Internal.Impl.Const.get_eq_getValue","line":762,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.get_eq_getValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.get_eq_getValue\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">get_eq_getValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.contains\">contains</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.Const.get\">get</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValue\">Internal.List.getValue</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L755-L760","name":"Std.DTreeMap.Internal.Impl.Const.getₘ_eq_getValue","line":755,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.getₘ_eq_getValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.getₘ_eq_getValue\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">getₘ_eq_getValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.Const.get?ₘ\">get?ₘ</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.Const.getₘ\">getₘ</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValue\">Internal.List.getValue</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L751-L753","name":"Std.DTreeMap.Internal.Impl.Const.contains_eq_isSome_get?ₘ","line":751,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.contains_eq_isSome_get?ₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.contains_eq_isSome_get?ₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">contains_eq_isSome_get?ₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.contains\">contains</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.Const.get?ₘ\">get?ₘ</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L742-L745","name":"Std.DTreeMap.Internal.Impl.Const.get?_eq_getValue?","line":742,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.get?_eq_getValue?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.get?_eq_getValue?\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?_eq_getValue?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.Const.get?\">get?</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValue?\">Internal.List.getValue?</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L730-L740","name":"Std.DTreeMap.Internal.Impl.Const.get?ₘ_eq_getValue?","line":730,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.get?ₘ_eq_getValue?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Const.get?ₘ_eq_getValue?\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?ₘ_eq_getValue?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.Const.get?ₘ\">get?ₘ</a> <span class=\"fn\">t</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValue?\">Internal.List.getValue?</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L717-L720","name":"Std.DTreeMap.Internal.Impl.getKeyD_eq_getKeyD","line":717,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKeyD_eq_getKeyD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKeyD_eq_getKeyD\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getKeyD_eq_getKeyD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.getKeyD\">getKeyD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getKeyD\">Internal.List.getKeyD</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L712-L715","name":"Std.DTreeMap.Internal.Impl.getKeyDₘ_eq_getKeyD","line":712,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKeyDₘ_eq_getKeyD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKeyDₘ_eq_getKeyD\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getKeyDₘ_eq_getKeyD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.getKeyDₘ\">getKeyDₘ</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getKeyD\">Internal.List.getKeyD</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L704-L706","name":"Std.DTreeMap.Internal.Impl.getKey!_eq_getKey!","line":704,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKey!_eq_getKey!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKey!_eq_getKey!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getKey!_eq_getKey!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.getKey!\">getKey!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getKey!\">Internal.List.getKey!</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L700-L702","name":"Std.DTreeMap.Internal.Impl.getKey!ₘ_eq_getKey!","line":700,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKey!ₘ_eq_getKey!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKey!ₘ_eq_getKey!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getKey!ₘ_eq_getKey!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.getKey!ₘ\">getKey!ₘ</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getKey!\">Internal.List.getKey!</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L691-L694","name":"Std.DTreeMap.Internal.Impl.getKey_eq_getKey","line":691,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKey_eq_getKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKey_eq_getKey\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getKey_eq_getKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.contains\">contains</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.getKey\">getKey</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getKey\">Internal.List.getKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L684-L689","name":"Std.DTreeMap.Internal.Impl.getKeyₘ_eq_getKey","line":684,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKeyₘ_eq_getKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKeyₘ_eq_getKey\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getKeyₘ_eq_getKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.getKey?ₘ\">getKey?ₘ</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.getKeyₘ\">getKeyₘ</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getKey\">Internal.List.getKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L680-L682","name":"Std.DTreeMap.Internal.Impl.contains_eq_isSome_getKey?ₘ","line":680,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.contains_eq_isSome_getKey?ₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.contains_eq_isSome_getKey?ₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">contains_eq_isSome_getKey?ₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.contains\">contains</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.getKey?ₘ\">getKey?ₘ</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L672-L674","name":"Std.DTreeMap.Internal.Impl.getKey?_eq_getKey?","line":672,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKey?_eq_getKey?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKey?_eq_getKey?\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getKey?_eq_getKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.getKey?\">getKey?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getKey?\">Internal.List.getKey?</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L661-L670","name":"Std.DTreeMap.Internal.Impl.getKey?ₘ_eq_getKey?","line":661,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKey?ₘ_eq_getKey?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getKey?ₘ_eq_getKey?\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getKey?ₘ_eq_getKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.getKey?ₘ\">getKey?ₘ</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getKey?\">Internal.List.getKey?</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L652-L655","name":"Std.DTreeMap.Internal.Impl.getD_eq_getValueCastD","line":652,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getD_eq_getValueCastD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getD_eq_getValueCastD\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getD_eq_getValueCastD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.getD\">getD</a></span> <span class=\"fn\">k</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValueCastD\">Internal.List.getValueCastD</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L647-L650","name":"Std.DTreeMap.Internal.Impl.getDₘ_eq_getValueCastD","line":647,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getDₘ_eq_getValueCastD","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getDₘ_eq_getValueCastD\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getDₘ_eq_getValueCastD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.getDₘ\">getDₘ</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span> <span class=\"fn\">fallback</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValueCastD\">Internal.List.getValueCastD</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">fallback</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L639-L641","name":"Std.DTreeMap.Internal.Impl.get!_eq_getValueCast!","line":639,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.get!_eq_getValueCast!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.get!_eq_getValueCast!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">get!_eq_getValueCast!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.get!\">get!</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValueCast!\">Internal.List.getValueCast!</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L635-L637","name":"Std.DTreeMap.Internal.Impl.get!ₘ_eq_getValueCast!","line":635,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.get!ₘ_eq_getValueCast!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.get!ₘ_eq_getValueCast!\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">get!ₘ_eq_getValueCast!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">k</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.get!ₘ\">get!ₘ</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValueCast!\">Internal.List.getValueCast!</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L626-L629","name":"Std.DTreeMap.Internal.Impl.get_eq_getValueCast","line":626,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.get_eq_getValueCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.get_eq_getValueCast\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">get_eq_getValueCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.get\">get</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValueCast\">Internal.List.getValueCast</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L619-L624","name":"Std.DTreeMap.Internal.Impl.getₘ_eq_getValueCast","line":619,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getₘ_eq_getValueCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.getₘ_eq_getValueCast\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getₘ_eq_getValueCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h'</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.get?ₘ\">get?ₘ</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.getₘ\">getₘ</a></span> <span class=\"fn\">k</span> <span class=\"fn\">h'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValueCast\">Internal.List.getValueCast</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L615-L617","name":"Std.DTreeMap.Internal.Impl.contains_eq_isSome_get?ₘ","line":615,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.contains_eq_isSome_get?ₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.contains_eq_isSome_get?ₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">contains_eq_isSome_get?ₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.contains\">contains</a> <span class=\"fn\">k</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.get?ₘ\">get?ₘ</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L606-L609","name":"Std.DTreeMap.Internal.Impl.get?_eq_getValueCast?","line":606,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.get?_eq_getValueCast?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.get?_eq_getValueCast?\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">get?_eq_getValueCast?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.get?\">get?</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValueCast?\">Internal.List.getValueCast?</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L595-L604","name":"Std.DTreeMap.Internal.Impl.get?ₘ_eq_getValueCast?","line":595,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.get?ₘ_eq_getValueCast?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.get?ₘ_eq_getValueCast?\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">get?ₘ_eq_getValueCast?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hto</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.get?ₘ\">get?ₘ</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.getValueCast?\">Internal.List.getValueCast?</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L586-L589","name":"Std.DTreeMap.Internal.Impl.contains_eq_containsKey","line":586,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.contains_eq_containsKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.contains_eq_containsKey\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">contains_eq_containsKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">instBEq</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.contains\">contains</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L574-L584","name":"Std.DTreeMap.Internal.Impl.containsₘ_eq_containsKey","line":574,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.containsₘ_eq_containsKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.containsₘ_eq_containsKey\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">containsₘ_eq_containsKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.containsₘ\">containsₘ</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L561-L568","name":"Std.DTreeMap.Internal.Impl.size_eq_length","line":561,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.size_eq_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.size_eq_length\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">size_eq_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htb</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L553-L555","name":"Std.DTreeMap.Internal.Impl.isEmpty_eq_isEmpty","line":553,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.isEmpty_eq_isEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.isEmpty_eq_isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isEmpty_eq_isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Queries.html#Std.DTreeMap.Internal.Impl.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.isEmpty\">isEmpty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L523-L543","name":"Std.DTreeMap.Internal.Impl.applyCell_eq_apply_toListModel","line":523,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.applyCell_eq_apply_toListModel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.applyCell_eq_apply_toListModel\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">applyCell_eq_apply_toListModel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.contains\">contains</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span> → <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">ll</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\">ll</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfg</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span>) (<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.contains\">contains</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">c</span> <span class=\"fn\">hc</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.inner\">inner</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span> <span class=\"fn\">⋯</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg₁</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Internal/List/Defs.html#Std.Internal.List.DistinctKeys\">Internal.List.DistinctKeys</a> <span class=\"fn\">l₁</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">hP</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">l₂</span></span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">l₁</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">l₂</span> <span class=\"fn\">⋯</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)\n    (<span class=\"fn\">h'</span> : <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>), <span class=\"fn\"><span class=\"fn\">g</span> (<span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l₂</span>) <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">l₁</span> <span class=\"fn\">⋯</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.applyCell\">applyCell</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L508-L521","name":"Std.DTreeMap.Internal.Impl.applyPartition_eq_apply_toListModel'","line":508,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.applyPartition_eq_apply_toListModel'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.applyPartition_eq_apply_toListModel'\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">applyPartition_eq_apply_toListModel'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span> → <span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">k</span></span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.contains\">contains</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span> → <span class=\"fn\">δ</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span> → <span class=\"fn\">δ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">ll </span><span class=\"fn\">rr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>} {<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">k</span></span>} {<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.contains\">contains</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>},\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> (<span class=\"fn\">ll</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.inner\">inner</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rr</span>)</span> →\n      <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ll</span> → <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span>)</span> →\n        <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">rr</span> → <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">ll</span> <span class=\"fn\">c</span> <span class=\"fn\">h₁</span> <span class=\"fn\">rr</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> (<span class=\"fn\">ll</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.inner\">inner</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rr</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.applyPartition\">applyPartition</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L491-L506","name":"Std.DTreeMap.Internal.Impl.applyPartition_eq_apply_toListModel","line":491,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.applyPartition_eq_apply_toListModel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.applyPartition_eq_apply_toListModel\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">applyPartition_eq_apply_toListModel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> :\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span> →\n    <span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.contains\">contains</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span> → <span class=\"fn\">δ</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">ll</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\">ll</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span> → <span class=\"fn\">δ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">ll </span><span class=\"fn\">rr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>} {<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span>} {<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.contains\">contains</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>},\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> (<span class=\"fn\">ll</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.inner\">inner</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rr</span>)</span> →\n      <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ll</span> → <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></span>)</span> →\n        <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">p</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">rr</span> → <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></span>)</span> →\n          <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">ll</span> <span class=\"fn\">c</span> <span class=\"fn\">h₁</span> <span class=\"fn\">rr</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> (<span class=\"fn\">ll</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.inner\">inner</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">rr</span>) <span class=\"fn\">⋯</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.applyPartition\">applyPartition</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">l</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L475-L489","name":"Std.DTreeMap.Internal.Impl.containsKey_toListModel","line":475,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.containsKey_toListModel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.containsKey_toListModel\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">containsKey_toListModel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.OrientedOrd\">OrientedOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L412-L473","name":"Std.DTreeMap.Internal.Impl.applyPartition_eq","line":412,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.applyPartition_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.applyPartition_eq\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">applyPartition_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span> → <span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">k</span></span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.contains\">contains</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span> → <span class=\"fn\">δ</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.applyPartition\">applyPartition</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.List.findCell\">List.findCell</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">⋯</span>\n    <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L401-L410","name":"Std.DTreeMap.Internal.Impl.contains_findCell","line":401,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.contains_findCell","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.contains_findCell\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">contains_findCell</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.contains'\">contains'</a> <span class=\"fn\">k</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.List.findCell\">List.findCell</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.contains\">contains</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L388-L399","name":"Std.DTreeMap.Internal.Impl.toListModel_updateCell_perm","line":388,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_updateCell_perm","doc":"This is the general theorem to show that modification operations are correct. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_updateCell_perm\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_updateCell_perm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfg</span> : <span class=\"fn\">∀ {<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.inner\">inner</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.inner\">inner</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg₁</span> : <span class=\"fn\">∀ {<span class=\"fn\">l </span><span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Internal/List/Defs.html#Std.Internal.List.DistinctKeys\">Internal.List.DistinctKeys</a> <span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">l'</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">l'</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg₂</span> : <span class=\"fn\">∀ {<span class=\"fn\">l </span><span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\">g</span> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.updateCell\">updateCell</a> <span class=\"fn\">k</span> <span class=\"fn\">f</span> <span class=\"fn\">l</span> <span class=\"fn\">hlb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L383-L386","name":"Std.DTreeMap.Internal.Impl.Ordered.distinctKeys","line":383,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Ordered.distinctKeys","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.Ordered.distinctKeys\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">Ordered</span>.<span class=\"name\">distinctKeys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Internal/List/Defs.html#Std.Internal.List.DistinctKeys\">Internal.List.DistinctKeys</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L364-L381","name":"Std.DTreeMap.Internal.Impl.exists_cell_of_updateCell","line":364,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.exists_cell_of_updateCell","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.exists_cell_of_updateCell\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">exists_cell_of_updateCell</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulBEqOrd\">LawfulBEqOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">l'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span>\n      (<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l'</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.updateCell\">updateCell</a> <span class=\"fn\">k</span> <span class=\"fn\">f</span> <span class=\"fn\">l</span> <span class=\"fn\">hlb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.List.findCell\">List.findCell</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span>)</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.inner\">inner</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l'</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><a href=\"./Std/Data/Internal/List/Associative.html#Std.Internal.List.containsKey\">Internal.List.containsKey</a> <span class=\"fn\">k</span> <span class=\"fn\">l'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L334-L356","name":"Std.DTreeMap.Internal.Impl.ordered_updateCell","line":334,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_updateCell","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.ordered_updateCell\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ordered_updateCell</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.updateCell\">updateCell</a> <span class=\"fn\">k</span> <span class=\"fn\">f</span> <span class=\"fn\">l</span> <span class=\"fn\">hlb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L313-L332","name":"Std.DTreeMap.Internal.Impl.toListModel_eq_append","line":313,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_eq_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_eq_append\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_eq_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a>       <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a>     <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L279-L311","name":"Std.DTreeMap.Internal.Impl.toListModel_updateCell","line":279,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_updateCell","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_updateCell\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_updateCell</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span> → <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell\">Cell</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlo</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Model.html#Std.DTreeMap.Internal.Impl.updateCell\">updateCell</a> <span class=\"fn\">k</span> <span class=\"fn\">f</span> <span class=\"fn\">l</span> <span class=\"fn\">hlb</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.SizedBalancedTree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.List.findCell\">List.findCell</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span>)</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.inner\">inner</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.toList\">toList</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a>     <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L274-L277","name":"Std.DTreeMap.Internal.Impl.findCell_of_lt","line":274,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.findCell_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.findCell_of_lt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">findCell_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsCut\">Internal.IsCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.List.findCell\">List.findCell</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.List.findCell\">List.findCell</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L269-L272","name":"Std.DTreeMap.Internal.Impl.findCell_of_eq","line":269,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.findCell_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.findCell_of_eq\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">findCell_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.List.findCell\">List.findCell</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.Cell.ofEq\">Cell.ofEq</a> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L264-L267","name":"Std.DTreeMap.Internal.Impl.findCell_of_gt","line":264,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.findCell_of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.findCell_of_gt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">findCell_of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.List.findCell\">List.findCell</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Cell.html#Std.DTreeMap.Internal.List.findCell\">List.findCell</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L258-L262","name":"Std.DTreeMap.Internal.Impl.instIsStrictCutCompare","line":258,"kind":"instance","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.instIsStrictCutCompare","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.instIsStrictCutCompare\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">instIsStrictCutCompare</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L250-L256","name":"Std.DTreeMap.Internal.Impl.toListModel_filter_lt_of_lt","line":250,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_lt_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_lt_of_lt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_filter_lt_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsCut\">Internal.IsCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k'</span>, <span class=\"fn\">v'</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L239-L248","name":"Std.DTreeMap.Internal.Impl.toListModel_filter_lt_of_eq","line":239,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_lt_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_lt_of_eq\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_filter_lt_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L231-L237","name":"Std.DTreeMap.Internal.Impl.toListModel_filter_lt_of_gt","line":231,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_lt_of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_lt_of_gt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_filter_lt_of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsCut\">Internal.IsCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L223-L229","name":"Std.DTreeMap.Internal.Impl.toListModel_find?_of_lt","line":223,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_find?_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_find?_of_lt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_find?_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsCut\">Internal.IsCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L215-L221","name":"Std.DTreeMap.Internal.Impl.toListModel_find?_of_eq","line":215,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_find?_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_find?_of_eq\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_find?_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k'</span>, <span class=\"fn\">v'</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L206-L213","name":"Std.DTreeMap.Internal.Impl.toListModel_find?_of_gt","line":206,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_find?_of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_find?_of_gt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_find?_of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.find?\">List.find?</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L198-L204","name":"Std.DTreeMap.Internal.Impl.toListModel_filter_gt_of_lt","line":198,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_gt_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_gt_of_lt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_filter_gt_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L189-L196","name":"Std.DTreeMap.Internal.Impl.toListModel_filter_gt_of_eq","line":189,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_gt_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_gt_of_eq\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_filter_gt_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L181-L187","name":"Std.DTreeMap.Internal.Impl.toListModel_filter_gt_of_gt","line":181,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_gt_of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_filter_gt_of_gt\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_filter_gt_of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Data/Internal/Cut.html#Std.Internal.IsStrictCut\">Internal.IsStrictCut</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sz</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcmp</span> : <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\">k'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Ordered.html#Std.DTreeMap.Internal.Impl.Ordered\">Ordered</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.inner\">inner</a> <span class=\"fn\">sz</span> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k'</span>, <span class=\"fn\">v'</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.filter\">List.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L167-L175","name":"Std.DTreeMap.Internal.Impl.toListModel_link","line":167,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_link","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_link\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_link</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.link\">link</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hl</span> <span class=\"fn\">hr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Tree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L160-L165","name":"Std.DTreeMap.Internal.Impl.toListModel_insertMax","line":160,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertMax\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_insertMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertMax\">insertMax</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Tree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L153-L158","name":"Std.DTreeMap.Internal.Impl.toListModel_insertMin","line":153,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_insertMin\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_insertMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.insertMin\">insertMin</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">t</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Tree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L140-L151","name":"Std.DTreeMap.Internal.Impl.toListModel_link2","line":140,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_link2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_link2\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_link2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.link2\">link2</a></span> <span class=\"fn\">r</span> <span class=\"fn\">hl</span> <span class=\"fn\">hr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Tree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L130-L138","name":"Std.DTreeMap.Internal.Impl.toListModel_glue","line":130,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_glue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_glue\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_glue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlr</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.BalancedAtRoot\">BalancedAtRoot</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.glue\">glue</a></span> <span class=\"fn\">r</span> <span class=\"fn\">hl</span> <span class=\"fn\">hr</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L123-L128","name":"Std.DTreeMap.Internal.Impl.toListModel_maxView","line":123,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_maxView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_maxView\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_maxView</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlr</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.BalancedAtRoot\">BalancedAtRoot</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.maxView\">maxView</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hl</span> <span class=\"fn\">hr</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.View.tree\">tree</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Tree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.maxView\">maxView</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hl</span> <span class=\"fn\">hr</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.View.k\">k</a></span>, <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.maxView\">maxView</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hl</span> <span class=\"fn\">hr</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.View.v\">v</a></span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L113-L121","name":"Std.DTreeMap.Internal.Impl.toListModel_minView","line":113,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_minView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_minView\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_minView</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlr</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.BalancedAtRoot\">BalancedAtRoot</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.minView\">minView</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hl</span> <span class=\"fn\">hr</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.View.k\">k</a></span>, <span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.minView\">minView</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hl</span> <span class=\"fn\">hr</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.View.v\">v</a></span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.minView\">minView</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hl</span> <span class=\"fn\">hr</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.View.tree\">tree</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Operations.html#Std.DTreeMap.Internal.Impl.Tree.impl\">impl</a></span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L108-L111","name":"Std.DTreeMap.Internal.Impl.toListModel_balanceRErase","line":108,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balanceRErase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balanceRErase\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_balanceRErase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hrb</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlr</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.BalanceLErasePrecond\">BalanceLErasePrecond</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.balanceRErase\">balanceRErase</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hlb</span> <span class=\"fn\">hrb</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L103-L106","name":"Std.DTreeMap.Internal.Impl.toListModel_balanceR","line":103,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balanceR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balanceR\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_balanceR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hrb</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlr</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.BalanceLPrecond\">BalanceLPrecond</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.balanceR\">balanceR</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hlb</span> <span class=\"fn\">hrb</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L98-L101","name":"Std.DTreeMap.Internal.Impl.toListModel_balanceLErase","line":98,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balanceLErase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balanceLErase\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_balanceLErase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hrb</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlr</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.BalanceLErasePrecond\">BalanceLErasePrecond</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.balanceLErase\">balanceLErase</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hlb</span> <span class=\"fn\">hrb</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L93-L96","name":"Std.DTreeMap.Internal.Impl.toListModel_balanceL","line":93,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balanceL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balanceL\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_balanceL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hrb</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlr</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.BalanceLPrecond\">BalanceLPrecond</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.balanceL\">balanceL</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hlb</span> <span class=\"fn\">hrb</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L88-L91","name":"Std.DTreeMap.Internal.Impl.toListModel_balance","line":88,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balance\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_balance</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hrb</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Balanced.html#Std.DTreeMap.Internal.Impl.Balanced\">Balanced</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlr</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.BalanceLErasePrecond\">BalanceLErasePrecond</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.BalanceLErasePrecond\">BalanceLErasePrecond</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.size\">size</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.balance\">balance</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span> <span class=\"fn\">hlb</span> <span class=\"fn\">hrb</span> <span class=\"fn\">hlr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L79-L86","name":"Std.DTreeMap.Internal.Impl.toListModel_balanceₘ","line":79,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balanceₘ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_balanceₘ\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_balanceₘ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.balanceₘ\">balanceₘ</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L67-L77","name":"Std.DTreeMap.Internal.Impl.toListModel_rotateR","line":67,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_rotateR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_rotateR\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_rotateR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lk</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lv</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">lk</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ll </span><span class=\"fn\">lr </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.rotateR\">rotateR</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">lk</span> <span class=\"fn\">lv</span> <span class=\"fn\">ll</span> <span class=\"fn\">lr</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ll</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">lk</span>, <span class=\"fn\">lv</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">lr</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L55-L65","name":"Std.DTreeMap.Internal.Impl.toListModel_rotateL","line":55,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_rotateL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_rotateL\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_rotateL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rk</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rv</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">rk</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rl </span><span class=\"fn\">rr</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.rotateL\">rotateL</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">rk</span> <span class=\"fn\">rv</span> <span class=\"fn\">rl</span> <span class=\"fn\">rr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> (<span class=\"fn\"><span class=\"fn\">rl</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">rk</span>, <span class=\"fn\">rv</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">rr</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L48-L53","name":"Std.DTreeMap.Internal.Impl.toListModel_singleR","line":48,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_singleR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_singleR\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_singleR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lk</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lv</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">lk</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ll </span><span class=\"fn\">lr </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.singleR\">singleR</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">lk</span> <span class=\"fn\">lv</span> <span class=\"fn\">ll</span> <span class=\"fn\">lr</span> <span class=\"fn\">r</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ll</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">lk</span>, <span class=\"fn\">lv</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">lr</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DTreeMap/Internal/WF/Lemmas.lean#L41-L46","name":"Std.DTreeMap.Internal.Impl.toListModel_singleL","line":41,"kind":"theorem","docLink":"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_singleL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DTreeMap/Internal/WF/Lemmas.html#Std.DTreeMap.Internal.Impl.toListModel_singleL\"><span class=\"name\">Std</span>.<span class=\"name\">DTreeMap</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Impl</span>.<span class=\"name\">toListModel_singleL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">k</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rk</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rv</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">rk</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rl </span><span class=\"fn\">rr</span> : <span class=\"fn\"><a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl\">Impl</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DTreeMap/Internal/Balancing.html#Std.DTreeMap.Internal.Impl.singleL\">singleL</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">l</span> <span class=\"fn\">rk</span> <span class=\"fn\">rv</span> <span class=\"fn\">rl</span> <span class=\"fn\">rr</span>)</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">k</span>, <span class=\"fn\">v</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> (<span class=\"fn\"><span class=\"fn\">rl</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Core.html#Sigma.mk\">⟨</a><span class=\"fn\">rk</span>, <span class=\"fn\">rv</span><a href=\"./Init/Core.html#Sigma.mk\">⟩</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">rr</span>.<a href=\"./Std/Data/DTreeMap/Internal/Def.html#Std.DTreeMap.Internal.Impl.toListModel\">toListModel</a></span>)</div></div>"}]}