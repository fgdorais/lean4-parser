{"name":"Lean.Compiler.IR.Boxing","instances":[],"imports":["Lean.Runtime","Lean.Compiler.ClosedTermCache","Lean.Compiler.ExternAttr","Lean.Compiler.IR.Basic","Lean.Compiler.IR.CompilerM","Lean.Compiler.IR.FreeVars","Lean.Compiler.IR.ElimDeadVars","Lean.Data.AssocList"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L342-L344","name":"Lean.IR.explicitBoxing","line":342,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.explicitBoxing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.explicitBoxing\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">explicitBoxing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/CompilerM.html#Lean.IR.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L326-L338","name":"Lean.IR.ExplicitBoxing.run","line":326,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.run\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L294-L324","name":"Lean.IR.ExplicitBoxing.visitFnBody","line":294,"kind":"opaque","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitFnBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">visitFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L270-L292","name":"Lean.IR.ExplicitBoxing.visitVDeclExpr","line":270,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitVDeclExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitVDeclExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">visitVDeclExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L262-L268","name":"Lean.IR.ExplicitBoxing.castResultIfNeeded","line":262,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castResultIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castResultIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castResultIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eType</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L255-L260","name":"Lean.IR.ExplicitBoxing.unboxResultIfNeeded","line":255,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.unboxResultIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.unboxResultIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">unboxResultIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L250-L253","name":"Lean.IR.ExplicitBoxing.boxArgsIfNeeded","line":250,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.boxArgsIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.boxArgsIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">boxArgsIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L245-L248","name":"Lean.IR.ExplicitBoxing.castArgsIfNeeded","line":245,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castArgsIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L223-L243","name":"Lean.IR.ExplicitBoxing.castArgsIfNeededAux","line":223,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeededAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeededAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castArgsIfNeededAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeFromIdx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L218-L221","name":"Lean.IR.ExplicitBoxing.castArgIfNeeded","line":218,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castArgIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expected</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L209-L216","name":"Lean.IR.ExplicitBoxing.castVarIfNeeded","line":209,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castVarIfNeeded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castVarIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castVarIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expected</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L176-L207","name":"Lean.IR.ExplicitBoxing.mkCast","line":176,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkCast","doc":"Auxiliary function used by castVarIfNeeded.\nIt is used when the expected type does not match `xType`.\nIf `xType` is scalar, then we need to \"box\" it. Otherwise, we need to \"unbox\" it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkCast\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xType </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L155-L156","name":"Lean.IR.ExplicitBoxing.withJDecl","line":155,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withJDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withJDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">withJDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L152-L153","name":"Lean.IR.ExplicitBoxing.withVDecl","line":152,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withVDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withVDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">withVDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L149-L150","name":"Lean.IR.ExplicitBoxing.withParams","line":149,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">withParams</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L143-L147","name":"Lean.IR.ExplicitBoxing.getDecl","line":143,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fid</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L137-L141","name":"Lean.IR.ExplicitBoxing.getJPParams","line":137,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getJPParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getJPParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getJPParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L131-L135","name":"Lean.IR.ExplicitBoxing.getVarType","line":131,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getVarType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getVarType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getVarType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L129-L129","name":"Lean.IR.ExplicitBoxing.getResultType","line":129,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getResultType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getResultType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getResultType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L128-L128","name":"Lean.IR.ExplicitBoxing.getLocalContext","line":128,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getLocalContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getLocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getLocalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L127-L127","name":"Lean.IR.ExplicitBoxing.getEnv","line":127,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getEnv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getEnv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L121-L121","name":"Lean.IR.ExplicitBoxing.M","line":121,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L119-L119","name":"Lean.IR.ExplicitBoxing.BoxingState.nextAuxId","line":119,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextAuxId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextAuxId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">nextAuxId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L118-L118","name":"Lean.IR.ExplicitBoxing.BoxingState.auxDeclCache","line":118,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDeclCache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDeclCache\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">auxDeclCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L117-L117","name":"Lean.IR.ExplicitBoxing.BoxingState.auxDecls","line":117,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDecls","doc":"We create auxiliary declarations when boxing constant and literals.\nThe idea is to avoid code such as\n```\nlet x1 := Uint64.inhabited;\nlet x2 := box x1;\n...\n```\nWe currently do not cache these declarations in an environment extension, but\nwe use auxDeclCache to avoid creating equivalent auxiliary declarations more than once when\nprocessing the same IR declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">auxDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L105-L105","name":"Lean.IR.ExplicitBoxing.BoxingState.nextIdx","line":105,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">nextIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L104-L104","name":"Lean.IR.ExplicitBoxing.BoxingState.mk","line":104,"kind":"ctor","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextIdx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">auxDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">auxDeclCache</span> : <span class=\"fn\"><a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextAuxId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">BoxingState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L104-L119","name":"Lean.IR.ExplicitBoxing.BoxingState","line":104,"kind":"structure","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L102-L102","name":"Lean.IR.ExplicitBoxing.BoxingContext.env","line":102,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.env","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.env\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L101-L101","name":"Lean.IR.ExplicitBoxing.BoxingContext.decls","line":101,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.decls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L100-L100","name":"Lean.IR.ExplicitBoxing.BoxingContext.resultType","line":100,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.resultType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.resultType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">resultType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L99-L99","name":"Lean.IR.ExplicitBoxing.BoxingContext.localCtx","line":99,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.localCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.localCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">localCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L98-L98","name":"Lean.IR.ExplicitBoxing.BoxingContext.f","line":98,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.f\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L97-L97","name":"Lean.IR.ExplicitBoxing.BoxingContext.mk","line":97,"kind":"ctor","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localCtx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultType</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L97-L102","name":"Lean.IR.ExplicitBoxing.BoxingContext","line":97,"kind":"structure","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L94-L95","name":"Lean.IR.ExplicitBoxing.eqvTypes","line":94,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.eqvTypes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.eqvTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">eqvTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L77-L92","name":"Lean.IR.ExplicitBoxing.getScrutineeType","line":77,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getScrutineeType","doc":"Infer scrutinee type using `case` alternatives.\nThis can be done whenever `alts` does not contain an `Alt.default _` value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getScrutineeType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getScrutineeType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L72-L75","name":"Lean.IR.ExplicitBoxing.addBoxedVersions","line":72,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.addBoxedVersions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.addBoxedVersions\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">addBoxedVersions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L69-L70","name":"Lean.IR.ExplicitBoxing.mkBoxedVersion","line":69,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersion\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkBoxedVersion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L48-L67","name":"Lean.IR.ExplicitBoxing.mkBoxedVersionAux","line":48,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersionAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersionAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkBoxedVersionAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.N\">N</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L43-L46","name":"Lean.IR.ExplicitBoxing.requiresBoxedVersion","line":43,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.requiresBoxedVersion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.requiresBoxedVersion\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">requiresBoxedVersion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L38-L38","name":"Lean.IR.ExplicitBoxing.N","line":38,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.N","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.N\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">N</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L35-L36","name":"Lean.IR.ExplicitBoxing.isBoxedName","line":35,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.isBoxedName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.isBoxedName\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">isBoxedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/IR/Boxing.lean#L32-L33","name":"Lean.IR.ExplicitBoxing.mkBoxedName","line":32,"kind":"def","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedName\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkBoxedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"}]}