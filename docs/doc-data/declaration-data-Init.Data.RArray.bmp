{"name":"Init.Data.RArray","instances":[{"typeNames":["Lean.RArray","Nat"],"name":"Lean.instGetElemRArrayNatTrue","className":"GetElem"}],"imports":["Init.PropLemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/RArray.lean#L64-L66","name":"Lean.RArray.size","line":64,"kind":"def","docLink":"./Init/Data/RArray.html#Lean.RArray.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/RArray.html#Lean.RArray.size\"><span class=\"name\">Lean</span>.<span class=\"name\">RArray</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/RArray.lean#L61-L62","name":"Lean.instGetElemRArrayNatTrue","line":61,"kind":"instance","docLink":"./Init/Data/RArray.html#Lean.instGetElemRArrayNatTrue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/RArray.html#Lean.instGetElemRArrayNatTrue\"><span class=\"name\">Lean</span>.<span class=\"name\">instGetElemRArrayNatTrue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/GetElem.html#GetElem\">GetElem</a> <span class=\"fn\">(<a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) =&gt; <a href=\"./Init/Prelude.html#True\">True</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/RArray.lean#L51-L59","name":"Lean.RArray.get_eq_getImpl","line":51,"kind":"theorem","docLink":"./Init/Data/RArray.html#Lean.RArray.get_eq_getImpl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/RArray.html#Lean.RArray.get_eq_getImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">RArray</span>.<span class=\"name\">get_eq_getImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\">@<a href=\"./Init/Data/RArray.html#Lean.RArray.get\">get</a> <a href=\"./Init/Prelude.html#Eq\">=</a> @<a href=\"./Init/Data/RArray.html#Lean.RArray.getImpl\">getImpl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/RArray.lean#L45-L49","name":"Lean.RArray.getImpl","line":45,"kind":"def","docLink":"./Init/Data/RArray.html#Lean.RArray.getImpl","doc":"`RArray.get`, implemented conventionally "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/RArray.html#Lean.RArray.getImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">RArray</span>.<span class=\"name\">getImpl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/RArray.lean#L34-L36","name":"Lean.RArray.get","line":34,"kind":"def","docLink":"./Init/Data/RArray.html#Lean.RArray.get","doc":"The crucial operation, written with very little abstractional overhead "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/RArray.html#Lean.RArray.get\"><span class=\"name\">Lean</span>.<span class=\"name\">RArray</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/RArray.lean#L30-L30","name":"Lean.RArray.branch","line":30,"kind":"ctor","docLink":"./Init/Data/RArray.html#Lean.RArray.branch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/RArray.html#Lean.RArray.branch\"><span class=\"name\">Lean</span>.<span class=\"name\">RArray</span>.<span class=\"name\">branch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/RArray.lean#L29-L29","name":"Lean.RArray.leaf","line":29,"kind":"ctor","docLink":"./Init/Data/RArray.html#Lean.RArray.leaf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/RArray.html#Lean.RArray.leaf\"><span class=\"name\">Lean</span>.<span class=\"name\">RArray</span>.<span class=\"name\">leaf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Data/RArray.html#Lean.RArray\">RArray</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/RArray.lean#L14-L30","name":"Lean.RArray","line":14,"kind":"inductive","docLink":"./Init/Data/RArray.html#Lean.RArray","doc":"A `RArray` can model `Fin n → α` or `Array α`, but is optimized for a fast kernel-reducible `get`\noperation.\n\nThe primary intended use case is the “denote” function of a typical proof by reflection proof, where\nonly the `get` operation is necessary. It is not suitable as a general-purpose data structure.\n\nThere is no well-formedness invariant attached to this data structure, to keep it concise; it's\nsemantics is given through `RArray.get`. In that way one can also view an `RArray` as a decision\ntree implementing `Nat → α`.\n\nSee `RArray.ofFn` and `RArray.ofArray` in module `Lean.Data.RArray` for functions that construct an\n`RArray`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/RArray.html#Lean.RArray\"><span class=\"name\">Lean</span>.<span class=\"name\">RArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}