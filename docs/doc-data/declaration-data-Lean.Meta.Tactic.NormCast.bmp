{"name":"Lean.Meta.Tactic.NormCast","instances":[{"typeNames":["Eq"],"name":"Lean.Meta.NormCast.instDecidableEqLabel","className":"Decidable"},{"typeNames":["Lean.Meta.NormCast.Label"],"name":"Lean.Meta.NormCast.instReprLabel","className":"Repr"},{"typeNames":["Lean.Meta.NormCast.Label"],"name":"Lean.Meta.NormCast.instInhabitedLabel","className":"Inhabited"},{"typeNames":["Lean.Meta.NormCast.NormCastExtension"],"name":"Lean.Meta.NormCast.instInhabitedNormCastExtension","className":"Inhabited"}],"imports":["Lean.Meta.CongrTheorems","Lean.Meta.Tactic.Simp.Attr","Lean.Meta.CoeAttr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L135-L148","name":"Lean.Meta.NormCast.addInfer","line":135,"kind":"def","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addInfer","doc":"`addInfer decl` infers the label of `decl` (`elim`, `move`, or `squash`) and arranges for it to\nbe used by `norm_cast`.\n\n* elim lemma:   LHS has 0 head coes and ≥ 1 internal coe\n* move lemma:   LHS has 1 head coe and 0 internal coes,    RHS has 0 head coes and ≥ 1 internal coes\n* squash lemma: LHS has ≥ 1 head coes and 0 internal coes, RHS has fewer head coes\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addInfer\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">addInfer</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeKind.global\">AttributeKind.global</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L128-L133","name":"Lean.Meta.NormCast.addSquash","line":128,"kind":"def","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addSquash","doc":"`addSquash decl` adds `decl` as a `squash` lemma to be used by `norm_cast`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addSquash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">addSquash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeKind.global\">AttributeKind.global</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L121-L126","name":"Lean.Meta.NormCast.addMove","line":121,"kind":"def","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addMove","doc":"`addMove decl` adds `decl` as a `move` lemma to be used by `norm_cast`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addMove\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">addMove</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeKind.global\">AttributeKind.global</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L116-L119","name":"Lean.Meta.NormCast.addElim","line":116,"kind":"def","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addElim","doc":"`addElim decl` adds `decl` as an `elim` lemma to be used by `norm_cast`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.addElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">addElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeKind.global\">AttributeKind.global</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prio</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">1000</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L109-L114","name":"Lean.Meta.NormCast.normCastExt","line":109,"kind":"opaque","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.normCastExt","doc":"The `norm_cast` extension data. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.normCastExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">normCastExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L107-L107","name":"Lean.Meta.NormCast.instInhabitedNormCastExtension","line":107,"kind":"instance","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedNormCastExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedNormCastExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instInhabitedNormCastExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L106-L106","name":"Lean.Meta.NormCast.NormCastExtension.squash","line":106,"kind":"def","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.squash","doc":"A simp set which simplifies transitive coercions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.squash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">NormCastExtension</span>.<span class=\"name\">squash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">SimpExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L104-L104","name":"Lean.Meta.NormCast.NormCastExtension.down","line":104,"kind":"def","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.down","doc":"A simp set which pushes coercions to the leaves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.down\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">NormCastExtension</span>.<span class=\"name\">down</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">SimpExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L102-L102","name":"Lean.Meta.NormCast.NormCastExtension.up","line":102,"kind":"def","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.up","doc":"A simp set which lifts coercions to the top level. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.up\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">NormCastExtension</span>.<span class=\"name\">up</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">SimpExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L100-L100","name":"Lean.Meta.NormCast.NormCastExtension.mk","line":100,"kind":"ctor","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">NormCastExtension</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">up </span><span class=\"fn\">down </span><span class=\"fn\">squash</span> : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">SimpExtension</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\">NormCastExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L99-L107","name":"Lean.Meta.NormCast.NormCastExtension","line":99,"kind":"structure","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension","doc":"The `norm_cast` attribute stores a simp set for each of the three types of `norm_cast` lemma. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.NormCastExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">NormCastExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L93-L97","name":"Lean.Meta.NormCast.pushCastExt","line":93,"kind":"opaque","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.pushCastExt","doc":"The `push_cast` simp attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.pushCastExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">pushCastExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">SimpExtension</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L63-L91","name":"Lean.Meta.NormCast.classifyType","line":63,"kind":"def","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.classifyType","doc":"Classifies a declaration of type `ty` as a `norm_cast` rule. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.classifyType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">classifyType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L59-L61","name":"Lean.Meta.NormCast.countInternalCoes","line":59,"kind":"def","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countInternalCoes","doc":"Counts how many coercions are inside the expression, excluding the head ones. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countInternalCoes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">countInternalCoes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L47-L57","name":"Lean.Meta.NormCast.countCoes","line":47,"kind":"opaque","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countCoes","doc":"Counts how many coercions are inside the expression, including the head ones. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countCoes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">countCoes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L39-L45","name":"Lean.Meta.NormCast.countHeadCoes","line":39,"kind":"opaque","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countHeadCoes","doc":"Counts how many coercions are at the head of the expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.countHeadCoes\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">countHeadCoes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L28-L37","name":"Lean.Meta.NormCast.getSimpArgs","line":28,"kind":"def","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.getSimpArgs","doc":"Assuming `e` is an application, returns the list of subterms that `simp` will rewrite in. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.getSimpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">getSimpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L26-L26","name":"Lean.Meta.NormCast.instInhabitedLabel","line":26,"kind":"instance","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedLabel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instInhabitedLabel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instInhabitedLabel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L26-L26","name":"Lean.Meta.NormCast.instReprLabel","line":26,"kind":"instance","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instReprLabel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instReprLabel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instReprLabel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L26-L26","name":"Lean.Meta.NormCast.instDecidableEqLabel","line":26,"kind":"instance","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instDecidableEqLabel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.instDecidableEqLabel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">instDecidableEqLabel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L24-L25","name":"Lean.Meta.NormCast.Label.squash","line":24,"kind":"ctor","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.squash","doc":"squash lemma: LHS has ≥ 1 head coes and 0 internal coes, RHS has fewer head coes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.squash\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">Label</span>.<span class=\"name\">squash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L21-L23","name":"Lean.Meta.NormCast.Label.move","line":21,"kind":"ctor","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.move","doc":"move lemma: LHS has 1 head coe and 0 internal coes,\nRHS has 0 head coes and ≥ 1 internal coes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.move\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">Label</span>.<span class=\"name\">move</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L19-L20","name":"Lean.Meta.NormCast.Label.elim","line":19,"kind":"ctor","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.elim","doc":"elim lemma: LHS has 0 head coes and ≥ 1 internal coe "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label.elim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">Label</span>.<span class=\"name\">elim</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\">Label</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/NormCast.lean#L12-L26","name":"Lean.Meta.NormCast.Label","line":12,"kind":"inductive","docLink":"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label","doc":"`Label` is a type used to classify `norm_cast` lemmas.\n* elim lemma:   LHS has 0 head coes and ≥ 1 internal coe\n* move lemma:   LHS has 1 head coe and 0 internal coes,    RHS has 0 head coes and ≥ 1 internal coes\n* squash lemma: LHS has ≥ 1 head coes and 0 internal coes, RHS has fewer head coes\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/NormCast.html#Lean.Meta.NormCast.Label\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">NormCast</span>.<span class=\"name\">Label</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}