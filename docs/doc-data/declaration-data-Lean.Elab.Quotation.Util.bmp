{"name":"Lean.Elab.Quotation.Util","instances":[],"imports":["Lean.Elab.Term"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation/Util.lean#L40-L46","name":"Lean.Elab.Term.Quotation.getAntiquotKindSpec?","line":40,"kind":"def","docLink":"./Lean/Elab/Quotation/Util.html#Lean.Elab.Term.Quotation.getAntiquotKindSpec?","doc":"Given an antiquotation like `$e:term` (i.e. `Syntax.antiquotKind?` returns `some`),\nreturns the `\"term\"` atom if present.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation/Util.html#Lean.Elab.Term.Quotation.getAntiquotKindSpec?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">getAntiquotKindSpec?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antiquot</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation/Util.lean#L37-L38","name":"Lean.Elab.Term.Quotation.getPatternsVars","line":37,"kind":"def","docLink":"./Lean/Elab/Quotation/Util.html#Lean.Elab.Term.Quotation.getPatternsVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation/Util.html#Lean.Elab.Term.Quotation.getPatternsVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">getPatternsVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation/Util.lean#L27-L35","name":"Lean.Elab.Term.Quotation.getPatternVars","line":27,"kind":"opaque","docLink":"./Lean/Elab/Quotation/Util.html#Lean.Elab.Term.Quotation.getPatternVars","doc":"Get all pattern vars (as `Syntax.ident`s) in `stx` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation/Util.html#Lean.Elab.Term.Quotation.getPatternVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">getPatternVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation/Util.lean#L17-L25","name":"Lean.Elab.Term.Quotation.getAntiquotationIds","line":17,"kind":"def","docLink":"./Lean/Elab/Quotation/Util.html#Lean.Elab.Term.Quotation.getAntiquotationIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation/Util.html#Lean.Elab.Term.Quotation.getAntiquotationIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">getAntiquotationIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation/Util.lean#L12-L15","name":"Lean.Elab.Term.Quotation.hygiene","line":12,"kind":"opaque","docLink":"./Lean/Elab/Quotation/Util.html#Lean.Elab.Term.Quotation.hygiene","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation/Util.html#Lean.Elab.Term.Quotation.hygiene\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">hygiene</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}