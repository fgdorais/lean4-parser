{"name":"Lean.Compiler.LCNF.ElimDeadBranches","instances":[{"typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"],"name":"Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","className":"Inhabited"},{"typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"],"name":"Lean.Compiler.LCNF.UnreachableBranches.instReprValue","className":"Repr"},{"typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"],"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.instBEq","className":"BEq"}],"imports":["Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.PhaseExt","Lean.Compiler.LCNF.InferType"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L620-L621","name":"Lean.Compiler.LCNF.elimDeadBranches","line":620,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.elimDeadBranches","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.elimDeadBranches\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">elimDeadBranches</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L598-L618","name":"Lean.Compiler.LCNF.Decl.elimDeadBranches","line":598,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.Decl.elimDeadBranches","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.Decl.elimDeadBranches\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">elimDeadBranches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L561-L593","name":"Lean.Compiler.LCNF.UnreachableBranches.elimDead.go","line":561,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">elimDead</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L552-L593","name":"Lean.Compiler.LCNF.UnreachableBranches.elimDead","line":552,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead","doc":"Use the information produced by the abstract interpreter to:\n- Eliminate branches that we know cannot be hit\n- Eliminate values that we know have to be constants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L540-L550","name":"Lean.Compiler.LCNF.UnreachableBranches.inferMain","line":540,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferMain","doc":"Run `inferStep` until it reaches a fix point.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferMain\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">inferMain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L518-L538","name":"Lean.Compiler.LCNF.UnreachableBranches.inferStep","line":518,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferStep","doc":"Rerun the abstract interpreter on all declarations except of the unsafe\nones. Return whether any `Value` got updated in the process.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">inferStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L509-L515","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpFunCall","line":509,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpFunCall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpFunCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span>.<span class=\"name\">interpFunCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L500-L507","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunVar","line":500,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunVar","doc":"If we see a function being passed as an argument to a higher order\nfunction we cannot know what arguments it will be passed further\ndown the line. Hence we set all of its arguments to `top` since anything\nis possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span>.<span class=\"name\">handleFunVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L490-L492","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunArg","line":490,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.handleFunArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span>.<span class=\"name\">handleFunArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L457-L488","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpLetValue","line":457,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpLetValue","doc":"The abstract interpreter on a `LetValue`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode.interpLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span>.<span class=\"name\">interpLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letVal</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L418-L515","name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode","line":418,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode","doc":"The actual abstract interpreter on a block of `Code`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L397-L405","name":"Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsTop","line":397,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsTop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsTop\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateFunDeclParamsTop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L370-L395","name":"Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment","line":370,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment","doc":"Return true if the assignment of at least one parameter has been updated.\nFurthermore if we see that `params.size != args.size` we know that this is\na partial application and set the values of the remaining parameters to\n`top` since it is impossible to track what will happen with them from here on.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateFunDeclParamsAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L361-L368","name":"Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary","line":361,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary","doc":"Widen the value of the current function by `v`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateCurrFnSummary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L355-L359","name":"Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment","line":355,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment","doc":"Set the value of `var` to `bot`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">resetVarAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L347-L353","name":"Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment","line":347,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment","doc":"Update the assignment of `var` by merging the current value with `newVal`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateVarAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newVal</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L339-L345","name":"Lean.Compiler.LCNF.UnreachableBranches.findArgValue","line":339,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findArgValue","doc":"Find the value of `arg` using the logic of `findVarValue`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findArgValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">findArgValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L331-L337","name":"Lean.Compiler.LCNF.UnreachableBranches.findVarValue","line":331,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findVarValue","doc":"Obtain the `Value` associated with `var` from the context of `InterpM`.\nIf none is available return `Value.bot`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findVarValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">findVarValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L323-L329","name":"Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment","line":323,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment","doc":"Run `f` on the variable `Assignment` of the current function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">modifyAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a> → <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L318-L321","name":"Lean.Compiler.LCNF.UnreachableBranches.findFunVal?","line":318,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findFunVal?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findFunVal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">findFunVal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L312-L316","name":"Lean.Compiler.LCNF.UnreachableBranches.getFunVal","line":312,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunVal","doc":"Get the `Value` of a certain function in the current block by index.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">getFunVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L306-L310","name":"Lean.Compiler.LCNF.UnreachableBranches.getAssignment","line":306,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getAssignment","doc":"Get the variable `Assignment` of the current function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">getAssignment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L301-L304","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpM","line":301,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM","doc":"The monad which powers the abstract interpreter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L299-L299","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals","line":299,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals","doc":"`Value`s of functions in the `InterpContext` use during computation of\nthe fixpoint. Afterwards they are stored into the `Environment`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span>.<span class=\"name\">funVals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\">InterpState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L294-L294","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments","line":294,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments","doc":"`Assignment`s of functions in the `InterpContext`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span>.<span class=\"name\">assignments</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\">InterpState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L290-L290","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk","line":290,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignments</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funVals</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\">InterpState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L290-L299","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState","line":290,"kind":"structure","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L288-L288","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx","line":288,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx","doc":"The index of the function we are currently operating on in `decls.`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span>.<span class=\"name\">currFnIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\">InterpContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L284-L284","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls","line":284,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls","doc":"The list of `Decl`s we are operating on in `InterpM`. This can be\na single declaration or a mutual block of declarations where their\nanalysis might influence each other as we approach the fixpoint.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\">InterpContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L278-L278","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk","line":278,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currFnIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\">InterpContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L275-L288","name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext","line":275,"kind":"structure","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext","doc":"The context of `InterpM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L269-L273","name":"Lean.Compiler.LCNF.UnreachableBranches.Assignment","line":269,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment","doc":"A map from variable identifiers to the `Value` produced by the abstract\ninterpreter for them.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Assignment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L261-L267","name":"Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?","line":261,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?","doc":"Obtain the `Value` for a function name if possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">getFunctionSummary?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fid</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L255-L259","name":"Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary","line":255,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary","doc":"Add a `Value` for a function name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">addFunctionSummary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fid</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L243-L253","name":"Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt","line":243,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt","doc":"Storing `FunctionSummaries` for all functions in a `.olean`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">functionSummariesExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>) <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries\">FunctionSummaries</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L231-L235","name":"Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries","line":231,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries","doc":"A map from function names to the `Value` that the abstract interpreter\nproduced for them.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">FunctionSummaries</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L224-L227","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.getNatConstant","line":224,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.getNatConstant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.getNatConstant\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">getLiteral</span>.<span class=\"name\">getNatConstant</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L207-L222","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.go","line":207,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">getLiteral</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L195-L227","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral","line":195,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral","doc":"Attempt to turn a `Value` that is representing a literal into a set of\nauxiliary declarations + the final `FVarId` of the declaration that\ncontains the actual literal. If it is not a literal return none.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">getLiteral</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L183-L189","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral","line":183,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral","doc":"We say that a `Value` is a literal iff it is only a tree of `Value.ctor`\nnodes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">isLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L178-L181","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.proj","line":178,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L173-L176","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit","line":173,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ofLCNFLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a> → <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L169-L171","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goSmall","line":169,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goSmall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goSmall\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ofNat</span>.<span class=\"name\">goSmall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L164-L168","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goBig","line":164,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goBig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat.goBig\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ofNat</span>.<span class=\"name\">goBig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">orig </span><span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L158-L171","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat","line":158,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L145-L156","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs","line":145,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs","doc":"Obtain the arguments of a certain constructor within the `Value`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">getCtorArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L133-L143","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor","line":133,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor","doc":"Check whether a certain constructor is part of a `Value` by name.\nNote that both `top` and `bot` will always true here. For bot this is\nbecause we have no information about the `Value` so just to be sure\nwe don't claim the absence of a certain constructor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">containsCtor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L129-L131","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.widening","line":129,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.widening","doc":"Widening operator that guarantees termination in our abstract interpreter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.widening\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">widening</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v1 </span><span class=\"fn\">v2</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L102-L127","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.truncate.go","line":102,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">truncate</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forbiddenTypes</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">remainingDepth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L93-L127","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.truncate","line":93,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate","doc":"Make sure constructors of recursive inductive datatypes can only occur once in each path.\nValues at depth > `maxValueDepth` are also approximated at `top`.\nWe use this function to implement a simple widening operation for our abstract interpreter.\nRecall the widening functions is used to ensure termination in abstract interpreters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">truncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L74-L89","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.merge","line":74,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.merge","doc":"Merge two values into one. `bot` is the neutral element, `top` the annihilator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.merge\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v1 </span><span class=\"fn\">v2</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L58-L72","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice","line":58,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice","doc":"Fuse `v` into `vs`. That is do not only append but if we see that `v`\nis a constructor that is already contained within `vs` try to detect\nthe difference between these values and merge them accordingly into a\nchoice node further down the tree.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">addChoice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L54-L54","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.instBEq","line":54,"kind":"instance","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.instBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.instBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L44-L52","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.beq","line":44,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.beq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> → <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L42-L42","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth","line":42,"kind":"def","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">maxValueDepth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L37-L37","name":"Lean.Compiler.LCNF.UnreachableBranches.instReprValue","line":37,"kind":"instance","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instReprValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instReprValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">instReprValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L37-L37","name":"Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","line":37,"kind":"instance","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">instInhabitedValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L33-L36","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.choice","line":33,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.choice","doc":"A set of values are possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.choice\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">choice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L29-L32","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ctor","line":29,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ctor","doc":"A certain constructor with a certain sets of parameters is possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L25-L28","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.top","line":25,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.top","doc":"All values are possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.top\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">top</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L21-L24","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.bot","line":21,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.bot","doc":"Undefined, could be anything we have no information.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.bot\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">bot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L16-L37","name":"Lean.Compiler.LCNF.UnreachableBranches.Value","line":16,"kind":"inductive","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value","doc":"The abstract domain of the interpreter. Representing sets of values\nof a certain type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}