{"name":"Std.Time.Internal.Bounded","instances":[{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instLE","className":"LE"},{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instLT","className":"LT"},{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instOrd","className":"Ord"},{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instRepr","className":"Repr"},{"typeNames":["Eq"],"name":"Std.Time.Internal.Bounded.instDecidableEq","className":"Decidable"},{"typeNames":["LE.le"],"name":"Std.Time.Internal.Bounded.instDecidableLe","className":"Decidable"},{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instOrientedOrd","className":"Std.OrientedCmp"},{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instTransOrd","className":"Std.TransCmp"},{"typeNames":["Std.Time.Internal.Bounded"],"name":"Std.Time.Internal.Bounded.instLawfulEqOrd","className":"Std.LawfulEqCmp"},{"typeNames":["Std.Time.Internal.Bounded.LE"],"name":"Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast","className":"OfNat"},{"typeNames":["Std.Time.Internal.Bounded.LE"],"name":"Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast","className":"Inhabited"}],"imports":["Init.Omega","Init.Data.Int.DivMod.Lemmas","Std.Classes.Ord"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L463-L484","name":"Std.Time.Internal.Bounded.LE.max","line":463,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.max","doc":"Returns the maximum between a number and the bounded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.max\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">max</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Max.max\">Max.max</a> <span class=\"fn\">n</span> <span class=\"fn\">val</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Max.max\">Max.max</a> <span class=\"fn\">m</span> <span class=\"fn\">val</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L450-L461","name":"Std.Time.Internal.Bounded.LE.abs","line":450,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.abs","doc":"Returns the absolute value of the bounded number `bo` with bounds `-(i - 1)` to `i - 1`. The result\nwill be a new bounded number with bounds `0` to `i - 1`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.abs\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bo</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>) <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L442-L448","name":"Std.Time.Internal.Bounded.LE.succ","line":442,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.succ","doc":"Adds one to the value of the bounded if the value is less than the higher bound of the bounded number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.succ\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">bounded</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L435-L440","name":"Std.Time.Internal.Bounded.LE.expandBottom","line":435,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandBottom","doc":"Expand the bottom of the bounded to a number `nlo` if `lo` is greater or equal to the previous lower bound.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandBottom\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">expandBottom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi </span><span class=\"fn\">nlo</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">nlo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">nlo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L428-L433","name":"Std.Time.Internal.Bounded.LE.expandTop","line":428,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandTop","doc":"Expand the bottom of the bounded to a number `nhi` is `hi` is less or equal to the previous higher bound.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expandTop\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">expandTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi </span><span class=\"fn\">nhi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">nhi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">nhi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L421-L426","name":"Std.Time.Internal.Bounded.LE.expand","line":421,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expand","doc":"Expand the range of a bounded value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.expand\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">expand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi </span><span class=\"fn\">nhi </span><span class=\"fn\">nlo</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">nhi</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">nlo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">nlo</span> <span class=\"fn\">nhi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L417-L419","name":"Std.Time.Internal.Bounded.LE.eq","line":417,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.eq\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L403-L415","name":"Std.Time.Internal.Bounded.LE.ediv","line":403,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ediv","doc":"Adjust the bounds of a `Bounded` by applying the div operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ediv\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ediv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">num</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">num</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L394-L401","name":"Std.Time.Internal.Bounded.LE.mul_neg","line":394,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_neg","doc":"Adjust the bounds of a `Bounded` by applying the multiplication operation with a positive number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_neg\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mul_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>) (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L385-L392","name":"Std.Time.Internal.Bounded.LE.mul_pos","line":385,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_pos","doc":"Adjust the bounds of a `Bounded` by applying the multiplication operation with a positive number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mul_pos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mul_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">num</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L378-L383","name":"Std.Time.Internal.Bounded.LE.mod","line":378,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mod","doc":"Adjust the bounds of a `Bounded` by applying the mod operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">num</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num✝</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">num✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">num✝</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)) (<span class=\"fn\">num✝</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L370-L376","name":"Std.Time.Internal.Bounded.LE.emod","line":370,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.emod","doc":"Adjust the bounds of a `Bounded` by applying the emod operation constraining the lower bound to 0 and\nthe upper bound to the value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.emod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">emod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">num</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num✝</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">num✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> (<span class=\"fn\">num✝</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L363-L368","name":"Std.Time.Internal.Bounded.LE.subBounds","line":363,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBounds","doc":"Adds two `Bounded` and adjust the boundaries.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBounds\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">subBounds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded₂</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">j</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L356-L361","name":"Std.Time.Internal.Bounded.LE.sub","line":356,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.sub","doc":"Adjust the bounds of a `Bounded` by subtracting a constant value to both the lower and upper bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.sub\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">num</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">num</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L347-L354","name":"Std.Time.Internal.Bounded.LE.addBounds","line":347,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addBounds","doc":"Adds two `Bounded` and adjust the boundaries.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addBounds\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">addBounds</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded₂</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">i</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">j</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L336-L345","name":"Std.Time.Internal.Bounded.LE.subBottom","line":336,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBottom","doc":"Adjust the bounds of a `Bounded` by adding a constant value to the lower bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.subBottom\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">subBottom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">num</span>) <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L325-L334","name":"Std.Time.Internal.Bounded.LE.addTop","line":325,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addTop","doc":"Adjust the bounds of a `Bounded` by adding a constant value to the upper bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addTop\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">addTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L316-L323","name":"Std.Time.Internal.Bounded.LE.addProven","line":316,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addProven","doc":"Adjust the bounds of a `Bounded` by adding a constant value to both the lower and upper bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.addProven\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">addProven</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><span class=\"fn\">bounded</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">num</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L306-L314","name":"Std.Time.Internal.Bounded.LE.add","line":306,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.add","doc":"Adjust the bounds of a `Bounded` by adding a constant value to both the lower and upper bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.add\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span>) (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">num</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L297-L304","name":"Std.Time.Internal.Bounded.LE.neg","line":297,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.neg","doc":"Adjust the bounds of a `Bounded` by adding a constant value to both the lower and upper bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.neg\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">m</span>) (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L287-L295","name":"Std.Time.Internal.Bounded.LE.truncateBottom","line":287,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateBottom","doc":"Adjust the bounds of a `Bounded` by changing the lower bound if another value `j` satisfies the same\nconstraint.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateBottom\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">truncateBottom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">j</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">bounded</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">j</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L277-L285","name":"Std.Time.Internal.Bounded.LE.truncateTop","line":277,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateTop","doc":"Adjust the bounds of a `Bounded` by changing the higher bound if another value `j` satisfies the same\nconstraint.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncateTop\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">truncateTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">j</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">bounded</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L268-L275","name":"Std.Time.Internal.Bounded.LE.truncate","line":268,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncate","doc":"Adjust the bounds of a `Bounded` by setting the lower bound to zero and the maximum value to (m - n).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.truncate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bounded</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">n</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">n</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L248-L266","name":"Std.Time.Internal.Bounded.LE.byMod","line":248,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byMod","doc":"Creates a new `Bounded.LE` using a the Truncating modulus of a number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byMod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">byMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)) (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L235-L246","name":"Std.Time.Internal.Bounded.LE.byEmod","line":235,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byEmod","doc":"Creates a new `Bounded.LE` using a the modulus of a number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.byEmod\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">byEmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L226-L233","name":"Std.Time.Internal.Bounded.LE.ofFin'","line":226,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin'","doc":"Convert a `Fin` to a `Bounded.LE`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin'\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofFin'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi </span><span class=\"fn\">lo</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fin</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">hi</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">↑<span class=\"fn\">lo</span></span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L219-L224","name":"Std.Time.Internal.Bounded.LE.ofFin","line":219,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin","doc":"Convert a `Fin` to a `Bounded.LE`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fin</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">hi</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L208-L217","name":"Std.Time.Internal.Bounded.LE.toFin","line":208,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toFin","doc":"Convert a `Bounded.LE` to a `Fin`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toFin\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">lo</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">(<span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>).<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L201-L206","name":"Std.Time.Internal.Bounded.LE.toInt","line":201,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toInt","doc":"Convert a `Bounded.LE` to an Int.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toInt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L191-L199","name":"Std.Time.Internal.Bounded.LE.toNat'","line":191,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat'","doc":"Convert a `Bounded.LE` to a Nat.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat'\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L184-L189","name":"Std.Time.Internal.Bounded.LE.toNat","line":184,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat","doc":"Convert a `Bounded.LE` to a Nat.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.toNat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L173-L182","name":"Std.Time.Internal.Bounded.LE.clip","line":173,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.clip","doc":"Convert a `Nat` to a `Bounded.LE` using the lower boundary too.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.clip\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">clip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L166-L171","name":"Std.Time.Internal.Bounded.LE.ofNat'","line":166,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat'","doc":"Convert a `Nat` to a `Bounded.LE` using the lower boundary too.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat'\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNat'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">↑<span class=\"fn\">lo</span></span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L156-L164","name":"Std.Time.Internal.Bounded.LE.ofNat?","line":156,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat?","doc":"Convert a `Nat` to a `Bounded.LE` if it checks.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat?\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNat?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L149-L154","name":"Std.Time.Internal.Bounded.LE.ofNat","line":149,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat","doc":"Convert a `Nat` to a `Bounded.LE`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">0</span> <span class=\"fn\">↑<span class=\"fn\">hi</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L140-L147","name":"Std.Time.Internal.Bounded.LE.ofInt","line":140,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofInt","doc":"Creates a new `Bounded` integer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofInt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L133-L138","name":"Std.Time.Internal.Bounded.LE.exact","line":133,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.exact","doc":"Creates a new `Bounded` integer that the relation is less-equal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.exact\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">↑<span class=\"fn\">val</span></span> <span class=\"fn\">↑<span class=\"fn\">val</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L126-L131","name":"Std.Time.Internal.Bounded.LE.mk","line":126,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mk","doc":"Creates a new `Bounded` integer that the relation is less-equal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">val</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L121-L124","name":"Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast","line":121,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instInhabitedHAddIntCast\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">instInhabitedHAddIntCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> (<span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L116-L119","name":"Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast","line":116,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.instOfNatHAddIntCast\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">instOfNatHAddIntCast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> (<span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>))</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L97-L114","name":"Std.Time.Internal.Bounded.LE.ofNatWrapping","line":97,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNatWrapping","doc":"Convert a `Nat` to a `Bounded.LE` by wrapping it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE.ofNatWrapping\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span>.<span class=\"name\">ofNatWrapping</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\">LE</a> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L85-L93","name":"Std.Time.Internal.Bounded.ofInt?","line":85,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.ofInt?","doc":"Convert a `Int` to a `Bounded` if it checks.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.ofInt?\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">ofInt?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">rel</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L78-L83","name":"Std.Time.Internal.Bounded.mk","line":78,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.mk","doc":"Creates a new `Bounded` Integer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">lo</span> <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">val</span> <span class=\"fn\">hi</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L72-L76","name":"Std.Time.Internal.Bounded.LT","line":72,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LT","doc":"A `Bounded` integer that the relation used is the the less-than relation so, it includes all\nintegers that `lo < val < hi`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LT\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L65-L70","name":"Std.Time.Internal.Bounded.cast","line":65,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.cast","doc":"Casts the boundaries of the `Bounded` using equivalences.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.cast\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo₁ </span><span class=\"fn\">lo₂ </span><span class=\"fn\">hi₁ </span><span class=\"fn\">hi₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">lo₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">lo₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">hi₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">hi₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo₁</span> <span class=\"fn\">hi₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">lo₂</span> <span class=\"fn\">hi₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L59-L63","name":"Std.Time.Internal.Bounded.LE","line":59,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE","doc":"A `Bounded` integer that the relation used is the the less-equal relation so, it includes all\nintegers that `lo ≤ val ≤ hi`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.LE\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">LE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L54-L55","name":"Std.Time.Internal.Bounded.instLawfulEqOrd","line":54,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLawfulEqOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLawfulEqOrd\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instLawfulEqOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L51-L52","name":"Std.Time.Internal.Bounded.instTransOrd","line":51,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instTransOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instTransOrd\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instTransOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L48-L49","name":"Std.Time.Internal.Bounded.instOrientedOrd","line":48,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instOrientedOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instOrientedOrd\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instOrientedOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.OrientedOrd\">OrientedOrd</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L44-L46","name":"Std.Time.Internal.Bounded.instDecidableLe","line":44,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instDecidableLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instDecidableLe\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instDecidableLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L41-L42","name":"Std.Time.Internal.Bounded.instDecidableEq","line":41,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instDecidableEq\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L37-L39","name":"Std.Time.Internal.Bounded.instRepr","line":37,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L33-L35","name":"Std.Time.Internal.Bounded.instOrd","line":33,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instOrd\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L29-L31","name":"Std.Time.Internal.Bounded.instLT","line":29,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLT\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">_root_.LT</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L25-L27","name":"Std.Time.Internal.Bounded.instLE","line":25,"kind":"instance","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded.instLE\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span>.<span class=\"name\">instLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">_root_.LE</a> <span class=\"fn\">(<a href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\">Bounded</a> <span class=\"fn\">rel</span> <span class=\"fn\">n</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Internal/Bounded.lean#L17-L21","name":"Std.Time.Internal.Bounded","line":17,"kind":"def","docLink":"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded","doc":"A `Bounded` is represented by an `Int` that is constrained by a lower and higher bounded using some\nrelation `rel`. It includes all the integers that `rel lo val ∧ rel val hi`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Internal/Bounded.html#Std.Time.Internal.Bounded\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Internal</span>.<span class=\"name\">Bounded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rel</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}