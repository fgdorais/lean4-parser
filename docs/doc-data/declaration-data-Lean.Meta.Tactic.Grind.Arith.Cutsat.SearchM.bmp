{"name":"Lean.Meta.Tactic.Grind.Arith.Cutsat.SearchM","instances":[{"typeNames":["Lean.Meta.Grind.Arith.Cutsat.CaseKind"],"name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Arith.Cutsat.Case"],"name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Arith.Cutsat.Search.Kind"],"name":"Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind","className":"Inhabited"},{"typeNames":["Lean.Meta.Grind.Arith.Cutsat.Search.Kind"],"name":"Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind","className":"BEq"}],"imports":["Lean.Meta.Tactic.Grind.Arith.Cutsat.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L69-L77","name":"Lean.Meta.Grind.Arith.Cutsat.mkCase","line":69,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.mkCase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.mkCase\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">mkCase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.SearchM\">SearchM</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L65-L67","name":"Lean.Meta.Grind.Arith.Cutsat.setImprecise","line":65,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.setImprecise","doc":"Sets `precise` to `false` to indicate that some constraint was not satisfied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.setImprecise\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">setImprecise</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L61-L63","name":"Lean.Meta.Grind.Arith.Cutsat.isApprox","line":61,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.isApprox","doc":"Returns `true` if approximations are allowed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.isApprox\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">isApprox</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L59-L59","name":"Lean.Meta.Grind.Arith.Cutsat.SearchM","line":59,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.SearchM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.SearchM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">SearchM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L57-L57","name":"Lean.Meta.Grind.Arith.Cutsat.Search.State.decVars","line":57,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.decVars","doc":"Set of decision variables in `cases`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.decVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">State</span>.<span class=\"name\">decVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L55-L55","name":"Lean.Meta.Grind.Arith.Cutsat.Search.State.precise","line":55,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.precise","doc":"`precise := false` if not all constraints were satisfied during the search. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.precise\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">State</span>.<span class=\"name\">precise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L53-L53","name":"Lean.Meta.Grind.Arith.Cutsat.Search.State.cases","line":53,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.cases","doc":"Decision stack (aka case-split stack) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">State</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L51-L51","name":"Lean.Meta.Grind.Arith.Cutsat.Search.State.mk","line":51,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">PArray</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">precise</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decVars</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L48-L57","name":"Lean.Meta.Grind.Arith.Cutsat.Search.State","line":48,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State","doc":"State of the model search procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L46-L46","name":"Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind","line":46,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instBEqKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">instBEqKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L46-L46","name":"Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind","line":46,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.instInhabitedKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">instInhabitedKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L41-L45","name":"Lean.Meta.Grind.Arith.Cutsat.Search.Kind.int","line":41,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind.int","doc":"Variables must be assigned to integer numbers.\nCooper case splits are required in this mode.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind.int\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">Kind</span>.<span class=\"name\">int</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L36-L40","name":"Lean.Meta.Grind.Arith.Cutsat.Search.Kind.rat","line":36,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind.rat","doc":"Allow variables to be assigned to rational numbers during model\nconstruction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind.rat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">Kind</span>.<span class=\"name\">rat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L35-L46","name":"Lean.Meta.Grind.Arith.Cutsat.Search.Kind","line":35,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Search.Kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Search</span>.<span class=\"name\">Kind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L33-L33","name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase","line":33,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCase\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">instInhabitedCase</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L32-L32","name":"Lean.Meta.Grind.Arith.Cutsat.Case.saved","line":32,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.saved","doc":"Snapshot of the cutsat state for backtracking purposes.\nWe do not use a trail stack.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.saved\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Case</span>.<span class=\"name\">saved</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L27-L27","name":"Lean.Meta.Grind.Arith.Cutsat.Case.fvarId","line":27,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.fvarId","doc":"Decision variable used to represent the case-split.\nFor example, suppose we are splitting on `p â  0`. Then,\nwe create a decision variable `h : p + 1 â¤ 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Case</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L21-L21","name":"Lean.Meta.Grind.Arith.Cutsat.Case.kind","line":21,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Case</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L20-L20","name":"Lean.Meta.Grind.Arith.Cutsat.Case.mk","line":20,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Case</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">saved</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\">Case</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L20-L33","name":"Lean.Meta.Grind.Arith.Cutsat.Case","line":20,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.Case\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">Case</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L18-L18","name":"Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind","line":18,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.instInhabitedCaseKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">instInhabitedCaseKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L17-L17","name":"Lean.Meta.Grind.Arith.Cutsat.CaseKind.cooper","line":17,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind.cooper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind.cooper\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">CaseKind</span>.<span class=\"name\">cooper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.CooperSplitPred\">CooperSplitPred</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> <a href=\"./Init/Prelude.html#Prod\">Ã</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.UnsatProof\">UnsatProof</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decVars</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L16-L16","name":"Lean.Meta.Grind.Arith.Cutsat.CaseKind.diseq","line":16,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind.diseq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind.diseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">CaseKind</span>.<span class=\"name\">diseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Types.html#Lean.Meta.Grind.Arith.Cutsat.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\">CaseKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.lean#L10-L18","name":"Lean.Meta.Grind.Arith.Cutsat.CaseKind","line":10,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind","doc":"In principle, we only need to support two kinds of case split.\n- Disequalities.\n- Cooper-Left, but we have 4 different variants of this one.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/SearchM.html#Lean.Meta.Grind.Arith.Cutsat.CaseKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">CaseKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}