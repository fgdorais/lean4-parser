{"name":"Lake.Util.StoreInsts","instances":[{"typeNames":["StateT"],"name":"Lake.instMonadDStoreStateTDRBMapOfMonadOfEqOfCmpWrt","className":"Lake.MonadDStore"},{"typeNames":["StateRefT'"],"name":"Lake.instMonadDStoreStateRefT'DRBMapOfMonadLiftTSTOfMonadOfEqOfCmpWrt","className":"Lake.MonadDStore"},{"typeNames":["StateT"],"name":"Lake.instMonadStoreStateTRBMapOfMonad","className":"Lake.MonadDStore"},{"typeNames":["StateRefT'"],"name":"Lake.instMonadStoreStateRefT'RBMapOfMonadLiftTSTOfMonad","className":"Lake.MonadDStore"},{"typeNames":["StateT"],"name":"Lake.instMonadStoreStateTRBArrayOfMonad","className":"Lake.MonadDStore"},{"typeNames":["StateRefT'"],"name":"Lake.instMonadStoreStateRefT'RBArrayOfMonadLiftTSTOfMonad","className":"Lake.MonadDStore"},{"typeNames":["Lean.Name","StateT"],"name":"Lake.instMonadStoreNameStateTNameMapOfMonad","className":"Lake.MonadDStore"},{"typeNames":["Lean.Name","StateRefT'"],"name":"Lake.instMonadStoreNameStateRefT'NameMapOfMonadLiftTSTOfMonad","className":"Lake.MonadDStore"},{"typeNames":[],"name":"Lake.instMonadStore1OfOfMonadDStoreOfFamilyOut","className":"Lake.MonadStore1Of"}],"imports":["Lake.Util.DRBMap","Lake.Util.RBArray","Lake.Util.Family","Lake.Util.Store"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Util/StoreInsts.lean#L48-L50","name":"Lake.instMonadStore1OfOfMonadDStoreOfFamilyOut","line":48,"kind":"instance","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStore1OfOfMonadDStoreOfFamilyOut","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStore1OfOfMonadDStoreOfFamilyOut\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStore1OfOfMonadDStoreOfFamilyOut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">κ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lake/Util/Family.html#Lake.FamilyOut\">FamilyOut</a> <span class=\"fn\">β</span> <span class=\"fn\">k</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore1Of\">MonadStore1Of</a> <span class=\"fn\">k</span> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Util/StoreInsts.lean#L44-L46","name":"Lake.instMonadStoreNameStateRefT'NameMapOfMonadLiftTSTOfMonad","line":44,"kind":"instance","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStoreNameStateRefT'NameMapOfMonadLiftTSTOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStoreNameStateRefT'NameMapOfMonadLiftTSTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStoreNameStateRefT'NameMapOfMonadLiftTSTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">MonadStore</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Util/StoreInsts.lean#L40-L42","name":"Lake.instMonadStoreNameStateTNameMapOfMonad","line":40,"kind":"instance","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStoreNameStateTNameMapOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStoreNameStateTNameMapOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStoreNameStateTNameMapOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">MonadStore</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">Lean.NameMap</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Util/StoreInsts.lean#L35-L37","name":"Lake.instMonadStoreStateRefT'RBArrayOfMonadLiftTSTOfMonad","line":35,"kind":"instance","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateRefT'RBArrayOfMonadLiftTSTOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateRefT'RBArrayOfMonadLiftTSTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStoreStateRefT'RBArrayOfMonadLiftTSTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">κ</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">MonadStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">(<a href=\"./Lake/Util/RBArray.html#Lake.RBArray\">RBArray</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Util/StoreInsts.lean#L31-L33","name":"Lake.instMonadStoreStateTRBArrayOfMonad","line":31,"kind":"instance","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateTRBArrayOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateTRBArrayOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStoreStateTRBArrayOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2) → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> (max u_2 u_1)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">κ</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">MonadStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Lake/Util/RBArray.html#Lake.RBArray\">RBArray</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Util/StoreInsts.lean#L27-L29","name":"Lake.instMonadStoreStateRefT'RBMapOfMonadLiftTSTOfMonad","line":27,"kind":"instance","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateRefT'RBMapOfMonadLiftTSTOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateRefT'RBMapOfMonadLiftTSTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStoreStateRefT'RBMapOfMonadLiftTSTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">κ</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">MonadStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">(<a href=\"./Lean/Data/RBMap.html#Lean.RBMap\">Lean.RBMap</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Util/StoreInsts.lean#L23-L25","name":"Lake.instMonadStoreStateTRBMapOfMonad","line":23,"kind":"instance","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateTRBMapOfMonad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadStoreStateTRBMapOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadStoreStateTRBMapOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2) → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> (max u_2 u_1)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">κ</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadStore\">MonadStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Lean/Data/RBMap.html#Lean.RBMap\">Lean.RBMap</a> <span class=\"fn\">κ</span> <span class=\"fn\">α</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Util/StoreInsts.lean#L19-L21","name":"Lake.instMonadDStoreStateRefT'DRBMapOfMonadLiftTSTOfMonadOfEqOfCmpWrt","line":19,"kind":"instance","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadDStoreStateRefT'DRBMapOfMonadLiftTSTOfMonadOfEqOfCmpWrt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadDStoreStateRefT'DRBMapOfMonadLiftTSTOfMonadOfEqOfCmpWrt\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadDStoreStateRefT'DRBMapOfMonadLiftTSTOfMonadOfEqOfCmpWrt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">κ</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmpWrt\">EqOfCmpWrt</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">(<a href=\"./Lake/Util/DRBMap.html#Lake.DRBMap\">DRBMap</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Util/StoreInsts.lean#L15-L17","name":"Lake.instMonadDStoreStateTDRBMapOfMonadOfEqOfCmpWrt","line":15,"kind":"instance","docLink":"./Lake/Util/StoreInsts.html#Lake.instMonadDStoreStateTDRBMapOfMonadOfEqOfCmpWrt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/StoreInsts.html#Lake.instMonadDStoreStateTDRBMapOfMonadOfEqOfCmpWrt\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadDStoreStateTDRBMapOfMonadOfEqOfCmpWrt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2) → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">κ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <a href=\"./foundational_types.html\">Type</a> (max u_2 u_1)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">κ</span> → <span class=\"fn\">κ</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Compare.html#Lake.EqOfCmpWrt\">EqOfCmpWrt</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Store.html#Lake.MonadDStore\">MonadDStore</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Lake/Util/DRBMap.html#Lake.DRBMap\">DRBMap</a> <span class=\"fn\">κ</span> <span class=\"fn\">β</span> <span class=\"fn\">cmp</span>)</span> <span class=\"fn\">m</span>)</span></span></div></div>"}]}