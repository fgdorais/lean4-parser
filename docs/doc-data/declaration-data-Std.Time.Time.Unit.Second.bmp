{"name":"Std.Time.Time.Unit.Second","instances":[{"typeNames":["Std.Time.Second.Ordinal"],"name":"Std.Time.Second.instLEOrdinal","className":"LE"},{"typeNames":["Std.Time.Second.Ordinal"],"name":"Std.Time.Second.instLTOrdinal","className":"LT"},{"typeNames":["Std.Time.Second.Ordinal"],"name":"Std.Time.Second.instReprOrdinal","className":"Repr"},{"typeNames":["Std.Time.Second.Ordinal"],"name":"Std.Time.Second.instToStringOrdinal","className":"ToString"},{"typeNames":["Std.Time.Second.Ordinal"],"name":"Std.Time.Second.instOfNatOrdinal","className":"OfNat"},{"typeNames":["LE.le"],"name":"Std.Time.Second.instDecidableLeOrdinal","className":"Decidable"},{"typeNames":["LT.lt"],"name":"Std.Time.Second.instDecidableLtOrdinal","className":"Decidable"},{"typeNames":["Eq"],"name":"Std.Time.Second.instDecidableEqOrdinal","className":"Decidable"},{"typeNames":["Std.Time.Second.Ordinal"],"name":"Std.Time.Second.instOrdOrdinal","className":"Ord"},{"typeNames":["Std.Time.Second.Ordinal"],"name":"Std.Time.Second.instTransOrdOrdinal","className":"Std.TransCmp"},{"typeNames":["Std.Time.Second.Ordinal"],"name":"Std.Time.Second.instLawfulEqOrdOrdinal","className":"Std.LawfulEqCmp"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instOffsetRepr","className":"Repr"},{"typeNames":["Eq"],"name":"Std.Time.Second.instOffsetDecidableEq","className":"Decidable"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instOffsetInhabited","className":"Inhabited"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instOffsetAdd","className":"Add"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instOffsetSub","className":"Sub"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instOffsetNeg","className":"Neg"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instOffsetLE","className":"LE"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instOffsetLT","className":"LT"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instOffsetToString","className":"ToString"},{"typeNames":["LE.le"],"name":"Std.Time.Second.instDecidableLeOffset","className":"Decidable"},{"typeNames":["LT.lt"],"name":"Std.Time.Second.instDecidableLtOffset","className":"Decidable"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instOfNatOffset","className":"OfNat"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instOrdOffset","className":"Ord"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instTransOrdOffset","className":"Std.TransCmp"},{"typeNames":["Std.Time.Second.Offset"],"name":"Std.Time.Second.instLawfulEqOrdOffset","className":"Std.LawfulEqCmp"}],"imports":["Std.Internal.Rat","Std.Time.Time.Unit.Nanosecond"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L120-L125","name":"Std.Time.Second.Ordinal.toOffset","line":120,"kind":"def","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.toOffset","doc":"Converts an `Ordinal` to an `Second.Offset`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.toOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Ordinal</span>.<span class=\"name\">toOffset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ordinal</span> : <span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L111-L118","name":"Std.Time.Second.Ordinal.ofFin","line":111,"kind":"def","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofFin","doc":"Creates an `Ordinal` from a `Fin`, ensuring the value is within bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Ordinal</span>.<span class=\"name\">ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">leap</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">61</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">60</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L104-L109","name":"Std.Time.Second.Ordinal.ofNat","line":104,"kind":"def","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofNat","doc":"Creates an `Ordinal` from a natural number, ensuring the value is within bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Ordinal</span>.<span class=\"name\">ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">data</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">leap</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">60</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">59</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L97-L102","name":"Std.Time.Second.Ordinal.ofInt","line":97,"kind":"def","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofInt","doc":"Creates an `Ordinal` from an integer, ensuring the value is within bounds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofInt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Ordinal</span>.<span class=\"name\">ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">data</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">data</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.ofNat\">Int.ofNat</a> (<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">leap</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">60</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">59</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L86-L91","name":"Std.Time.Second.Offset.ofInt","line":86,"kind":"def","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset.ofInt","doc":"Creates an `Second.Offset` from an integer.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset.ofInt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L79-L84","name":"Std.Time.Second.Offset.ofNat","line":79,"kind":"def","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset.ofNat","doc":"Creates an `Second.Offset` from a natural number.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset.ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L75-L75","name":"Std.Time.Second.instLawfulEqOrdOffset","line":75,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLawfulEqOrdOffset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLawfulEqOrdOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instLawfulEqOrdOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L73-L73","name":"Std.Time.Second.instTransOrdOffset","line":73,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instTransOrdOffset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instTransOrdOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instTransOrdOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L71-L71","name":"Std.Time.Second.instOrdOffset","line":71,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOrdOffset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOrdOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOrdOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L68-L69","name":"Std.Time.Second.instOfNatOffset","line":68,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOfNatOffset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOfNatOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOfNatOffset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L65-L66","name":"Std.Time.Second.instDecidableLtOffset","line":65,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLtOffset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLtOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableLtOffset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L62-L63","name":"Std.Time.Second.instDecidableLeOffset","line":62,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLeOffset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLeOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableLeOffset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L60-L60","name":"Std.Time.Second.instOffsetToString","line":60,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOffsetToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L60-L60","name":"Std.Time.Second.instOffsetLT","line":60,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetLT\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOffsetLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L60-L60","name":"Std.Time.Second.instOffsetLE","line":60,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetLE\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOffsetLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L60-L60","name":"Std.Time.Second.instOffsetNeg","line":60,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetNeg\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOffsetNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L60-L60","name":"Std.Time.Second.instOffsetSub","line":60,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetSub\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOffsetSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L60-L60","name":"Std.Time.Second.instOffsetAdd","line":60,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetAdd\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOffsetAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L60-L60","name":"Std.Time.Second.instOffsetInhabited","line":60,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOffsetInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L60-L60","name":"Std.Time.Second.instOffsetDecidableEq","line":60,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetDecidableEq\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOffsetDecidableEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L60-L60","name":"Std.Time.Second.instOffsetRepr","line":60,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOffsetRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOffsetRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L56-L60","name":"Std.Time.Second.Offset","line":56,"kind":"def","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset","doc":"`Offset` represents an offset in seconds. It is defined as an `Int`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Offset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L54-L54","name":"Std.Time.Second.instLawfulEqOrdOrdinal","line":54,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLawfulEqOrdOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLawfulEqOrdOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instLawfulEqOrdOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L52-L52","name":"Std.Time.Second.instTransOrdOrdinal","line":52,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instTransOrdOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instTransOrdOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instTransOrdOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Classes/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L50-L50","name":"Std.Time.Second.instOrdOrdinal","line":50,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOrdOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOrdOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOrdOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L48-L48","name":"Std.Time.Second.instDecidableEqOrdinal","line":48,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableEqOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableEqOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableEqOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L45-L46","name":"Std.Time.Second.instDecidableLtOrdinal","line":45,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLtOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLtOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableLtOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L42-L43","name":"Std.Time.Second.instDecidableLeOrdinal","line":42,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLeOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLeOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableLeOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L36-L40","name":"Std.Time.Second.instOfNatOrdinal","line":36,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOfNatOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOfNatOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOfNatOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L33-L34","name":"Std.Time.Second.instToStringOrdinal","line":33,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instToStringOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instToStringOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instToStringOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L30-L31","name":"Std.Time.Second.instReprOrdinal","line":30,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instReprOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instReprOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instReprOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L27-L28","name":"Std.Time.Second.instLTOrdinal","line":27,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLTOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLTOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instLTOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L24-L25","name":"Std.Time.Second.instLEOrdinal","line":24,"kind":"instance","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLEOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLEOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instLEOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Time/Unit/Second.lean#L18-L22","name":"Std.Time.Second.Ordinal","line":18,"kind":"def","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal","doc":"`Ordinal` represents a bounded value for second, which ranges between 0 and 59 or 60. This accounts\nfor potential leap second.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Ordinal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}