{"name":"Batteries.Data.BinomialHeap.Basic","instances":[{"typeNames":["Batteries.BinomialHeap.Imp.HeapNode"],"name":"Batteries.BinomialHeap.Imp.instReprHeapNode","className":"Repr"},{"typeNames":["Batteries.BinomialHeap.Imp.Heap"],"name":"Batteries.BinomialHeap.Imp.instReprHeap","className":"Repr"},{"typeNames":["Batteries.BinomialHeap.Imp.Heap.rankGT"],"name":"Batteries.BinomialHeap.Imp.instDecidableRankGT","className":"Decidable"},{"typeNames":["Batteries.BinomialHeap"],"name":"Batteries.BinomialHeap.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Batteries.BinomialHeap"],"name":"Batteries.BinomialHeap.instInhabited","className":"Inhabited"},{"typeNames":["Batteries.BinomialHeap"],"name":"Batteries.BinomialHeap.instStream","className":"Stream"},{"typeNames":["Batteries.BinomialHeap"],"name":"Batteries.BinomialHeap.instForIn","className":"ForIn"}],"imports":["Init","Batteries.Classes.Order","Batteries.Control.ForInStep.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L586-L587","name":"Batteries.BinomialHeap.toArrayUnordered","line":586,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toArrayUnordered","doc":"`O(n)`. Convert the heap to an array in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toArrayUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toArrayUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L583-L584","name":"Batteries.BinomialHeap.toListUnordered","line":583,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toListUnordered","doc":"`O(n)`. Convert the heap to a list in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toListUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toListUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L580-L581","name":"Batteries.BinomialHeap.toArray","line":580,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toArray","doc":"`O(n log n)`. Convert the heap to an array in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L577-L578","name":"Batteries.BinomialHeap.toList","line":577,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toList","doc":"`O(n log n)`. Convert the heap to a list in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L571-L575","name":"Batteries.BinomialHeap.fold","line":571,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.fold","doc":"`O(n log n)`. Fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.fold\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L564-L569","name":"Batteries.BinomialHeap.foldM","line":564,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.foldM","doc":"`O(n log n)`. Monadic fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.foldM\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L561-L562","name":"Batteries.BinomialHeap.tail","line":561,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.tail","doc":"`O(log n)`. Removes the smallest element from the heap, if possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L555-L559","name":"Batteries.BinomialHeap.tail?","line":555,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.tail?","doc":"`O(log n)`. Removes the smallest element from the heap, or `none` if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L552-L553","name":"Batteries.BinomialHeap.headI","line":552,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.headI","doc":"`O(log n)`. Returns the smallest element in the heap, or `default` if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.headI\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">headI</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L549-L550","name":"Batteries.BinomialHeap.head!","line":549,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.head!","doc":"`O(log n)`. Returns the smallest element in the heap, or panics if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.head!\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">head!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L546-L547","name":"Batteries.BinomialHeap.head?","line":546,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.head?","doc":"`O(log n)`. Returns the smallest element in the heap, or `none` if the heap is empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.head?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L544-L544","name":"Batteries.BinomialHeap.instForIn","line":544,"kind":"instance","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instForIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instForIn\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instForIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L537-L542","name":"Batteries.BinomialHeap.forIn","line":537,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.forIn","doc":"`O(n log n)`. Implementation of `for x in (b : BinomialHeap α le) ...` notation,\nwhich iterates over the elements in the heap in increasing order.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.forIn\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L535-L535","name":"Batteries.BinomialHeap.instStream","line":535,"kind":"instance","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instStream","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instStream\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instStream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Stream.html#Stream\">Stream</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L529-L533","name":"Batteries.BinomialHeap.deleteMin","line":529,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.deleteMin","doc":"`O(log n)`. Remove and return the minimum element from the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L526-L527","name":"Batteries.BinomialHeap.ofArray","line":526,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.ofArray","doc":"`O(n log n)`. Construct a heap from a list by inserting all the elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.ofArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">ofArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L523-L524","name":"Batteries.BinomialHeap.ofList","line":523,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.ofList","doc":"`O(n log n)`. Construct a heap from a list by inserting all the elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.ofList\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L520-L521","name":"Batteries.BinomialHeap.insert","line":520,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.insert","doc":"`O(log n)`. Add element `a` to the given heap `h`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.insert\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L516-L518","name":"Batteries.BinomialHeap.merge","line":516,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.merge","doc":"`O(log n)`. Merge the contents of two heaps. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L513-L514","name":"Batteries.BinomialHeap.singleton","line":513,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.singleton","doc":"`O(1)`. Make a new heap containing `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L510-L511","name":"Batteries.BinomialHeap.size","line":510,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.size","doc":"`O(log n)`. The number of elements in the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L507-L508","name":"Batteries.BinomialHeap.isEmpty","line":507,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.isEmpty","doc":"`O(1)`. Is the heap empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.isEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L505-L505","name":"Batteries.BinomialHeap.instInhabited","line":505,"kind":"instance","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instInhabited\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L504-L504","name":"Batteries.BinomialHeap.instEmptyCollection","line":504,"kind":"instance","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.instEmptyCollection\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L501-L502","name":"Batteries.BinomialHeap.empty","line":501,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.empty","doc":"`O(1)`. Make a new empty binomial heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.empty\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L494-L496","name":"Batteries.mkBinomialHeap","line":494,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.mkBinomialHeap","doc":"`O(1)`. Make a new empty binomial heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.mkBinomialHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">mkBinomialHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\">BinomialHeap</a> <span class=\"fn\">α</span> <span class=\"fn\">le</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L477-L492","name":"Batteries.BinomialHeap","line":477,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap","doc":"A [binomial heap](https://en.wikipedia.org/wiki/Binomial_heap) is a data structure which supports\nthe following primary operations:\n\n* `insert : α → BinomialHeap α → BinomialHeap α`: add an element to the heap\n* `deleteMin : BinomialHeap α → Option (α × BinomialHeap α)`:\n  remove the minimum element from the heap\n* `merge : BinomialHeap α → BinomialHeap α → BinomialHeap α`: combine two heaps\n\nThe first two operations are known as a \"priority queue\", so this could be called\na \"mergeable priority queue\". The standard choice for a priority queue is a binary heap,\nwhich supports `insert` and `deleteMin` in `O(log n)`, but `merge` is `O(n)`.\nWith a `BinomialHeap`, all three operations are `O(log n)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L466-L470","name":"Batteries.BinomialHeap.Imp.Heap.WF.tail","line":466,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwf</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail\">Heap.tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L461-L464","name":"Batteries.BinomialHeap.Imp.Heap.WF.tail?","line":461,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.tail?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwf</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail?\">Heap.tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">tl</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">tl</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L449-L459","name":"Batteries.BinomialHeap.Imp.Heap.WF.deleteMin","line":449,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.deleteMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.deleteMin\">Heap.deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">s'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L437-L447","name":"Batteries.BinomialHeap.Imp.Heap.WF.findMin","line":437,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.findMin","doc":"The conditions under which `findMin` is well-formed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.findMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">findMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\">k</span> <span class=\"fn\">s</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">FindMin.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.findMin\">Heap.findMin</a> <span class=\"fn\">le</span> <span class=\"fn\">k</span> <span class=\"fn\">s</span> <span class=\"fn\">res</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L435-L435","name":"Batteries.BinomialHeap.Imp.FindMin.WF.next","line":435,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.next","doc":"`next` is a binomial heap with ranks above `rank + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.next\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> (<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.rank\">rank</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.next\">next</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L433-L433","name":"Batteries.BinomialHeap.Imp.FindMin.WF.node","line":433,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.node","doc":"`node` is a well formed forest of rank `rank` with `val` at the root. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.node\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\">HeapNode.WF</a> <span class=\"fn\">le</span> <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.val\">val</a></span> <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.node\">node</a></span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.rank\">rank</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L431-L431","name":"Batteries.BinomialHeap.Imp.FindMin.WF.before","line":431,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.before","doc":"`before` is a difference list which can be appended to a binomial heap\nwith ranks at least `rank` to produce another well formed heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.before\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">before</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.rank\">rank</a></span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.before\">before</a></span> <span class=\"fn\">s</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L428-L428","name":"Batteries.BinomialHeap.Imp.FindMin.WF.rank","line":428,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.rank","doc":"The rank of the minimum element "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.rank\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">rank</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L426-L426","name":"Batteries.BinomialHeap.Imp.FindMin.WF.mk","line":426,"kind":"ctor","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rank</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">before</span> : <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">rank</span> <span class=\"fn\">s</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.before\">before</a></span> <span class=\"fn\">s</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">node</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\">HeapNode.WF</a> <span class=\"fn\">le</span> <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.val\">val</a></span> <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.node\">node</a></span> <span class=\"fn\">rank</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> (<span class=\"fn\">rank</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.next\">next</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">res</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L421-L435","name":"Batteries.BinomialHeap.Imp.FindMin.WF","line":421,"kind":"structure","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF","doc":"The well formedness predicate for a `FindMin` value.\nThis is not actually a predicate, as it contains an additional data value\n`rank` corresponding to the rank of the returned node, which is omitted from `findMin`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L416-L419","name":"Batteries.BinomialHeap.Imp.HeapNode.WF.toHeap.go","line":416,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF.toHeap.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF.toHeap.go\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">toHeap</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rank\">rank</a></span> <span class=\"fn\">res</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap.go\">HeapNode.toHeap.go</a> <span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rank\">rank</a></span> <span class=\"fn\">res</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L413-L419","name":"Batteries.BinomialHeap.Imp.HeapNode.WF.toHeap","line":413,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF.toHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF.toHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">toHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">Heap.WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap\">toHeap</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L409-L411","name":"Batteries.BinomialHeap.Imp.HeapNode.WF.rank_eq","line":409,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF.rank_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF.rank_eq\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span>.<span class=\"name\">rank_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rank\">rank</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L406-L407","name":"Batteries.BinomialHeap.Imp.Heap.WF.merge","line":406,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.merge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge\">Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L370-L404","name":"Batteries.BinomialHeap.Imp.Heap.WF.merge'","line":370,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.merge'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.merge'\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">merge'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge\">Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">((<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge\">Heap.merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L365-L368","name":"Batteries.BinomialHeap.Imp.Heap.WF.rankGT","line":365,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.rankGT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.rankGT\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">rankGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lt</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">lt</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L360-L363","name":"Batteries.BinomialHeap.Imp.Heap.rankGT.of_le","line":360,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT.of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT.of_le\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">rankGT</span>.<span class=\"name\">of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">n'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L355-L358","name":"Batteries.BinomialHeap.Imp.Heap.WF.of_le","line":355,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.of_le\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n'</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L350-L353","name":"Batteries.BinomialHeap.Imp.Heap.WF.of_rankGT","line":350,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.of_rankGT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.of_rankGT\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">of_rankGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n'</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlt</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n'</span> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L348-L348","name":"Batteries.BinomialHeap.Imp.Heap.WF.singleton","line":348,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">0</span> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.singleton\">Heap.singleton</a> <span class=\"fn\">a</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L346-L346","name":"Batteries.BinomialHeap.Imp.Heap.WF.nil","line":346,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\">WF</a> <span class=\"fn\">le</span> <span class=\"fn\">n</span> <a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.nil\">Heap.nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L336-L344","name":"Batteries.BinomialHeap.Imp.Heap.WF","line":336,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF","doc":"The well formedness predicate for a binomial heap.\nIt asserts that:\n* It consists of a list of well formed trees with the specified ranks\n* The ranks are in strictly increasing order, and all are at least `n`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L324-L334","name":"Batteries.BinomialHeap.Imp.HeapNode.WF","line":324,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF","doc":"The well formedness predicate for a heap node.\nIt asserts that:\n* If `a` is added at the top to make the forest into a tree, the resulting tree\n  is a `le`-min-heap (if `le` is well-behaved)\n* When interpreting `child` and `sibling` as left and right children of a binary tree,\n  it is a perfect binary tree with depth `r`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.WF\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L320-L322","name":"Batteries.BinomialHeap.Imp.Heap.toArrayUnordered","line":320,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toArrayUnordered","doc":"`O(n)`. Convert the heap to an array in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toArrayUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toArrayUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L316-L318","name":"Batteries.BinomialHeap.Imp.Heap.toListUnordered","line":316,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toListUnordered","doc":"`O(n)`. Convert the heap to a list in arbitrary order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toListUnordered\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toListUnordered</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L312-L314","name":"Batteries.BinomialHeap.Imp.Heap.foldTree","line":312,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldTree","doc":"`O(n)`. Fold a function over the tree structure to accumulate a value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldTree\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldTree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">join</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L305-L308","name":"Batteries.BinomialHeap.Imp.Heap.foldTreeM","line":305,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldTreeM","doc":"`O(n)`. Fold a monadic function over the tree structure to accumulate a value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldTreeM\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldTreeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">join</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L300-L303","name":"Batteries.BinomialHeap.Imp.HeapNode.foldTreeM","line":300,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.foldTreeM","doc":"`O(n)`. Fold a monadic function over the tree structure to accumulate a value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.foldTreeM\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">foldTreeM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">join</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L294-L295","name":"Batteries.BinomialHeap.Imp.Heap.toList","line":294,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toList","doc":"`O(n log n)`. Convert the heap to a list in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toList\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L291-L292","name":"Batteries.BinomialHeap.Imp.Heap.toArray","line":291,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toArray","doc":"`O(n log n)`. Convert the heap to an array in increasing order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.toArray\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L284-L289","name":"Batteries.BinomialHeap.Imp.Heap.fold","line":284,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.fold","doc":"`O(n log n)`. Fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.fold\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L271-L282","name":"Batteries.BinomialHeap.Imp.Heap.foldM","line":271,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldM","doc":"`O(n log n)`. Monadic fold over the elements of a heap in increasing order,\nby repeatedly pulling the minimum element out of the heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.foldM\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L265-L269","name":"Batteries.BinomialHeap.Imp.Heap.realSize_tail","line":265,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail\">tail</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L259-L263","name":"Batteries.BinomialHeap.Imp.Heap.realSize_tail?","line":259,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_tail?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail?\">tail?</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">s'</span></span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L247-L257","name":"Batteries.BinomialHeap.Imp.Heap.realSize_deleteMin","line":247,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_deleteMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s' </span><span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.deleteMin\">deleteMin</a> <span class=\"fn\">le</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s'</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L243-L245","name":"Batteries.BinomialHeap.Imp.HeapNode.realSize_toHeap.go","line":243,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize_toHeap.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize_toHeap.go\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">realSize_toHeap</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap.go\">toHeap.go</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">res</span>)</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">res</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L242-L245","name":"Batteries.BinomialHeap.Imp.HeapNode.realSize_toHeap","line":242,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize_toHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize_toHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">realSize_toHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap\">toHeap</a></span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize\">realSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L205-L221","name":"Batteries.BinomialHeap.Imp.Heap.realSize_merge","line":205,"kind":"theorem","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_merge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize_merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize_merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge\">merge</a> <span class=\"fn\">le</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span>)</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\">realSize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L202-L203","name":"Batteries.BinomialHeap.Imp.Heap.tail","line":202,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail","doc":"`O(log n)`. Remove the minimum element of the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L198-L200","name":"Batteries.BinomialHeap.Imp.Heap.tail?","line":198,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail?","doc":"`O(log n)`. Get the tail of the binomial heap after removing the minimum element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.tail?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">tail?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L191-L196","name":"Batteries.BinomialHeap.Imp.Heap.deleteMin","line":191,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.deleteMin","doc":"`O(log n)`. Find and remove the the minimum element from the binomial heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.deleteMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">deleteMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L178-L189","name":"Batteries.BinomialHeap.Imp.Heap.findMin","line":178,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.findMin","doc":"`O(log n)`. Find the minimum element, and return a data structure `FindMin` with information\nneeded to reconstruct the rest of the binomial heap.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.findMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">findMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L176-L176","name":"Batteries.BinomialHeap.Imp.FindMin.next","line":176,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.next","doc":"The forest after the minimum element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.next\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L174-L174","name":"Batteries.BinomialHeap.Imp.FindMin.node","line":174,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.node","doc":"The children of the minimum element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.node\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L172-L172","name":"Batteries.BinomialHeap.Imp.FindMin.val","line":172,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.val","doc":"The minimum element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.val\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L170-L170","name":"Batteries.BinomialHeap.Imp.FindMin.before","line":170,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.before","doc":"The list of elements prior to the minimum element, encoded as a \"difference list\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.before\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">before</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L168-L168","name":"Batteries.BinomialHeap.Imp.FindMin.mk","line":168,"kind":"ctor","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin.mk\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">before</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">node</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\">FindMin</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L164-L176","name":"Batteries.BinomialHeap.Imp.FindMin","line":164,"kind":"structure","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin","doc":"The return type of `FindMin`, which encodes various quantities needed to\nreconstruct the tree in `deleteMin`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.FindMin\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">FindMin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L159-L162","name":"Batteries.BinomialHeap.Imp.Heap.head?","line":159,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.head?","doc":"`O(log n)`. Get the smallest element in the heap, if it has an element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.head?\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">head?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L154-L157","name":"Batteries.BinomialHeap.Imp.Heap.headD","line":154,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.headD","doc":"`O(log n)`. Get the smallest element in the heap, including the passed in value `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.headD\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">headD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L150-L152","name":"Batteries.BinomialHeap.Imp.HeapNode.toHeap.go","line":150,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap.go","doc":"Computes `s.toHeap ++ res` tail-recursively, assuming `n = s.rank`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap.go\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">toHeap</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L144-L152","name":"Batteries.BinomialHeap.Imp.HeapNode.toHeap","line":144,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap","doc":"`O(log n)`. Convert a `HeapNode` to a `Heap` by reversing the order of the nodes\nalong the `sibling` spine.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.toHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">toHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L123-L142","name":"Batteries.BinomialHeap.Imp.Heap.merge","line":123,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge","doc":"Merge two forests of binomial trees. The forests are assumed to be ordered\nby rank and `merge` maintains this invariant.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.merge\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">merge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L116-L121","name":"Batteries.BinomialHeap.Imp.combine","line":116,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.combine","doc":"`O(1)`. Auxiliary for `Heap.merge`: combines two heap nodes of the same rank\ninto one with the next larger rank.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.combine\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">le</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁ </span><span class=\"fn\">n₂</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L111-L114","name":"Batteries.BinomialHeap.Imp.Heap.length","line":111,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.length","doc":"`O(log n)`. The number of trees in the forest. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.length\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L106-L109","name":"Batteries.BinomialHeap.Imp.instDecidableRankGT","line":106,"kind":"instance","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instDecidableRankGT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instDecidableRankGT\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instDecidableRankGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\">rankGT</a></span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L101-L104","name":"Batteries.BinomialHeap.Imp.Heap.rankGT","line":101,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT","doc":"`O(1)`. Auxiliary for `Heap.merge`: Is the minimum rank in `Heap` strictly larger than `n`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.rankGT\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">rankGT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L98-L99","name":"Batteries.BinomialHeap.Imp.Heap.singleton","line":98,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.singleton","doc":"`O(1)`. The heap containing a single value `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L93-L96","name":"Batteries.BinomialHeap.Imp.Heap.isEmpty","line":93,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.isEmpty","doc":"`O(1)`. Is the heap empty? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.isEmpty\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L88-L91","name":"Batteries.BinomialHeap.Imp.Heap.size","line":88,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.size","doc":"`O(log n)`. The number of elements in the heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.size\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L79-L86","name":"Batteries.BinomialHeap.Imp.Heap.realSize","line":79,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize","doc":"`O(n)`. The \"real size\" of the heap, counting up how many values of type `α` are stored.\nThis is intended mainly for specification purposes.\nPrefer `Heap.size`, which is the same for well formed heaps.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.realSize\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">realSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L77-L77","name":"Batteries.BinomialHeap.Imp.instReprHeap","line":77,"kind":"instance","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instReprHeap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L74-L76","name":"Batteries.BinomialHeap.Imp.Heap.cons","line":74,"kind":"ctor","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.cons","doc":"A cons node contains a tree of root `val`, children `node` and rank `rank`,\nand then `next` which is the rest of the forest. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.cons\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rank</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">node</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L72-L73","name":"Batteries.BinomialHeap.Imp.Heap.nil","line":72,"kind":"ctor","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.nil","doc":"An empty heap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\">Heap</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L67-L77","name":"Batteries.BinomialHeap.Imp.Heap","line":67,"kind":"inductive","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap","doc":"A `Heap` is the top level structure in a binomial heap.\nIt consists of a forest of `HeapNode`s with strictly increasing ranks.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.Heap\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">Heap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L45-L51","name":"Batteries.BinomialHeap.Imp.HeapNode.rank","line":45,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rank","doc":"`O(log n)`. The rank, or the number of trees in the forest.\nIt is also the depth of the forest.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.rank\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">rank</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L42-L43","name":"Batteries.BinomialHeap.Imp.HeapNode.singleton","line":42,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.singleton","doc":"A node containing a single element `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.singleton\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L33-L40","name":"Batteries.BinomialHeap.Imp.HeapNode.realSize","line":33,"kind":"def","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize","doc":"The \"real size\" of the node, counting up how many values of type `α` are stored.\nThis is `O(n)` and is intended mainly for specification purposes.\nFor a well formed `HeapNode` the size is always `2^n - 1` where `n` is the depth.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.realSize\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">realSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L31-L31","name":"Batteries.BinomialHeap.Imp.instReprHeapNode","line":31,"kind":"instance","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeapNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.instReprHeapNode\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">instReprHeapNode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L27-L30","name":"Batteries.BinomialHeap.Imp.HeapNode.node","line":27,"kind":"ctor","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.node","doc":"A forest of rank `r + 1` consists of a root `a`,\na forest `child` of rank `r` elements greater than `a`,\nand another forest `sibling` of rank `r`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.node\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">child </span><span class=\"fn\">sibling</span> : <span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L25-L26","name":"Batteries.BinomialHeap.Imp.HeapNode.nil","line":25,"kind":"ctor","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.nil","doc":"An empty forest, which has depth `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode.nil\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\">HeapNode</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/batteries/blob/78e1181c4752c7e10874d2ed5a6a15063f4a35b6/Batteries/Data/BinomialHeap/Basic.lean#L13-L31","name":"Batteries.BinomialHeap.Imp.HeapNode","line":13,"kind":"inductive","docLink":"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode","doc":"A `HeapNode` is one of the internal nodes of the binomial heap.\nIt is always a perfect binary tree, with the depth of the tree stored in the `Heap`.\nHowever the interpretation of the two pointers is different: we view the `child`\nas going to the first child of this node, and `sibling` goes to the next sibling\nof this tree. So it actually encodes a forest where each node has children\n`node.child`, `node.child.sibling`, `node.child.sibling.sibling`, etc.\n\nEach edge in this forest denotes a `le a b` relation that has been checked, so\nthe root is smaller than everything else under it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Batteries/Data/BinomialHeap/Basic.html#Batteries.BinomialHeap.Imp.HeapNode\"><span class=\"name\">Batteries</span>.<span class=\"name\">BinomialHeap</span>.<span class=\"name\">Imp</span>.<span class=\"name\">HeapNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}