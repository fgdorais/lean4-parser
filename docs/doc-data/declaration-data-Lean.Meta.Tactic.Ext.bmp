{"name":"Lean.Meta.Tactic.Ext","instances":[{"typeNames":["Lean.Meta.Ext.ExtTheorem"],"name":"Lean.Meta.Ext.instInhabitedExtTheorem","className":"Inhabited"},{"typeNames":["Lean.Meta.Ext.ExtTheorem"],"name":"Lean.Meta.Ext.instReprExtTheorem","className":"Repr"},{"typeNames":["Lean.Meta.Ext.ExtTheorem"],"name":"Lean.Meta.Ext.instBEqExtTheorem","className":"BEq"},{"typeNames":["Lean.Meta.Ext.ExtTheorem"],"name":"Lean.Meta.Ext.instHashableExtTheorem","className":"Hashable"},{"typeNames":["Lean.Meta.Ext.ExtTheorems"],"name":"Lean.Meta.Ext.instInhabitedExtTheorems","className":"Inhabited"}],"imports":["Init.Data.Array.InsertionSort","Lean.Meta.DiscrTree"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L74-L83","name":"Lean.Meta.Ext.ExtTheorems.erase","line":74,"kind":"def","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.erase","doc":"Erases a name marked as a `ext` attribute.\nCheck that it does in fact have the `ext` attribute by making sure it names a `ExtTheorem`\nfound somewhere in the state's tree, and is not erased.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.erase\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\">ExtTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\">ExtTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L69-L72","name":"Lean.Meta.Ext.isExtTheorem","line":69,"kind":"def","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.isExtTheorem","doc":"Returns `true` if `declName` is tagged with `[ext]` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.isExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">isExtTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L65-L67","name":"Lean.Meta.Ext.ExtTheorems.contains","line":65,"kind":"def","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.contains","doc":"Returns `true` if `d` contains theorem with name `declName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\">ExtTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L56-L63","name":"Lean.Meta.Ext.ExtTheorems.eraseCore","line":56,"kind":"def","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.eraseCore","doc":"Erases a name marked `ext` by adding it to the state's `erased` field and\nremoving it from the state's list of `Entry`s.\n\nThis is triggered by `attribute [-ext] name`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.eraseCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">eraseCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\">ExtTheorems</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\">ExtTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L46-L54","name":"Lean.Meta.Ext.getExtTheorems","line":46,"kind":"def","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.getExtTheorems","doc":"Gets the list of `@[ext]` theorems corresponding to the key `ty`,\nordered from high priority to low. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.getExtTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">getExtTheorems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L37-L44","name":"Lean.Meta.Ext.extExtension","line":37,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.extExtension","doc":"The environment extension to track `@[ext]` theorems. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.extExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">extExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ScopedEnvExtension.html#Lean.SimpleScopedEnvExtension\">SimpleScopedEnvExtension</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\">ExtTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L35-L35","name":"Lean.Meta.Ext.instInhabitedExtTheorems","line":35,"kind":"instance","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.instInhabitedExtTheorems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.instInhabitedExtTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instInhabitedExtTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\">ExtTheorems</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L34-L34","name":"Lean.Meta.Ext.ExtTheorems.erased","line":34,"kind":"def","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.erased","doc":"Erased `ext`s via `attribute [-ext]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.erased\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">erased</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\">ExtTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L32-L32","name":"Lean.Meta.Ext.ExtTheorems.tree","line":32,"kind":"def","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.tree","doc":"The tree of `ext` extensions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.tree\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">tree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\">ExtTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">DiscrTree</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L30-L30","name":"Lean.Meta.Ext.ExtTheorems.mk","line":30,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tree</span> : <span class=\"fn\"><a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree\">DiscrTree</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">erased</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">PHashSet</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\">ExtTheorems</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L29-L35","name":"Lean.Meta.Ext.ExtTheorems","line":29,"kind":"structure","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems","doc":"The state of the `ext` extension environment "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L27-L27","name":"Lean.Meta.Ext.instHashableExtTheorem","line":27,"kind":"instance","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.instHashableExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.instHashableExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instHashableExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L27-L27","name":"Lean.Meta.Ext.instBEqExtTheorem","line":27,"kind":"instance","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.instBEqExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.instBEqExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instBEqExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L27-L27","name":"Lean.Meta.Ext.instReprExtTheorem","line":27,"kind":"instance","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.instReprExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.instReprExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instReprExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L27-L27","name":"Lean.Meta.Ext.instInhabitedExtTheorem","line":27,"kind":"instance","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.instInhabitedExtTheorem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.instInhabitedExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">instInhabitedExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L26-L26","name":"Lean.Meta.Ext.ExtTheorem.keys","line":26,"kind":"def","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem.keys","doc":"Key in the discrimination tree,\nfor the type in which the extensionality theorem holds.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem.keys\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">keys</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">DiscrTree.Key</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L21-L21","name":"Lean.Meta.Ext.ExtTheorem.priority","line":21,"kind":"def","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem.priority","doc":"Priority of the extensionality theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem.priority\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">priority</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L19-L19","name":"Lean.Meta.Ext.ExtTheorem.declName","line":19,"kind":"def","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem.declName","doc":"Declaration name of the extensionality theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L17-L17","name":"Lean.Meta.Ext.ExtTheorem.mk","line":17,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">priority</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">keys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/DiscrTreeTypes.html#Lean.Meta.DiscrTree.Key\">DiscrTree.Key</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\">ExtTheorem</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Ext.lean#L16-L27","name":"Lean.Meta.Ext.ExtTheorem","line":16,"kind":"structure","docLink":"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem","doc":"Information about an extensionality theorem, stored in the environment extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Ext.html#Lean.Meta.Ext.ExtTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Ext</span>.<span class=\"name\">ExtTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}