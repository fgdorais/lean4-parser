{"name":"Lean.Elab.Calc","instances":[{"typeNames":["Lean.Elab.Term.CalcStepView"],"name":"Lean.Elab.Term.instInhabitedCalcStepView","className":"Inhabited"}],"imports":["Lean.Elab.App"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L163-L172","name":"Lean.Elab.Term.elabCalc","line":163,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.elabCalc","doc":"Elaborator for the `calc` term mode variant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.elabCalc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabCalc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L127-L149","name":"Lean.Elab.Term.throwCalcFailure","line":127,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.throwCalcFailure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.throwCalcFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">throwCalcFailure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType </span><span class=\"fn\">result</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L100-L125","name":"Lean.Elab.Term.elabCalcSteps","line":100,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.elabCalcSteps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.elabCalcSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabCalcSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L88-L98","name":"Lean.Elab.Term.mkCalcStepViews","line":88,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcStepViews","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcStepViews\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkCalcStepViews</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.calcSteps</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L81-L86","name":"Lean.Elab.Term.mkCalcFirstStepView","line":81,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcFirstStepView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcFirstStepView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkCalcFirstStepView</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step0</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.calcFirstStep</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L79-L79","name":"Lean.Elab.Term.instInhabitedCalcStepView","line":79,"kind":"instance","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.instInhabitedCalcStepView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.instInhabitedCalcStepView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">instInhabitedCalcStepView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L78-L78","name":"Lean.Elab.Term.CalcStepView.proof","line":78,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.proof","doc":"A proof of `term` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CalcStepView</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L76-L76","name":"Lean.Elab.Term.CalcStepView.term","line":76,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.term","doc":"A relation term like `a ≤ b` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CalcStepView</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L74-L74","name":"Lean.Elab.Term.CalcStepView.ref","line":74,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CalcStepView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L73-L73","name":"Lean.Elab.Term.CalcStepView.mk","line":73,"kind":"ctor","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CalcStepView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term </span><span class=\"fn\">proof</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\">CalcStepView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L72-L79","name":"Lean.Elab.Term.CalcStepView","line":72,"kind":"structure","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView","doc":"View of a `calcStep`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.CalcStepView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CalcStepView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L63-L70","name":"Lean.Elab.Term.annotateFirstHoleWithType.go","line":63,"kind":"opaque","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.annotateFirstHoleWithType.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.annotateFirstHoleWithType.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">annotateFirstHoleWithType</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L48-L70","name":"Lean.Elab.Term.annotateFirstHoleWithType","line":48,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.annotateFirstHoleWithType","doc":"Adds a type annotation to a hole that occurs immediately at the beginning of the term.\nThis is so that coercions can trigger when elaborating the term.\nSee https://github.com/leanprover/lean4/issues/2040 for further rationale.\n\n- `_ < 3` is annotated\n- `(_) < 3` is not, because it occurs after an atom\n- in `_ < _` only the first one is annotated\n- `_ + 2 < 3` is annotated (not the best heuristic, ideally we'd like to annotate `_ + 2`)\n- `lt _ 3` is not, because it occurs after an identifier\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.annotateFirstHoleWithType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">annotateFirstHoleWithType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L29-L46","name":"Lean.Elab.Term.mkCalcTrans","line":29,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcTrans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.mkCalcTrans\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">mkCalcTrans</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result </span><span class=\"fn\">resultType </span><span class=\"fn\">step </span><span class=\"fn\">stepType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Calc.lean#L12-L21","name":"Lean.Elab.Term.getCalcRelation?","line":12,"kind":"def","docLink":"./Lean/Elab/Calc.html#Lean.Elab.Term.getCalcRelation?","doc":"Decompose `e` into `(r, a, b)`.\n\nRemark: it assumes the last two arguments are explicit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Calc.html#Lean.Elab.Term.getCalcRelation?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">getCalcRelation?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>"}]}