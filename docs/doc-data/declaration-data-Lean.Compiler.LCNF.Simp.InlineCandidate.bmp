{"name":"Lean.Compiler.LCNF.Simp.InlineCandidate","instances":[],"imports":["Lean.Compiler.LCNF.Simp.SimpM"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L32-L107","name":"Lean.Compiler.LCNF.Simp.inlineCandidate?","line":32,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.inlineCandidate?","doc":"Return `some info` if `e` should be inlined.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.inlineCandidate?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">inlineCandidate?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/SimpM.html#Lean.Compiler.LCNF.Simp.SimpM\">SimpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">InlineCandidateInfo</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L28-L30","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.arity","line":28,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.arity","doc":"The arity (aka number of parameters) of the function to be inlined. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.arity\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">arity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">InlineCandidateInfo</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L26-L26","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.recursive","line":26,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.recursive","doc":"`recursive = true` if the declaration being inline is in a mutually recursive block. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.recursive\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">recursive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L24-L24","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.ifReduce","line":24,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.ifReduce","doc":"`ifReduce = true` if the declaration being inlined was tagged with `inline_if_reduce`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.ifReduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">ifReduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L22-L22","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.args","line":22,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.args","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L21-L21","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.fType","line":21,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.fType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.fType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">fType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L20-L20","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.value","line":20,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.value","doc":"Value (lambda expression) of the function to be inlined. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L18-L18","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.params","line":18,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.params","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L17-L17","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.isLocal","line":17,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.isLocal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.isLocal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">isLocal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">InlineCandidateInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L16-L16","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo.mk","line":16,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLocal</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ifReduce </span><span class=\"fn\">recursive</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\">InlineCandidateInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/InlineCandidate.lean#L12-L26","name":"Lean.Compiler.LCNF.Simp.InlineCandidateInfo","line":12,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo","doc":"Result of `inlineCandidate?`.\nIt contains information for inlining local and global functions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/InlineCandidate.html#Lean.Compiler.LCNF.Simp.InlineCandidateInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">InlineCandidateInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}