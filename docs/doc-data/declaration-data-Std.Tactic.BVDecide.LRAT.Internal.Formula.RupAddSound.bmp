{"name":"Std.Tactic.BVDecide.LRAT.Internal.Formula.RupAddSound","instances":[],"imports":["Std.Tactic.BVDecide.LRAT.Internal.Formula.RupAddResult"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L805-L830","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.rupAdd_sound","line":805,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.rupAdd_sound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.rupAdd_sound\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">rupAdd_sound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rupHints</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f_readyForRupAdd</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Lemmas.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReadyForRupAdd\">ReadyForRupAdd</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rupAddSuccess</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.performRupAdd\">performRupAdd</a></span> <span class=\"fn\">c</span> <span class=\"fn\">rupHints</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">f'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Liff\">Liff</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">f'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L789-L803","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.safe_insert_of_performRupCheck_insertRup","line":789,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.safe_insert_of_performRupCheck_insertRup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.safe_insert_of_performRupCheck_insertRup\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">safe_insert_of_performRupCheck_insertRup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f_readyForRupAdd</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Lemmas.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReadyForRupAdd\">ReadyForRupAdd</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rupHints</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertRupUnits\">insertRupUnits</a></span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause.negate\">negate</a></span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.performRupCheck\">performRupCheck</a></span> <span class=\"fn\">rupHints</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> â†’ <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Limplies\">Limplies</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insert\">insert</a></span> <span class=\"fn\">c</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L723-L787","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.sat_of_confirmRupHint_insertRup_fold","line":723,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.sat_of_confirmRupHint_insertRup_fold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.sat_of_confirmRupHint_insertRup_fold\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">sat_of_confirmRupHint_insertRup_fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f_readyForRupAdd</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Lemmas.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReadyForRupAdd\">ReadyForRupAdd</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rupHints</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span></span> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">fc</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertRupUnits\">insertRupUnits</a></span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause.negate\">negate</a></span></span>;\n<span class=\"fn\">let <span class=\"fn\">confirmRupHint_fold_res</span> :=\n  <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.foldl\">Array.foldl</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint\">confirmRupHint</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fc</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clauses\">clauses</a></span>)</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fc</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.assignments\">assignments</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">rupHints</span></span>;\n<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">confirmRupHint_fold_res</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> â†’ <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L633-L721","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint_preserves_motive","line":633,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint_preserves_motive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint_preserves_motive\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">confirmRupHint_preserves_motive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rupHints</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">rupHints</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ConfirmRupHintFoldEntailsMotive\">ConfirmRupHintFoldEntailsMotive</a></span> <span class=\"fn\">(â†‘<span class=\"fn\">idx</span>)</span> <span class=\"fn\">acc</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ConfirmRupHintFoldEntailsMotive\">ConfirmRupHintFoldEntailsMotive</a></span> (<span class=\"fn\">â†‘<span class=\"fn\">idx</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.confirmRupHint\">confirmRupHint</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.clauses\">clauses</a></span> <span class=\"fn\">acc</span> <span class=\"fn\">rupHints</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L628-L631","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.limplies_of_reducedToUnit","line":628,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.limplies_of_reducedToUnit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.limplies_of_reducedToUnit\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">limplies_of_reducedToUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause.reduce\">reduce</a></span> <span class=\"fn\">assignment</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.ReduceResult.reducedToUnit\">ReduceResult.reducedToUnit</a> <span class=\"fn\">l</span></span> â†’\n  <span class=\"fn\">âˆ€ (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span></span> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">assignment</span></span> â†’ <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span> â†’ <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L623-L626","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.incompatible_of_reducedToEmpty","line":623,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.incompatible_of_reducedToEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.incompatible_of_reducedToEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">incompatible_of_reducedToEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause.reduce\">reduce</a></span> <span class=\"fn\">assignment</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.ReduceResult.reducedToEmpty\">ReduceResult.reducedToEmpty</a> â†’ <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Incompatible\">Incompatible</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">c</span> <span class=\"fn\">assignment</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L548-L621","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.reduce_postcondition","line":548,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.reduce_postcondition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.reduce_postcondition\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">reduce_postcondition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause.reduce\">reduce</a></span> <span class=\"fn\">assignment</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.ReduceResult.reducedToEmpty\">ReduceResult.reducedToEmpty</a> â†’ <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Incompatible\">Incompatible</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">c</span> <span class=\"fn\">assignment</span></span>)</span> <a href=\"./Init/Prelude.html#And\">âˆ§</a>   <span class=\"fn\">âˆ€ (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause.reduce\">reduce</a></span> <span class=\"fn\">assignment</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.ReduceResult.reducedToUnit\">ReduceResult.reducedToUnit</a> <span class=\"fn\">l</span></span> â†’\n      <span class=\"fn\">âˆ€ (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span></span> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">assignment</span></span> â†’ <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span> â†’ <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">l</span></span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L406-L546","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.reduce_fold_fn_preserves_induction_motive","line":406,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.reduce_fold_fn_preserves_induction_motive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.reduce_fold_fn_preserves_induction_motive\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">reduce_fold_fn_preserves_induction_motive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c_arr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">c_arr</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.ReduceResult\">ReduceResult</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReducePostconditionInductionMotive\">ReducePostconditionInductionMotive</a> <span class=\"fn\">c_arr</span> <span class=\"fn\">assignment</span> <span class=\"fn\">(â†‘<span class=\"fn\">idx</span>)</span> <span class=\"fn\">res</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReducePostconditionInductionMotive\">ReducePostconditionInductionMotive</a> <span class=\"fn\">c_arr</span> <span class=\"fn\">assignment</span> (<span class=\"fn\">â†‘<span class=\"fn\">idx</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause.reduce_fold_fn\">DefaultClause.reduce_fold_fn</a> <span class=\"fn\">assignment</span> <span class=\"fn\">res</span> <span class=\"fn\">c_arr</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L399-L404","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReducePostconditionInductionMotive","line":399,"kind":"def","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReducePostconditionInductionMotive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReducePostconditionInductionMotive\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">ReducePostconditionInductionMotive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c_arr</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.ReduceResult\">ReduceResult</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L366-L397","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.unsat_of_encounteredBoth","line":366,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.unsat_of_encounteredBoth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.unsat_of_encounteredBoth\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">unsat_of_encounteredBoth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause.reduce\">reduce</a></span> <span class=\"fn\">assignment</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.ReduceResult.encounteredBoth\">ReduceResult.encounteredBoth</a> â†’ <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Unsatisfiable\">Unsatisfiable</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">assignment</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L361-L364","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ConfirmRupHintFoldEntailsMotive","line":361,"kind":"def","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ConfirmRupHintFoldEntailsMotive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ConfirmRupHintFoldEntailsMotive\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">ConfirmRupHintFoldEntailsMotive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L237-L359","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.assignmentsInvariant_insertRupUnits_of_assignmentsInvariant","line":237,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.assignmentsInvariant_insertRupUnits_of_assignmentsInvariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.assignmentsInvariant_insertRupUnits_of_assignmentsInvariant\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">assignmentsInvariant_insertRupUnits_of_assignmentsInvariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f_readyForRupAdd</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Lemmas.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReadyForRupAdd\">ReadyForRupAdd</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">units</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertRupUnits\">insertRupUnits</a></span> <span class=\"fn\">units</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Lemmas.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.AssignmentsInvariant\">AssignmentsInvariant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L224-L235","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.safe_insert_of_insertRup","line":224,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.safe_insert_of_insertRup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.safe_insert_of_insertRup\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">safe_insert_of_insertRup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f_readyForRupAdd</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Lemmas.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReadyForRupAdd\">ReadyForRupAdd</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertRupUnits\">insertRupUnits</a></span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause.negate\">negate</a></span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> â†’ <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Limplies\">Limplies</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insert\">insert</a></span> <span class=\"fn\">c</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L123-L222","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.sat_of_insertRup","line":123,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.sat_of_insertRup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.sat_of_insertRup\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">sat_of_insertRup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula\">DefaultFormula</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f_readyForRupAdd</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Lemmas.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.ReadyForRupAdd\">ReadyForRupAdd</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause\">DefaultClause</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span></span> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pf</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertRupUnits\">insertRupUnits</a></span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Clause.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultClause.negate\">negate</a></span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> â†’ <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Entails.html#Std.Tactic.BVDecide.LRAT.Internal.Entails.eval\">Entails.eval</a> <span class=\"fn\">p</span> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L106-L121","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.mem_insertUnit_fold_units","line":106,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.mem_insertUnit_fold_units","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.mem_insertUnit_fold_units\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">mem_insertUnit_fold_units</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">units</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignments</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">foundContradiction</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">insertUnit_fold_res</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnit\">insertUnit</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">units</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">assignments</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">foundContradiction</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">l</span></span>;\n<span class=\"fn\">âˆ€ (<span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>), <span class=\"fn\"><span class=\"fn\">l'</span> <a href=\"./Init/Prelude.html#Membership.mem\">âˆˆ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">insertUnit_fold_res</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> â†’ <span class=\"fn\">l'</span> <a href=\"./Init/Prelude.html#Membership.mem\">âˆˆ</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Or\">âˆ¨</a> <span class=\"fn\">l'</span> <a href=\"./Init/Prelude.html#Membership.mem\">âˆˆ</a> <span class=\"fn\"><span class=\"fn\">units</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L94-L104","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.mem_insertUnit_units","line":94,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.mem_insertUnit_units","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.mem_insertUnit_units\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">mem_insertUnit_units</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">units</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignments</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">foundContradiction</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">insertUnit_res</span> := <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnit\">insertUnit</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">units</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">assignments</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">foundContradiction</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">l</span></span>;\n<span class=\"fn\">âˆ€ (<span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>), <span class=\"fn\"><span class=\"fn\">l'</span> <a href=\"./Init/Prelude.html#Membership.mem\">âˆˆ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">insertUnit_res</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> â†’ <span class=\"fn\">l'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Or\">âˆ¨</a> <span class=\"fn\">l'</span> <a href=\"./Init/Prelude.html#Membership.mem\">âˆˆ</a> <span class=\"fn\"><span class=\"fn\">units</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L68-L92","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.contradiction_of_insertUnit_fold_success","line":68,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.contradiction_of_insertUnit_fold_success","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.contradiction_of_insertUnit_fold_success\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">contradiction_of_insertUnit_fold_success</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignments</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignments_size</span> : <span class=\"fn\"><span class=\"fn\">assignments</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">units</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">foundContradiction</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Sat.CNF.Clause</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">insertUnit_fold_res</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#List.foldl\">List.foldl</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnit\">insertUnit</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">units</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">assignments</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">foundContradiction</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">l</span></span>;\n<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">foundContradiction</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> â†’ <a href=\"./Init/Core.html#Exists\">âˆƒ</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">assignments</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment.both\">Assignment.both</a>)</span> â†’\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">insertUnit_fold_res</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> â†’ <a href=\"./Init/Core.html#Exists\">âˆƒ</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">insertUnit_fold_res</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">j</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment.both\">Assignment.both</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.lean#L23-L66","name":"Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.contradiction_of_insertUnit_success","line":23,"kind":"theorem","docLink":"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.contradiction_of_insertUnit_success","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/RupAddSound.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.contradiction_of_insertUnit_success\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">Internal</span>.<span class=\"name\">DefaultFormula</span>.<span class=\"name\">contradiction_of_insertUnit_success</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignments</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignments_size</span> : <span class=\"fn\"><span class=\"fn\">assignments</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">units</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">foundContradiction</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Sat.Literal</a> <span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">insertUnit_res</span> := <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Formula/Implementation.html#Std.Tactic.BVDecide.LRAT.Internal.DefaultFormula.insertUnit\">insertUnit</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">units</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">assignments</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">foundContradiction</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">l</span></span>;\n<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">foundContradiction</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> â†’ <a href=\"./Init/Core.html#Exists\">âˆƒ</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">i</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">assignments</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment.both\">Assignment.both</a>)</span> â†’\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">insertUnit_res</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> â†’ <a href=\"./Init/Core.html#Exists\">âˆƒ</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Internal/PosFin.html#Std.Tactic.BVDecide.LRAT.Internal.PosFin\">PosFin</a> <span class=\"fn\">n</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">insertUnit_res</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">j</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Internal/Assignment.html#Std.Tactic.BVDecide.LRAT.Internal.Assignment.both\">Assignment.both</a></span></span></span></div></div>"}]}