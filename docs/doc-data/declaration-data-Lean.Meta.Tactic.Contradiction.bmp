{"name":"Lean.Meta.Tactic.Contradiction","instances":[{"typeNames":["Lean.Meta.SavedState","Lean.Meta.ElimEmptyInductive.M"],"name":"Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","className":"Lean.MonadBacktrack"}],"imports":["Lean.Meta.MatchUtil","Lean.Meta.Tactic.Assumption","Lean.Meta.Tactic.Cases","Lean.Meta.Tactic.Apply"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L215-L228","name":"Lean.MVarId.contradiction","line":215,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradiction","doc":"Try to close the goal using \"contradictions\" such as\n- Contradictory hypotheses `h₁ : p` and `h₂ : ¬ p`.\n- Contradictory disequality `h : x ≠ x`.\n- Contradictory equality between different constructors, e.g., `h : List.nil = List.cons x xs`.\n- Empty inductive types, e.g., `x : Fin 0`.\n- Decidable propositions that evaluate to false, i.e., a hypothesis `h : p` s.t. `decide p` reduces to `false`.\n  This is only tried if `Config.useDecide = true`.\n\nThrow exception if goal failed to be closed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradiction\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">contradiction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Meta.Contradiction.Config</a> := <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.mk\">{</a> <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L149-L213","name":"Lean.MVarId.contradictionCore","line":149,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradictionCore","doc":"Return `true` if goal `mvarId` has contradictory hypotheses.\nSee `MVarId.contradiction` for the list of tests performed by this method.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.MVarId.contradictionCore\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">contradictionCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Meta.Contradiction.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L102-L105","name":"Lean.Meta.mkGenDiseqMask.go","line":102,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.mkGenDiseqMask.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.mkGenDiseqMask.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkGenDiseqMask</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L93-L105","name":"Lean.Meta.mkGenDiseqMask","line":93,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.mkGenDiseqMask","doc":"Given `e` s.t. `isGenDiseq e`, generate a bit-mask `mask` s.t. `mask[i] = true` iff\nthe `i`-th binder is an equality without forward dependencies.\n\nSee `processGenDiseq`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.mkGenDiseqMask\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkGenDiseqMask</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L54-L75","name":"Lean.Meta.ElimEmptyInductive.elim","line":54,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.elim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.elim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimEmptyInductive</span>.<span class=\"name\">elim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L50-L52","name":"Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","line":50,"kind":"instance","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.instMonadBacktrackSavedStateM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimEmptyInductive</span>.<span class=\"name\">instMonadBacktrackSavedStateM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadBacktrack.html#Lean.MonadBacktrack\">MonadBacktrack</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.SavedState\">SavedState</a> <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L48-L48","name":"Lean.Meta.ElimEmptyInductive.M","line":48,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.ElimEmptyInductive.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ElimEmptyInductive</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L25-L25","name":"Lean.Meta.Contradiction.Config.genDiseq","line":25,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.genDiseq","doc":"Support for hypotheses such as\n```\nh : (x y : Nat) (ys : List Nat) → x = 0 → y::ys = [a, b, c] → False\n```\nThis kind of hypotheses appear when proving conditional equation theorems for match expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.genDiseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">genDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L19-L19","name":"Lean.Meta.Contradiction.Config.searchFuel","line":19,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.searchFuel","doc":"When checking for empty types, `searchFuel` specifies the number of goals visited. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.searchFuel\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">searchFuel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L17-L17","name":"Lean.Meta.Contradiction.Config.emptyType","line":17,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.emptyType","doc":"Check whether any of the hypotheses is an empty type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.emptyType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">emptyType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L15-L15","name":"Lean.Meta.Contradiction.Config.useDecide","line":15,"kind":"def","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.useDecide","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.useDecide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">useDecide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L14-L14","name":"Lean.Meta.Contradiction.Config.mk","line":14,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useDecide </span><span class=\"fn\">emptyType</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">searchFuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">genDiseq</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Contradiction.lean#L14-L25","name":"Lean.Meta.Contradiction.Config","line":14,"kind":"structure","docLink":"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Contradiction.html#Lean.Meta.Contradiction.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Contradiction</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}