{"name":"Lean.Meta.Tactic.Grind.Arith.CommRing.Proof","instances":[{"typeNames":["Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert"],"name":"Lean.Meta.Grind.Arith.CommRing.Null.instInhabitedPreNullCert","className":"Inhabited"}],"imports":["Lean.Meta.Tactic.Grind.Diseq","Lean.Meta.Tactic.Grind.Arith.ProofUtil","Lean.Meta.Tactic.Grind.Arith.CommRing.RingId","Lean.Meta.Tactic.Grind.Arith.CommRing.DenoteExpr","Lean.Meta.Tactic.Grind.Arith.CommRing.ToExpr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L469-L473","name":"Lean.Meta.Grind.Arith.CommRing.propagateEq","line":469,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.propagateEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.propagateEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">propagateEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ra </span><span class=\"fn\">rb</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L463-L467","name":"Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.setUnsat","line":463,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.setUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.setUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">setUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L457-L461","name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.setUnsat","line":457,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.setUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.setUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">setUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L448-L453","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.propagateEq","line":448,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.propagateEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.propagateEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">propagateEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ra </span><span class=\"fn\">rb</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L443-L446","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.setDiseqUnsat","line":443,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.setDiseqUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.setDiseqUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">setDiseqUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L433-L441","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.setEqUnsat","line":433,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.setEqUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.setEqUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">setEqUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L356-L380","name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.toExprProof","line":356,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.toExprProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.toExprProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">toExprProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\">Stepwise.ProofM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L335-L340","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.mkMonDecl","line":335,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkMonDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkMonDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mkMonDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\">ProofM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L328-L333","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.mkExprDecl","line":328,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkExprDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkExprDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mkExprDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\">ProofM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L321-L326","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.mkPolyDecl","line":321,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkPolyDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.mkPolyDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">mkPolyDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\">ProofM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L306-L306","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM","line":306,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L304-L304","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.ctx","line":304,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.ctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.ctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">Context</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L303-L303","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.mk","line":303,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L303-L304","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context","line":303,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L301-L301","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.exprMap","line":301,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.exprMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.exprMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">exprMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L300-L300","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.monMap","line":300,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.monMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.monMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">monMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L299-L299","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.polyMap","line":299,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.polyMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.polyMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">polyMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L298-L298","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.cache","line":298,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.cache","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L297-L297","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.mk","line":297,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">polyMap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">monMap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprMap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L297-L301","name":"Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State","line":297,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Stepwise.ProofM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Stepwise</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L269-L287","name":"Lean.Meta.Grind.Arith.CommRing.Null.propagateEq","line":269,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.propagateEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.propagateEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">propagateEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ra </span><span class=\"fn\">rb</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L249-L267","name":"Lean.Meta.Grind.Arith.CommRing.Null.setDiseqUnsat","line":249,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.setDiseqUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.setDiseqUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">setDiseqUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L232-L247","name":"Lean.Meta.Grind.Arith.CommRing.Null.setEqUnsat","line":232,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.setEqUnsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.setEqUnsat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">setEqUnsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L218-L223","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs.go","line":218,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">applyEqs</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L211-L223","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs","line":211,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs","doc":"Given a `pr`, returns `pr h₁ ... hₙ`, where `n` is size `nc.qhs.size`, and `hᵢ`s\nare the equalities in the certificate.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.applyEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">applyEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L203-L209","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert.go","line":203,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">toNullCert</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.NullCert\">Grind.CommRing.NullCert</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">nc</span>.<a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.qhs\">qhs</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.NullCert\">Grind.CommRing.NullCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L200-L209","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert","line":200,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toNullCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">toNullCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.NullCert\">Grind.CommRing.NullCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L195-L198","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.check","line":195,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.check","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L189-L193","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toPoly","line":189,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.toPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">toPoly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nc</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L184-L185","name":"Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.mkNullCertExt","line":184,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.mkNullCertExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr.mkNullCertExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">DiseqCnstr</span>.<span class=\"name\">mkNullCertExt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.DiseqCnstr\">DiseqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">Null.NullCertExt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L180-L182","name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.mkNullCertExt","line":180,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.mkNullCertExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.mkNullCertExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">mkNullCertExt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">Null.NullCertExt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L176-L178","name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.mkNullCertExt","line":176,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.mkNullCertExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.mkNullCertExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">mkNullCertExt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">Null.NullCertExt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L171-L174","name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier.go","line":171,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">getMultiplier</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L167-L174","name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier","line":167,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier","doc":"Returns the multiplier `k` for the input polynomial. See comment at `PolyDerivation.step`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.getMultiplier\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">getMultiplier</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L159-L165","name":"Lean.Meta.Grind.Arith.CommRing.PolyDerivation.toPreNullCert","line":159,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.toPreNullCert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation.toPreNullCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">PolyDerivation</span>.<span class=\"name\">toPreNullCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.PolyDerivation\">PolyDerivation</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM\">Null.ProofM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">Null.PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L147-L157","name":"Lean.Meta.Grind.Arith.CommRing.EqCnstr.toPreNullCert","line":147,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.toPreNullCert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr.toPreNullCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">EqCnstr</span>.<span class=\"name\">toPreNullCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.EqCnstr\">EqCnstr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM\">Null.ProofM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">Null.PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L141-L141","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.qhs","line":141,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.qhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.qhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">qhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L140-L140","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.d","line":140,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.d","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.d\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">d</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L139-L139","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.mk","line":139,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\">NullCertExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L139-L141","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt","line":139,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L128-L128","name":"Lean.Meta.Grind.Arith.CommRing.Null.ProofM","line":128,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">ProofM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L126-L126","name":"Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.hyps","line":126,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.hyps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.hyps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">hyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L125-L125","name":"Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.cache","line":125,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.cache","doc":"Mapping from `EqCnstr` to `PreNullCert` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L123-L123","name":"Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.mk","line":123,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L123-L126","name":"Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State","line":123,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.ProofM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">ProofM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L121-L121","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.rhs","line":121,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.rhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertHypothesis</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L120-L120","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.lhs","line":120,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.lhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.lhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertHypothesis</span>.<span class=\"name\">lhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L119-L119","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.h","line":119,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.h","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.h\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertHypothesis</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L118-L118","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.mk","line":118,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertHypothesis</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">RingExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\">NullCertHypothesis</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L118-L121","name":"Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis","line":118,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.NullCertHypothesis\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">NullCertHypothesis</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L88-L116","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.combine","line":88,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₂</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₂</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L75-L86","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mul","line":75,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L72-L73","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.div","line":72,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.div\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L67-L70","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.unit","line":67,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.unit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.unit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">unit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L64-L65","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.zero","line":64,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L62-L62","name":"Lean.Meta.Grind.Arith.CommRing.Null.instInhabitedPreNullCert","line":62,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.instInhabitedPreNullCert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.instInhabitedPreNullCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">instInhabitedPreNullCert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L61-L61","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.d","line":61,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.d","doc":"We don't use rational coefficients in the polynomials.\nThus, we need to track a denominator to justify the proof step `div`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.d\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">d</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L56-L56","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.qs","line":56,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.qs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.qs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">qs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L55-L55","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mk","line":55,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\">PreNullCert</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L39-L62","name":"Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert","line":39,"kind":"structure","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert","doc":"A \"pre\" Nullstellensatz certificate.\nRecall that, given the hypotheses `h₁ : lhs₁ = rhs₁` ... `hₙ : lhsₙ = rhsₙ`,\na Nullstellensatz certificate is of the form\n```\nq₁*(lhs₁ - rhs₁) + ... + qₙ*(lhsₙ - rhsₙ)\n```\nEach hypothesis is an `EqCnstr` justified by a `.core ..` `EqnCnstrProof`.\nWe dynamically associate them with unique indices based on the order we find them\nduring traversal.\nFor the other `EqCnstr`s we compute a \"pre\" certificate as a dense array\ncontaining `q₁` ... `qₙ` needed to create the `EqCnstr`.\n\nWe are assuming the number of hypotheses used to derive a conclusion is small\nand a dense array is a reasonable representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.Null.PreNullCert\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Null</span>.<span class=\"name\">PreNullCert</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L29-L32","name":"Lean.Meta.Grind.Arith.CommRing.getPolyConst","line":29,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.getPolyConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.getPolyConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">getPolyConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/CommRing/Poly.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L26-L27","name":"Lean.Meta.Grind.Arith.CommRing.throwNoNatZeroDivisors","line":26,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.throwNoNatZeroDivisors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.throwNoNatZeroDivisors\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">throwNoNatZeroDivisors</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.lean#L15-L24","name":"Lean.Meta.Grind.Arith.CommRing.toContextExpr","line":15,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.toContextExpr","doc":"Returns a context of type `RArray α` containing the variables of the given ring.\n`α` is the type of the ring.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Proof.html#Lean.Meta.Grind.Arith.CommRing.toContextExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">toContextExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Util.html#Lean.Meta.Grind.Arith.CommRing.RingM\">RingM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}