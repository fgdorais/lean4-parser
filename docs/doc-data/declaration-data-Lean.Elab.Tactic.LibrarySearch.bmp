{"name":"Lean.Elab.Tactic.LibrarySearch","instances":[],"imports":["Lean.Meta.Tactic.LibrarySearch","Lean.Meta.Tactic.TryThis","Lean.Elab.Tactic.ElabTerm"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/LibrarySearch.lean#L66-L79","name":"Lean.Elab.LibrarySearch.elabExact?Term","line":66,"kind":"def","docLink":"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.elabExact?Term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.elabExact?Term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">elabExact?Term</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/LibrarySearch.lean#L60-L64","name":"Lean.Elab.LibrarySearch.evalApply","line":60,"kind":"def","docLink":"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.evalApply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.evalApply\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">evalApply</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/LibrarySearch.lean#L53-L57","name":"Lean.Elab.LibrarySearch.evalExact","line":53,"kind":"def","docLink":"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.evalExact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.evalExact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">evalExact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/LibrarySearch.lean#L16-L51","name":"Lean.Elab.LibrarySearch.exact?","line":16,"kind":"def","docLink":"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.exact?","doc":"Implementation of the `exact?` tactic.\n\n* `ref` contains the input syntax and is used for locations in error reporting.\n* `required` contains an optional list of terms that should be used in closing the goal.\n* `requireClose` indicates if the goal must be closed.\n  It is `true` for `exact?` and `false` for `apply?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/LibrarySearch.html#Lean.Elab.LibrarySearch.exact?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">exact?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">required</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`term</span>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">requireClose</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}