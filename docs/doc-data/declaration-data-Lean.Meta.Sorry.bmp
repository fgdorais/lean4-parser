{"name":"Lean.Meta.Sorry","instances":[],"imports":["Lean.Data.Lsp.Utf16","Lean.Meta.InferType","Lean.Util.Recognizers"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Sorry.lean#L100-L115","name":"Lean.Meta.isLabeledSorry?","line":100,"kind":"def","docLink":"./Lean/Meta/Sorry.html#Lean.Meta.isLabeledSorry?","doc":"Returns a `SorryLabelView` if `e` is an application of an expression returned by `mkLabeledSorry`.\nIf it is, then the `sorry` takes the first three arguments, and the tag is at argument 3.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Sorry.html#Lean.Meta.isLabeledSorry?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isLabeledSorry?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView\">SorryLabelView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Sorry.lean#L67-L98","name":"Lean.Meta.mkLabeledSorry","line":67,"kind":"def","docLink":"./Lean/Meta/Sorry.html#Lean.Meta.mkLabeledSorry","doc":"Constructs a `sorryAx`.\n* If the current ref has a source position, then creates a labeled sorry.\n  This supports \"go to definition\" in the InfoView and pretty printing a source position when the `pp.sorrySource` option is true.\n* If `synthetic` is true, then the `sorry` is regarded as being generated by the elaborator.\n  The caller should ensure that there is an associated error logged.\n* If `unique` is true, the `sorry` is unique, in the sense that it is not defeq to any other `sorry` created by `mkLabeledSorry`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Sorry.html#Lean.Meta.mkLabeledSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkLabeledSorry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">synthetic </span><span class=\"fn\">unique</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Sorry.lean#L59-L65","name":"Lean.Meta.SorryLabelView.decode?","line":59,"kind":"def","docLink":"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView.decode?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView.decode?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SorryLabelView</span>.<span class=\"name\">decode?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView\">SorryLabelView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Sorry.lean#L48-L57","name":"Lean.Meta.SorryLabelView.encode","line":48,"kind":"def","docLink":"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView.encode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView.encode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SorryLabelView</span>.<span class=\"name\">encode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView\">SorryLabelView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Sorry.lean#L46-L46","name":"Lean.Meta.SorryLabelView.module?","line":46,"kind":"def","docLink":"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView.module?","doc":"Records the origin module name, logical source position, and LSP range for the `sorry`.\nThe logical source position is used when displaying the sorry when the `pp.sorrySource` option is true,\nand the LSP range is used for \"go to definition\" in the Infoview.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView.module?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SorryLabelView</span>.<span class=\"name\">module?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView\">SorryLabelView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/DeclarationRange.html#Lean.DeclarationLocation\">DeclarationLocation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Sorry.lean#L40-L40","name":"Lean.Meta.SorryLabelView.mk","line":40,"kind":"ctor","docLink":"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SorryLabelView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">module?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/DeclarationRange.html#Lean.DeclarationLocation\">DeclarationLocation</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView\">SorryLabelView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Sorry.lean#L40-L46","name":"Lean.Meta.SorryLabelView","line":40,"kind":"structure","docLink":"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Sorry.html#Lean.Meta.SorryLabelView\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">SorryLabelView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Sorry.lean#L31-L38","name":"Lean.Meta.mkSorry","line":31,"kind":"def","docLink":"./Lean/Meta/Sorry.html#Lean.Meta.mkSorry","doc":"Returns `sorryAx type synthetic`. Recall that `synthetic` is true if this sorry is from an error.\n\nSee also `Lean.Meta.mkLabeledSorry`, for creating a `sorry` that is labeled or unique.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Sorry.html#Lean.Meta.mkSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkSorry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">synthetic</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}