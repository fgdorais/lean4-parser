{"name":"Lean.Compiler.LCNF.PullFunDecls","instances":[{"typeNames":["Lean.Compiler.LCNF.PullFunDecls.ToPull"],"name":"Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull","className":"Inhabited"}],"imports":["Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.DependsOn","Lean.Compiler.LCNF.PassManager"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L179-L180","name":"Lean.Compiler.LCNF.pullFunDecls","line":179,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.pullFunDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.pullFunDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">pullFunDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L171-L177","name":"Lean.Compiler.LCNF.Decl.pullFunDecls","line":171,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.Decl.pullFunDecls","doc":"Pull local function declarations and join points in the given declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.Decl.pullFunDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">pullFunDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L143-L164","name":"Lean.Compiler.LCNF.PullFunDecls.pull","line":143,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.pull","doc":"Pull local function declarations and join points in `code`.\nThe state contains the declarations being pulled.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.pull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">pull</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L129-L141","name":"Lean.Compiler.LCNF.PullFunDecls.addToPull","line":129,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.addToPull","doc":"Add local function declaration (or join point if `isFun = false`) to the state.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.addToPull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">addToPull</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isFun</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L122-L126","name":"Lean.Compiler.LCNF.PullFunDecls.attachJps","line":122,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachJps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachJps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attachJps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L114-L120","name":"Lean.Compiler.LCNF.PullFunDecls.attachParamsDeps","line":114,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachParamsDeps","doc":"Similar to `attachFVarDeps`. Extract from the state any local function declarations that depends on the given\nparameters, **and** attach to code `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachParamsDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attachParamsDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L106-L112","name":"Lean.Compiler.LCNF.PullFunDecls.attachFVarDeps","line":106,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachFVarDeps","doc":"Extract from the state any local function declarations that depends on the given\nfree variable, **and** attach to code `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attachFVarDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attachFVarDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L95-L104","name":"Lean.Compiler.LCNF.PullFunDecls.attach.visit","line":95,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attach</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> (<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L92-L93","name":"Lean.Compiler.LCNF.PullFunDecls.attach.visited","line":92,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.visited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.visited\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attach</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> (<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L88-L90","name":"Lean.Compiler.LCNF.PullFunDecls.attach.go","line":88,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attach</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> (<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>) <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L80-L104","name":"Lean.Compiler.LCNF.PullFunDecls.attach","line":80,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach","doc":"Attach the given array of local function declarations and join points to `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.attach\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">attach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L71-L78","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.attach","line":71,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.attach","doc":"Construct the code `fun p.decl k` or `jp p.decl k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.attach\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">attach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L61-L69","name":"Lean.Compiler.LCNF.PullFunDecls.findParamsDeps","line":61,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findParamsDeps","doc":"Similar to `findFVarDeps`. Extract from the state any local function declarations that depends on the given\nparameters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findParamsDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findParamsDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L57-L59","name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDeps","line":57,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDeps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L50-L55","name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDepsFixpoint","line":50,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDepsFixpoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDepsFixpoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDepsFixpoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">todo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L41-L48","name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps.go","line":41,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDirectDeps</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as </span><span class=\"fn\">keep </span><span class=\"fn\">dep</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L28-L48","name":"Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps","line":28,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps","doc":"Extract from the state any local function declarations that depends on the given\nfree variable. The idea is that we have to stop pulling these declarations because they\ndepend on `fvarId`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.findFVarDirectDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">findFVarDirectDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\">PullM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L23-L26","name":"Lean.Compiler.LCNF.PullFunDecls.PullM","line":23,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM","doc":"The `PullM` state contains the local function declarations and join points being pulled.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.PullM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">PullM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L21-L21","name":"Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull","line":21,"kind":"instance","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.instInhabitedToPull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">instInhabitedToPull</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L20-L20","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.used","line":20,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.used","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.used\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L19-L19","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.decl","line":19,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.decl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L18-L18","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.isFun","line":18,"kind":"def","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.isFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.isFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">isFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L17-L17","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull.mk","line":17,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isFun</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">used</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\">ToPull</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/PullFunDecls.lean#L14-L21","name":"Lean.Compiler.LCNF.PullFunDecls.ToPull","line":14,"kind":"structure","docLink":"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull","doc":"Local function declaration and join point being pulled.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/PullFunDecls.html#Lean.Compiler.LCNF.PullFunDecls.ToPull\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PullFunDecls</span>.<span class=\"name\">ToPull</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}