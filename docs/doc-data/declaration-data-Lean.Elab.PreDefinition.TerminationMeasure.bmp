{"name":"Lean.Elab.PreDefinition.TerminationMeasure","instances":[{"typeNames":["Lean.Elab.TerminationMeasure"],"name":"Lean.Elab.instInhabitedTerminationMeasure","className":"Inhabited"}],"imports":["Lean.Parser.Term","Lean.Elab.Term","Lean.Elab.Binders","Lean.Elab.SyntheticMVars","Lean.Elab.PreDefinition.TerminationHint","Lean.PrettyPrinter.Delaborator.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L109-L134","name":"Lean.Elab.TerminationMeasure.delab.go","line":109,"kind":"def","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.delab.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.delab.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasure</span>.<span class=\"name\">delab</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measure</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`ident</span> → <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">PrettyPrinter.Delaborator.DelabM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Termination.terminationBy</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L98-L134","name":"Lean.Elab.TerminationMeasure.delab","line":98,"kind":"def","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.delab","doc":"Delaborates a `TerminationMeasure` back to a `TerminationHint`, e.g. for `termination_by?`.\n\nThis needs extra information:\n* `arity` is the value arity of the recursive function\n* `extraParams` indicates how many of the function's parameters are bound “after the colon”.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.delab\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasure</span>.<span class=\"name\">delab</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity </span><span class=\"fn\">extraParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measure</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Termination.terminationBy</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L89-L94","name":"Lean.Elab.TerminationMeasure.structuralArg","line":89,"kind":"def","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.structuralArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.structuralArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasure</span>.<span class=\"name\">structuralArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">measure</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L85-L87","name":"Lean.Elab.TerminationMeasure.elab.parameters","line":85,"kind":"def","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.elab.parameters","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.elab.parameters\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasure</span>.<span class=\"name\">elab</span>.<span class=\"name\">parameters</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L46-L87","name":"Lean.Elab.TerminationMeasure.elab","line":46,"kind":"def","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.elab","doc":"Elaborates a `TerminationBy` to an `TerminationMeasure`.\n\n* `type` is the full type of the original recursive function, including fixed prefix.\n* `hint : TerminationBy` is the syntactic `TerminationBy`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.elab\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasure</span>.<span class=\"name\">elab</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity </span><span class=\"fn\">extraParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hint</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationHint.html#Lean.Elab.TerminationBy\">TerminationBy</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L43-L44","name":"Lean.Elab.TerminationMeasures","line":43,"kind":"def","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasures","doc":"A complete set of `TerminationMeasure`s, as applicable to a single clique.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasures\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasures</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L41-L41","name":"Lean.Elab.instInhabitedTerminationMeasure","line":41,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.instInhabitedTerminationMeasure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.instInhabitedTerminationMeasure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedTerminationMeasure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L40-L40","name":"Lean.Elab.TerminationMeasure.fn","line":40,"kind":"def","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.fn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.fn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasure</span>.<span class=\"name\">fn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L39-L39","name":"Lean.Elab.TerminationMeasure.structural","line":39,"kind":"def","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.structural","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.structural\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasure</span>.<span class=\"name\">structural</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L38-L38","name":"Lean.Elab.TerminationMeasure.ref","line":38,"kind":"def","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasure</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L37-L37","name":"Lean.Elab.TerminationMeasure.mk","line":37,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasure</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structural</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\">TerminationMeasure</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/TerminationMeasure.lean#L28-L41","name":"Lean.Elab.TerminationMeasure","line":28,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure","doc":"Elaborated form for a `termination_by` clause.\n\nThe `fn` has the same (value) arity as the recursive functions (stored in\n`arity`), and maps its measures (including fixed prefix, in unpacked form) to\nthe termination measure.\n\nIf `structural := Bool`, then the `fn` is a lambda picking out exactly one measure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/TerminationMeasure.html#Lean.Elab.TerminationMeasure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TerminationMeasure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}