{"name":"Lean.Meta.ACLt","instances":[],"imports":["Lean.Meta.Basic","Lean.Meta.FunInfo","Lean.Meta.DiscrTree"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L194-L196","name":"Lean.Meta.acLt","line":194,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.acLt","doc":"An AC-compatible ordering.\n\nRecall that an AC-compatible ordering if it is monotonic, well-founded, and total.\nBoth KBO and LPO are AC-compatible. KBO is faster, but we do not cache the weight of\neach expression in Lean 4. Even if we did, we would need to have a weight where implicit instance arguments are ignored.\nSo, we use a LPO-like term ordering.\n\nRemark: this method is used to implement ordered rewriting. We ignore implicit instance\narguments to address an issue reported at issue #972.\n\nRemark: the order is not really total on terms since\n - We instance implicit arguments.\n - We ignore metadata.\n - We ignore universe parameterst at constants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.acLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">acLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ACLt.ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ACLt.ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L173-L188","name":"Lean.Meta.ACLt.main.lpo","line":173,"kind":"opaque","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lpo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lpo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">lpo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L170-L171","name":"Lean.Meta.ACLt.main.someChildGe","line":170,"kind":"opaque","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.someChildGe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.someChildGe\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">someChildGe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L150-L168","name":"Lean.Meta.ACLt.main.allChildrenLt","line":150,"kind":"opaque","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.allChildrenLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.allChildrenLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">allChildrenLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L132-L148","name":"Lean.Meta.ACLt.main.lexSameCtor","line":132,"kind":"opaque","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lexSameCtor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lexSameCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">lexSameCtor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L102-L130","name":"Lean.Meta.ACLt.main.ltApp","line":102,"kind":"opaque","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.ltApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.ltApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">ltApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L92-L100","name":"Lean.Meta.ACLt.main.getParamsInfo","line":92,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.getParamsInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.getParamsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">getParamsInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo\">ParamInfo</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L84-L90","name":"Lean.Meta.ACLt.main.ltPair","line":84,"kind":"opaque","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.ltPair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.ltPair\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">ltPair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L71-L82","name":"Lean.Meta.ACLt.main.lt","line":71,"kind":"opaque","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.lt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L59-L69","name":"Lean.Meta.ACLt.main.reduce","line":59,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.reduce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main.reduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span>.<span class=\"name\">reduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L40-L188","name":"Lean.Meta.ACLt.main","line":40,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main","doc":"An AC-compatible ordering.\n\nRecall that an AC-compatible ordering if it is monotonic, well-founded, and total.\nBoth KBO and LPO are AC-compatible. KBO is faster, but we do not cache the weight of\neach expression in Lean 4. Even if we did, we would need to have a weight where implicit instance arguments are ignored.\nSo, we use a LPO-like term ordering.\n\nRemark: this method is used to implement ordered rewriting. We ignore implicit instance\narguments to address an issue reported at issue #972.\n\nRemark: the order is not really total on terms since\n - We instance implicit arguments.\n - We ignore metadata.\n - We ignore universe parameterst at constants.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L33-L33","name":"Lean.Meta.ACLt.ReduceMode.none","line":33,"kind":"ctor","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L32-L32","name":"Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly","line":32,"kind":"ctor","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span>.<span class=\"name\">reduceSimpleOnly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L31-L31","name":"Lean.Meta.ACLt.ReduceMode.reduce","line":31,"kind":"ctor","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span>.<span class=\"name\">reduce</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L30-L33","name":"Lean.Meta.ACLt.ReduceMode","line":30,"kind":"inductive","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ACLt.lean#L13-L25","name":"Lean.Expr.ctorWeight","line":13,"kind":"def","docLink":"./Lean/Meta/ACLt.html#Lean.Expr.ctorWeight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Expr.ctorWeight\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ctorWeight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"}]}