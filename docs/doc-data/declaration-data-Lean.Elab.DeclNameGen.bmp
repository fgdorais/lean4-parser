{"name":"Lean.Elab.DeclNameGen","instances":[],"imports":["Lean.Elab.Command"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DeclNameGen.lean#L249-L264","name":"Lean.Elab.Command.mkInstanceName","line":249,"kind":"def","docLink":"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.mkInstanceName","doc":"Generates an instance name for a declaration that has the given binders and type.\nIt tries to make these names relatively unique ecosystem-wide.\n\nNote that this elaborates the binders and the type.\nThis means that when elaborating an instance declaration, we elaborate these twice.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.mkInstanceName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkInstanceName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DeclNameGen.lean#L233-L245","name":"Lean.Elab.Command.NameGen.mkBaseNameWithSuffix'","line":233,"kind":"def","docLink":"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.NameGen.mkBaseNameWithSuffix'","doc":"Elaborates the binders and type and then uses `mkBaseNameWithSuffix` to generate a name.\nFurthermore, uses `mkUnusedBaseName` on the result.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.NameGen.mkBaseNameWithSuffix'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">NameGen</span>.<span class=\"name\">mkBaseNameWithSuffix'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DeclNameGen.lean#L204-L231","name":"Lean.Elab.Command.NameGen.mkBaseNameWithSuffix","line":204,"kind":"def","docLink":"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.NameGen.mkBaseNameWithSuffix","doc":"Uses heuristics to generate an informative but terse base name for a term of the given type, using `mkBaseName`.\nMakes use of the current namespace.\nIt tries to make these names relatively unique ecosystem-wide,\nand it adds suffixes using the current module if the resulting name doesn't refer to anything defined in this module.\n\nIf any constant in `type` has a name with macro scopes, then the result will be a name with fresh macro scopes.\nWhile in this case we could skip the naming heuristics, we still want informative names for debugging purposes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.NameGen.mkBaseNameWithSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">NameGen</span>.<span class=\"name\">mkBaseNameWithSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/DeclNameGen.lean#L180-L193","name":"Lean.Elab.Command.NameGen.mkBaseName","line":180,"kind":"def","docLink":"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.NameGen.mkBaseName","doc":"Given an expression, generates a \"base name\" for a declaration.\nThe top-level foralls in `e` are treated as being binders, so use the `...Of...` naming convention.\nThe current namespace is used to seed the seen expressions with each prefix of the namespace that's a global constant.\n\nCollects all constants that contribute to the name in the `MkInstM` state.\nThis can be used to decide whether to further transform the generated name;\nin particular, this enables checking whether the generated name mentions declarations\nfrom the current module or project.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DeclNameGen.html#Lean.Elab.Command.NameGen.mkBaseName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">NameGen</span>.<span class=\"name\">mkBaseName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DeclNameGen.html#_private.Lean.Elab.DeclNameGen.0.Lean.Elab.Command.NameGen.MkNameM\">Lean.Elab.Command.NameGen.MkNameM‚úù</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"}]}