{"name":"Lean.Elab.Quotation","instances":[{"typeNames":["Lean.Syntax.Preresolved","Lean.Name.mkStr1"],"name":"Lean.Elab.Term.Quotation.instQuotePreresolvedMkStr1_lean","className":"Lean.Quote"},{"typeNames":["Lean.Elab.Term.Quotation.MatchResult"],"name":"Lean.Elab.Term.Quotation.instReprMatchResult","className":"Repr"}],"imports":["Lean.Syntax","Lean.ResolveName","Lean.Elab.Term","Lean.Elab.Quotation.Util","Lean.Elab.Quotation.Precheck","Lean.Elab.Syntax","Lean.Parser.Syntax"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L684-L687","name":"Lean.Elab.Term.Quotation.elabNoErrorIfUnused","line":684,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.elabNoErrorIfUnused","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.elabNoErrorIfUnused\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">elabNoErrorIfUnused</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L681-L682","name":"Lean.Elab.Term.Quotation.elabMatchSyntax","line":681,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.elabMatchSyntax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.elabMatchSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">elabMatchSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L663-L679","name":"Lean.Elab.Term.Quotation.match_syntax.expand","line":663,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.match_syntax.expand","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.match_syntax.expand\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">match_syntax</span>.<span class=\"name\">expand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L599-L599","name":"Lean.Elab.Term.Quotation.IdxSet","line":599,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.IdxSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.IdxSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">IdxSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L329-L329","name":"Lean.Elab.Term.Quotation.HeadInfo.doMatch","line":329,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.doMatch","doc":"actually run the specified head check, with the discriminant bound to `__discr` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.doMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">HeadInfo</span>.<span class=\"name\">doMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo\">HeadInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">yes</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">no</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L327-L327","name":"Lean.Elab.Term.Quotation.HeadInfo.onMatch","line":327,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.onMatch","doc":"compute compatibility of pattern with given head check "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.onMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">HeadInfo</span>.<span class=\"name\">onMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo\">HeadInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">taken</span> : <a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck\">HeadCheck</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult\">MatchResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L325-L325","name":"Lean.Elab.Term.Quotation.HeadInfo.check","line":325,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.check","doc":"check induced by the pattern "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">HeadInfo</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo\">HeadInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck\">HeadCheck</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L323-L323","name":"Lean.Elab.Term.Quotation.HeadInfo.mk","line":323,"kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">HeadInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">check</span> : <a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck\">HeadCheck</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">onMatch</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck\">HeadCheck</a> → <a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult\">MatchResult</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doMatch</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo\">HeadInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L322-L329","name":"Lean.Elab.Term.Quotation.HeadInfo","line":322,"kind":"structure","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo","doc":"All necessary information on a pattern head. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">HeadInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L314-L318","name":"Lean.Elab.Term.Quotation.instReprMatchResult","line":314,"kind":"instance","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.instReprMatchResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.instReprMatchResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">instReprMatchResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult\">MatchResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L311-L312","name":"Lean.Elab.Term.Quotation.MatchResult.undecided","line":311,"kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult.undecided","doc":"Pattern is not quite sure yet; include unchanged in both branches "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult.undecided\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">undecided</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult\">MatchResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L309-L310","name":"Lean.Elab.Term.Quotation.MatchResult.uncovered","line":309,"kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult.uncovered","doc":"Pattern disagrees with head check, include in \"no\" branch only "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult.uncovered\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">uncovered</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult\">MatchResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L306-L308","name":"Lean.Elab.Term.Quotation.MatchResult.covered","line":306,"kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult.covered","doc":"Pattern agrees with head check, remove and transform remaining alternative.\nIf `exhaustive` is `false`, *also* include unchanged alternative in the \"no\" branch. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult.covered\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">MatchResult</span>.<span class=\"name\">covered</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Quotation.html#_private.Lean.Elab.Quotation.0.Lean.Elab.Term.Quotation.Alt\">Lean.Elab.Term.Quotation.Alt✝</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Quotation.html#_private.Lean.Elab.Quotation.0.Lean.Elab.Term.Quotation.Alt\">Lean.Elab.Term.Quotation.Alt✝</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exhaustive</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult\">MatchResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L304-L312","name":"Lean.Elab.Term.Quotation.MatchResult","line":304,"kind":"inductive","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult","doc":"Describe whether a pattern is covered by a head check (induced by the pattern itself or a different pattern). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.MatchResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">MatchResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L298-L300","name":"Lean.Elab.Term.Quotation.HeadCheck.other","line":298,"kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.other","doc":"other, complicated match step that will probably only cover identical patterns\nexample: antiquotation splices `($[...]*) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.other\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">HeadCheck</span>.<span class=\"name\">other</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck\">HeadCheck</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L294-L297","name":"Lean.Elab.Term.Quotation.HeadCheck.slice","line":294,"kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.slice","doc":"Match step that succeeds on `null` nodes of arity at least `numPrefix + numSuffix`, introducing discriminants\nfor the first `numPrefix` children, one `null` node for those in between, and for the `numSuffix` last children.\nexample: `([$x, $xs,*, $y]) is `slice 2 2` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.slice\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">HeadCheck</span>.<span class=\"name\">slice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numPrefix </span><span class=\"fn\">numSuffix</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck\">HeadCheck</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L286-L293","name":"Lean.Elab.Term.Quotation.HeadCheck.shape","line":286,"kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.shape","doc":"match step based on kind and, optionally, arity of discriminant\nIf `arity` is given, that number of new discriminants is introduced. `covered` patterns should then introduce the\nsame number of new patterns.\nWe actually check the arity at run time only in the case of `null` nodes since it should otherwise by implied by\nthe node kind.\nwithout arity: `($x:k)\nwith arity: any quotation without an antiquotation head pattern "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.shape\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">HeadCheck</span>.<span class=\"name\">shape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck\">HeadCheck</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L284-L285","name":"Lean.Elab.Term.Quotation.HeadCheck.unconditional","line":284,"kind":"ctor","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.unconditional","doc":"match step that always succeeds: _, x, `($x), ... "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck.unconditional\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">HeadCheck</span>.<span class=\"name\">unconditional</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck\">HeadCheck</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L279-L300","name":"Lean.Elab.Term.Quotation.HeadCheck","line":279,"kind":"inductive","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck","doc":"In a single match step, we match the first discriminant against the \"head\" of the first pattern of the first\nalternative. This datatype describes what kind of check this involves, which helps other patterns decide if\nthey are covered by the same check and don't have to be checked again (see also `MatchResult`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.HeadCheck\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">HeadCheck</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L265-L266","name":"Lean.Elab.Term.Quotation.commandElab_stx_quot_","line":265,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.commandElab_stx_quot_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.commandElab_stx_quot_\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">commandElab_stx_quot_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L259-L263","name":"Lean.Elab.Term.Quotation.stxQuot.expand","line":259,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.stxQuot.expand","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.stxQuot.expand\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">stxQuot</span>.<span class=\"name\">expand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L234-L242","name":"Lean.Elab.Term.Quotation.mkSyntaxQuotation","line":234,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.mkSyntaxQuotation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.mkSyntaxQuotation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">mkSyntaxQuotation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L219-L232","name":"Lean.Elab.Term.Quotation.getQuotKind","line":219,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.getQuotKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.getQuotKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">getQuotKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L209-L217","name":"Lean.Elab.Term.Quotation.addNamedQuotInfo","line":209,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.addNamedQuotInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.addNamedQuotInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">addNamedQuotInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L120-L123","name":"Lean.Elab.Term.Quotation.instQuotePreresolvedMkStr1_lean","line":120,"kind":"instance","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.instQuotePreresolvedMkStr1_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.instQuotePreresolvedMkStr1_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">instQuotePreresolvedMkStr1_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Quote\">Quote</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Syntax.Preresolved</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L111-L118","name":"Lean.Elab.Term.Quotation.tryAddSyntaxNodeKindInfo","line":111,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.tryAddSyntaxNodeKindInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.tryAddSyntaxNodeKindInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">tryAddSyntaxNodeKindInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L96-L107","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder.mkNode","line":96,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.mkNode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.mkNode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">ArrayStxBuilder</span>.<span class=\"name\">mkNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder\">ArrayStxBuilder</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L93-L94","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder.append","line":93,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.append\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">ArrayStxBuilder</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder\">ArrayStxBuilder</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">appendName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`Array.append</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder\">ArrayStxBuilder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L88-L91","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder.push","line":88,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.push","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.push\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">ArrayStxBuilder</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder\">ArrayStxBuilder</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder\">ArrayStxBuilder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L84-L86","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder.build","line":84,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.build","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.build\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">ArrayStxBuilder</span>.<span class=\"name\">build</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder\">ArrayStxBuilder</a> → <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L82-L82","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder.empty","line":82,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">ArrayStxBuilder</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder\">ArrayStxBuilder</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L77-L78","name":"Lean.Elab.Term.Quotation.ArrayStxBuilder","line":77,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder","doc":"Transform sequence of pushes and appends into acceptable code "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.ArrayStxBuilder\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">ArrayStxBuilder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L67-L74","name":"Lean.Elab.Term.Quotation.resolveSectionVariable.loop","line":67,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.resolveSectionVariable.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.resolveSectionVariable.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">resolveSectionVariable</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sectionVars</span> : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extractionResult</span> : <a href=\"./Init/Prelude.html#Lean.MacroScopesView\">MacroScopesView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L64-L75","name":"Lean.Elab.Term.Quotation.resolveSectionVariable","line":64,"kind":"def","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.resolveSectionVariable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.resolveSectionVariable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">resolveSectionVariable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sectionVars</span> : <span class=\"fn\"><a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Quotation.lean#L57-L62","name":"Lean.Elab.Term.Quotation.mkTuple","line":57,"kind":"opaque","docLink":"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.mkTuple","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Quotation.html#Lean.Elab.Term.Quotation.mkTuple\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Quotation</span>.<span class=\"name\">mkTuple</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span></div></div>"}]}