{"name":"Lean.Compiler.ConstFolding","instances":[],"imports":["Lean.Expr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L224-L230","name":"Lean.Compiler.foldUnOp","line":224,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUnOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUnOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUnOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L215-L222","name":"Lean.Compiler.foldBinOp","line":215,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldBinOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldBinOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldBinOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L212-L213","name":"Lean.Compiler.findUnFoldFn","line":212,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.findUnFoldFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.findUnFoldFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">findUnFoldFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.UnFoldFn\">UnFoldFn</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L209-L210","name":"Lean.Compiler.findBinFoldFn","line":209,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.findBinFoldFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.findBinFoldFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">findBinFoldFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">BinFoldFn</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L204-L207","name":"Lean.Compiler.unFoldFns","line":204,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.unFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.unFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">unFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.UnFoldFn\">UnFoldFn</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L201-L202","name":"Lean.Compiler.uintFoldToNatFns","line":201,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.uintFoldToNatFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.uintFoldToNatFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">uintFoldToNatFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.UnFoldFn\">UnFoldFn</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L196-L198","name":"Lean.Compiler.foldToNat","line":196,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldToNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldToNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldToNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L188-L194","name":"Lean.Compiler.foldCharOfNat","line":188,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldCharOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldCharOfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldCharOfNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L184-L186","name":"Lean.Compiler.foldNatSucc","line":184,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatSucc\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatSucc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L181-L182","name":"Lean.Compiler.binFoldFns","line":181,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.binFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.binFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">binFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">BinFoldFn</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L178-L179","name":"Lean.Compiler.boolFoldFns","line":178,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.boolFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.boolFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">boolFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">BinFoldFn</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L168-L176","name":"Lean.Compiler.foldStrictOr","line":168,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldStrictOr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldStrictOr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldStrictOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L158-L166","name":"Lean.Compiler.foldStrictAnd","line":158,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldStrictAnd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldStrictAnd\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldStrictAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L153-L156","name":"Lean.Compiler.getBoolLit","line":153,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getBoolLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getBoolLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getBoolLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L139-L151","name":"Lean.Compiler.natFoldFns","line":139,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.natFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.natFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">natFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">BinFoldFn</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L137-L137","name":"Lean.Compiler.foldNatBle","line":137,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBle\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBle</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L136-L136","name":"Lean.Compiler.foldNatBlt","line":136,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L135-L135","name":"Lean.Compiler.foldNatBeq","line":135,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L127-L133","name":"Lean.Compiler.foldNatBinBoolPred","line":127,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinBoolPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinBoolPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBinBoolPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L125-L125","name":"Lean.Compiler.foldNatDecLe","line":125,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecLe\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatDecLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L124-L124","name":"Lean.Compiler.foldNatDecLt","line":124,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatDecLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L123-L123","name":"Lean.Compiler.foldNatDecEq","line":123,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDecEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatDecEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L117-L121","name":"Lean.Compiler.foldNatBinPred","line":117,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBinPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkPred</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L110-L115","name":"Lean.Compiler.toDecidableExpr","line":110,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.toDecidableExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.toDecidableExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">toDecidableExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pred</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L107-L108","name":"Lean.Compiler.mkNatLe","line":107,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatLe\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkNatLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L104-L105","name":"Lean.Compiler.mkNatLt","line":104,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkNatLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L101-L102","name":"Lean.Compiler.mkNatEq","line":101,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkNatEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkNatEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L93-L99","name":"Lean.Compiler.foldNatPow","line":93,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatPow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatPow\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatPow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L91-L91","name":"Lean.Compiler.natPowThreshold","line":91,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.natPowThreshold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.natPowThreshold\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">natPowThreshold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L88-L88","name":"Lean.Compiler.foldNatMod","line":88,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L87-L87","name":"Lean.Compiler.foldNatDiv","line":87,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatDiv\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L86-L86","name":"Lean.Compiler.foldNatMul","line":86,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L85-L85","name":"Lean.Compiler.foldNatAdd","line":85,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L80-L83","name":"Lean.Compiler.foldNatBinOp","line":80,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldNatBinOp\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldNatBinOp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L77-L78","name":"Lean.Compiler.uintBinFoldFns","line":77,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.uintBinFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.uintBinFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">uintBinFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">BinFoldFn</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L73-L75","name":"Lean.Compiler.preUIntBinFoldFns","line":73,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.preUIntBinFoldFns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.preUIntBinFoldFns\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">preUIntBinFoldFns</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\">BinFoldFn</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L71-L71","name":"Lean.Compiler.foldUIntSub","line":71,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUIntSub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L70-L70","name":"Lean.Compiler.foldUIntMod","line":70,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUIntMod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L69-L69","name":"Lean.Compiler.foldUIntDiv","line":69,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntDiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntDiv\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUIntDiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L68-L68","name":"Lean.Compiler.foldUIntMul","line":68,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUIntMul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L67-L67","name":"Lean.Compiler.foldUIntAdd","line":67,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldUIntAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldUIntAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L61-L65","name":"Lean.Compiler.foldBinUInt","line":61,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldBinUInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.foldBinUInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">foldBinUInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeErasure</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L58-L59","name":"Lean.Compiler.mkUInt32Lit","line":58,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUInt32Lit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUInt32Lit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkUInt32Lit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L55-L56","name":"Lean.Compiler.mkUIntLit","line":55,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUIntLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUIntLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkUIntLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L49-L53","name":"Lean.Compiler.getNumLit","line":49,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getNumLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getNumLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getNumLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L45-L47","name":"Lean.Compiler.getInfoFromVal","line":45,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getInfoFromVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getInfoFromVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getInfoFromVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L39-L43","name":"Lean.Compiler.getInfoFromFn","line":39,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getInfoFromFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.getInfoFromFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">getInfoFromFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L36-L37","name":"Lean.Compiler.isToNat","line":36,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.isToNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.isToNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">isToNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L33-L34","name":"Lean.Compiler.isOfNat","line":33,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.isOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.isOfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">isOfNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L29-L31","name":"Lean.Compiler.numScalarTypes","line":29,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.numScalarTypes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.numScalarTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">numScalarTypes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L27-L27","name":"Lean.Compiler.NumScalarTypeInfo.size","line":27,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.size","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L26-L26","name":"Lean.Compiler.NumScalarTypeInfo.toNatFn","line":26,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.toNatFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.toNatFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">toNatFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L25-L25","name":"Lean.Compiler.NumScalarTypeInfo.ofNatFn","line":25,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.ofNatFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.ofNatFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">ofNatFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L24-L24","name":"Lean.Compiler.NumScalarTypeInfo.id","line":24,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L23-L23","name":"Lean.Compiler.NumScalarTypeInfo.nbits","line":23,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.nbits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.nbits\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">nbits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L22-L22","name":"Lean.Compiler.NumScalarTypeInfo.mk","line":22,"kind":"ctor","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nbits</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id </span><span class=\"fn\">ofNatFn </span><span class=\"fn\">toNatFn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">size</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\">NumScalarTypeInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L22-L27","name":"Lean.Compiler.NumScalarTypeInfo","line":22,"kind":"structure","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.NumScalarTypeInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">NumScalarTypeInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L19-L20","name":"Lean.Compiler.mkUIntTypeName","line":19,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUIntTypeName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkUIntTypeName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkUIntTypeName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nbytes</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L17-L17","name":"Lean.Compiler.UnFoldFn","line":17,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.UnFoldFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.UnFoldFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">UnFoldFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L16-L16","name":"Lean.Compiler.BinFoldFn","line":16,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.BinFoldFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">BinFoldFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/ConstFolding.lean#L13-L14","name":"Lean.Compiler.mkLcProof","line":13,"kind":"def","docLink":"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkLcProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/ConstFolding.html#Lean.Compiler.mkLcProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">mkLcProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"}]}