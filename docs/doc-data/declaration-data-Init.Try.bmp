{"name":"Init.Try","instances":[{"typeNames":["Lean.Try.Config"],"name":"Lean.Try.instInhabitedConfig","className":"Inhabited"}],"imports":["Init.Tactics"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L54-L55","name":"Lean.Parser.Tactic.tryResult","line":54,"kind":"def","docLink":"./Init/Try.html#Lean.Parser.Tactic.tryResult","doc":"Helper internal tactic used to implement `evalSuggest` in `try?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Parser.Tactic.tryResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tryResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L51-L52","name":"Lean.Parser.Tactic.attemptAll","line":51,"kind":"def","docLink":"./Init/Try.html#Lean.Parser.Tactic.attemptAll","doc":"Helper internal tactic for implementing the tactic `try?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Parser.Tactic.attemptAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">attemptAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L49-L49","name":"Lean.Parser.Tactic.tryTrace","line":49,"kind":"def","docLink":"./Init/Try.html#Lean.Parser.Tactic.tryTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Parser.Tactic.tryTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tryTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L43-L43","name":"Lean.Try.instInhabitedConfig","line":43,"kind":"instance","docLink":"./Init/Try.html#Lean.Try.instInhabitedConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L42-L42","name":"Lean.Try.Config.merge","line":42,"kind":"def","docLink":"./Init/Try.html#Lean.Try.Config.merge","doc":"If `merge` is `true`, it tries to compress suggestions such as\n```\ninduction a\n· grind only [= f]\n· grind only [→ g]\n```\nas\n```\ninduction a <;> grind only [= f, → g]\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.merge\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L29-L29","name":"Lean.Try.Config.harder","line":29,"kind":"def","docLink":"./Init/Try.html#Lean.Try.Config.harder","doc":"If `harder` is `true`, more expensive tactics and operations are tried. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.harder\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">harder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L27-L27","name":"Lean.Try.Config.only","line":27,"kind":"def","docLink":"./Init/Try.html#Lean.Try.Config.only","doc":"If `only` is `true`, generates solutions using `grind only` and `simp only`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.only\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">only</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L25-L25","name":"Lean.Try.Config.missing","line":25,"kind":"def","docLink":"./Init/Try.html#Lean.Try.Config.missing","doc":"If `missing` is `true`, allows the construction of partial solutions where some of the subgoals are `sorry`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.missing\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">missing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L23-L23","name":"Lean.Try.Config.max","line":23,"kind":"def","docLink":"./Init/Try.html#Lean.Try.Config.max","doc":"Maximum number of suggestions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.max\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">max</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L21-L21","name":"Lean.Try.Config.targetOnly","line":21,"kind":"def","docLink":"./Init/Try.html#Lean.Try.Config.targetOnly","doc":"If `targetOnly` is `true`, `try?` collects information using the goal target only. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.targetOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">targetOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L19-L19","name":"Lean.Try.Config.name","line":19,"kind":"def","docLink":"./Init/Try.html#Lean.Try.Config.name","doc":"If `name` is `true`, all functions in the same namespace are considered for function induction, unfolding, etc. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L17-L17","name":"Lean.Try.Config.main","line":17,"kind":"def","docLink":"./Init/Try.html#Lean.Try.Config.main","doc":"If `main` is `true`, all functions in the current module are considered for function induction, unfolding, etc. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L15-L15","name":"Lean.Try.Config.mk","line":15,"kind":"ctor","docLink":"./Init/Try.html#Lean.Try.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">main </span><span class=\"fn\">name </span><span class=\"fn\">targetOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">max</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">missing </span><span class=\"fn\">only </span><span class=\"fn\">harder </span><span class=\"fn\">merge</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Try.html#Lean.Try.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Try.lean#L12-L43","name":"Lean.Try.Config","line":12,"kind":"structure","docLink":"./Init/Try.html#Lean.Try.Config","doc":"Configuration for `try?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Try.html#Lean.Try.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Try</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}