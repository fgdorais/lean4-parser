{"name":"Lean.Meta.Tactic.LibrarySearch","instances":[{"typeNames":["Eq"],"name":"Lean.Meta.LibrarySearch.instDecidableEqDeclMod","className":"Decidable"},{"typeNames":["Lean.Meta.LibrarySearch.DeclMod"],"name":"Lean.Meta.LibrarySearch.instInhabitedDeclMod","className":"Inhabited"},{"typeNames":["Lean.Meta.LibrarySearch.DeclMod"],"name":"Lean.Meta.LibrarySearch.instOrdDeclMod","className":"Ord"},{"typeNames":["Lean.Meta.LibrarySearch.DeclMod"],"name":"Lean.Meta.LibrarySearch.instHashableDeclMod","className":"Hashable"}],"imports":["Init.Data.Nat.MinMax","Lean.Meta.LazyDiscrTree","Lean.Meta.Tactic.SolveByElim","Lean.Util.Heartbeats"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L291-L317","name":"Lean.Meta.LibrarySearch.librarySearch","line":291,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.librarySearch","doc":"Tries to solve the goal either by:\n* calling `tactic true`\n* or applying a library lemma then calling `tactic false` on the resulting goals.\n\nTypically here `tactic` is `solveByElim`,\nwith the `Bool` flag indicating whether it may retry with `exfalso`.\n\nIf it successfully closes the goal, returns `none`.\nOtherwise, it returns `some a`, where `a : Array (List MVarId × MetavarContext)`,\nwith an entry for each library lemma which was successfully applied,\ncontaining a list of the subsidiary goals, and the metavariable context after the application.\n\n(Always succeeds, and the metavariable context stored in the monad is reverted,\nunless the goal was completely solved.)\n\n(Note that if `solveByElim` solves some but not all subsidiary goals,\nthis is not currently tracked.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.librarySearch\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">librarySearch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tactic</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></span></span> := <span class=\"fn\">fun (<span class=\"fn\">initial</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.solveByElim\">solveByElim</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">initial</span> <span class=\"fn\">g</span> <span class=\"fn\">6</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowFailure</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leavePercentHeartbeats</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">10</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>))</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L243-L272","name":"Lean.Meta.LibrarySearch.tryOnEach","line":243,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.tryOnEach","doc":"Sequentially invokes a tactic `act` on each value in candidates on the current state.\n\nThe tactic `act` should return a list of meta-variables that still need to be resolved.\nIf this list is empty, then no variables remain to be solved, and `tryOnEach` returns\n`none` with the environment set so each goal is resolved.\n\nIf the action throws an internal exception with the `abortSpeculationId` id then\nfurther computation is stopped and intermediate results returned. If any other\nexception is thrown, then it is silently discarded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.tryOnEach\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">tryOnEach</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.Candidate\">Candidate</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">candidates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.Candidate\">Candidate</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>))</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L205-L211","name":"Lean.Meta.LibrarySearch.mkLibrarySearchLemma","line":205,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.mkLibrarySearchLemma","doc":"Create lemma from name and mod. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.mkLibrarySearchLemma\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">mkLibrarySearchLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lem</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mod</span> : <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">DeclMod</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L185-L201","name":"Lean.Meta.LibrarySearch.librarySearchSymm","line":185,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.librarySearchSymm","doc":"Run `searchFn` on both the goal and `symm` applied to the goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.librarySearchSymm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">librarySearchSymm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">searchFn</span> : <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.CandidateFinder\">CandidateFinder</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.Candidate\">Candidate</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L178-L183","name":"Lean.Meta.LibrarySearch.Candidate","line":178,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.Candidate","doc":"A library search candidate using symmetry includes the goal to solve, the metavar\ncontext for that goal, and the name and orientation of a rule to try using with goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.Candidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">Candidate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L171-L174","name":"Lean.Meta.LibrarySearch.isAbortSpeculation","line":171,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.isAbortSpeculation","doc":"Returns true if this is an abort speculation exception. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.isAbortSpeculation\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">isAbortSpeculation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L165-L169","name":"Lean.Meta.LibrarySearch.abortSpeculation","line":165,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.abortSpeculation","doc":"Called to abort speculative execution in library search.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.abortSpeculation\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">abortSpeculation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L137-L156","name":"Lean.Meta.LibrarySearch.interleaveWith","line":137,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.interleaveWith","doc":"Interleave x y interleaves the elements of x and y until one is empty and then returns\nfinal elements in other list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.interleaveWith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">interleaveWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L118-L130","name":"Lean.Meta.LibrarySearch.mkHeartbeatCheck","line":118,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.mkHeartbeatCheck","doc":"Return an action that returns true when the remaining heartbeats is less\nthan the currently remaining heartbeats * leavePercent / 100.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.mkHeartbeatCheck\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">mkHeartbeatCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leavePercent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L112-L116","name":"Lean.Meta.LibrarySearch.libSearchFindDecls","line":112,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.libSearchFindDecls","doc":"Create function for finding relevant declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.libSearchFindDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">libSearchFindDecls</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">DeclMod</a>))</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L96-L100","name":"Lean.Meta.LibrarySearch.droppedKeys","line":96,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.droppedKeys","doc":"We drop `.star` and `Eq * * *` from the discriminator trees because\nthey match too much.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.droppedKeys\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">droppedKeys</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">LazyDiscrTree.Key</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L63-L68","name":"Lean.Meta.LibrarySearch.CandidateFinder","line":63,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.CandidateFinder","doc":"LibrarySearch has an extension mechanism for replacing the function used\nto find candidate lemmas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.CandidateFinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">CandidateFinder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L61-L61","name":"Lean.Meta.LibrarySearch.instHashableDeclMod","line":61,"kind":"instance","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instHashableDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instHashableDeclMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instHashableDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L61-L61","name":"Lean.Meta.LibrarySearch.instOrdDeclMod","line":61,"kind":"instance","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instOrdDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instOrdDeclMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instOrdDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L61-L61","name":"Lean.Meta.LibrarySearch.instInhabitedDeclMod","line":61,"kind":"instance","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instInhabitedDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instInhabitedDeclMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instInhabitedDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L61-L61","name":"Lean.Meta.LibrarySearch.instDecidableEqDeclMod","line":61,"kind":"instance","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instDecidableEqDeclMod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.instDecidableEqDeclMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">instDecidableEqDeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">DeclMod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L60-L60","name":"Lean.Meta.LibrarySearch.DeclMod.mpr","line":60,"kind":"ctor","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.mpr","doc":"the backward direction of an `iff` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.mpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span>.<span class=\"name\">mpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">DeclMod</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L59-L59","name":"Lean.Meta.LibrarySearch.DeclMod.mp","line":59,"kind":"ctor","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.mp","doc":"the forward direction of an `iff` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.mp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span>.<span class=\"name\">mp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">DeclMod</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L58-L58","name":"Lean.Meta.LibrarySearch.DeclMod.none","line":58,"kind":"ctor","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.none","doc":"the original declaration "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\">DeclMod</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L50-L61","name":"Lean.Meta.LibrarySearch.DeclMod","line":50,"kind":"inductive","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod","doc":"A \"modifier\" for a declaration.\n* `none` indicates the original declaration,\n* `mp` indicates that (possibly after binders) the declaration is an `↔`,\n  and we want to consider the forward direction,\n* `mpr` similarly, but for the backward direction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.DeclMod\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">DeclMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/LibrarySearch.lean#L36-L48","name":"Lean.Meta.LibrarySearch.solveByElim","line":36,"kind":"def","docLink":"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.solveByElim","doc":"Wrapper for calling `Lean.Meta.SolveByElim.solveByElim with\nappropriate arguments for library search.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/LibrarySearch.html#Lean.Meta.LibrarySearch.solveByElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">solveByElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">required</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exfalso</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxDepth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"}]}