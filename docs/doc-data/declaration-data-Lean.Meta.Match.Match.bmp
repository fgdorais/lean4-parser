{"name":"Lean.Meta.Match.Match","instances":[],"imports":["Lean.Meta.LitValues","Lean.Meta.Check","Lean.Meta.Closure","Lean.Meta.CtorRecognizer","Lean.Meta.Tactic.Cases","Lean.Meta.Tactic.Contradiction","Lean.Meta.GeneralizeTelescope","Lean.Meta.Match.Basic","Lean.Meta.Match.MatcherApp.Basic","Lean.Meta.Match.MVarRenaming"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L970-L979","name":"Lean.Meta.Match.withMkMatcherInput","line":970,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.withMkMatcherInput","doc":"This function is only used for testing purposes "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.withMkMatcherInput\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">withMkMatcherInput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matcherName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L940-L968","name":"Lean.Meta.Match.getMkMatcherInputInContext","line":940,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.getMkMatcherInputInContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.getMkMatcherInputInContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">getMkMatcherInputInContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matcherApp</span> : <a href=\"./Lean/Meta/Match/MatcherApp/Basic.html#Lean.Meta.MatcherApp\">MatcherApp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L828-L938","name":"Lean.Meta.Match.mkMatcher","line":828,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.mkMatcher","doc":"Create a dependent matcher for `matchType` where `matchType` is of the form\n`(a_1 : A_1) -> (a_2 : A_2[a_1]) -> ... -> (a_n : A_n[a_1, a_2, ... a_{n-1}]) -> B[a_1, ..., a_n]`\nwhere `n = numDiscrs`, and the `lhss` are the left-hand-sides of the `match`-expression alternatives.\nEach `AltLHS` has a list of local declarations and a list of patterns.\nThe number of patterns must be the same in each `AltLHS`.\nThe generated matcher has the structure described at `MatcherInfo`. The motive argument is of the form\n`(motive : (a_1 : A_1) -> (a_2 : A_2[a_1]) -> ... -> (a_n : A_n[a_1, a_2, ... a_{n-1}]) -> Sort v)`\nwhere `v` is a universe parameter or 0 if `B[a_1, ..., a_n]` is a proposition.\n\nIf `exceptionIfContainsSorry := true`, then `mkMatcher` throws an exception if the auxiliary\ndeclarations contains a `sorry`. We use this argument to workaround a bug at `IndPredBelow.mkBelowMatcher`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.mkMatcher\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">mkMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exceptionIfContainsSorry</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.MatcherResult\">MatcherResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L812-L826","name":"Lean.Meta.Match.withCleanLCtxFor","line":812,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.withCleanLCtxFor","doc":"Auxiliary method used at `mkMatcher`. It executes `k` in a local context that contains only\nthe local declarations `m` depends on. This is important because otherwise dependent elimination\nmay \"refine\" the types of unnecessary declarations and accidentally introduce unnecessary dependencies\nin the auto-generated auxiliary declaration. Note that this is not just an optimization because the\nunnecessary dependencies may prevent the termination checker from succeeding. For an example,\nsee issue #1237.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.withCleanLCtxFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">withCleanLCtxFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L807-L810","name":"Lean.Meta.Match.MkMatcherInput.collectDependencies","line":807,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.collectDependencies","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.collectDependencies\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">collectDependencies</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L803-L805","name":"Lean.Meta.Match.MkMatcherInput.collectFVars","line":803,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.collectFVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.collectFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">collectFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Util/CollectFVars.html#Lean.CollectFVars.State\">CollectFVars.State</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L800-L801","name":"Lean.Meta.Match.MkMatcherInput.numDiscrs","line":800,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.numDiscrs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.numDiscrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">numDiscrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L798-L798","name":"Lean.Meta.Match.MkMatcherInput.lhss","line":798,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.lhss","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.lhss\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">lhss</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">AltLHS</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L797-L797","name":"Lean.Meta.Match.MkMatcherInput.discrInfos","line":797,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.discrInfos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.discrInfos\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">discrInfos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.Match.DiscrInfo\">DiscrInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L796-L796","name":"Lean.Meta.Match.MkMatcherInput.matchType","line":796,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.matchType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.matchType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">matchType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L795-L795","name":"Lean.Meta.Match.MkMatcherInput.matcherName","line":795,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.matcherName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.matcherName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">matcherName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L794-L794","name":"Lean.Meta.Match.MkMatcherInput.mk","line":794,"kind":"ctor","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matcherName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.Match.DiscrInfo\">DiscrInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.AltLHS\">AltLHS</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\">MkMatcherInput</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L794-L798","name":"Lean.Meta.Match.MkMatcherInput","line":794,"kind":"structure","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.MkMatcherInput\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">MkMatcherInput</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L769-L792","name":"Lean.Meta.Match.mkMatcherAuxDefinition","line":769,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.mkMatcherAuxDefinition","doc":"Similar to `mkAuxDefinition`, but uses the cache `matcherExt`.\nIt also returns an Boolean that indicates whether a new matcher function was added to the environment or not. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.mkMatcherAuxDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">mkMatcherAuxDefinition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.Match.MatcherInfo\">MatcherInfo</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L766-L767","name":"Lean.Meta.Match.matcherExt","line":766,"kind":"opaque","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.matcherExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.matcherExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">matcherExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>) <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L760-L764","name":"Lean.Meta.Match.bootstrap.genMatcherCode","line":760,"kind":"opaque","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.bootstrap.genMatcherCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.bootstrap.genMatcherCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">bootstrap</span>.<span class=\"name\">genMatcherCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L682-L687","name":"Lean.Meta.Match.isCurrVarInductive","line":682,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.isCurrVarInductive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.isCurrVarInductive\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">isCurrVarInductive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L413-L435","name":"Lean.Meta.Match.processInaccessibleAsCtor","line":413,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.processInaccessibleAsCtor","doc":"Given `alt` s.t. the next pattern is an inaccessible pattern `e`,\ntry to normalize `e` into a constructor application.\nIf it is not a constructor, throw an error.\nOtherwise, if it is a constructor application of `ctorName`,\nupdate the next patterns with the fields of the constructor.\nOtherwise, return none. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.processInaccessibleAsCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">processInaccessibleAsCtor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Alt\">Alt</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L73-L73","name":"Lean.Meta.Match.State.counterExamples","line":73,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.counterExamples","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.counterExamples\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">State</span>.<span class=\"name\">counterExamples</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Example</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L72-L72","name":"Lean.Meta.Match.State.used","line":72,"kind":"def","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.used","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.used\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">State</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L71-L71","name":"Lean.Meta.Match.State.mk","line":71,"kind":"ctor","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">used</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counterExamples</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Match/Basic.html#Lean.Meta.Match.Example\">Example</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/Match.lean#L71-L73","name":"Lean.Meta.Match.State","line":71,"kind":"structure","docLink":"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/Match.html#Lean.Meta.Match.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}