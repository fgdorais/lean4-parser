{"name":"Init.MetaTypes","instances":[{"typeNames":["Lean.NameGenerator"],"name":"Lean.instInhabitedNameGenerator","className":"Inhabited"},{"typeNames":["Lean.Meta.TransparencyMode"],"name":"Lean.Meta.instInhabitedTransparencyMode","className":"Inhabited"},{"typeNames":["Lean.Meta.TransparencyMode"],"name":"Lean.Meta.instBEqTransparencyMode","className":"BEq"},{"typeNames":["Lean.Meta.EtaStructMode"],"name":"Lean.Meta.instInhabitedEtaStructMode","className":"Inhabited"},{"typeNames":["Lean.Meta.EtaStructMode"],"name":"Lean.Meta.instBEqEtaStructMode","className":"BEq"},{"typeNames":["Lean.Meta.DSimp.Config"],"name":"Lean.Meta.DSimp.instInhabitedConfig","className":"Inhabited"},{"typeNames":["Lean.Meta.DSimp.Config"],"name":"Lean.Meta.DSimp.instBEqConfig","className":"BEq"},{"typeNames":["Lean.Meta.Simp.Config"],"name":"Lean.Meta.Simp.instInhabitedConfig","className":"Inhabited"},{"typeNames":["Lean.Meta.Simp.Config"],"name":"Lean.Meta.Simp.instBEqConfig","className":"BEq"},{"typeNames":["Lean.Meta.Occurrences"],"name":"Lean.Meta.instInhabitedOccurrences","className":"Inhabited"},{"typeNames":["Lean.Meta.Occurrences"],"name":"Lean.Meta.instBEqOccurrences","className":"BEq"},{"typeNames":["List","Lean.Meta.Occurrences"],"name":"Lean.Meta.instCoeListNatOccurrences","className":"Coe"}],"imports":["Init.Core"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L327-L327","name":"Lean.Meta.LiftLetsConfig.mk","line":327,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LiftLetsConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toExtractLetsConfig</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\">LiftLetsConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L327-L329","name":"Lean.Meta.LiftLetsConfig.toExtractLetsConfig","line":327,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.toExtractLetsConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig.toExtractLetsConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LiftLetsConfig</span>.<span class=\"name\">toExtractLetsConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\">LiftLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L324-L329","name":"Lean.Meta.LiftLetsConfig","line":324,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig","doc":"Configuration for the `lift_lets` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.LiftLetsConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">LiftLetsConfig</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">Lean.Meta.ExtractLetsConfig</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L322-L322","name":"Lean.Meta.ExtractLetsConfig.lift","line":322,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.lift","doc":"If true (default: false), lift non-extractable `let`s as far out as possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.lift\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">lift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L320-L320","name":"Lean.Meta.ExtractLetsConfig.preserveBinderNames","line":320,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.preserveBinderNames","doc":"If true (default: false), then when no name is provided for a 'let' expression, the name is used as-is without making it be inaccessible.\nThe name still might be inaccessible if the binder name was. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.preserveBinderNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">preserveBinderNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L317-L317","name":"Lean.Meta.ExtractLetsConfig.onlyGivenNames","line":317,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.onlyGivenNames","doc":"If true (default: false), then once `givenNames` is exhausted, stop extracting lets. Otherwise continue extracting lets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.onlyGivenNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">onlyGivenNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L315-L315","name":"Lean.Meta.ExtractLetsConfig.useContext","line":315,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.useContext","doc":"When merging is enabled, if true (default: true), make use of pre-existing local definitions in the local context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.useContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">useContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L313-L313","name":"Lean.Meta.ExtractLetsConfig.merge","line":313,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.merge","doc":"If true (default: true), reuse local declarations that have syntactically equal values.\nNote that even when false, the caching strategy for `extract_let`s may result in fewer extracted let bindings than expected. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.merge\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L310-L310","name":"Lean.Meta.ExtractLetsConfig.usedOnly","line":310,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.usedOnly","doc":"If true (default: false), eliminate unused lets rather than extract them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.usedOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">usedOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L308-L308","name":"Lean.Meta.ExtractLetsConfig.underBinder","line":308,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.underBinder","doc":"If true (default: true), descend into forall/lambda/let bodies when extracting. Only relevant when `descend` is true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.underBinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">underBinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L306-L306","name":"Lean.Meta.ExtractLetsConfig.descend","line":306,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.descend","doc":"If false (default: true), extracts only top-level lets, otherwise allows descending into subterms.\nWhen false, `proofs` and `types` are ignored, and lets appearing in the types or values of the\ntop-level lets are not themselves extracted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.descend\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">descend</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L302-L302","name":"Lean.Meta.ExtractLetsConfig.implicits","line":302,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.implicits","doc":"If true (default: false), extract lets from subterms that are implicit arguments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.implicits\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">implicits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L300-L300","name":"Lean.Meta.ExtractLetsConfig.types","line":300,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.types","doc":"If true (default: true), extract lets from subterms that are types.\nTop-level lets are always extracted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.types\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">types</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L297-L297","name":"Lean.Meta.ExtractLetsConfig.proofs","line":297,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.proofs","doc":"If true (default: false), extract lets from subterms that are proofs.\nTop-level lets are always extracted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.proofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">proofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L294-L294","name":"Lean.Meta.ExtractLetsConfig.mk","line":294,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proofs </span><span class=\"fn\">types </span><span class=\"fn\">implicits </span><span class=\"fn\">descend </span><span class=\"fn\">underBinder </span><span class=\"fn\">usedOnly </span><span class=\"fn\">merge </span><span class=\"fn\">useContext </span><span class=\"fn\">onlyGivenNames </span><span class=\"fn\">preserveBinderNames </span><span class=\"fn\">lift</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\">ExtractLetsConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L291-L322","name":"Lean.Meta.ExtractLetsConfig","line":291,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig","doc":"Configuration for the `extract_lets` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.ExtractLetsConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ExtractLetsConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L289-L289","name":"Lean.Meta.instCoeListNatOccurrences","line":289,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instCoeListNatOccurrences","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instCoeListNatOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instCoeListNatOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L287-L287","name":"Lean.Meta.instBEqOccurrences","line":287,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqOccurrences","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L287-L287","name":"Lean.Meta.instInhabitedOccurrences","line":287,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedOccurrences","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedOccurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedOccurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L285-L286","name":"Lean.Meta.Occurrences.neg","line":285,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.neg","doc":"A list of indices for which occurrences should not be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idxs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L283-L284","name":"Lean.Meta.Occurrences.pos","line":283,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.pos","doc":"A list of indices for which occurrences should be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.pos\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idxs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L281-L282","name":"Lean.Meta.Occurrences.all","line":281,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences.all","doc":"All occurrences should be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L279-L287","name":"Lean.Meta.Occurrences","line":279,"kind":"inductive","docLink":"./Init/MetaTypes.html#Lean.Meta.Occurrences","doc":"Configuration for which occurrences that match an expression should be rewritten. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L270-L270","name":"Lean.Meta.Simp.NormCastConfig.mk","line":270,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">NormCastConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toConfig</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\">NormCastConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L270-L275","name":"Lean.Meta.Simp.NormCastConfig","line":270,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">NormCastConfig</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L270-L275","name":"Lean.Meta.Simp.NormCastConfig.toConfig","line":270,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.toConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig.toConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">NormCastConfig</span>.<span class=\"name\">toConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.NormCastConfig\">NormCastConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L253-L268","name":"Lean.Meta.Simp.neutralConfig","line":253,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.neutralConfig","doc":"A neutral configuration for `simp`, turning off all reductions and other built-in simplifications.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.neutralConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">neutralConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L250-L250","name":"Lean.Meta.Simp.ConfigCtx.mk","line":250,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toConfig</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\">ConfigCtx</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L250-L251","name":"Lean.Meta.Simp.ConfigCtx.toConfig","line":250,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.toConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx.toConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span>.<span class=\"name\">toConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\">ConfigCtx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L250-L251","name":"Lean.Meta.Simp.ConfigCtx","line":250,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">ConfigCtx</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Lean.Meta.Simp.Config</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L247-L247","name":"Lean.Meta.Simp.instBEqConfig","line":247,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.instBEqConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.instBEqConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L247-L247","name":"Lean.Meta.Simp.instInhabitedConfig","line":247,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.instInhabitedConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L246-L246","name":"Lean.Meta.Simp.Config.zetaUnused","line":246,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaUnused","doc":"When `true` (default : `true`), then simps will remove unused let-declarations:\n`let x := v; e` simplifies to `e` when `x` does not occur in `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaUnused\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaUnused</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L241-L241","name":"Lean.Meta.Simp.Config.implicitDefEqProofs","line":241,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.implicitDefEqProofs","doc":"If `implicitDefEqProofs := true`, `simp` does not create proof terms when the\ninput and output terms are definitionally equal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.implicitDefEqProofs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">implicitDefEqProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L236-L236","name":"Lean.Meta.Simp.Config.index","line":236,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.index","doc":"When `index` (default : `true`) is `false`, `simp` will only use the root symbol\nto find candidate `simp` theorems. It approximates Lean 3 `simp` behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.index\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">index</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L231-L231","name":"Lean.Meta.Simp.Config.zetaDelta","line":231,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaDelta","doc":"When `true` (default: `false`), local definitions are unfolded.\nThat is, given a local context containing entry `x : t := e`, the free variable `x` reduces to `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zetaDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L226-L226","name":"Lean.Meta.Simp.Config.unfoldPartialApp","line":226,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.unfoldPartialApp","doc":"If `unfoldPartialApp` is `true` (default: `false`), then calls to `simp`, `dsimp`, or `simp_all`\nwill unfold even partial applications of `f` when we request `f` to be unfolded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.unfoldPartialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">unfoldPartialApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L221-L221","name":"Lean.Meta.Simp.Config.ground","line":221,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.ground","doc":"If `ground` is `true` (default: `false`), then ground terms are reduced.\nA term is ground when it does not contain free or meta variables.\nReduction is interrupted at a function application `f ...` if `f` is marked to not be unfolded.\nGround term reduction applies `@[seval]` lemmas.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.ground\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">ground</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L214-L214","name":"Lean.Meta.Simp.Config.failIfUnchanged","line":214,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.failIfUnchanged","doc":"If `failIfUnchanged` is `true` (default: `true`), then calls to `simp`, `dsimp`, or `simp_all`\nwill fail if they do not make progress.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.failIfUnchanged\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">failIfUnchanged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L209-L209","name":"Lean.Meta.Simp.Config.dsimp","line":209,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.dsimp","doc":"When `true` (default: `true`) then switches to `dsimp` on dependent arguments\nif there is no congruence theorem that would allow `simp` to visit them.\nWhen `dsimp` is `false`, then the argument is not visited.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.dsimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">dsimp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L203-L203","name":"Lean.Meta.Simp.Config.autoUnfold","line":203,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.autoUnfold","doc":"When `true` (default: `false`), unfolds definitions.\nThis can be enabled using the `simp!` syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.autoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">autoUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L198-L198","name":"Lean.Meta.Simp.Config.arith","line":198,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.arith","doc":"When `true` (default: `false`), simplifies simple arithmetic expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.arith\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">arith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L196-L196","name":"Lean.Meta.Simp.Config.decide","line":196,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.decide","doc":"When `true` (default: `false`), rewrites a proposition `p` to `True` or `False` by inferring\na `Decidable p` instance and reducing it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.decide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">decide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L191-L191","name":"Lean.Meta.Simp.Config.proj","line":191,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.proj","doc":"When `true` (default: `true`), reduces projections of structure constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L187-L187","name":"Lean.Meta.Simp.Config.iota","line":187,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.iota","doc":"When `true` (default: `true`), reduces `match` expressions applied to constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.iota\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L183-L183","name":"Lean.Meta.Simp.Config.etaStruct","line":183,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.etaStruct","doc":"Configures how to determine definitional equality between two structure instances.\nSee documentation for `Lean.Meta.EtaStructMode`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.etaStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L178-L178","name":"Lean.Meta.Simp.Config.eta","line":178,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.eta","doc":"TODO (currently unimplemented). When `true` (default: `true`), performs eta reduction for `fun` expressions.\nThat is, `(fun x => f x)` reduces to `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.eta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L173-L173","name":"Lean.Meta.Simp.Config.beta","line":173,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.beta","doc":"When `true` (default: `true`), performs beta reduction of applications of `fun` expressions.\nThat is, `(fun x => e[x]) v` reduces to `e[v]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L168-L168","name":"Lean.Meta.Simp.Config.zeta","line":168,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zeta","doc":"When `true` (default: `true`), performs zeta reduction of let expressions.\nThat is, `let x := v; e[x]` reduces to `e[v]`.\nSee also `zetaDelta`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.zeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L162-L162","name":"Lean.Meta.Simp.Config.singlePass","line":162,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.singlePass","doc":"When `singlePass` is `true` (default: `false`), the simplifier runs through a single round of simplification,\nwhich consists of running pre-methods, recursing using congruence lemmas, and then running post-methods.\nOtherwise, when it is `false`, it iteratively applies this simplification procedure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.singlePass\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">singlePass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L156-L156","name":"Lean.Meta.Simp.Config.memoize","line":156,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.memoize","doc":"When true (default: `true`) then the simplifier caches the result of simplifying each subexpression, if possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.memoize\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">memoize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L152-L152","name":"Lean.Meta.Simp.Config.contextual","line":152,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.contextual","doc":"When `contextual` is true (default: `false`) and simplification encounters an implication `p → q`\nit includes `p` as an additional simp lemma when simplifying `q`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.contextual\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">contextual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L147-L147","name":"Lean.Meta.Simp.Config.maxDischargeDepth","line":147,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxDischargeDepth","doc":"When simp discharges side conditions for conditional lemmas, it can recursively apply simplification.\nThe `maxDischargeDepth` (default: 2) is the maximum recursion depth when recursively applying simplification to side conditions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxDischargeDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxDischargeDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L142-L142","name":"Lean.Meta.Simp.Config.maxSteps","line":142,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxSteps","doc":"The maximum number of subexpressions to visit when performing simplification.\nThe default is 100000.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.maxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxSteps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L137-L137","name":"Lean.Meta.Simp.Config.mk","line":137,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxSteps </span><span class=\"fn\">maxDischargeDepth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">contextual </span><span class=\"fn\">memoize </span><span class=\"fn\">singlePass </span><span class=\"fn\">zeta </span><span class=\"fn\">beta </span><span class=\"fn\">eta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaStruct</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iota </span><span class=\"fn\">proj </span><span class=\"fn\">decide </span><span class=\"fn\">arith </span><span class=\"fn\">autoUnfold </span><span class=\"fn\">dsimp </span><span class=\"fn\">failIfUnchanged </span><span class=\"fn\">ground </span><span class=\"fn\">unfoldPartialApp </span><span class=\"fn\">zetaDelta </span><span class=\"fn\">index </span><span class=\"fn\">implicitDefEqProofs\n  </span><span class=\"fn\">zetaUnused</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L131-L247","name":"Lean.Meta.Simp.Config","line":131,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.Config","doc":"The configuration for `simp`.\nPassed to `simp` using, for example, the `simp (config := {contextual := true})` syntax.\n\nSee also `Lean.Meta.Simp.neutralConfig` and `Lean.Meta.DSimp.Config`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L129-L129","name":"Lean.Meta.Simp.defaultMaxSteps","line":129,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.Simp.defaultMaxSteps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.Simp.defaultMaxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">defaultMaxSteps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L123-L123","name":"Lean.Meta.DSimp.instBEqConfig","line":123,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.instBEqConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.instBEqConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">instBEqConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L123-L123","name":"Lean.Meta.DSimp.instInhabitedConfig","line":123,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.instInhabitedConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.instInhabitedConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">instInhabitedConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L122-L122","name":"Lean.Meta.DSimp.Config.zetaUnused","line":122,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaUnused","doc":"When `true` (default : `true`), then simps will remove unused let-declarations:\n`let x := v; e` simplifies to `e` when `x` does not occur in `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaUnused\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaUnused</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L117-L117","name":"Lean.Meta.DSimp.Config.index","line":117,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.index","doc":"When `index` (default : `true`) is `false`, `simp` will only use the root symbol\nto find candidate `simp` theorems. It approximates Lean 3 `simp` behavior.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.index\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">index</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L112-L112","name":"Lean.Meta.DSimp.Config.zetaDelta","line":112,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaDelta","doc":"When `true` (default: `false`), local definitions are unfolded.\nThat is, given a local context containing entry `x : t := e`, the free variable `x` reduces to `e`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zetaDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zetaDelta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L107-L107","name":"Lean.Meta.DSimp.Config.unfoldPartialApp","line":107,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.unfoldPartialApp","doc":"If `unfoldPartialApp` is `true` (default: `false`), then calls to `simp`, `dsimp`, or `simp_all`\nwill unfold even partial applications of `f` when we request `f` to be unfolded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.unfoldPartialApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">unfoldPartialApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L102-L102","name":"Lean.Meta.DSimp.Config.failIfUnchanged","line":102,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.failIfUnchanged","doc":"If `failIfUnchanged` is `true` (default: `true`), then calls to `simp`, `dsimp`, or `simp_all`\nwill fail if they do not make progress.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.failIfUnchanged\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">failIfUnchanged</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L97-L97","name":"Lean.Meta.DSimp.Config.autoUnfold","line":97,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.autoUnfold","doc":"When `true` (default: `false`), unfolds definitions.\nThis can be enabled using the `simp!` syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.autoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">autoUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L92-L92","name":"Lean.Meta.DSimp.Config.decide","line":92,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.decide","doc":"When `true` (default: `false`), rewrites a proposition `p` to `True` or `False` by inferring\na `Decidable p` instance and reducing it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.decide\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">decide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L87-L87","name":"Lean.Meta.DSimp.Config.proj","line":87,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.proj","doc":"When `true` (default: `true`), reduces projections of structure constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L83-L83","name":"Lean.Meta.DSimp.Config.iota","line":83,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.iota","doc":"When `true` (default: `true`), reduces `match` expressions applied to constructors.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.iota\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">iota</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L79-L79","name":"Lean.Meta.DSimp.Config.etaStruct","line":79,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.etaStruct","doc":"Configures how to determine definitional equality between two structure instances.\nSee documentation for `Lean.Meta.EtaStructMode`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.etaStruct\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaStruct</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L74-L74","name":"Lean.Meta.DSimp.Config.eta","line":74,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.eta","doc":"TODO (currently unimplemented). When `true` (default: `true`), performs eta reduction for `fun` expressions.\nThat is, `(fun x => f x)` reduces to `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.eta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">eta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L69-L69","name":"Lean.Meta.DSimp.Config.beta","line":69,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.beta","doc":"When `true` (default: `true`), performs beta reduction of applications of `fun` expressions.\nThat is, `(fun x => e[x]) v` reduces to `e[v]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.beta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">beta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L64-L64","name":"Lean.Meta.DSimp.Config.zeta","line":64,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zeta","doc":"When `true` (default: `true`), performs zeta reduction of let expressions.\nThat is, `let x := v; e[x]` reduces to `e[v]`.\nSee also `zetaDelta`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.zeta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">zeta</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L58-L58","name":"Lean.Meta.DSimp.Config.mk","line":58,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zeta </span><span class=\"fn\">beta </span><span class=\"fn\">eta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">etaStruct</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iota </span><span class=\"fn\">proj </span><span class=\"fn\">decide </span><span class=\"fn\">autoUnfold </span><span class=\"fn\">failIfUnchanged </span><span class=\"fn\">unfoldPartialApp </span><span class=\"fn\">zetaDelta </span><span class=\"fn\">index </span><span class=\"fn\">zetaUnused</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L51-L123","name":"Lean.Meta.DSimp.Config","line":51,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Meta.DSimp.Config","doc":"The configuration for `dsimp`.\nPassed to `dsimp` using, for example, the `dsimp (config := {zeta := false})` syntax.\n\nImplementation note: this structure is only used for processing the `(config := ...)` syntax, and it is not used internally.\nIt is immediately converted to `Lean.Meta.Simp.Config` by `Lean.Elab.Tactic.elabSimpConfig`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DSimp</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L47-L47","name":"Lean.Meta.instBEqEtaStructMode","line":47,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqEtaStructMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L47-L47","name":"Lean.Meta.instInhabitedEtaStructMode","line":47,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedEtaStructMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L45-L46","name":"Lean.Meta.EtaStructMode.none","line":45,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.none","doc":"Disable eta for structures and classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L43-L44","name":"Lean.Meta.EtaStructMode.notClasses","line":43,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.notClasses","doc":"Enable eta only for structures that are not classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.notClasses\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">notClasses</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L41-L42","name":"Lean.Meta.EtaStructMode.all","line":41,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.all","doc":"Enable eta for structure and classes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L39-L47","name":"Lean.Meta.EtaStructMode","line":39,"kind":"inductive","docLink":"./Init/MetaTypes.html#Lean.Meta.EtaStructMode","doc":"Which structure types should eta be used with? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">EtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L37-L37","name":"Lean.Meta.instBEqTransparencyMode","line":37,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instBEqTransparencyMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instBEqTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instBEqTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L37-L37","name":"Lean.Meta.instInhabitedTransparencyMode","line":37,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.Meta.instInhabitedTransparencyMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.instInhabitedTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L35-L36","name":"Lean.Meta.TransparencyMode.instances","line":35,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances","doc":"Unfolds reducible constants and constants tagged with the `@[instance]` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.instances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">instances</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L33-L34","name":"Lean.Meta.TransparencyMode.reducible","line":33,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.reducible","doc":"Unfolds only constants tagged with the `@[reducible]` attribute. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.reducible\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">reducible</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L31-L32","name":"Lean.Meta.TransparencyMode.default","line":31,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default","doc":"Unfolds all constants except those tagged as `@[irreducible]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L29-L30","name":"Lean.Meta.TransparencyMode.all","line":29,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.all","doc":"Unfolds all constants, even those tagged as `@[irreducible]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L25-L37","name":"Lean.Meta.TransparencyMode","line":25,"kind":"inductive","docLink":"./Init/MetaTypes.html#Lean.Meta.TransparencyMode","doc":"Which constants should be unfolded?\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L21-L21","name":"Lean.Module.commands","line":21,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Module.commands","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.commands\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">commands</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Module\">Module</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L20-L20","name":"Lean.Module.header","line":20,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.Module.header","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.header\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">header</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.Module\">Module</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L19-L19","name":"Lean.Module.mk","line":19,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.Module.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commands</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Module\">Module</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L18-L21","name":"Lean.Module","line":18,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.Module","doc":"Syntax objects for a Lean module. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.Module\"><span class=\"name\">Lean</span>.<span class=\"name\">Module</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L16-L16","name":"Lean.instInhabitedNameGenerator","line":16,"kind":"instance","docLink":"./Init/MetaTypes.html#Lean.instInhabitedNameGenerator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.instInhabitedNameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedNameGenerator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L15-L15","name":"Lean.NameGenerator.idx","line":15,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.idx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L14-L14","name":"Lean.NameGenerator.namePrefix","line":14,"kind":"def","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.namePrefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.namePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">namePrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L13-L13","name":"Lean.NameGenerator.mk","line":13,"kind":"ctor","docLink":"./Init/MetaTypes.html#Lean.NameGenerator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">namePrefix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/MetaTypes.lean#L13-L16","name":"Lean.NameGenerator","line":13,"kind":"structure","docLink":"./Init/MetaTypes.html#Lean.NameGenerator","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/MetaTypes.html#Lean.NameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}