{"name":"Lean.Elab.MutualInductive","instances":[{"typeNames":["Lean.Elab.Command.CtorView"],"name":"Lean.Elab.Command.instInhabitedCtorView","className":"Inhabited"},{"typeNames":["Lean.Elab.Command.InductiveView"],"name":"Lean.Elab.Command.instInhabitedInductiveView","className":"Inhabited"},{"typeNames":["Lean.Elab.Command.PreElabHeaderResult"],"name":"Lean.Elab.Command.instInhabitedPreElabHeaderResult","className":"Inhabited"},{"typeNames":["Lean.Elab.Command.ElabHeaderResult"],"name":"Lean.Elab.Command.instInhabitedElabHeaderResult","className":"Inhabited"},{"typeNames":["Lean.Elab.Command.InductiveElabStep2"],"name":"Lean.Elab.Command.instInhabitedInductiveElabStep2","className":"Inhabited"},{"typeNames":["Lean.Elab.Command.InductiveElabStep1"],"name":"Lean.Elab.Command.instInhabitedInductiveElabStep1","className":"Inhabited"},{"typeNames":["Lean.Elab.Command.InductiveElabDescr"],"name":"Lean.Elab.Command.instInhabitedInductiveElabDescr","className":"Inhabited"}],"imports":["Lean.Util.ForEachExprWhere","Lean.Util.ReplaceLevel","Lean.Util.ReplaceExpr","Lean.Util.CollectLevelParams","Lean.Meta.Constructions","Lean.Meta.CollectFVars","Lean.Meta.SizeOf","Lean.Meta.Injective","Lean.Meta.IndPredBelow","Lean.Elab.Command","Lean.Elab.ComputedFields","Lean.Elab.DefView","Lean.Elab.DeclUtil","Lean.Elab.Deriving.Basic","Lean.Elab.DeclarationRange"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L1056-L1063","name":"Lean.Elab.Command.elabMutualInductive","line":1056,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.elabMutualInductive","doc":"Elaborates a `mutual` block, assuming the commands satisfy `Lean.Elab.Command.isMutualInductive`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.elabMutualInductive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabMutualInductive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L1050-L1054","name":"Lean.Elab.Command.isMutualInductive","line":1050,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.isMutualInductive","doc":"Returns true if all elements of the `mutual` block (`Lean.Parser.Command.mutual`) are inductive declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.isMutualInductive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">isMutualInductive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L1047-L1048","name":"Lean.Elab.Command.elabInductive","line":1047,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.elabInductive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.elabInductive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabInductive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L1038-L1045","name":"Lean.Elab.Command.elabInductives","line":1038,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.elabInductives","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.elabInductives\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabInductives</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inductives</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L578-L582","name":"Lean.Elab.Command.withViewTypeRef","line":578,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.withViewTypeRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.withViewTypeRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">withViewTypeRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">views</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L571-L576","name":"Lean.Elab.Command.InductiveView.withTypeRef","line":571,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.withTypeRef","doc":"Runs `k` with the resulting type as the ref or, if that's not available, with the view's ref. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.withTypeRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">withTypeRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L561-L569","name":"Lean.Elab.Command.withCtorRef","line":561,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.withCtorRef","doc":"Executes `k` using the `Syntax` reference associated with constructor `ctorName`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.withCtorRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">withCtorRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">views</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L550-L559","name":"Lean.Elab.Command.accLevelAtCtor","line":550,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.accLevelAtCtor","doc":"Auxiliary function for `updateResultingUniverse`. Applies `accLevel` to the given constructor parameter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.accLevelAtCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">accLevelAtCtor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorParam</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rOffset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <a href=\"./Lean/Elab/MutualInductive.html#_private.Lean.Elab.MutualInductive.0.Lean.Elab.Command.AccLevelState\">Lean.Elab.Command.AccLevelState✝</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L535-L548","name":"Lean.Elab.Command.accLevel.go","line":535,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.accLevel.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.accLevel.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">accLevel</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r </span><span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rOffset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <a href=\"./Lean/Elab/MutualInductive.html#_private.Lean.Elab.MutualInductive.0.Lean.Elab.Command.AccLevelState\">Lean.Elab.Command.AccLevelState✝</a> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L518-L548","name":"Lean.Elab.Command.accLevel","line":518,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.accLevel","doc":"Auxiliary function for `updateResultingUniverse`.\nConsider the constraint `u ≤ ?r + rOffset` where `u` has no metavariables except for perhaps `?r`.\nThis function attempts to find a unique minimal solution of the form `?r := max l₁ ... lₙ` where each `lᵢ` is normalized and not a `max`/`imax`.\n\nIt also records information about how \"too big\" `rOffset` is. Consider `u ≤ ?r + 1`, from for example\n```lean\ninductive I (α : Sort u) : Type _ where\n  | mk (x : α)\n```\nThis is likely a mistake. The correct solution would be `Type (max u 1)` rather than `Type (u + 1)`,\nbut by this point it is impossible to rectify. So, for `u ≤ ?r + 1` we record the pair of `u` and `1`\nso that we can inform the user what they should have probably used instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.accLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">accLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">r</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rOffset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <a href=\"./Lean/Elab/MutualInductive.html#_private.Lean.Elab.MutualInductive.0.Lean.Elab.Command.AccLevelState\">Lean.Elab.Command.AccLevelState✝</a> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L472-L488","name":"Lean.Elab.Command.shouldInferResultUniverse","line":472,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.shouldInferResultUniverse","doc":"Returns `some ?m` if `u` is of the form `?m + k`.\nReturns none if `u` does not contain universe metavariables.\nThrow exception otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.shouldInferResultUniverse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">shouldInferResultUniverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L237-L245","name":"Lean.Elab.Command.withExplicitToImplicit","line":237,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.withExplicitToImplicit","doc":"Execute `k` with updated binder information for `xs`. Any `x` that is explicit becomes implicit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.withExplicitToImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">withExplicitToImplicit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L208-L216","name":"Lean.Elab.Command.checkValidCtorModifier","line":208,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.checkValidCtorModifier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.checkValidCtorModifier\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">checkValidCtorModifier</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L202-L206","name":"Lean.Elab.Command.checkValidInductiveModifier","line":202,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.checkValidInductiveModifier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.checkValidInductiveModifier\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">checkValidInductiveModifier</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L193-L200","name":"Lean.Elab.Command.mkInductiveView","line":193,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.mkInductiveView","doc":"Initializes the elaborator associated to the given syntax.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.mkInductiveView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkInductiveView</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1\">InductiveElabStep1</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L184-L191","name":"Lean.Elab.Command.isInductiveCommand","line":184,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.isInductiveCommand","doc":"Returns true if the syntax partipates in the mutual inductive elaborator.\nThese do not need to be commands. In fact `inductive` and `structure` are registered\non the `Lean.Parser.Command.inductive` and `Lean.Parser.Command.structure` syntaxes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.isInductiveCommand\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">isInductiveCommand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L173-L182","name":"Lean.Elab.Command.inductiveElabAttr","line":173,"kind":"opaque","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.inductiveElabAttr","doc":"Environment extension to register inductive type elaborator commands.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.inductiveElabAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">inductiveElabAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/KeyedDeclsAttribute.html#Lean.KeyedDeclsAttribute\">KeyedDeclsAttribute</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabDescr\">InductiveElabDescr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L171-L171","name":"Lean.Elab.Command.instInhabitedInductiveElabDescr","line":171,"kind":"instance","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedInductiveElabDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedInductiveElabDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedInductiveElabDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabDescr\">InductiveElabDescr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L170-L170","name":"Lean.Elab.Command.InductiveElabDescr.mkInductiveView","line":170,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabDescr.mkInductiveView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabDescr.mkInductiveView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabDescr</span>.<span class=\"name\">mkInductiveView</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabDescr\">InductiveElabDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1\">InductiveElabStep1</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L169-L169","name":"Lean.Elab.Command.InductiveElabDescr.mk","line":169,"kind":"ctor","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabDescr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabDescr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabDescr</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkInductiveView</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1\">InductiveElabStep1</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabDescr\">InductiveElabDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L151-L171","name":"Lean.Elab.Command.InductiveElabDescr","line":151,"kind":"structure","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabDescr","doc":"Descriptor for a command processor that elaborates an inductive type.\n\nElaboration occurs in the following steps:\n- Every command has its `mkInductiveView` evaluated, producing `InductiveView`s and callbacks\n  for the next steps (all recorded in `InductiveElabStep1`).\n- Each `InductiveView` gets elaborated, creating `ElabHeaderResult`s, and the local contexts are unified into a single one\n  with a consistent set of parameters between each inductive.\n- Each callback is called to elaborate each inductives' constructors and some additional callbacks\n  (all recorded in `InductiveElabStep2`).\n- Fvars are collected from the constructors and from the `InductiveStep2.collectUsedFVars` callbacks.\n  This is used to compute the final set of scoped variables that should be used as additional parameters.\n- Universe levels are checked. Commands can give custom errors using `InductiveStep2.collectUniverses`.\n- Elaboration of constructors is finalized, with additional tasks done by each `InductiveStep2.collectUniverses`.\n- The inductive family is added to the environment and is checked by the kernel.\n- Attributes and other finalization activities are performed, including those defined\n  by `InductiveStep2.prefinalize` and `InductiveStep3.finalize`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L149-L149","name":"Lean.Elab.Command.instInhabitedInductiveElabStep1","line":149,"kind":"instance","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedInductiveElabStep1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedInductiveElabStep1\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedInductiveElabStep1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1\">InductiveElabStep1</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L148-L148","name":"Lean.Elab.Command.InductiveElabStep1.elabCtors","line":148,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1.elabCtors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1.elabCtors\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep1</span>.<span class=\"name\">elabCtors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1\">InductiveElabStep1</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult\">ElabHeaderResult</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult\">ElabHeaderResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2\">InductiveElabStep2</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L147-L147","name":"Lean.Elab.Command.InductiveElabStep1.view","line":147,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1.view","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1.view\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep1</span>.<span class=\"name\">view</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1\">InductiveElabStep1</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L146-L146","name":"Lean.Elab.Command.InductiveElabStep1.mk","line":146,"kind":"ctor","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep1</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elabCtors</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult\">ElabHeaderResult</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult\">ElabHeaderResult</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2\">InductiveElabStep2</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1\">InductiveElabStep1</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L145-L149","name":"Lean.Elab.Command.InductiveElabStep1","line":145,"kind":"structure","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1","doc":"An intermediate step for mutual inductive elaboration. See `InductiveElabDescr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep1\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L143-L143","name":"Lean.Elab.Command.instInhabitedInductiveElabStep2","line":143,"kind":"instance","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedInductiveElabStep2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedInductiveElabStep2\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedInductiveElabStep2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2\">InductiveElabStep2</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L142-L142","name":"Lean.Elab.Command.InductiveElabStep2.prefinalize","line":142,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.prefinalize","doc":"Like `finalize`, but occurs before `afterTypeChecking` attributes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.prefinalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep2</span>.<span class=\"name\">prefinalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2\">InductiveElabStep2</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">replaceIndFVars</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep3\">InductiveElabStep3</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L140-L140","name":"Lean.Elab.Command.InductiveElabStep2.finalizeTermElab","line":140,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.finalizeTermElab","doc":"Step to finalize term elaboration, done immediately after universe level processing is complete. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.finalizeTermElab\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep2</span>.<span class=\"name\">finalizeTermElab</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2\">InductiveElabStep2</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L138-L138","name":"Lean.Elab.Command.InductiveElabStep2.checkUniverses","line":138,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.checkUniverses","doc":"Function to check universes and provide a custom error. (`structure` uses this to do checks per field to give nicer messages.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.checkUniverses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep2</span>.<span class=\"name\">checkUniverses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2\">InductiveElabStep2</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L136-L136","name":"Lean.Elab.Command.InductiveElabStep2.collectUsedFVars","line":136,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.collectUsedFVars","doc":"Function to collect additional fvars that might be missed by the constructors.\nIt is permissible to include fvars that do not exist in the local context (`structure` for example includes its field fvars). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.collectUsedFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep2</span>.<span class=\"name\">collectUsedFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2\">InductiveElabStep2</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Util/CollectFVars.html#Lean.CollectFVars.State\">CollectFVars.State</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L133-L133","name":"Lean.Elab.Command.InductiveElabStep2.ctors","line":133,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.ctors","doc":"The constructors produced by `InductiveElabStep1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.ctors\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep2</span>.<span class=\"name\">ctors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2\">InductiveElabStep2</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Declaration.html#Lean.Constructor\">Constructor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L131-L131","name":"Lean.Elab.Command.InductiveElabStep2.mk","line":131,"kind":"ctor","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep2</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctors</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Declaration.html#Lean.Constructor\">Constructor</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">collectUsedFVars</span> : <span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Util/CollectFVars.html#Lean.CollectFVars.State\">CollectFVars.State</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkUniverses</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Level</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finalizeTermElab</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prefinalize</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep3\">InductiveElabStep3</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2\">InductiveElabStep2</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L130-L143","name":"Lean.Elab.Command.InductiveElabStep2","line":130,"kind":"structure","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2","doc":"An intermediate step for mutual inductive elaboration. See `InductiveElabDescr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep2\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L128-L128","name":"Lean.Elab.Command.InductiveElabStep3.finalize","line":128,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep3.finalize","doc":"Finalize the inductive type, after they are all added to the environment, after auxiliary definitions are added, and after computed fields are registered.\nThe `levelParams`, `params`, and `replaceIndFVars` arguments of `prefinalize` are still valid here. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep3.finalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep3</span>.<span class=\"name\">finalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep3\">InductiveElabStep3</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L125-L125","name":"Lean.Elab.Command.InductiveElabStep3.mk","line":125,"kind":"ctor","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep3.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep3.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep3</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finalize</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep3\">InductiveElabStep3</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L124-L128","name":"Lean.Elab.Command.InductiveElabStep3","line":124,"kind":"structure","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep3","doc":"An intermediate step for mutual inductive elaboration. See `InductiveElabDescr` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveElabStep3\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveElabStep3</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L122-L122","name":"Lean.Elab.Command.instInhabitedElabHeaderResult","line":122,"kind":"instance","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedElabHeaderResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedElabHeaderResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedElabHeaderResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult\">ElabHeaderResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L121-L121","name":"Lean.Elab.Command.ElabHeaderResult.indFVar","line":121,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult.indFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult.indFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ElabHeaderResult</span>.<span class=\"name\">indFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult\">ElabHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L120-L120","name":"Lean.Elab.Command.ElabHeaderResult.mk","line":120,"kind":"ctor","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ElabHeaderResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toPreElabHeaderResult</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\">PreElabHeaderResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indFVar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult\">ElabHeaderResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L120-L122","name":"Lean.Elab.Command.ElabHeaderResult.toPreElabHeaderResult","line":120,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult.toPreElabHeaderResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult.toPreElabHeaderResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ElabHeaderResult</span>.<span class=\"name\">toPreElabHeaderResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult\">ElabHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\">PreElabHeaderResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L119-L122","name":"Lean.Elab.Command.ElabHeaderResult","line":119,"kind":"structure","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult","doc":"The elaborated header with the `indFVar` registered for this inductive type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ElabHeaderResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ElabHeaderResult</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\">Lean.Elab.Command.PreElabHeaderResult</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L117-L117","name":"Lean.Elab.Command.instInhabitedPreElabHeaderResult","line":117,"kind":"instance","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedPreElabHeaderResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedPreElabHeaderResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedPreElabHeaderResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\">PreElabHeaderResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L116-L116","name":"Lean.Elab.Command.PreElabHeaderResult.origParams","line":116,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.origParams","doc":"The parameters in the header's initial local context. Used for adding fvar alias terminfo. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.origParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">PreElabHeaderResult</span>.<span class=\"name\">origParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\">PreElabHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L114-L114","name":"Lean.Elab.Command.PreElabHeaderResult.type","line":114,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">PreElabHeaderResult</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\">PreElabHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L113-L113","name":"Lean.Elab.Command.PreElabHeaderResult.numParams","line":113,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.numParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.numParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">PreElabHeaderResult</span>.<span class=\"name\">numParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\">PreElabHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L112-L112","name":"Lean.Elab.Command.PreElabHeaderResult.levelNames","line":112,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.levelNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.levelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">PreElabHeaderResult</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\">PreElabHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L111-L111","name":"Lean.Elab.Command.PreElabHeaderResult.view","line":111,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.view","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.view\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">PreElabHeaderResult</span>.<span class=\"name\">view</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\">PreElabHeaderResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L110-L110","name":"Lean.Elab.Command.PreElabHeaderResult.mk","line":110,"kind":"ctor","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">PreElabHeaderResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">origParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\">PreElabHeaderResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L109-L117","name":"Lean.Elab.Command.PreElabHeaderResult","line":109,"kind":"structure","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult","doc":"Elaborated header for an inductive type before fvars for each inductive are added to the local context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.PreElabHeaderResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">PreElabHeaderResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L107-L107","name":"Lean.Elab.Command.instInhabitedInductiveView","line":107,"kind":"instance","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedInductiveView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedInductiveView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedInductiveView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L106-L106","name":"Lean.Elab.Command.InductiveView.derivingClasses","line":106,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.derivingClasses","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.derivingClasses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">derivingClasses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L105-L105","name":"Lean.Elab.Command.InductiveView.computedFields","line":105,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.computedFields","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.computedFields\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">computedFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView\">ComputedFieldView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L104-L104","name":"Lean.Elab.Command.InductiveView.ctors","line":104,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.ctors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.ctors\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">ctors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\">CtorView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L103-L103","name":"Lean.Elab.Command.InductiveView.type?","line":103,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.type?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.type?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">type?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L102-L102","name":"Lean.Elab.Command.InductiveView.binders","line":102,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.binders","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.binders\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">binders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L101-L101","name":"Lean.Elab.Command.InductiveView.levelNames","line":101,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.levelNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.levelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L100-L100","name":"Lean.Elab.Command.InductiveView.declName","line":100,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.declName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L99-L99","name":"Lean.Elab.Command.InductiveView.shortDeclName","line":99,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.shortDeclName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.shortDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">shortDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L98-L98","name":"Lean.Elab.Command.InductiveView.allowSortPolymorphism","line":98,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.allowSortPolymorphism","doc":"Whether the command supports creating inductive types that can be polymorphic across both `Prop` and `Type _`.\nIf false, then either the universe must be `Prop` or it must be of the form `Type _`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.allowSortPolymorphism\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">allowSortPolymorphism</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L95-L95","name":"Lean.Elab.Command.InductiveView.allowIndices","line":95,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.allowIndices","doc":"Whether the command should allow indices (like `inductive`) or not (like `structure`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.allowIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">allowIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L93-L93","name":"Lean.Elab.Command.InductiveView.isClass","line":93,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.isClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.isClass\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">isClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L92-L92","name":"Lean.Elab.Command.InductiveView.modifiers","line":92,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.modifiers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.modifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">modifiers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L91-L91","name":"Lean.Elab.Command.InductiveView.declId","line":91,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.declId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.declId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">declId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L90-L90","name":"Lean.Elab.Command.InductiveView.ref","line":90,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L89-L89","name":"Lean.Elab.Command.InductiveView.mk","line":89,"kind":"ctor","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">declId</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isClass </span><span class=\"fn\">allowIndices </span><span class=\"fn\">allowSortPolymorphism</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shortDeclName </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctors</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\">CtorView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">computedFields</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView\">ComputedFieldView</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">derivingClasses</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\">InductiveView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L88-L107","name":"Lean.Elab.Command.InductiveView","line":88,"kind":"structure","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView","doc":"A view for generic inductive types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.InductiveView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">InductiveView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L86-L86","name":"Lean.Elab.Command.ComputedFieldView.matchAlts","line":86,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.matchAlts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.matchAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ComputedFieldView</span>.<span class=\"name\">matchAlts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView\">ComputedFieldView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.matchAlts</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L85-L85","name":"Lean.Elab.Command.ComputedFieldView.type","line":85,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ComputedFieldView</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView\">ComputedFieldView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L84-L84","name":"Lean.Elab.Command.ComputedFieldView.fieldId","line":84,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.fieldId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.fieldId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ComputedFieldView</span>.<span class=\"name\">fieldId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView\">ComputedFieldView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L83-L83","name":"Lean.Elab.Command.ComputedFieldView.modifiers","line":83,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.modifiers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.modifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ComputedFieldView</span>.<span class=\"name\">modifiers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView\">ComputedFieldView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L82-L82","name":"Lean.Elab.Command.ComputedFieldView.ref","line":82,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ComputedFieldView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView\">ComputedFieldView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L81-L81","name":"Lean.Elab.Command.ComputedFieldView.mk","line":81,"kind":"ctor","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ComputedFieldView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">modifiers</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fieldId</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchAlts</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.matchAlts</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView\">ComputedFieldView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L81-L86","name":"Lean.Elab.Command.ComputedFieldView","line":81,"kind":"structure","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.ComputedFieldView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">ComputedFieldView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L79-L79","name":"Lean.Elab.Command.instInhabitedCtorView","line":79,"kind":"instance","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedCtorView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.instInhabitedCtorView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedCtorView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\">CtorView</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L78-L78","name":"Lean.Elab.Command.CtorView.type?","line":78,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.type?","doc":"For handler use. The `inductive` command uses it for the resulting type for the constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.type?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CtorView</span>.<span class=\"name\">type?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\">CtorView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L76-L76","name":"Lean.Elab.Command.CtorView.binders","line":76,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.binders","doc":"For handler use. The `inductive` uses it for the binders to the constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.binders\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CtorView</span>.<span class=\"name\">binders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\">CtorView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L74-L74","name":"Lean.Elab.Command.CtorView.declId","line":74,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.declId","doc":"Syntax for the name of the constructor, used to apply terminfo. If the source is synthetic, terminfo is not applied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.declId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CtorView</span>.<span class=\"name\">declId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\">CtorView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L72-L72","name":"Lean.Elab.Command.CtorView.declName","line":72,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.declName","doc":"Fully qualified name of the constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CtorView</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\">CtorView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L70-L70","name":"Lean.Elab.Command.CtorView.modifiers","line":70,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.modifiers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.modifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CtorView</span>.<span class=\"name\">modifiers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\">CtorView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L69-L69","name":"Lean.Elab.Command.CtorView.ref","line":69,"kind":"def","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.ref","doc":"Syntax for the whole constructor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CtorView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\">CtorView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L67-L67","name":"Lean.Elab.Command.CtorView.mk","line":67,"kind":"ctor","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CtorView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declId </span><span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\">CtorView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L66-L79","name":"Lean.Elab.Command.CtorView","line":66,"kind":"structure","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView","doc":"View of a constructor. Only `ref`, `modifiers`, `declName`, and `declId` are required by the mutual inductive elaborator itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.CtorView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CtorView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L56-L64","name":"Lean.Elab.Command.bootstrap.inductiveCheckResultingUniverse","line":56,"kind":"opaque","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.bootstrap.inductiveCheckResultingUniverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.bootstrap.inductiveCheckResultingUniverse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">bootstrap</span>.<span class=\"name\">inductiveCheckResultingUniverse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/MutualInductive.lean#L51-L54","name":"Lean.Elab.Command.inductive.autoPromoteIndices","line":51,"kind":"opaque","docLink":"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.inductive.autoPromoteIndices","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/MutualInductive.html#Lean.Elab.Command.inductive.autoPromoteIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">inductive</span>.<span class=\"name\">autoPromoteIndices</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}