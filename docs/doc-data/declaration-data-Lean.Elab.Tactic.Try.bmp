{"name":"Lean.Elab.Tactic.Try","instances":[{"typeNames":["Lean.Elab.Tactic.SavedState","Lean.Elab.Tactic.Try.TryTacticM"],"name":"Lean.Elab.Tactic.Try.instMonadBacktrackSavedStateTryTacticM","className":"Lean.MonadBacktrack"}],"imports":["Init.Try","Init.Grind.Tactics","Lean.Meta.Tactic.ExposeNames","Lean.Meta.Tactic.Try","Lean.Meta.Tactic.TryThis","Lean.Elab.Tactic.Config","Lean.Elab.Tactic.SimpTrace","Lean.Elab.Tactic.LibrarySearch","Lean.Elab.Tactic.Grind"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L678-L685","name":"Lean.Elab.Tactic.Try.evalTryTrace","line":678,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.evalTryTrace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.evalTryTrace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">evalTryTrace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L580-L589","name":"Lean.Elab.Tactic.Try.evalAndSuggest","line":580,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.evalAndSuggest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.evalAndSuggest\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">evalAndSuggest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tk</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a> := <a href=\"./Init/Try.html#Lean.Try.Config.mk\">{</a> <a href=\"./Init/Try.html#Lean.Try.Config.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L410-L411","name":"Lean.Elab.Tactic.Try.evalSuggest","line":410,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.evalSuggest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.evalSuggest\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">evalSuggest</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTactic\">TryTactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L238-L249","name":"Lean.Elab.Tactic.Try.observing","line":238,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.observing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.observing\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">observing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTacticM\">TryTacticM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTacticM\">TryTacticM</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TacticResult\">TacticResult</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L236-L236","name":"Lean.Elab.Tactic.Try.focus","line":236,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.focus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.focus\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">focus</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTacticM\">TryTacticM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTacticM\">TryTacticM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L229-L230","name":"Lean.Elab.Tactic.Try.tryTacticElabAttribute","line":229,"kind":"opaque","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.tryTacticElabAttribute","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.tryTacticElabAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">tryTacticElabAttribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/KeyedDeclsAttribute.html#Lean.KeyedDeclsAttribute\">KeyedDeclsAttribute</a> <a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTactic\">TryTactic</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L226-L227","name":"Lean.Elab.Tactic.Try.withNonTerminal","line":226,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.withNonTerminal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.withNonTerminal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">withNonTerminal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTacticM\">TryTacticM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTacticM\">TryTacticM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L222-L224","name":"Lean.Elab.Tactic.Try.instMonadBacktrackSavedStateTryTacticM","line":222,"kind":"instance","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.instMonadBacktrackSavedStateTryTacticM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.instMonadBacktrackSavedStateTryTacticM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">instMonadBacktrackSavedStateTryTacticM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadBacktrack.html#Lean.MonadBacktrack\">MonadBacktrack</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\">SavedState</a> <a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTacticM\">TryTacticM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L220-L220","name":"Lean.Elab.Tactic.Try.TryTactic","line":220,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTactic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">TryTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L219-L219","name":"Lean.Elab.Tactic.Try.TryTacticM","line":219,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTacticM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TryTacticM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">TryTacticM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L217-L217","name":"Lean.Elab.Tactic.Try.Ctx.config","line":217,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx.config","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx.config\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">Ctx</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx\">Ctx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L216-L216","name":"Lean.Elab.Tactic.Try.Ctx.terminal","line":216,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx.terminal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx.terminal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">Ctx</span>.<span class=\"name\">terminal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx\">Ctx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L215-L215","name":"Lean.Elab.Tactic.Try.Ctx.root","line":215,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx.root","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx.root\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">Ctx</span>.<span class=\"name\">root</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx\">Ctx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L214-L214","name":"Lean.Elab.Tactic.Try.Ctx.mk","line":214,"kind":"ctor","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">Ctx</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">terminal</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx\">Ctx</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L214-L217","name":"Lean.Elab.Tactic.Try.Ctx","line":214,"kind":"structure","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.Ctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">Ctx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L212-L212","name":"Lean.Elab.Tactic.Try.TacticResult","line":212,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TacticResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.TacticResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">TacticResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L60-L78","name":"Lean.Elab.Tactic.Try.evalSuggestExact","line":60,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.evalSuggestExact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.evalSuggestExact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">evalSuggestExact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L51-L58","name":"Lean.Elab.Tactic.Try.checkTactic","line":51,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.checkTactic","doc":"Executes `tac` in the saved state. This function is used to validate a tactic before suggesting it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.Try.checkTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Try</span>.<span class=\"name\">checkTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">savedState</span> : <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\">SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/Try.lean#L23-L23","name":"Lean.Elab.Tactic.elabTryConfig","line":23,"kind":"def","docLink":"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.elabTryConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Try.html#Lean.Elab.Tactic.elabTryConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabTryConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Try.html#Lean.Try.Config\">Try.Config</a></span></span></div></div>"}]}