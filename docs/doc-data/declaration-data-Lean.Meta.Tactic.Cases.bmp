{"name":"Lean.Meta.Tactic.Cases","instances":[],"imports":["Lean.Meta.AppBuilder","Lean.Meta.Tactic.Induction","Lean.Meta.Tactic.Injection","Lean.Meta.Tactic.Assert","Lean.Meta.Tactic.Subst","Lean.Meta.Tactic.Acyclic","Lean.Meta.Tactic.UnifyEq"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L348-L357","name":"Lean.MVarId.byCasesDec","line":348,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.byCasesDec","doc":"Given `dec : Decidable p`, split the goal in two subgoals: one containing the hypothesis `h : p` and another containing `h : ¬ p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.byCasesDec\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">byCasesDec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">dec</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`h</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">Meta.ByCasesSubgoal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">Meta.ByCasesSubgoal</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L338-L346","name":"Lean.MVarId.byCases","line":338,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.byCases","doc":"Split the goal in two subgoals: one containing the hypothesis `h : p` and another containing `h : ¬ p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.byCases\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">byCases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <span class=\"fn\">`h</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">Meta.ByCasesSubgoal</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">Meta.ByCasesSubgoal</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L332-L332","name":"Lean.Meta.ByCasesSubgoal.fvarId","line":332,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ByCasesSubgoal</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">ByCasesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L331-L331","name":"Lean.Meta.ByCasesSubgoal.mvarId","line":331,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ByCasesSubgoal</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">ByCasesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L330-L330","name":"Lean.Meta.ByCasesSubgoal.mk","line":330,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ByCasesSubgoal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\">ByCasesSubgoal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L329-L332","name":"Lean.Meta.ByCasesSubgoal","line":329,"kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal","doc":"Auxiliary structure for storing `byCases` tactic result. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.ByCasesSubgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ByCasesSubgoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L320-L327","name":"Lean.MVarId.substEqs","line":320,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.substEqs","doc":"Applies `cases` to any hypothesis of the form `h : r = s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.substEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">substEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L313-L318","name":"Lean.MVarId.casesAnd","line":313,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.casesAnd","doc":"Applies `cases` (recursively) to any hypothesis of the form `h : p ∧ q`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.casesAnd\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">casesAnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L298-L311","name":"Lean.MVarId.casesRec","line":298,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.casesRec","doc":"Keep applying `cases` on any hypothesis that satisfies `p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.casesRec\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">casesRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L286-L296","name":"Lean.MVarId.cases","line":286,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.cases","doc":"Apply `casesOn` using the free variable `majorFVarId` as the major premise (aka discriminant).\n`givenNames` contains user-facing names for each alternative.\n\n- `useNatCasesAuxOn` is a temporary hack for the `rcases` family of tactics.\n  Do not use it, as it is subject to removal.\n  It enables using `Nat.casesAuxOn` instead of `Nat.casesOn`,\n  which causes case splits on `n : Nat` to be represented as `0` and `n' + 1` rather than as `Nat.zero` and `Nat.succ n'`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.MVarId.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">majorFVarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.AltVarNames\">Meta.AltVarNames</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useNatCasesAuxOn</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\">Meta.CasesSubgoal</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L261-L282","name":"Lean.Meta.Cases.cases","line":261,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.cases\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">cases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">majorFVarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.AltVarNames\">AltVarNames</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useNatCasesAuxOn</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\">CasesSubgoal</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L229-L237","name":"Lean.Meta.Cases.unifyEqs?","line":229,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.unifyEqs?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.unifyEqs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">unifyEqs?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numEqs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">caseName?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">FVarSubst</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L163-L163","name":"Lean.Meta.Cases.Context.majorTypeIndices","line":163,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeIndices","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">majorTypeIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L162-L162","name":"Lean.Meta.Cases.Context.majorTypeArgs","line":162,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeArgs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">majorTypeArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L161-L161","name":"Lean.Meta.Cases.Context.majorTypeFn","line":161,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorTypeFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">majorTypeFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L160-L160","name":"Lean.Meta.Cases.Context.majorDecl","line":160,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.majorDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">majorDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L159-L159","name":"Lean.Meta.Cases.Context.nminors","line":159,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.nminors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.nminors\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">nminors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L158-L158","name":"Lean.Meta.Cases.Context.casesOnVal","line":158,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.casesOnVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.casesOnVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">casesOnVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">DefinitionVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L157-L157","name":"Lean.Meta.Cases.Context.inductiveVal","line":157,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.inductiveVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.inductiveVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">inductiveVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.InductiveVal\">InductiveVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L156-L156","name":"Lean.Meta.Cases.Context.mk","line":156,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inductiveVal</span> : <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">InductiveVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">casesOnVal</span> : <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">DefinitionVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nminors</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">majorDecl</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">LocalDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">majorTypeFn</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">majorTypeArgs </span><span class=\"fn\">majorTypeIndices</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L156-L163","name":"Lean.Meta.Cases.Context","line":156,"kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.Cases.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Cases</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L152-L152","name":"Lean.Meta.CasesSubgoal.ctorName","line":152,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.ctorName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.ctorName\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesSubgoal</span>.<span class=\"name\">ctorName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\">CasesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L151-L151","name":"Lean.Meta.CasesSubgoal.mk","line":151,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesSubgoal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toInductionSubgoal</span> : <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.InductionSubgoal\">InductionSubgoal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\">CasesSubgoal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L151-L152","name":"Lean.Meta.CasesSubgoal.toInductionSubgoal","line":151,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.toInductionSubgoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal.toInductionSubgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesSubgoal</span>.<span class=\"name\">toInductionSubgoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\">CasesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.InductionSubgoal\">InductionSubgoal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L151-L152","name":"Lean.Meta.CasesSubgoal","line":151,"kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.CasesSubgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CasesSubgoal</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.InductionSubgoal\">Lean.Meta.InductionSubgoal</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L128-L149","name":"Lean.Meta.generalizeIndices","line":128,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeIndices","doc":"Similar to `generalizeTargets` but customized for the `casesOn` motive.\nGiven a metavariable `mvarId` representing the\n```\nCtx, h : I A j, D |- T\n```\nwhere `fvarId` is `h`s id, and the type `I A j` is an inductive datatype where `A` are parameters,\nand `j` the indices. Generate the goal\n```\nCtx, h : I A j, D, j' : J, h' : I A j' |- j == j' -> h == h' -> T\n```\nRemark: `(j == j' -> h == h')` is a \"telescopic\" equality.\nRemark: `j` is sequence of terms, and `j'` a sequence of free variables.\nThe result contains the fields\n- `mvarId`: the new goal\n- `indicesFVarIds`: `j'` ids\n- `fvarId`: `h'` id\n- `numEqs`: number of equations in the target "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeIndices\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">generalizeIndices</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">GeneralizeIndicesSubgoal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L69-L126","name":"Lean.Meta.generalizeIndices'","line":69,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeIndices'","doc":"Given a metavariable `mvarId` representing the goal\n```\nCtx |- T\n```\nand an expression `e : I A j`, where `I A j` is an inductive datatype where `A` are parameters,\nand `j` the indices. Generate the goal\n```\nCtx, j' : J, h' : I A j' |- j == j' -> e == h' -> T\n```\nRemark: `(j == j' -> e == h')` is a \"telescopic\" equality.\nRemark: `j` is sequence of terms, and `j'` a sequence of free variables.\nThe result contains the fields\n- `mvarId`: the new goal\n- `indicesFVarIds`: `j'` ids\n- `fvarId`: `h'` id\n- `numEqs`: number of equations in the target\n\nIf `varName?` is not none, it is used to name `h'`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeIndices'\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">generalizeIndices'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varName?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">GeneralizeIndicesSubgoal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L67-L67","name":"Lean.Meta.GeneralizeIndicesSubgoal.numEqs","line":67,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.numEqs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.numEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span>.<span class=\"name\">numEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">GeneralizeIndicesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L66-L66","name":"Lean.Meta.GeneralizeIndicesSubgoal.fvarId","line":66,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">GeneralizeIndicesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L65-L65","name":"Lean.Meta.GeneralizeIndicesSubgoal.indicesFVarIds","line":65,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.indicesFVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.indicesFVarIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span>.<span class=\"name\">indicesFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">GeneralizeIndicesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L64-L64","name":"Lean.Meta.GeneralizeIndicesSubgoal.mvarId","line":64,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">GeneralizeIndicesSubgoal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L63-L63","name":"Lean.Meta.GeneralizeIndicesSubgoal.mk","line":63,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indicesFVarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numEqs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\">GeneralizeIndicesSubgoal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L63-L67","name":"Lean.Meta.GeneralizeIndicesSubgoal","line":63,"kind":"structure","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.GeneralizeIndicesSubgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">GeneralizeIndicesSubgoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L46-L61","name":"Lean.Meta.generalizeTargetsEq","line":46,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeTargetsEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.generalizeTargetsEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">generalizeTargetsEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motiveType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">targets</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L37-L43","name":"Lean.Meta.withNewEqs.loop","line":37,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.withNewEqs.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.withNewEqs.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">withNewEqs</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">targets </span><span class=\"fn\">targetsNew</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newEqs </span><span class=\"fn\">newRefls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L36-L44","name":"Lean.Meta.withNewEqs","line":36,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.withNewEqs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.withNewEqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">withNewEqs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">targets </span><span class=\"fn\">targetsNew</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Cases.lean#L20-L25","name":"Lean.Meta.getInductiveUniverseAndParams","line":20,"kind":"def","docLink":"./Lean/Meta/Tactic/Cases.html#Lean.Meta.getInductiveUniverseAndParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Cases.html#Lean.Meta.getInductiveUniverseAndParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getInductiveUniverseAndParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>"}]}