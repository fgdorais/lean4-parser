{"name":"Lean.Elab.RecAppSyntax","instances":[],"imports":["Lean.Expr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/RecAppSyntax.lean#L37-L43","name":"Lean.hasRecAppSyntax","line":37,"kind":"def","docLink":"./Lean/Elab/RecAppSyntax.html#Lean.hasRecAppSyntax","doc":"Return `true` if `getRecAppSyntax? e` is a `some`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/RecAppSyntax.html#Lean.hasRecAppSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">hasRecAppSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/RecAppSyntax.lean#L31-L35","name":"Lean.MData.isRecApp","line":31,"kind":"def","docLink":"./Lean/Elab/RecAppSyntax.html#Lean.MData.isRecApp","doc":"Checks if the `MData` is for a recursive application.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/RecAppSyntax.html#Lean.MData.isRecApp\"><span class=\"name\">Lean</span>.<span class=\"name\">MData</span>.<span class=\"name\">isRecApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Expr.html#Lean.MData\">MData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/RecAppSyntax.lean#L20-L29","name":"Lean.getRecAppSyntax?","line":20,"kind":"def","docLink":"./Lean/Elab/RecAppSyntax.html#Lean.getRecAppSyntax?","doc":"Retrieve (if available) the syntax object attached to a recursive application.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/RecAppSyntax.html#Lean.getRecAppSyntax?\"><span class=\"name\">Lean</span>.<span class=\"name\">getRecAppSyntax?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/RecAppSyntax.lean#L13-L18","name":"Lean.mkRecAppWithSyntax","line":13,"kind":"def","docLink":"./Lean/Elab/RecAppSyntax.html#Lean.mkRecAppWithSyntax","doc":"We store the syntax at recursive applications to be able to generate better error messages\nwhen performing well-founded and structural recursion.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/RecAppSyntax.html#Lean.mkRecAppWithSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">mkRecAppWithSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"}]}