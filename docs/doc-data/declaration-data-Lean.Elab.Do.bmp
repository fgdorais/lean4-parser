{"name":"Lean.Elab.Do","instances":[{"typeNames":["Lean.Elab.Term.Do.Alt"],"name":"Lean.Elab.Term.Do.instInhabitedAlt","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.Do.AltExpr"],"name":"Lean.Elab.Term.Do.instInhabitedAltExpr","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.Do.Code"],"name":"Lean.Elab.Term.Do.instInhabitedCode","className":"Inhabited"},{"typeNames":["Lean.Elab.Term.Do.ToTerm.Kind"],"name":"Lean.Elab.Term.Do.ToTerm.instInhabitedKind","className":"Inhabited"}],"imports":["Lean.Elab.Term","Lean.Elab.BindersUtil","Lean.Elab.PatternVar","Lean.Elab.Quotation.Util","Lean.Parser.Do"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1818-L1819","name":"Lean.Elab.Term.expandTermReturn","line":1818,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermReturn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1815-L1816","name":"Lean.Elab.Term.expandTermUnless","line":1815,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermUnless","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermUnless\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermUnless</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1812-L1813","name":"Lean.Elab.Term.expandTermTry","line":1812,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermTry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermTry\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermTry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1809-L1810","name":"Lean.Elab.Term.expandTermFor","line":1809,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.expandTermFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">expandTermFor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1791-L1799","name":"Lean.Elab.Term.Do.elabDo","line":1791,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.elabDo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.elabDo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">elabDo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1786-L1787","name":"Lean.Elab.Term.Do.ToCodeBlock.run","line":1786,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doStx </span><span class=\"fn\">m </span><span class=\"fn\">returnType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1703-L1783","name":"Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode","line":1703,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doSeqToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doSeqToCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1643-L1701","name":"Lean.Elab.Term.Do.ToCodeBlock.doTryToCode","line":1643,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doTryToCode","doc":"Generate `CodeBlock` for `doTry; doElems`\n```\ndef doTry := leading_parser \"try \" >> doSeq >> many (doCatch <|> doCatchMatch) >> optional doFinally\ndef doCatch      := leading_parser \"catch \" >> binderIdent >> optional (\":\" >> termParser) >> darrow >> doSeq\ndef doCatchMatch := leading_parser \"catch \" >> doMatchAlts\ndef doFinally    := leading_parser \"finally \" >> doSeq\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doTryToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doTryToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doTry</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1625-L1641","name":"Lean.Elab.Term.Do.ToCodeBlock.doMatchExprToCode","line":1625,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchExprToCode","doc":"Generate `CodeBlock` for `doMatchExpr; doElems` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchExprToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doMatchExprToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doMatchExpr</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1607-L1623","name":"Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode","line":1607,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode","doc":"Generate `CodeBlock` for `doMatch; doElems` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doMatchToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doMatchToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doMatch</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1515-L1605","name":"Lean.Elab.Term.Do.ToCodeBlock.doForToCode","line":1515,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doForToCode","doc":"Generate `CodeBlock` for `doFor; doElems`\n`doFor` is of the form\n```\ndef doForDecl := leading_parser termParser >> \" in \" >> withForbidden \"do\" termParser\ndef doFor := leading_parser \"for \" >> sepBy1 doForDecl \", \" >> \"do \" >> doSeq\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doForToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doForToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doFor</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1503-L1513","name":"Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode","line":1503,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode","doc":"Generate `CodeBlock` for `doUnless; doElems`\n`doUnless` is of the form\n```\n\"unless \" >> termParser >> \"do \" >> doSeq\n```  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doUnlessToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doUnlessToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doUnless</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1489-L1501","name":"Lean.Elab.Term.Do.ToCodeBlock.doIfToCode","line":1489,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doIfToCode","doc":"Generate `CodeBlock` for `doIf; doElems`\n`doIf` is of the form\n```\n\"if \" >> optIdent >> termParser >> \" then \" >> doSeq\n >> many (group (try (group (\" else \" >> \" if \")) >> optIdent >> termParser >> \" then \" >> doSeq))\n >> optional (\" else \" >> doSeq)\n```  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doIfToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doIfToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doIf</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1464-L1487","name":"Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode","line":1464,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode","doc":"Generate `CodeBlock` for `doReassignArrow; doElems`\n`doReassignArrow` is of the form\n```\n(doIdDecl <|> doPatDecl)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReassignArrowToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doReassignArrowToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doReassignArrow</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1450-L1462","name":"Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode","line":1450,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetElseToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doLetElseToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doLetElse</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1401-L1448","name":"Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode","line":1401,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode","doc":"Generate `CodeBlock` for `doLetArrow; doElems`\n`doLetArrow` is of the form\n```\n\"let \" >> optional \"mut \" >> (doIdDecl <|> doPatDecl)\n```\nwhere\n```\ndef doIdDecl   := leading_parser ident >> optType >> leftArrow >> doElemParser\ndef doPatDecl  := leading_parser termParser >> leftArrow >> doElemParser >> optional (\" | \" >> doSeq)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doLetArrowToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doLetArrowToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doLetArrow</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1392-L1399","name":"Lean.Elab.Term.Do.ToCodeBlock.concatWith","line":1392,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.concatWith","doc":"\"Concatenate\" `c` with `doSeqToCode doElems` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.concatWith\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">concatWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1384-L1389","name":"Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred","line":1384,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.tryCatchPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">tryCatchPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tryCode</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finallyCode?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1376-L1382","name":"Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars","line":1376,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.getTryCatchUpdatedVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">getTryCatchUpdatedVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tryCode</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">catches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finallyCode?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1374-L1374","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock","line":1374,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.codeBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">codeBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1373-L1373","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.optType","line":1373,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.optType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.optType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">optType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1372-L1372","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.x","line":1372,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.x","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.x\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">x</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1371-L1371","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch.mk","line":1371,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">optType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeBlock</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\">Catch</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1371-L1374","name":"Lean.Elab.Term.Do.ToCodeBlock.Catch","line":1371,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Catch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Catch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1360-L1369","name":"Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode","line":1360,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode","doc":"Generate `CodeBlock` for `doReturn` which is of the form\n```\n\"return \" >> optional termParser\n```\n`doElems` is only used for sanity checking. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.doReturnToCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">doReturnToCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doReturn</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1350-L1358","name":"Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS","line":1350,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkLetArrowRHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">checkLetArrowRHS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1342-L1348","name":"Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod","line":1342,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.expandLiftMethod\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">expandLiftMethod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1302-L1304","name":"Lean.Elab.Term.Do.ToCodeBlock.ensureEOS","line":1302,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureEOS","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureEOS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ensureEOS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1298-L1300","name":"Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor","line":1298,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ensureInsideFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ensureInsideFor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1291-L1296","name":"Lean.Elab.Term.Do.ToCodeBlock.mkForInBody","line":1291,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.mkForInBody","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.mkForInBody\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">mkForInBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\">(<span class=\"fn\">forInBody</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>) → <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">ToForInTermResult</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1289-L1289","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term","line":1289,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">ToForInTermResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1288-L1288","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars","line":1288,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.uvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span>.<span class=\"name\">uvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">ToForInTermResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1287-L1287","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk","line":1287,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\">ToForInTermResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1287-L1289","name":"Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult","line":1287,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.ToForInTermResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">ToForInTermResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1284-L1285","name":"Lean.Elab.Term.Do.ToCodeBlock.withFor","line":1284,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">withFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1276-L1282","name":"Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable","line":1276,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkNotShadowingMutable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">checkNotShadowingMutable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1268-L1274","name":"Lean.Elab.Term.Do.ToCodeBlock.checkReassignable","line":1268,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkReassignable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.checkReassignable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">checkReassignable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1265-L1266","name":"Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars","line":1265,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.withNewMutableVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">withNewMutableVars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutable</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\">M</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1263-L1263","name":"Lean.Elab.Term.Do.ToCodeBlock.M","line":1263,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1261-L1261","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor","line":1261,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.insideFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">insideFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1260-L1260","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars","line":1260,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mutableVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">mutableVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1259-L1259","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.returnType","line":1259,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.returnType","doc":"Syntax to reference the result of the monadic computation performed by the do notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.returnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">returnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1257-L1257","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.m","line":1257,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.m","doc":"Syntax representing the monad associated with the do notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.m\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">m</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1255-L1255","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.ref","line":1255,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1254-L1254","name":"Lean.Elab.Term.Do.ToCodeBlock.Context.mk","line":1254,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">m </span><span class=\"fn\">returnType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mutableVars</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">insideFor</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1254-L1261","name":"Lean.Elab.Term.Do.ToCodeBlock.Context","line":1254,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToCodeBlock.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToCodeBlock</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1246-L1250","name":"Lean.Elab.Term.Do.isMutableLet","line":1246,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isMutableLet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isMutableLet\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">isMutableLet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1191-L1242","name":"Lean.Elab.Term.Do.ToTerm.matchNestedTermResult","line":1191,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.matchNestedTermResult","doc":"Given a term `term` produced by `ToTerm.run`, pattern match on its result.\nSee comment at the beginning of the `ToTerm` namespace.\n\n- `a` is true if the code block has a `Code.action _` exit point\n- `r` is true if the code block has a `Code.return _ _` exit point\n- `bc` is true if the code block has a `Code.break _` or `Code.continue _` exit point\n\nThe result is a sequence of `doElem` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.matchNestedTermResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">matchNestedTermResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">r </span><span class=\"fn\">bc</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1188-L1189","name":"Lean.Elab.Term.Do.ToTerm.mkNestedTerm","line":1188,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkNestedTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">returnType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">r </span><span class=\"fn\">bc</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1171-L1186","name":"Lean.Elab.Term.Do.ToTerm.mkNestedKind","line":1171,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedKind","doc":"Given\n- `a` is true if the code block has a `Code.action _` exit point\n- `r` is true if the code block has a `Code.return _ _` exit point\n- `bc` is true if the code block has a `Code.break _` or `Code.continue _` exit point\n\ngenerate Kind. See comment at the beginning of the `ToTerm` namespace. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkNestedKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkNestedKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">r </span><span class=\"fn\">bc</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1168-L1169","name":"Lean.Elab.Term.Do.ToTerm.run","line":1168,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">returnType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a> := <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.regular\">Kind.regular</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1131-L1166","name":"Lean.Elab.Term.Do.ToTerm.toTerm.go","line":1131,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">toTerm</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1124-L1166","name":"Lean.Elab.Term.Do.ToTerm.toTerm","line":1124,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.toTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">toTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1121-L1122","name":"Lean.Elab.Term.Do.ToTerm.mkJmp","line":1121,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1092-L1119","name":"Lean.Elab.Term.Do.ToTerm.mkJoinPoint","line":1092,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJoinPoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkJoinPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkJoinPoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1085-L1090","name":"Lean.Elab.Term.Do.ToTerm.mkIte","line":1085,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkIte","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkIte\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkIte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optIdent </span><span class=\"fn\">cond </span><span class=\"fn\">thenBranch </span><span class=\"fn\">elseBranch</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1077-L1083","name":"Lean.Elab.Term.Do.ToTerm.reassignToTerm","line":1077,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.reassignToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.reassignToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">reassignToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reassign </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1046-L1075","name":"Lean.Elab.Term.Do.ToTerm.declToTerm","line":1046,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.declToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.declToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">declToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1032-L1044","name":"Lean.Elab.Term.Do.ToTerm.seqToTerm","line":1032,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.seqToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.seqToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">seqToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1020-L1030","name":"Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm","line":1020,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.actionTerminalToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">actionTerminalToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L1008-L1018","name":"Lean.Elab.Term.Do.ToTerm.breakToTerm","line":1008,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.breakToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.breakToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">breakToTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L996-L1006","name":"Lean.Elab.Term.Do.ToTerm.continueToTerm","line":996,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.continueToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.continueToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">continueToTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L984-L994","name":"Lean.Elab.Term.Do.ToTerm.returnToTerm","line":984,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.returnToTerm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.returnToTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">returnToTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L980-L982","name":"Lean.Elab.Term.Do.ToTerm.mkUVarTuple","line":980,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkUVarTuple","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.mkUVarTuple\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">mkUVarTuple</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L978-L978","name":"Lean.Elab.Term.Do.ToTerm.M","line":978,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L976-L976","name":"Lean.Elab.Term.Do.ToTerm.Context.kind","line":976,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L975-L975","name":"Lean.Elab.Term.Do.ToTerm.Context.uvars","line":975,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.uvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.uvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">uvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L974-L974","name":"Lean.Elab.Term.Do.ToTerm.Context.returnType","line":974,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.returnType","doc":"Syntax to reference the result of the monadic computation performed by the do notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.returnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">returnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L972-L972","name":"Lean.Elab.Term.Do.ToTerm.Context.m","line":972,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.m","doc":"Syntax to reference the monad associated with the do notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.m\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">m</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L970-L970","name":"Lean.Elab.Term.Do.ToTerm.Context.mk","line":970,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">returnType</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L970-L976","name":"Lean.Elab.Term.Do.ToTerm.Context","line":970,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L966-L968","name":"Lean.Elab.Term.Do.ToTerm.Kind.isRegular","line":966,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.isRegular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.isRegular\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">isRegular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L964-L964","name":"Lean.Elab.Term.Do.ToTerm.instInhabitedKind","line":964,"kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.instInhabitedKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.instInhabitedKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">instInhabitedKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L962-L962","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC","line":962,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPRBC\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedPRBC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L961-L961","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC","line":961,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedSBC\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedSBC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L960-L960","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedPR","line":960,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedPR\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedPR</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L959-L959","name":"Lean.Elab.Term.Do.ToTerm.Kind.nestedBC","line":959,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedBC","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.nestedBC\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">nestedBC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L958-L958","name":"Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn","line":958,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forInWithReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">forInWithReturn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L957-L957","name":"Lean.Elab.Term.Do.ToTerm.Kind.forIn","line":957,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forIn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.forIn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">forIn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L956-L956","name":"Lean.Elab.Term.Do.ToTerm.Kind.regular","line":956,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.regular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind.regular\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span>.<span class=\"name\">regular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\">Kind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L955-L962","name":"Lean.Elab.Term.Do.ToTerm.Kind","line":955,"kind":"inductive","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.ToTerm.Kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">ToTerm</span>.<span class=\"name\">Kind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L931-L951","name":"Lean.Elab.Term.Do.annotate","line":931,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.annotate","doc":"Helper method for annotating `term` with the raw syntax `ref`.\nWe use this method to implement finer-grained term infos for `do`-blocks.\n\nWe use `withRef term` to make sure the synthetic position for the `with_annotate_term` is equal\nto the one for `term`. This is important for producing error messages when there is a type mismatch.\nConsider the following example:\n```\nopaque f : IO Nat\n\ndef g : IO String := do\n  f\n```\nThere is at type mismatch at `f`, but it is detected when elaborating the expanded term\ncontaining the `with_annotate_term .. f`. The current `getRef` when this `annotate` is invoked\nis not necessarily `f`. Actually, it is the whole `do`-block. By using `withRef` we ensure\nthe synthetic position for the `with_annotate_term ..` is equal to `term`.\nRecall that synthetic positions are used when generating error messages.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.annotate\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">annotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">term</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L807-L812","name":"Lean.Elab.Term.Do.isDoExpr?","line":807,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isDoExpr?","doc":"Return `some action` if `doElem` is a `doExpr <action>`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.isDoExpr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">isDoExpr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L778-L778","name":"Lean.Elab.Term.Do.DoIfView.elseBranch","line":778,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.elseBranch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.elseBranch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">elseBranch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L777-L777","name":"Lean.Elab.Term.Do.DoIfView.thenBranch","line":777,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.thenBranch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.thenBranch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">thenBranch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L776-L776","name":"Lean.Elab.Term.Do.DoIfView.cond","line":776,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.cond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.cond\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">cond</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L775-L775","name":"Lean.Elab.Term.Do.DoIfView.optIdent","line":775,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.optIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.optIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">optIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L774-L774","name":"Lean.Elab.Term.Do.DoIfView.ref","line":774,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L773-L773","name":"Lean.Elab.Term.Do.DoIfView.mk","line":773,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">optIdent </span><span class=\"fn\">cond </span><span class=\"fn\">thenBranch </span><span class=\"fn\">elseBranch</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\">DoIfView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L773-L778","name":"Lean.Elab.Term.Do.DoIfView","line":773,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.DoIfView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">DoIfView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L739-L740","name":"Lean.Elab.Term.Do.mkDoSeq","line":739,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkDoSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkDoSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkDoSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L730-L737","name":"Lean.Elab.Term.Do.getDoReassignVars","line":730,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoReassignVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoReassignVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoReassignVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doReassign</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L721-L728","name":"Lean.Elab.Term.Do.getDoLetArrowVars","line":721,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetArrowVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetArrowVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoLetArrowVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doLetArrow</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L716-L718","name":"Lean.Elab.Term.Do.getDoPatDeclVars","line":716,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoPatDeclVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoPatDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoPatDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doPatDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L712-L713","name":"Lean.Elab.Term.Do.getDoIdDeclVar","line":712,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoIdDeclVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoIdDeclVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoIdDeclVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doIdDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L701-L709","name":"Lean.Elab.Term.Do.getDoLetRecVars","line":701,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetRecVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetRecVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoLetRecVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doLetRec</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L691-L699","name":"Lean.Elab.Term.Do.getDoHaveVars","line":691,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoHaveVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoHaveVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoHaveVars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L687-L689","name":"Lean.Elab.Term.Do.getDoLetVars","line":687,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getDoLetVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getDoLetVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doLet</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L676-L685","name":"Lean.Elab.Term.Do.getLetDeclVars","line":676,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetDeclVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L670-L674","name":"Lean.Elab.Term.Do.getLetEqnsDeclVars","line":670,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetEqnsDeclVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetEqnsDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetEqnsDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letEqnsDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L666-L668","name":"Lean.Elab.Term.Do.getLetPatDeclVars","line":666,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetPatDeclVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetPatDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetPatDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letPatDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L662-L664","name":"Lean.Elab.Term.Do.getPatternsVarsEx","line":662,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternsVarsEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternsVarsEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getPatternsVarsEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patterns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L658-L660","name":"Lean.Elab.Term.Do.getPatternVarsEx","line":658,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternVarsEx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getPatternVarsEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getPatternVarsEx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pattern</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L651-L655","name":"Lean.Elab.Term.Do.getLetIdDeclVars","line":651,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetIdDeclVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.getLetIdDeclVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">getLetIdDeclVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letIdDecl</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L636-L649","name":"Lean.Elab.Term.Do.concat","line":636,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.concat","doc":"Return a code block that executes `terminal` and then `k` with the value produced by `terminal`.\nThis method assumes `terminal` is a terminal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">concat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">terminal</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kRef</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L626-L634","name":"Lean.Elab.Term.Do.mkMatchExpr","line":626,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatchExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatchExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkMatchExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">meta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elseBranch</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L618-L624","name":"Lean.Elab.Term.Do.mkMatch","line":618,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">genParam </span><span class=\"fn\">discrs </span><span class=\"fn\">optMotive</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L614-L616","name":"Lean.Elab.Term.Do.mkUnless","line":614,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkUnless","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkUnless\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkUnless</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L611-L612","name":"Lean.Elab.Term.Do.mkPureUnitAction","line":611,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkPureUnitAction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkPureUnitAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkPureUnitAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L597-L603","name":"Lean.Elab.Term.Do.mkIte","line":597,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkIte","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkIte\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkIte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">optIdent </span><span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thenBranch </span><span class=\"fn\">elseBranch</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L594-L595","name":"Lean.Elab.Term.Do.mkContinue","line":594,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkContinue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkContinue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkContinue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L591-L592","name":"Lean.Elab.Term.Do.mkBreak","line":591,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkBreak","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkBreak\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkBreak</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L588-L589","name":"Lean.Elab.Term.Do.mkReturn","line":588,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkReturn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L585-L586","name":"Lean.Elab.Term.Do.mkTerminalAction","line":585,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkTerminalAction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkTerminalAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkTerminalAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L582-L583","name":"Lean.Elab.Term.Do.mkSeq","line":582,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkSeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L568-L580","name":"Lean.Elab.Term.Do.mkReassignCore","line":568,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReassignCore","doc":"Extending code blocks with reassignments: `x : t := v` and `x : t ← v`.\nRemark: `stx` is the syntax for the declaration (e.g., `letDecl`), and `xs` are the variables\ndeclared by it. It is an array because we have let-declarations that declare multiple variables.\nExample: `(x, y) ← t`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkReassignCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkReassignCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L556-L566","name":"Lean.Elab.Term.Do.mkVarDeclCore","line":556,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkVarDeclCore","doc":"Extending code blocks with variable declarations: `let x : t := v` and `let x : t ← v`.\nWe remove `x` from the collection of updated variables.\nRemark: `stx` is the syntax for the declaration (e.g., `letDecl`), and `xs` are the variables\ndeclared by it. It is an array because we have let-declarations that declare multiple variables.\nExample: `let (x, y) := t`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkVarDeclCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkVarDeclCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L545-L554","name":"Lean.Elab.Term.Do.homogenize","line":545,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.homogenize","doc":"Given two code blocks `c₁` and `c₂`, make sure they have the same set of updated variables.\nLet `ws` the union of the updated variables in `c₁‵ and ‵c₂`.\nWe use `extendUpdatedVars c₁ ws` and `extendUpdatedVars c₂ ws`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.homogenize\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">homogenize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L530-L540","name":"Lean.Elab.Term.Do.extendUpdatedVars","line":530,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVars","doc":"Extend the set of updated variables. It assumes `ws` is a super set of `c.uvars`.\nWe **cannot** simply update the field `c.uvars`, because `c` may have shadowed some variable in `ws`.\nSee discussion at `pullExitPoints`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">extendUpdatedVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ws</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L495-L527","name":"Lean.Elab.Term.Do.extendUpdatedVarsAux.update","line":495,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux.update","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux.update\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">extendUpdatedVarsAux</span>.<span class=\"name\">update</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ws</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L494-L528","name":"Lean.Elab.Term.Do.extendUpdatedVarsAux","line":494,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.extendUpdatedVarsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">extendUpdatedVarsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ws</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L438-L492","name":"Lean.Elab.Term.Do.pullExitPoints","line":438,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPoints","doc":"Auxiliary operation for adding new variables to the collection of updated variables in a CodeBlock.\nWhen a new variable is not already in the collection, but is shadowed by some declaration in `c`,\nwe create auxiliary join points to make sure we preserve the semantics of the code block.\nExample: suppose we have the code block `print x; let x := 10; return x`. And we want to extend it\nwith the reassignment `x := x + 1`. We first use `pullExitPoints` to create\n```\nlet jp (x!1) :=  return x!1;\nprint x;\nlet x := 10;\njmp jp x\n```\nand then we add the reassignment\n```\nx := x + 1\nlet jp (x!1) := return x!1;\nprint x;\nlet x := 10;\njmp jp x\n```\nNote that we created a fresh variable `x!1` to avoid accidental name capture.\nAs another example, consider\n```\nprint x;\nlet x := 10\ny := y + 1;\nreturn x;\n```\nWe transform it into\n```\nlet jp (y x!1) := return x!1;\nprint x;\nlet x := 10\ny := y + 1;\njmp jp y x\n```\nand then we add the reassignment as in the previous example.\nWe need to include `y` in the jump, because each exit point is implicitly returning the set of\nupdate variables.\n\nWe implement the method as follows. Let `us` be `c.uvars`, then\n1- for each `return _ y` in `c`, we create a join point\n  `let j (us y!1) := return y!1`\n   and replace the `return _ y` with `jmp us y`\n2- for each `break`, we create a join point\n  `let j (us) := break`\n   and replace the `break` with `jmp us`.\n3- Same as 2 for `continue`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPoints\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">pullExitPoints</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L413-L436","name":"Lean.Elab.Term.Do.pullExitPointsAux","line":413,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPointsAux","doc":"`pullExitPointsAux rs c` auxiliary method for `pullExitPoints`, `rs` is the set of update variable in the current path.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.pullExitPointsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">pullExitPointsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L400-L411","name":"Lean.Elab.Term.Do.mkJmp","line":400,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkJmp","doc":"Create a new joinpoint that takes `rs` and `val` as arguments. `val` must be syntax representing a pure value.\nThe body of the joinpoint is created using `mkJPBody yFresh`, where `yFresh`\nis a fresh variable created by this method. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkJPBody</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L390-L398","name":"Lean.Elab.Term.Do.mkSimpleJmp","line":390,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSimpleJmp","doc":"Create a new jointpoint for `c`, and jump to it with the variables `rs` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkSimpleJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkSimpleJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L385-L388","name":"Lean.Elab.Term.Do.eraseOptVar","line":385,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseOptVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseOptVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">eraseOptVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L382-L383","name":"Lean.Elab.Term.Do.eraseVars","line":382,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.eraseVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">eraseVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L379-L380","name":"Lean.Elab.Term.Do.insertVars","line":379,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.insertVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.insertVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">insertVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L374-L377","name":"Lean.Elab.Term.Do.addFreshJP","line":374,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.addFreshJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.addFreshJP\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">addFreshJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L362-L372","name":"Lean.Elab.Term.Do.mkFreshJP","line":362,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkFreshJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkFreshJP\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkFreshJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L359-L360","name":"Lean.Elab.Term.Do.attachJPs","line":359,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJPs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJPs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">attachJPs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jpDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L356-L357","name":"Lean.Elab.Term.Do.attachJP","line":356,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.attachJP\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">attachJP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jpDecl</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L354-L354","name":"Lean.Elab.Term.Do.JPDecl.body","line":354,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.body","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.body\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">body</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L353-L353","name":"Lean.Elab.Term.Do.JPDecl.params","line":353,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.params","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L352-L352","name":"Lean.Elab.Term.Do.JPDecl.name","line":352,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L351-L351","name":"Lean.Elab.Term.Do.JPDecl.mk","line":351,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\">JPDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L351-L354","name":"Lean.Elab.Term.Do.JPDecl","line":351,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.JPDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">JPDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L331-L348","name":"Lean.Elab.Term.Do.convertTerminalActionIntoJmp.loop","line":331,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">convertTerminalActionIntoJmp</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jp</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L329-L349","name":"Lean.Elab.Term.Do.convertTerminalActionIntoJmp","line":329,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp","doc":"Convert `action _ e` instructions in `c` into `let y ← e; jmp _ jp (xs y)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.convertTerminalActionIntoJmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">convertTerminalActionIntoJmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jp</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L321-L327","name":"Lean.Elab.Term.Do.mkAuxDeclFor","line":321,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkAuxDeclFor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.mkAuxDeclFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">mkAuxDeclFor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkCont</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L314-L319","name":"Lean.Elab.Term.Do.hasBreakContinueReturn","line":314,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinueReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinueReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasBreakContinueReturn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L308-L312","name":"Lean.Elab.Term.Do.hasBreakContinue","line":308,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasBreakContinue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasBreakContinue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L303-L306","name":"Lean.Elab.Term.Do.hasTerminalAction","line":303,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasTerminalAction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasTerminalAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasTerminalAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L298-L301","name":"Lean.Elab.Term.Do.hasReturn","line":298,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasReturn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasReturn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L295-L296","name":"Lean.Elab.Term.Do.hasExitPoint","line":295,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasExitPoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L283-L292","name":"Lean.Elab.Term.Do.hasExitPointPred.loop","line":283,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasExitPointPred</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L281-L293","name":"Lean.Elab.Term.Do.hasExitPointPred","line":281,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred","doc":"Return true if the give code contains an exit point that satisfies `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.hasExitPointPred\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">hasExitPointPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L257-L278","name":"Lean.Elab.Term.Do.CodeBlocl.toMessageData.loop","line":257,"kind":"opaque","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlocl.toMessageData.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlocl.toMessageData.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlocl</span>.<span class=\"name\">toMessageData</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">us</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L255-L279","name":"Lean.Elab.Term.Do.CodeBlocl.toMessageData","line":255,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlocl.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlocl.toMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlocl</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeBlock</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L247-L247","name":"Lean.Elab.Term.Do.CodeBlock.uvars","line":247,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.uvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.uvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span>.<span class=\"name\">uvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L246-L246","name":"Lean.Elab.Term.Do.CodeBlock.code","line":246,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.code","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.code\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span>.<span class=\"name\">code</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L245-L245","name":"Lean.Elab.Term.Do.CodeBlock.mk","line":245,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uvars</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\">VarSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\">CodeBlock</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L244-L247","name":"Lean.Elab.Term.Do.CodeBlock","line":244,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock","doc":"A code block, and the collection of variables updated by it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.CodeBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">CodeBlock</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L242-L242","name":"Lean.Elab.Term.Do.VarSet","line":242,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.VarSet\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">VarSet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L228-L240","name":"Lean.Elab.Term.Do.Code.getRef?","line":228,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.getRef?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.getRef?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">getRef?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L226-L226","name":"Lean.Elab.Term.Do.instInhabitedCode","line":226,"kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L225-L225","name":"Lean.Elab.Term.Do.Code.jmp","line":225,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.jmp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.jmp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">jmp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">jpName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L224-L224","name":"Lean.Elab.Term.Do.Code.matchExpr","line":224,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.matchExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.matchExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">matchExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">meta</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discr</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elseBranch</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L223-L223","name":"Lean.Elab.Term.Do.Code.match","line":223,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.match","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.match\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">match</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">gen </span><span class=\"fn\">discrs </span><span class=\"fn\">optMotive</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L221-L222","name":"Lean.Elab.Term.Do.Code.ite","line":221,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.ite","doc":"Recall that an if-then-else may declare a variable using `optIdent` for the branches `thenBranch` and `elseBranch`. We store the variable name at `var?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.ite\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">ite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optIdent </span><span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thenBranch </span><span class=\"fn\">elseBranch</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L220-L220","name":"Lean.Elab.Term.Do.Code.return","line":220,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.return","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.return\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">return</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L219-L219","name":"Lean.Elab.Term.Do.Code.continue","line":219,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.continue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.continue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">continue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L218-L218","name":"Lean.Elab.Term.Do.Code.break","line":218,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.break","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.break\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">break</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L217-L217","name":"Lean.Elab.Term.Do.Code.action","line":217,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.action","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.action\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">action</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L216-L216","name":"Lean.Elab.Term.Do.Code.seq","line":216,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.seq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.seq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">seq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L214-L215","name":"Lean.Elab.Term.Do.Code.joinpoint","line":214,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.joinpoint","doc":"The Boolean value in `params` indicates whether we should use `(x : typeof! x)` when generating term Syntax or not "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.joinpoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">joinpoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body </span><span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L213-L213","name":"Lean.Elab.Term.Do.Code.reassign","line":213,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.reassign","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.reassign\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">reassign</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L212-L212","name":"Lean.Elab.Term.Do.Code.decl","line":212,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.decl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doElem</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L163-L226","name":"Lean.Elab.Term.Do.Code","line":163,"kind":"inductive","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code","doc":"Auxiliary datastructure for representing a `do` code block, and compiling \"reassignments\" (e.g., `x := x + 1`).\nWe convert `Code` into a `Syntax` term representing the:\n- `do`-block, or\n- the visitor argument for the `forIn` combinator.\n\nWe say the following constructors are terminals:\n- `break`:    for interrupting a `for x in s`\n- `continue`: for interrupting the current iteration of a `for x in s`\n- `return e`: for returning `e` as the result for the whole `do` computation block\n- `action a`: for executing action `a` as a terminal\n- `ite`:      if-then-else\n- `match`:    pattern matching\n- `jmp`       a goto to a join-point\n\nWe say the terminals `break`, `continue`, `action`, and `return` are \"exit points\"\n\nNote that, `return e` is not equivalent to `action (pure e)`. Here is an example:\n```\ndef f (x : Nat) : IO Unit := do\nif x == 0 then\n   return ()\nIO.println \"hello\"\n```\nExecuting `#eval f 0` will not print \"hello\". Now, consider\n```\ndef g (x : Nat) : IO Unit := do\nif x == 0 then\n   pure ()\nIO.println \"hello\"\n```\nThe `if` statement is essentially a noop, and \"hello\" is printed when we execute `g 0`.\n\n- `decl` represents all declaration-like `doElem`s (e.g., `let`, `have`, `let rec`).\n  The field `stx` is the actual `doElem`,\n  `vars` is the array of variables declared by it, and `cont` is the next instruction in the `do` code block.\n  `vars` is an array since we have declarations such as `let (a, b) := s`.\n\n- `reassign` is an reassignment-like `doElem` (e.g., `x := x + 1`).\n\n- `joinpoint` is a join point declaration: an auxiliary `let`-declaration used to represent the control-flow.\n\n- `seq a k` executes action `a`, ignores its result, and then executes `k`.\n  We also store the do-elements `dbg_trace` and `assert!` as actions in a `seq`.\n\nA code block `C` is well-formed if\n- For every `jmp ref j as` in `C`, there is a `joinpoint j ps b k` and `jmp ref j as` is in `k`, and\n  `ps.size == as.size` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Code\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Code</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L153-L161","name":"Lean.Elab.Term.Do.AltExpr.vars","line":153,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.vars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">vars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L151-L151","name":"Lean.Elab.Term.Do.instInhabitedAltExpr","line":151,"kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAltExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAltExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedAltExpr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L150-L150","name":"Lean.Elab.Term.Do.AltExpr.rhs","line":150,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.rhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">rhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L149-L149","name":"Lean.Elab.Term.Do.AltExpr.pvars","line":149,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.pvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.pvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">pvars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L148-L148","name":"Lean.Elab.Term.Do.AltExpr.funName","line":148,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.funName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.funName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">funName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L147-L147","name":"Lean.Elab.Term.Do.AltExpr.var?","line":147,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.var?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.var?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">var?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L146-L146","name":"Lean.Elab.Term.Do.AltExpr.ref","line":146,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">ref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L145-L145","name":"Lean.Elab.Term.Do.AltExpr.mk","line":145,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funName</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\">AltExpr</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L144-L151","name":"Lean.Elab.Term.Do.AltExpr","line":144,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr","doc":"A `doMatchExpr` alternative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.AltExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">AltExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L142-L142","name":"Lean.Elab.Term.Do.instInhabitedAlt","line":142,"kind":"instance","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.instInhabitedAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">instInhabitedAlt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L141-L141","name":"Lean.Elab.Term.Do.Alt.rhs","line":141,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.rhs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">rhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L140-L140","name":"Lean.Elab.Term.Do.Alt.patterns","line":140,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.patterns","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.patterns\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">patterns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L139-L139","name":"Lean.Elab.Term.Do.Alt.vars","line":139,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.vars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">vars</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L138-L138","name":"Lean.Elab.Term.Do.Alt.ref","line":138,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">ref</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L137-L137","name":"Lean.Elab.Term.Do.Alt.mk","line":137,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patterns</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\">Alt</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L136-L142","name":"Lean.Elab.Term.Do.Alt","line":136,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt","doc":"A `doMatch` alternative. `vars` is the array of variables declared by `patterns`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L134-L134","name":"Lean.Elab.Term.Do.Var","line":134,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.Do.Var\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">Do</span>.<span class=\"name\">Var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L96-L96","name":"Lean.Elab.Term.ExtractMonadResult.expectedType","line":96,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.expectedType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.expectedType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">expectedType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">ExtractMonadResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L95-L95","name":"Lean.Elab.Term.ExtractMonadResult.returnType","line":95,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.returnType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.returnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">returnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">ExtractMonadResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L94-L94","name":"Lean.Elab.Term.ExtractMonadResult.m","line":94,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.m","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.m\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">m</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">ExtractMonadResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L93-L93","name":"Lean.Elab.Term.ExtractMonadResult.mk","line":93,"kind":"ctor","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">returnType </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\">ExtractMonadResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L93-L96","name":"Lean.Elab.Term.ExtractMonadResult","line":93,"kind":"structure","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.ExtractMonadResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">ExtractMonadResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Do.lean#L32-L33","name":"Lean.Elab.Term.elabLiftMethod","line":32,"kind":"def","docLink":"./Lean/Elab/Do.html#Lean.Elab.Term.elabLiftMethod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Do.html#Lean.Elab.Term.elabLiftMethod\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">elabLiftMethod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">TermElab</a></div></div>"}]}