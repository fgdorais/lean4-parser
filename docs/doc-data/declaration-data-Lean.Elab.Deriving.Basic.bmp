{"name":"Lean.Elab.Deriving.Basic","instances":[],"imports":["Lean.Elab.Command","Lean.Elab.DeclarationRange"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L132-L133","name":"Lean.Elab.DerivingClassView.applyHandlers","line":132,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.applyHandlers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.applyHandlers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">applyHandlers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L122-L130","name":"Lean.Elab.getOptDerivingClasses","line":122,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.getOptDerivingClasses","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.getOptDerivingClasses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getOptDerivingClasses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optDeriving</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L120-L120","name":"Lean.Elab.DerivingClassView.className","line":120,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.className","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.className\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">className</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L119-L119","name":"Lean.Elab.DerivingClassView.ref","line":119,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.ref","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L118-L118","name":"Lean.Elab.DerivingClassView.mk","line":118,"kind":"ctor","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">className</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L118-L120","name":"Lean.Elab.DerivingClassView","line":118,"kind":"structure","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L103-L116","name":"Lean.Elab.elabDeriving","line":103,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.elabDeriving","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.elabDeriving\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">elabDeriving</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Command.CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L89-L97","name":"Lean.Elab.applyDerivingHandlers","line":89,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.applyDerivingHandlers","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.applyDerivingHandlers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">applyDerivingHandlers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">className</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L86-L87","name":"Lean.Elab.defaultHandler","line":86,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.defaultHandler","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.defaultHandler\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">defaultHandler</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">className</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L74-L84","name":"Lean.Elab.registerDerivingHandler","line":74,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.registerDerivingHandler","doc":"A `DerivingHandler` is called on the fully qualified names of all types it is running for\nas well as the syntax of a `with` argument, if present.\n\nFor example, `deriving instance Foo with fooArgs for Bar, Baz` invokes\n``fooHandler #[`Bar, `Baz] `(fooArgs)``. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.registerDerivingHandler\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">registerDerivingHandler</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">className</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">DerivingHandler</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L72-L72","name":"Lean.Elab.derivingHandlersRef","line":72,"kind":"opaque","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.derivingHandlersRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.derivingHandlersRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">derivingHandlersRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">DerivingHandler</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L68-L70","name":"Lean.Elab.DerivingHandlerNoArgs","line":68,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandlerNoArgs","doc":"Deprecated - `DerivingHandler` no longer assumes arguments "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandlerNoArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingHandlerNoArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L66-L66","name":"Lean.Elab.DerivingHandler","line":66,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingHandler</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L43-L62","name":"Lean.Elab.Term.processDefDeriving","line":43,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.processDefDeriving","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.processDefDeriving\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">processDefDeriving</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">className </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L20-L20","name":"Lean.Elab.Term.MkInstResult.outParams","line":20,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.outParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.outParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MkInstResult</span>.<span class=\"name\">outParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult\">MkInstResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L19-L19","name":"Lean.Elab.Term.MkInstResult.instType","line":19,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.instType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.instType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MkInstResult</span>.<span class=\"name\">instType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult\">MkInstResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L18-L18","name":"Lean.Elab.Term.MkInstResult.instVal","line":18,"kind":"def","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.instVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.instVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MkInstResult</span>.<span class=\"name\">instVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult\">MkInstResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L17-L17","name":"Lean.Elab.Term.MkInstResult.mk","line":17,"kind":"ctor","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MkInstResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instVal </span><span class=\"fn\">instType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">outParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult\">MkInstResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Deriving/Basic.lean#L16-L20","name":"Lean.Elab.Term.MkInstResult","line":16,"kind":"structure","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult","doc":"Result for `mkInst?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.MkInstResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">MkInstResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}