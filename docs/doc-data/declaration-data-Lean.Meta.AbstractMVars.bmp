{"name":"Lean.Meta.AbstractMVars","instances":[{"typeNames":["Lean.Meta.AbstractMVars.M"],"name":"Lean.Meta.AbstractMVars.instMonadMCtxM","className":"Lean.MonadMCtx"}],"imports":["Lean.Meta.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L139-L142","name":"Lean.Meta.openAbstractMVarsResult","line":139,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.openAbstractMVarsResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.openAbstractMVarsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">openAbstractMVarsResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">AbstractMVarsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L110-L137","name":"Lean.Meta.abstractMVars","line":110,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.abstractMVars","doc":"Abstract (current depth) metavariables occurring in `e`.\nThe result contains\n- An array of universe level parameters that replaced universe metavariables occurring in `e`.\n- The number of (expr) metavariables abstracted.\n- And an expression of the form `fun (m_1 : A_1) ... (m_k : A_k) => e'`, where\n  `k` equal to the number of (expr) metavariables abstracted, and `e'` is `e` after we\n  replace the metavariables.\n\nExample: given `f.{?u} ?m1` where `?m1 : ?m2 Nat`, `?m2 : Type -> Type`. This function returns\n`{ levels := #[u], size := 2, expr := (fun (m2 : Type -> Type) (m1 : m2 Nat) => f.{u} m1) }`\n\nThis API can be used to \"transport\" to a different metavariable context.\nGiven a new metavariable context, we replace the `AbstractMVarsResult.levels` with\nnew fresh universe metavariables, and instantiate the `(m_i : A_i)` in the lambda-expression\nwith new fresh metavariables.\n\nIf `levels := false`, then level metavariables are not abstracted.\n\nApplication: we use this method to cache the results of type class resolution. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.abstractMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">abstractMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levels</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.AbstractMVarsResult\">AbstractMVarsResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L65-L106","name":"Lean.Meta.AbstractMVars.abstractExprMVars","line":65,"kind":"opaque","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.abstractExprMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.abstractExprMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">abstractExprMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L36-L37","name":"Lean.Meta.AbstractMVars.mkFreshFVarId","line":36,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.mkFreshFVarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.mkFreshFVarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">mkFreshFVarId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.M\">M</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L30-L34","name":"Lean.Meta.AbstractMVars.mkFreshId","line":30,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.mkFreshId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.mkFreshId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">mkFreshId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.M\">M</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L25-L28","name":"Lean.Meta.AbstractMVars.instMonadMCtxM","line":25,"kind":"instance","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.instMonadMCtxM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.instMonadMCtxM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">instMonadMCtxM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">MonadMCtx</a> <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L23-L23","name":"Lean.Meta.AbstractMVars.M","line":23,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L21-L21","name":"Lean.Meta.AbstractMVars.State.abstractLevels","line":21,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.abstractLevels","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.abstractLevels\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span>.<span class=\"name\">abstractLevels</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L20-L20","name":"Lean.Meta.AbstractMVars.State.emap","line":20,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.emap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.emap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span>.<span class=\"name\">emap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L19-L19","name":"Lean.Meta.AbstractMVars.State.lmap","line":19,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.lmap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.lmap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span>.<span class=\"name\">lmap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L18-L18","name":"Lean.Meta.AbstractMVars.State.fvars","line":18,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.fvars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.fvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span>.<span class=\"name\">fvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L17-L17","name":"Lean.Meta.AbstractMVars.State.paramNames","line":17,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.paramNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.paramNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span>.<span class=\"name\">paramNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L16-L16","name":"Lean.Meta.AbstractMVars.State.nextParamIdx","line":16,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.nextParamIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.nextParamIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span>.<span class=\"name\">nextParamIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L15-L15","name":"Lean.Meta.AbstractMVars.State.mctx","line":15,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L14-L14","name":"Lean.Meta.AbstractMVars.State.lctx","line":14,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L13-L13","name":"Lean.Meta.AbstractMVars.State.ngen","line":13,"kind":"def","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.ngen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.ngen\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span>.<span class=\"name\">ngen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L12-L12","name":"Lean.Meta.AbstractMVars.State.mk","line":12,"kind":"ctor","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextParamIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lmap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">LMVarId</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">emap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">abstractLevels</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/AbstractMVars.lean#L12-L21","name":"Lean.Meta.AbstractMVars.State","line":12,"kind":"structure","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">AbstractMVars</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}