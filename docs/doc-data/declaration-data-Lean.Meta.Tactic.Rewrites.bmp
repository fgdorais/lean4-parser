{"name":"Lean.Meta.Tactic.Rewrites","instances":[],"imports":["Lean.Meta.LazyDiscrTree","Lean.Meta.Tactic.Assumption","Lean.Meta.Tactic.Rewrite","Lean.Meta.Tactic.Refl","Lean.Meta.Tactic.SolveByElim","Lean.Meta.Tactic.TryThis","Lean.Util.Heartbeats"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L324-L340","name":"Lean.Meta.Rewrites.findRewrites","line":324,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.findRewrites","doc":"Find lemmas which can rewrite the goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.findRewrites\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">findRewrites</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleRef</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">LazyDiscrTree.ModuleDiscrTreeRef</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection\">RwDirection</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forbidden</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">side</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions\">SideConditions</a> := <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions.solveByElim\">SideConditions.solveByElim</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopAtRfl</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">max</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">20</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leavePercentHeartbeats</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">10</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L294-L322","name":"Lean.Meta.Rewrites.takeListAux","line":294,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.takeListAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.takeListAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">takeListAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig\">RewriteResultConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seen</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> ((<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L292-L292","name":"Lean.Meta.Rewrites.RewriteResultConfig.mctx","line":292,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResultConfig</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig\">RewriteResultConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L291-L291","name":"Lean.Meta.Rewrites.RewriteResultConfig.side","line":291,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.side","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.side\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResultConfig</span>.<span class=\"name\">side</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig\">RewriteResultConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions\">SideConditions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L290-L290","name":"Lean.Meta.Rewrites.RewriteResultConfig.target","line":290,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.target","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.target\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResultConfig</span>.<span class=\"name\">target</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig\">RewriteResultConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L289-L289","name":"Lean.Meta.Rewrites.RewriteResultConfig.goal","line":289,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.goal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.goal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResultConfig</span>.<span class=\"name\">goal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig\">RewriteResultConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L288-L288","name":"Lean.Meta.Rewrites.RewriteResultConfig.minHeartbeats","line":288,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.minHeartbeats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.minHeartbeats\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResultConfig</span>.<span class=\"name\">minHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig\">RewriteResultConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L287-L287","name":"Lean.Meta.Rewrites.RewriteResultConfig.max","line":287,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.max\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResultConfig</span>.<span class=\"name\">max</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig\">RewriteResultConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L286-L286","name":"Lean.Meta.Rewrites.RewriteResultConfig.stopAtRfl","line":286,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.stopAtRfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.stopAtRfl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResultConfig</span>.<span class=\"name\">stopAtRfl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig\">RewriteResultConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L285-L285","name":"Lean.Meta.Rewrites.RewriteResultConfig.mk","line":285,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResultConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopAtRfl</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">max </span><span class=\"fn\">minHeartbeats</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">side</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions\">SideConditions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig\">RewriteResultConfig</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L285-L292","name":"Lean.Meta.Rewrites.RewriteResultConfig","line":285,"kind":"structure","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResultConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResultConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L278-L283","name":"Lean.Meta.Rewrites.RewriteResult.addSuggestion","line":278,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.addSuggestion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.addSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">addSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkState?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Tactic.SavedState\">Elab.Tactic.SavedState</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L271-L275","name":"Lean.Meta.Rewrites.RewriteResult.newGoal","line":271,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.newGoal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.newGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">newGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L233-L269","name":"Lean.Meta.Rewrites.rewriteCandidates","line":233,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.rewriteCandidates","doc":"Find lemmas which can rewrite the goal.\n\nSee also `rewrites` for a more convenient interface.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.rewriteCandidates\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">rewriteCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleRef</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">LazyDiscrTree.ModuleDiscrTreeRef</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection\">RwDirection</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forbidden</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> ((<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L206-L231","name":"Lean.Meta.Rewrites.getSubexpressionMatches","line":206,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.getSubexpressionMatches","doc":"Find keys which match the expression, or some subexpression.\n\nNote that repeated subexpressions will be visited each time they appear,\nmaking this operation potentially very expensive.\nIt would be good to solve this problem!\n\nImplementation: we reverse the results from `getMatch`,\nso that we return lemmas matching larger subexpressions first,\nand amongst those we return more specific lemmas first.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.getSubexpressionMatches\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">getSubexpressionMatches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L170-L204","name":"Lean.Meta.Rewrites.rwLemma","line":170,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.rwLemma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.rwLemma\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">rwLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">side</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions\">SideConditions</a> := <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions.solveByElim\">SideConditions.solveByElim</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lem</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">weight</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L161-L168","name":"Lean.Meta.Rewrites.solveByElim","line":161,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.solveByElim","doc":"Shortcut for calling `solveByElim`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.solveByElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">solveByElim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">6</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L159-L159","name":"Lean.Meta.Rewrites.SideConditions.solveByElim","line":159,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions.solveByElim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions.solveByElim\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">SideConditions</span>.<span class=\"name\">solveByElim</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions\">SideConditions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L158-L158","name":"Lean.Meta.Rewrites.SideConditions.assumption","line":158,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions.assumption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions.assumption\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">SideConditions</span>.<span class=\"name\">assumption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions\">SideConditions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L157-L157","name":"Lean.Meta.Rewrites.SideConditions.none","line":157,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions.none","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">SideConditions</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions\">SideConditions</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L155-L159","name":"Lean.Meta.Rewrites.SideConditions","line":155,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions","doc":"Should we try discharging side conditions? If so, using `assumption`, or `solve_by_elim`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.SideConditions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">SideConditions</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L138-L146","name":"Lean.Meta.Rewrites.dischargableWithRfl?","line":138,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.dischargableWithRfl?","doc":"Check to see if this expression (which must be a type) can be closed by `with_reducible rfl`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.dischargableWithRfl?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">dischargableWithRfl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L136-L136","name":"Lean.Meta.Rewrites.RewriteResult.rfl?","line":136,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.rfl?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.rfl?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">rfl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L135-L135","name":"Lean.Meta.Rewrites.RewriteResult.mctx","line":135,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.mctx","doc":"The metavariable context after the rewrite.\nThis needs to be stored as part of the result so we can backtrack the state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L132-L132","name":"Lean.Meta.Rewrites.RewriteResult.result","line":132,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.result","doc":"The result from the `rw` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.result\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">result</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Rewrite.html#Lean.Meta.RewriteResult\">Meta.RewriteResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L130-L130","name":"Lean.Meta.Rewrites.RewriteResult.weight","line":130,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.weight","doc":"The \"weight\" of the rewrite. This is calculated based on how specific the rewrite rule was. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.weight\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">weight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L128-L128","name":"Lean.Meta.Rewrites.RewriteResult.symm","line":128,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.symm","doc":"`True` if we rewrote backwards (i.e. with `rw [← h]`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.symm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">symm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L126-L126","name":"Lean.Meta.Rewrites.RewriteResult.expr","line":126,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.expr","doc":"The lemma we rewrote by.\nThis is `Expr`, not just a `Name`, as it may be a local hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L123-L123","name":"Lean.Meta.Rewrites.RewriteResult.mk","line":123,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">weight</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <a href=\"./Lean/Meta/Tactic/Rewrite.html#Lean.Meta.RewriteResult\">Meta.RewriteResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rfl?</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">RewriteResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L122-L136","name":"Lean.Meta.Rewrites.RewriteResult","line":122,"kind":"structure","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult","doc":"Data structure recording a potential rewrite to report from the `rw?` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RewriteResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L115-L120","name":"Lean.Meta.Rewrites.rwFindDecls","line":115,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.rwFindDecls","doc":"Create function for finding relevant declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.rwFindDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">rwFindDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleRef</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">LazyDiscrTree.ModuleDiscrTreeRef</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection\">RwDirection</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>))</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L109-L113","name":"Lean.Meta.Rewrites.incPrio","line":109,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.incPrio","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.incPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">incPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection\">RwDirection</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L85-L86","name":"Lean.Meta.Rewrites.createModuleTreeRef","line":85,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.createModuleTreeRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.createModuleTreeRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">createModuleTreeRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">LazyDiscrTree.ModuleDiscrTreeRef</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection\">RwDirection</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L79-L83","name":"Lean.Meta.Rewrites.droppedKeys","line":79,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.droppedKeys","doc":"We drop `.star` and `Eq * * *` from the discriminator trees because\nthey match too much.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.droppedKeys\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">droppedKeys</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.Key\">LazyDiscrTree.Key</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L63-L77","name":"Lean.Meta.Rewrites.localHypotheses","line":63,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.localHypotheses","doc":"Select `=` and `↔` local hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.localHypotheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">localHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">except</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L40-L40","name":"Lean.Meta.Rewrites.RwDirection.backward","line":40,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection.backward","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection.backward\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RwDirection</span>.<span class=\"name\">backward</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection\">RwDirection</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L39-L39","name":"Lean.Meta.Rewrites.RwDirection.forward","line":39,"kind":"ctor","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection.forward","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection.forward\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RwDirection</span>.<span class=\"name\">forward</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection\">RwDirection</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L38-L40","name":"Lean.Meta.Rewrites.RwDirection","line":38,"kind":"inductive","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">RwDirection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L35-L36","name":"Lean.Meta.Rewrites.backwardWeight","line":35,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.backwardWeight","doc":"Weight to multiply the \"specificity\" of a rewrite lemma by when rewriting backwards. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.backwardWeight\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">backwardWeight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L33-L34","name":"Lean.Meta.Rewrites.forwardWeight","line":33,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.forwardWeight","doc":"Weight to multiply the \"specificity\" of a rewrite lemma by when rewriting forwards. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.forwardWeight\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">forwardWeight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Rewrites.lean#L23-L31","name":"Lean.Meta.Rewrites.rewriteResultLemma","line":23,"kind":"def","docLink":"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.rewriteResultLemma","doc":"Extract the lemma, with arguments, that was used to produce a `RewriteResult`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.rewriteResultLemma\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrites</span>.<span class=\"name\">rewriteResultLemma</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Meta/Tactic/Rewrite.html#Lean.Meta.RewriteResult\">Meta.RewriteResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}