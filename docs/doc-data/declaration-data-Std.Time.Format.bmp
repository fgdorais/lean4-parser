{"name":"Std.Time.Format","instances":[{"typeNames":["Std.Time.PlainDate"],"name":"Std.Time.PlainDate.instToString","className":"ToString"},{"typeNames":["Std.Time.PlainDate"],"name":"Std.Time.PlainDate.instRepr","className":"Repr"},{"typeNames":["Std.Time.PlainTime"],"name":"Std.Time.PlainTime.instToString","className":"ToString"},{"typeNames":["Std.Time.PlainTime"],"name":"Std.Time.PlainTime.instRepr","className":"Repr"},{"typeNames":["Std.Time.ZonedDateTime"],"name":"Std.Time.ZonedDateTime.instToString","className":"ToString"},{"typeNames":["Std.Time.ZonedDateTime"],"name":"Std.Time.ZonedDateTime.instRepr","className":"Repr"},{"typeNames":["Std.Time.PlainDateTime"],"name":"Std.Time.PlainDateTime.instToString","className":"ToString"},{"typeNames":["Std.Time.PlainDateTime"],"name":"Std.Time.PlainDateTime.instRepr","className":"Repr"},{"typeNames":["Std.Time.DateTime"],"name":"Std.Time.DateTime.instRepr","className":"Repr"},{"typeNames":["Std.Time.DateTime"],"name":"Std.Time.DateTime.instToString","className":"ToString"}],"imports":["Std.Time.Notation.Spec","Std.Time.Format.Basic","Std.Time.Internal.Bounded"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L620-L621","name":"Std.Time.DateTime.instToString","line":620,"kind":"instance","docLink":"./Std/Time/Format.html#Std.Time.DateTime.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">instToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L617-L618","name":"Std.Time.DateTime.instRepr","line":617,"kind":"instance","docLink":"./Std/Time/Format.html#Std.Time.DateTime.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L610-L615","name":"Std.Time.DateTime.parse","line":610,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.parse","doc":"Parses a `String` in the `AscTime` or `LongDate` format and returns a `DateTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L604-L608","name":"Std.Time.DateTime.toLeanDateTimeWithZoneString","line":604,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toLeanDateTimeWithZoneString","doc":"Formats a `DateTime` value into a `DateTimeWithZone` format string that can be parsed by `date%`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toLeanDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toLeanDateTimeWithZoneString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L598-L602","name":"Std.Time.DateTime.toDateTimeWithZoneString","line":598,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toDateTimeWithZoneString","doc":"Formats a `DateTime` value into a `DateTimeWithZone` format string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toDateTimeWithZoneString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L592-L596","name":"Std.Time.DateTime.toRFC850String","line":592,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toRFC850String","doc":"Formats a `DateTime` value into an RFC850 format string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toRFC850String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toRFC850String</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L586-L590","name":"Std.Time.DateTime.toRFC822String","line":586,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toRFC822String","doc":"Formats a `DateTime` value into an RFC822 format string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toRFC822String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toRFC822String</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L580-L584","name":"Std.Time.DateTime.toISO8601String","line":580,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toISO8601String","doc":"Formats a `DateTime` value into an ISO8601 string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toISO8601String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toISO8601String</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L574-L578","name":"Std.Time.DateTime.toLongDateFormatString","line":574,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toLongDateFormatString","doc":"Formats a `DateTime` value into a LongDateFormat string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toLongDateFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toLongDateFormatString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">datetime</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L568-L572","name":"Std.Time.DateTime.fromLongDateFormatString","line":568,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.fromLongDateFormatString","doc":"Parses a `String` in the `LongDateFormat` and returns a `DateTime` object in the GMT time zone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.fromLongDateFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">fromLongDateFormatString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L562-L566","name":"Std.Time.DateTime.toAscTimeString","line":562,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toAscTimeString","doc":"Formats a `DateTime` value into an AscTime format string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toAscTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toAscTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">datetime</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L556-L560","name":"Std.Time.DateTime.fromAscTimeString","line":556,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.fromAscTimeString","doc":"Parses a `String` in the `AscTime` format and returns a `DateTime` object in the GMT time zone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.fromAscTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">fromAscTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L547-L554","name":"Std.Time.DateTime.format","line":547,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.DateTime.format","doc":"Formats a `DateTime` using a specific format.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">format</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L540-L541","name":"Std.Time.PlainDateTime.instRepr","line":540,"kind":"instance","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L537-L538","name":"Std.Time.PlainDateTime.instToString","line":537,"kind":"instance","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L528-L535","name":"Std.Time.PlainDateTime.parse","line":528,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.parse","doc":"Parses a `String` in the `AscTime` or `LongDate` format and returns a `PlainDateTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L522-L526","name":"Std.Time.PlainDateTime.toLeanDateTimeString","line":522,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.toLeanDateTimeString","doc":"Formats a `PlainDateTime` value into a `DateTime` format string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.toLeanDateTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">toLeanDateTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L515-L520","name":"Std.Time.PlainDateTime.fromLeanDateTimeString","line":515,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.fromLeanDateTimeString","doc":"Parses a `String` in the `DateTime` format and returns a `PlainDateTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.fromLeanDateTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">fromLeanDateTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L509-L513","name":"Std.Time.PlainDateTime.toDateTimeString","line":509,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.toDateTimeString","doc":"Formats a `PlainDateTime` value into a `DateTime` format string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.toDateTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">toDateTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L502-L507","name":"Std.Time.PlainDateTime.fromDateTimeString","line":502,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.fromDateTimeString","doc":"Parses a `String` in the `DateTime` format and returns a `PlainDateTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.fromDateTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">fromDateTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L496-L500","name":"Std.Time.PlainDateTime.toLongDateFormatString","line":496,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.toLongDateFormatString","doc":"Formats a `PlainDateTime` value into a LongDateFormat string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.toLongDateFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">toLongDateFormatString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L489-L494","name":"Std.Time.PlainDateTime.fromLongDateFormatString","line":489,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.fromLongDateFormatString","doc":"Parses a `String` in the `LongDateFormat` and returns a `PlainDateTime` object in the GMT time zone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.fromLongDateFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">fromLongDateFormatString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L483-L487","name":"Std.Time.PlainDateTime.toAscTimeString","line":483,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.toAscTimeString","doc":"Formats a `PlainDateTime` value into an AscTime format string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.toAscTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">toAscTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L476-L481","name":"Std.Time.PlainDateTime.fromAscTimeString","line":476,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.fromAscTimeString","doc":"Parses a `String` in the `AscTime` format and returns a `PlainDateTime` object in the GMT time zone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.fromAscTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">fromAscTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L439-L474","name":"Std.Time.PlainDateTime.format","line":439,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.format","doc":"Formats a `PlainDateTime` using a specific format.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L432-L433","name":"Std.Time.ZonedDateTime.instRepr","line":432,"kind":"instance","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L429-L430","name":"Std.Time.ZonedDateTime.instToString","line":429,"kind":"instance","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L419-L427","name":"Std.Time.ZonedDateTime.parse","line":419,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.parse","doc":"Parses a `String` in the `ISO8601`, `RFC822` or `RFC850` format and returns a `ZonedDateTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L413-L417","name":"Std.Time.ZonedDateTime.toLeanDateTimeWithIdentifierString","line":413,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toLeanDateTimeWithIdentifierString","doc":"Formats a `DateTime` value into a simple date time with timezone string that can be parsed by the date% notation with the timezone identifier.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toLeanDateTimeWithIdentifierString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toLeanDateTimeWithIdentifierString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zdt</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L408-L412","name":"Std.Time.ZonedDateTime.toLeanDateTimeWithZoneString","line":408,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toLeanDateTimeWithZoneString","doc":"Formats a `DateTime` value into a simple date time with timezone string that can be parsed by the date% notation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toLeanDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toLeanDateTimeWithZoneString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zdt</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L401-L406","name":"Std.Time.ZonedDateTime.fromLeanDateTimeWithIdentifierString","line":401,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromLeanDateTimeWithIdentifierString","doc":"Parses a `String` in the lean date time format with identifier and returns a `ZonedDateTime` object.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromLeanDateTimeWithIdentifierString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromLeanDateTimeWithIdentifierString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L394-L399","name":"Std.Time.ZonedDateTime.fromLeanDateTimeWithZoneString","line":394,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromLeanDateTimeWithZoneString","doc":"Parses a `String` in the lean date time format with timezone format and returns a `ZonedDateTime` object.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromLeanDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromLeanDateTimeWithZoneString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L388-L392","name":"Std.Time.ZonedDateTime.toDateTimeWithZoneString","line":388,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toDateTimeWithZoneString","doc":"Formats a `ZonedDateTime` value into a simple date time with timezone string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toDateTimeWithZoneString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L382-L386","name":"Std.Time.ZonedDateTime.fromDateTimeWithZoneString","line":382,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromDateTimeWithZoneString","doc":"Parses a `String` in the dateTimeWithZone format and returns a `ZonedDateTime` object in the GMT time zone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromDateTimeWithZoneString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L376-L380","name":"Std.Time.ZonedDateTime.toRFC850String","line":376,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toRFC850String","doc":"Formats a `ZonedDateTime` value into an RFC850 format string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toRFC850String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toRFC850String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L370-L374","name":"Std.Time.ZonedDateTime.fromRFC850String","line":370,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromRFC850String","doc":"Parses a `String` in the rfc850 format and returns a `ZonedDateTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromRFC850String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromRFC850String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L364-L368","name":"Std.Time.ZonedDateTime.toRFC822String","line":364,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toRFC822String","doc":"Formats a `ZonedDateTime` value into an RFC822 format string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toRFC822String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toRFC822String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L358-L362","name":"Std.Time.ZonedDateTime.fromRFC822String","line":358,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromRFC822String","doc":"Parses a `String` in the rfc822 format and returns a `ZonedDateTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromRFC822String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromRFC822String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L352-L356","name":"Std.Time.ZonedDateTime.toISO8601String","line":352,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toISO8601String","doc":"Formats a `ZonedDateTime` value into an ISO8601 string.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toISO8601String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toISO8601String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L346-L350","name":"Std.Time.ZonedDateTime.fromISO8601String","line":346,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromISO8601String","doc":"Parses a `String` in the `ISO8601` format and returns a `ZonedDateTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromISO8601String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromISO8601String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L337-L344","name":"Std.Time.ZonedDateTime.format","line":337,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.format","doc":"Formats a `ZonedDateTime` using a specific format.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L330-L331","name":"Std.Time.PlainTime.instRepr","line":330,"kind":"instance","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L327-L328","name":"Std.Time.PlainTime.instToString","line":327,"kind":"instance","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L320-L325","name":"Std.Time.PlainTime.parse","line":320,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.parse","doc":"Parses a `String` in the `Time12Hour` or `Time24Hour` format and returns a `PlainTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L314-L318","name":"Std.Time.PlainTime.toTime12Hour","line":314,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.toTime12Hour","doc":"Formats a `PlainTime` value into a 12-hour format string (`hh:mm:ss aa`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.toTime12Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">toTime12Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L304-L312","name":"Std.Time.PlainTime.fromTime12Hour","line":304,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.fromTime12Hour","doc":"Parses a time string in the 12-hour format (`hh:mm:ss aa`) and returns a `PlainTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.fromTime12Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">fromTime12Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L298-L302","name":"Std.Time.PlainTime.toLeanTime24Hour","line":298,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.toLeanTime24Hour","doc":"Formats a `PlainTime` value into a 24-hour format string (`HH:mm:ss.SSSSSSSSS`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.toLeanTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">toLeanTime24Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L291-L296","name":"Std.Time.PlainTime.fromLeanTime24Hour","line":291,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.fromLeanTime24Hour","doc":"Parses a time string in the lean 24-hour format (`HH:mm:ss.SSSSSSSSS` or `HH:mm:ss`) and returns a `PlainTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.fromLeanTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">fromLeanTime24Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L285-L289","name":"Std.Time.PlainTime.toTime24Hour","line":285,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.toTime24Hour","doc":"Formats a `PlainTime` value into a 24-hour format string (`HH:mm:ss`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.toTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">toTime24Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L279-L283","name":"Std.Time.PlainTime.fromTime24Hour","line":279,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.fromTime24Hour","doc":"Parses a time string in the 24-hour format (`HH:mm:ss`) and returns a `PlainTime`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.fromTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">fromTime24Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L254-L277","name":"Std.Time.PlainTime.format","line":254,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.format","doc":"Formats a `PlainTime` using a specific format.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">time</span> : <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L247-L248","name":"Std.Time.PlainDate.instRepr","line":247,"kind":"instance","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L244-L245","name":"Std.Time.PlainDate.instToString","line":244,"kind":"instance","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L237-L242","name":"Std.Time.PlainDate.parse","line":237,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.parse","doc":"Parses a `String` in the `AmericanDate` or `SQLDate` format and returns a `PlainDate`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L231-L235","name":"Std.Time.PlainDate.toLeanDateString","line":231,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.toLeanDateString","doc":"Converts a date in the Lean format (`uuuu-MM-dd`) into a `String`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.toLeanDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">toLeanDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L225-L229","name":"Std.Time.PlainDate.fromLeanDateString","line":225,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.fromLeanDateString","doc":"Parses a date string in the Lean format (`uuuu-MM-dd`) and returns a `PlainDate`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.fromLeanDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">fromLeanDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L219-L223","name":"Std.Time.PlainDate.toSQLDateString","line":219,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.toSQLDateString","doc":"Converts a date in the SQL format (`uuuu-MM-dd`) into a `String`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.toSQLDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">toSQLDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L213-L217","name":"Std.Time.PlainDate.fromSQLDateString","line":213,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.fromSQLDateString","doc":"Parses a date string in the SQL format (`uuuu-MM-dd`) and returns a `PlainDate`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.fromSQLDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">fromSQLDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L207-L211","name":"Std.Time.PlainDate.toAmericanDateString","line":207,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.toAmericanDateString","doc":"Converts a date in the American format (`MM-dd-uuuu`) into a `String`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.toAmericanDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">toAmericanDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L201-L205","name":"Std.Time.PlainDate.fromAmericanDateString","line":201,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.fromAmericanDateString","doc":"Parses a date string in the American format (`MM-dd-uuuu`) and returns a `PlainDate`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.fromAmericanDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">fromAmericanDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L175-L199","name":"Std.Time.PlainDate.format","line":175,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.format","doc":"Formats a `PlainDate` using a specific format.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L163-L168","name":"Std.Time.TimeZone.Offset.fromOffset","line":163,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.TimeZone.Offset.fromOffset","doc":"Parses a string representing an offset into an `Offset` object. The input string must follow the `\"xxx\"` format.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.TimeZone.Offset.fromOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Offset</span>.<span class=\"name\">fromOffset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/Offset.html#Std.Time.TimeZone.Offset\">Offset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L154-L159","name":"Std.Time.TimeZone.fromTimeZone","line":154,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.TimeZone.fromTimeZone","doc":"Parses a string into a `TimeZone` object. The input string must be in the format `\"VV ZZZZZ\"`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.TimeZone.fromTimeZone\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">fromTimeZone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L144-L148","name":"Std.Time.Formats.rfc850","line":144,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.rfc850","doc":"The RFC850 format, which follows the pattern `eee, dd-MMM-YY HH:mm:ss ZZZ`.\nThis format is an older standard for representing date and time in headers.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.rfc850\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">rfc850</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L138-L142","name":"Std.Time.Formats.rfc822","line":138,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.rfc822","doc":"The RFC822 format, which follows the pattern `eee, dd MMM uuuu HH:mm:ss ZZZ`.\nThis format is used in email headers and HTTP headers.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.rfc822\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">rfc822</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L132-L136","name":"Std.Time.Formats.ascTime","line":132,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.ascTime","doc":"The AscTime format, which follows the pattern `EEE MMM d HH:mm:ss uuuu`. This format\nis often used in older systems for logging and time-stamping events.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.ascTime\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">ascTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\">Awareness.only</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L126-L130","name":"Std.Time.Formats.longDateFormat","line":126,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.longDateFormat","doc":"The LongDateFormat, which follows the pattern `EEEE, MMMM D, uuuu HH:mm:ss` for\nrepresenting a full date and time with the day of the week and month name.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.longDateFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">longDateFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\">Awareness.only</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L120-L124","name":"Std.Time.Formats.sqlDate","line":120,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.sqlDate","doc":"The SQLDate format, which follows the pattern `uuuu-MM-dd` and is commonly used\nin SQL databases to represent dates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.sqlDate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">sqlDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L114-L118","name":"Std.Time.Formats.leanDate","line":114,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDate","doc":"The Lean Date format, which follows the pattern `uuuu-MM-dd`. It uses the default value that can be parsed with the\nnotation of dates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L107-L112","name":"Std.Time.Formats.leanDateTimeWithIdentifierAndNanos","line":107,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithIdentifierAndNanos","doc":"The leanDateTimeWithIdentifierAndNanos format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS'[z]'`\nfor representing date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithIdentifierAndNanos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTimeWithIdentifierAndNanos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L100-L105","name":"Std.Time.Formats.leanDateTimeWithIdentifier","line":100,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithIdentifier","doc":"The leanDateTimeWithIdentifier format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss[z]`\nfor representing date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithIdentifier\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTimeWithIdentifier</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L93-L98","name":"Std.Time.Formats.leanDateTimeWithZoneNoNanos","line":93,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithZoneNoNanos","doc":"The leanDateTimeWithZoneNoNanos format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ssZZZZZ`\nfor representing date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithZoneNoNanos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTimeWithZoneNoNanos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L86-L91","name":"Std.Time.Formats.leanDateTimeWithZone","line":86,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithZone","doc":"The leanDateTimeWithZone format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSSZZZZZ`\nfor representing date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithZone\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTimeWithZone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L79-L84","name":"Std.Time.Formats.leanDateTime24HourNoNanos","line":79,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTime24HourNoNanos","doc":"The leanDateTime24HourNoNanos format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss` for\nrepresenting date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTime24HourNoNanos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTime24HourNoNanos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\">Awareness.only</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L72-L77","name":"Std.Time.Formats.leanDateTime24Hour","line":72,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTime24Hour","doc":"The leanDateTime24Hour format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS` for\nrepresenting date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTime24Hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\">Awareness.only</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L65-L70","name":"Std.Time.Formats.leanTime24HourNoNanos","line":65,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanTime24HourNoNanos","doc":"The leanTime24HourNoNanos format, which follows the pattern `HH:mm:ss` for representing time\nin a 24-hour clock format. It uses the default value that can be parsed with the\nnotation of dates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanTime24HourNoNanos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanTime24HourNoNanos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L58-L63","name":"Std.Time.Formats.leanTime24Hour","line":58,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanTime24Hour","doc":"The leanTime24Hour format, which follows the pattern `HH:mm:ss.SSSSSSSSS` for representing time\nin a 24-hour clock format. It uses the default value that can be parsed with the\nnotation of dates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanTime24Hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L52-L56","name":"Std.Time.Formats.dateTimeWithZone","line":52,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.dateTimeWithZone","doc":"The DateTimeWithZone format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSSZZZ`\nfor representing date, time, and time zone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.dateTimeWithZone\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">dateTimeWithZone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L46-L50","name":"Std.Time.Formats.dateTime24Hour","line":46,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.dateTime24Hour","doc":"The DateTimeZone24Hour format, which follows the pattern `uuuu-MM-dd:HH:mm:ss.SSSSSSSSS` for\nrepresenting date, time, and time zone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.dateTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">dateTime24Hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\">Awareness.only</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L40-L44","name":"Std.Time.Formats.time24Hour","line":40,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.time24Hour","doc":"The Time24Hour format, which follows the pattern `HH:mm:ss` for representing time\nin a 24-hour clock format.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.time24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">time24Hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L34-L38","name":"Std.Time.Formats.time12Hour","line":34,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.time12Hour","doc":"The time12Hour format, which follows the pattern `hh:mm:ss aa` for representing time\nin a 12-hour clock format with an upper case AM/PM marker.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.time12Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">time12Hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L29-L32","name":"Std.Time.Formats.europeanDate","line":29,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.europeanDate","doc":"The europeanDate format, which follows the pattern `dd-MM-uuuu`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.europeanDate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">europeanDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L24-L27","name":"Std.Time.Formats.americanDate","line":24,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.americanDate","doc":"The americanDate format, which follows the pattern `MM-dd-uuuu`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.americanDate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">americanDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Time/Format.lean#L18-L22","name":"Std.Time.Formats.iso8601","line":18,"kind":"def","docLink":"./Std/Time/Format.html#Std.Time.Formats.iso8601","doc":"The ISO8601 format, which is always 24 or 27 characters long, used for representing date and time in\na standardized format. The format follows the pattern `uuuu-MM-dd'T'HH:mm:ssZ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.iso8601\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">iso8601</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>"}]}