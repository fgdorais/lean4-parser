{"name":"Lean.Elab.Notation","instances":[],"imports":["Lean.Elab.Syntax","Lean.Elab.AuxDef","Lean.Elab.BuiltinNotation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Notation.lean#L152-L158","name":"Lean.Elab.Command.expandNotation","line":152,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">expandNotation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Macro\">Macro</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Notation.lean#L83-L113","name":"Lean.Elab.Command.mkUnexpander","line":83,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.mkUnexpander","doc":"Try to derive an unexpander from a notation.\nThe notation must be of the form `notation ... => c body`\nwhere `c` is a declaration in the current scope and `body` any syntax\nthat contains each variable from the LHS at most once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.mkUnexpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkUnexpander</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrKind</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.attrKind</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat </span><span class=\"fn\">qrhs</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Notation.lean#L71-L81","name":"Lean.Elab.Command.hasDuplicateAntiquot","line":71,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.hasDuplicateAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.hasDuplicateAntiquot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">hasDuplicateAntiquot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stxs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Notation.lean#L63-L69","name":"Lean.Elab.Command.removeParentheses","line":63,"kind":"opaque","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParentheses","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParentheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">removeParentheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Notation.lean#L56-L61","name":"Lean.Elab.Command.removeParenthesesAux","line":56,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParenthesesAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.removeParenthesesAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">removeParenthesesAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parens </span><span class=\"fn\">body</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Notation.lean#L46-L54","name":"Lean.Elab.Command.expandNotationItemIntoPattern","line":46,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoPattern","doc":"Convert `notation` command lhs item into a pattern element "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">expandNotationItemIntoPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Notation.lean#L40-L44","name":"Lean.Elab.Command.expandNotationItemIntoSyntaxItem","line":40,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoSyntaxItem","doc":"Convert `notation` command lhs item into a `syntax` command item "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.expandNotationItemIntoSyntaxItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">expandNotationItemIntoSyntaxItem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.notationItem</span> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`stx</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Notation.lean#L28-L38","name":"Lean.Elab.Command.addInheritDocDefault","line":28,"kind":"def","docLink":"./Lean/Elab/Notation.html#Lean.Elab.Command.addInheritDocDefault","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Notation.html#Lean.Elab.Command.addInheritDocDefault\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">addInheritDocDefault</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Syntax.TSepArray</a> <span class=\"fn\">`Lean.Parser.Term.attrInstance</span> <span class=\"fn\">&quot;,&quot;</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Syntax.TSepArray</a> <span class=\"fn\">`Lean.Parser.Term.attrInstance</span> <span class=\"fn\">&quot;,&quot;</span>)</span></div></div>"}]}