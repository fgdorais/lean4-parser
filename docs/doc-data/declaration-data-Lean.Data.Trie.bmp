{"name":"Lean.Data.Trie","instances":[{"typeNames":["Lean.Data.Trie"],"name":"Lean.Data.Trie.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Lean.Data.Trie"],"name":"Lean.Data.Trie.instInhabited","className":"Inhabited"},{"typeNames":["Lean.Data.Trie"],"name":"Lean.Data.Trie.instToString","className":"ToString"}],"imports":["Lean.Data.Format","Init.Data.Option.Coe"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L198-L199","name":"Lean.Data.Trie.instToString","line":198,"kind":"instance","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">instToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L166-L186","name":"Lean.Data.Trie.matchPrefix.loop","line":166,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.matchPrefix.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.matchPrefix.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">matchPrefix</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L163-L187","name":"Lean.Data.Trie.matchPrefix","line":163,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.matchPrefix","doc":"Find the longest _key_ in the trie that is contained in the given string `s` at position `i`,\nand return the associated value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.matchPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">matchPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L147-L161","name":"Lean.Data.Trie.findPrefix.go","line":147,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.findPrefix.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.findPrefix.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">findPrefix</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L144-L161","name":"Lean.Data.Trie.findPrefix","line":144,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.findPrefix","doc":"Returns all values whose key have the given string `pre` as a prefix, in no particular order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.findPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">findPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L131-L142","name":"Lean.Data.Trie.values.go","line":131,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.values.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.values.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">values</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateM\">StateM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L128-L142","name":"Lean.Data.Trie.values","line":128,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.values","doc":"Returns an `Array` of all values in the trie, in no particular order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.values\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">values</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L104-L125","name":"Lean.Data.Trie.find?.loop","line":104,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.find?.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.find?.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">find?</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L102-L126","name":"Lean.Data.Trie.find?","line":102,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.find?","doc":"Looks up a value at the given key `s`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">find?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L98-L100","name":"Lean.Data.Trie.insert","line":98,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.insert","doc":"Inserts a value at a the given key `s`, overriding an existing value if present. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L67-L95","name":"Lean.Data.Trie.upsert.loop","line":67,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.upsert.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.upsert.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">upsert</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L60-L66","name":"Lean.Data.Trie.upsert.insertEmpty","line":60,"kind":"opaque","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.upsert.insertEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.upsert.insertEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">upsert</span>.<span class=\"name\">insertEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L58-L96","name":"Lean.Data.Trie.upsert","line":58,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.upsert","doc":"Insert or update the value at a the given key `s`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.upsert\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">upsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L55-L56","name":"Lean.Data.Trie.instInhabited","line":55,"kind":"instance","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L52-L53","name":"Lean.Data.Trie.instEmptyCollection","line":52,"kind":"instance","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.instEmptyCollection\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L49-L50","name":"Lean.Data.Trie.empty","line":49,"kind":"def","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.empty","doc":"The empty `Trie` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.empty\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L44-L44","name":"Lean.Data.Trie.node","line":44,"kind":"ctor","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.node","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.node\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">node</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L43-L43","name":"Lean.Data.Trie.node1","line":43,"kind":"ctor","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.node1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.node1\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">node1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L42-L42","name":"Lean.Data.Trie.leaf","line":42,"kind":"ctor","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie.leaf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie.leaf\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span>.<span class=\"name\">leaf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Data/Trie.html#Lean.Data.Trie\">Trie</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Data/Trie.lean#L39-L44","name":"Lean.Data.Trie","line":39,"kind":"inductive","docLink":"./Lean/Data/Trie.html#Lean.Data.Trie","doc":"A Trie is a key-value store where the keys are of type `String`,\nand the internal structure is a tree that branches on the bytes of the string.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Data/Trie.html#Lean.Data.Trie\"><span class=\"name\">Lean</span>.<span class=\"name\">Data</span>.<span class=\"name\">Trie</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}