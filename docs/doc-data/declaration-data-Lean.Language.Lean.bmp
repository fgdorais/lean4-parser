{"name":"Lean.Language.Lean","instances":[{"typeNames":["Lean.Language.Lean.LeanProcessingM","Lean.Language.Lean.LeanProcessingT"],"name":"Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO","className":"MonadLift"},{"typeNames":["Lean.Language.ProcessingT","Lean.Language.Lean.LeanProcessingT"],"name":"Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT","className":"MonadLift"}],"imports":["Lean.Language.Basic","Lean.Language.Util","Lean.Language.Lean.Types","Lean.Parser.Module","Lean.Elab.Import"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L769-L773","name":"Lean.Language.Lean.waitForFinalCmdState?.goCmd","line":769,"kind":"opaque","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.waitForFinalCmdState?.goCmd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.waitForFinalCmdState?.goCmd\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">waitForFinalCmdState?</span>.<span class=\"name\">goCmd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">snap</span> : <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">CommandParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Elab.Command.State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L764-L773","name":"Lean.Language.Lean.waitForFinalCmdState?","line":764,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.waitForFinalCmdState?","doc":"Waits for and returns final command state, if importing was successful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.waitForFinalCmdState?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">waitForFinalCmdState?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">snap</span> : <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.InitialSnapshot\">InitialSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Elab.Command.State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L750-L762","name":"Lean.Language.Lean.processCommands","line":750,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.processCommands","doc":"Convenience function for tool uses of the language processor that skips header handling.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.processCommands\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">processCommands</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inputCtx</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Parser.InputContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parserState</span> : <a href=\"./Lean/Parser/Module.html#Lean.Parser.ModuleParserState\">Parser.ModuleParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commandState</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Elab.Command.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">old?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Parser.InputContext</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">CommandParsedSnapshot</a>)</span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">CommandParsedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L714-L748","name":"Lean.Language.Lean.process.doElab","line":714,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process.doElab","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process.doElab\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span>.<span class=\"name\">doElab</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmdState</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Elab.Command.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beginPos</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">snap</span> : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">SnapshotBundle</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">DynamicSnapshot</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk</span> : <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">LeanProcessingM</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Elab.Command.State</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L526-L712","name":"Lean.Language.Lean.process.parseCmd","line":526,"kind":"opaque","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process.parseCmd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process.parseCmd\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span>.<span class=\"name\">parseCmd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">old?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">CommandParsedSnapshot</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parserState</span> : <a href=\"./Lean/Parser/Module.html#Lean.Parser.ModuleParserState\">Parser.ModuleParserState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmdState</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">Elab.Command.State</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prom</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.CommandParsedSnapshot\">CommandParsedSnapshot</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sync</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parseCancelTk</span> : <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">LeanProcessingM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L456-L524","name":"Lean.Language.Lean.process.processHeader","line":456,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process.processHeader","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process.processHeader\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span>.<span class=\"name\">processHeader</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setupImports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Module.header</span> â†’ <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">ProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a> <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Module.header</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parserState</span> : <a href=\"./Lean/Parser/Module.html#Lean.Parser.ModuleParserState\">Parser.ModuleParserState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">LeanProcessingM</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">SnapshotTask</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L374-L454","name":"Lean.Language.Lean.process.parseHeader","line":374,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process.parseHeader","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process.parseHeader\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span>.<span class=\"name\">parseHeader</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setupImports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Module.header</span> â†’ <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">ProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a> <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">old?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderParsedSnapshot\">HeaderParsedSnapshot</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">LeanProcessingM</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderParsedSnapshot\">HeaderParsedSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L347-L748","name":"Lean.Language.Lean.process","line":347,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.process","doc":"Entry point of the Lean language processor.\n\nThe `setupImports` function is called after the header has been parsed and before the first command\nis parsed in order to supply additional file metadata (or abort with a given terminal snapshot); see\n`SetupImportsResult`.\n\n`old?` is a previous resulting snapshot, if any, to be reused for incremental processing.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.process\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">process</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setupImports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Module.header</span> â†’ <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">ProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a> <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">old?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.InitialSnapshot\">InitialSnapshot</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\">ProcessingM</a> <a href=\"./Lean/Language/Lean/Types.html#Lean.Language.Lean.InitialSnapshot\">InitialSnapshot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L341-L345","name":"Lean.Language.Lean.experimental.module","line":341,"kind":"opaque","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.experimental.module","doc":"Allow use of module system "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.experimental.module\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">experimental</span>.<span class=\"name\">module</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L293-L332","name":"Lean.Language.Lean.reparseOptions","line":293,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.reparseOptions","doc":"Parses values of options registered during import and left by the C++ frontend as strings.\nRemoves `weak` prefixes from both parsed and unparsed options and fails if any option names remain\nunknown.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.reparseOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">reparseOptions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L291-L291","name":"Lean.Language.Lean.SetupImportsResult.plugins","line":291,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.plugins","doc":"Lean plugins to load as part of the environment setup. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.plugins\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">plugins</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L289-L289","name":"Lean.Language.Lean.SetupImportsResult.trustLevel","line":289,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.trustLevel","doc":"Kernel trust level. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.trustLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">trustLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L287-L287","name":"Lean.Language.Lean.SetupImportsResult.opts","line":287,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.opts","doc":"Options provided outside of the file content, e.g. on the cmdline or in the lakefile. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.opts\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">opts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L285-L285","name":"Lean.Language.Lean.SetupImportsResult.mainModuleName","line":285,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mainModuleName","doc":"Module name of the file being processed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mainModuleName\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">mainModuleName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L283-L283","name":"Lean.Language.Lean.SetupImportsResult.mk","line":283,"kind":"ctor","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainModuleName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trustLevel</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">plugins</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\">SetupImportsResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L278-L291","name":"Lean.Language.Lean.SetupImportsResult","line":278,"kind":"structure","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult","doc":"Result of retrieving additional metadata about the current file after parsing imports. In the\nlanguage server, these are derived from the `lake setup-file` result. On the cmdline and for similar\nsimple uses, these can be computed eagerly without looking at the imports.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.SetupImportsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">SetupImportsResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L262-L267","name":"Lean.Language.Lean.isBeforeEditPos","line":262,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.isBeforeEditPos","doc":"Returns true if there was a previous run and the given position is before any textual change\ncompared to it.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.isBeforeEditPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">isBeforeEditPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">LeanProcessingM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L251-L260","name":"Lean.Language.Lean.LeanProcessingM.run","line":251,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM.run","doc":"Embeds a `LeanProcessingM` action into `ProcessingM`, optionally using the old input string to speed\nup reuse analysis and supplying a cancellation token that should be triggered as soon as reuse is\nruled out.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">LeanProcessingM</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldInputCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Parser/Types.html#Lean.Parser.InputContext\">Parser.InputContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingM\">ProcessingM</a> <span class=\"fn\">Î±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L248-L249","name":"Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT","line":248,"kind":"instance","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftProcessingTLeanProcessingT\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">instMonadLiftProcessingTLeanProcessingT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingT\">ProcessingT</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT\">LeanProcessingT</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L245-L246","name":"Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO","line":245,"kind":"instance","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.instMonadLiftLeanProcessingMLeanProcessingTIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">instMonadLiftLeanProcessingMLeanProcessingTIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\">LeanProcessingM</a> <span class=\"fn\">(<a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT\">LeanProcessingT</a> <a href=\"./Init/System/IO.html#IO\">IO</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L242-L243","name":"Lean.Language.Lean.LeanProcessingM","line":242,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM","doc":"Monad holding all relevant data for Lean processing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingM\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L240-L241","name":"Lean.Language.Lean.LeanProcessingT","line":240,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT","doc":"Monad transformer holding all relevant data for Lean processing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingT\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> â†’ <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L238-L238","name":"Lean.Language.Lean.LeanProcessingContext.firstDiffPos?","line":238,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.firstDiffPos?","doc":"Position of the first file difference if there was a previous invocation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.firstDiffPos?\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span>.<span class=\"name\">firstDiffPos?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\">LeanProcessingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L236-L236","name":"Lean.Language.Lean.LeanProcessingContext.mk","line":236,"kind":"ctor","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toProcessingContext</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext\">ProcessingContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">firstDiffPos?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\">LeanProcessingContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L236-L238","name":"Lean.Language.Lean.LeanProcessingContext.toProcessingContext","line":236,"kind":"def","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.toProcessingContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext.toProcessingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span>.<span class=\"name\">toProcessingContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\">LeanProcessingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext\">ProcessingContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Language/Lean.lean#L235-L238","name":"Lean.Language.Lean.LeanProcessingContext","line":235,"kind":"structure","docLink":"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext","doc":"Lean-specific processing context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Language/Lean.html#Lean.Language.Lean.LeanProcessingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Language</span>.<span class=\"name\">Lean</span>.<span class=\"name\">LeanProcessingContext</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.ProcessingContext\">Lean.Language.ProcessingContext</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}