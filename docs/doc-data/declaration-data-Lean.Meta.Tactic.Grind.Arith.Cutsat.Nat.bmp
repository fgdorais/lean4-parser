{"name":"Lean.Meta.Tactic.Grind.Arith.Cutsat.Nat","instances":[{"typeNames":["Int.OfNat.Expr"],"name":"Int.OfNat.instToExprExpr","className":"Lean.ToExpr"}],"imports":["Init.Data.Int.OfNat","Lean.Meta.Tactic.Grind.Simp","Lean.Meta.Tactic.Simp.Arith.Nat.Basic","Lean.Meta.Tactic.Grind.Arith.Cutsat.Foreign","Lean.Meta.Tactic.Grind.Arith.Cutsat.Norm"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L142-L153","name":"Lean.Meta.Grind.Arith.Cutsat.assertNatCast","line":142,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Lean.Meta.Grind.Arith.Cutsat.assertNatCast","doc":"Given `x` whose denotation is `e`, if `e` is of the form `NatCast.natCast a`,\nasserts that it is nonnegative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Lean.Meta.Grind.Arith.Cutsat.assertNatCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">assertNatCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L127-L140","name":"Lean.Meta.Grind.Arith.Cutsat.assertDenoteAsIntNonneg","line":127,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Lean.Meta.Grind.Arith.Cutsat.assertDenoteAsIntNonneg","doc":"If `e` is of the form `a.denoteAsInt ctx` for some `a` and `ctx`,\nassert that `e` is nonnegative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Lean.Meta.Grind.Arith.Cutsat.assertDenoteAsIntNonneg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">assertDenoteAsIntNonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L96-L122","name":"Int.OfNat.ofDenoteAsIntExpr?","line":96,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.ofDenoteAsIntExpr?","doc":"Given `e` of type `Int`, tries to compute `a : Int.OfNat.Expr` s.t.\n`a.denoteAsInt ctx` is `e`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.ofDenoteAsIntExpr?\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">ofDenoteAsIntExpr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L91-L94","name":"Int.OfNat.toIntEq","line":91,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntEq\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toIntEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> (<a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L82-L89","name":"Int.OfNat.toIntDvd?","line":82,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntDvd?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntDvd?\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toIntDvd?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L71-L80","name":"Int.OfNat.toIntLe?","line":71,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntLe?","doc":"Given `e` of the form `lhs ≤ rhs` where `lhs` and `rhs` have type `Nat`,\nreturns `(lhs, rhs)` where `lhs` and `rhs` are `Int.OfNat.Expr`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toIntLe?\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toIntLe?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L47-L69","name":"Int.OfNat.toOfNatExpr","line":47,"kind":"opaque","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toOfNatExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toOfNatExpr\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toOfNatExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L38-L45","name":"Int.OfNat.Expr.denoteAsIntExpr.go","line":38,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.Expr.denoteAsIntExpr.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.Expr.denoteAsIntExpr.go\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteAsIntExpr</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L35-L45","name":"Int.OfNat.Expr.denoteAsIntExpr","line":35,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.Expr.denoteAsIntExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.Expr.denoteAsIntExpr\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteAsIntExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L26-L28","name":"Int.OfNat.instToExprExpr","line":26,"kind":"instance","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.instToExprExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.instToExprExpr\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">instToExprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.lean#L16-L24","name":"Int.OfNat.toExpr","line":16,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/Nat.html#Int.OfNat.toExpr\"><span class=\"name\">Int</span>.<span class=\"name\">OfNat</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/OfNat.html#Int.OfNat.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"}]}