{"name":"Lean.Meta.Match.MatchEqs","instances":[],"imports":["Lean.Meta.CtorRecognizer","Lean.Meta.Match.Match","Lean.Meta.Match.MatchEqsExt","Lean.Meta.Tactic.Apply","Lean.Meta.Tactic.Refl","Lean.Meta.Tactic.Delta","Lean.Meta.Tactic.SplitIf","Lean.Meta.Tactic.Injection","Lean.Meta.Tactic.Contradiction"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L687-L768","name":"Lean.Meta.Match.getEquationsForImpl.go","line":687,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.getEquationsForImpl.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.getEquationsForImpl.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">getEquationsForImpl</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchDeclName </span><span class=\"fn\">baseName </span><span class=\"fn\">splitterName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L671-L768","name":"Lean.Meta.Match.getEquationsForImpl","line":671,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.getEquationsForImpl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.getEquationsForImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">getEquationsForImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchDeclName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Match/MatchEqsExt.html#Lean.Meta.Match.MatchEqns\">MatchEqns</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L385-L386","name":"Lean.Meta.Match.InjectionAnyResult.subgoal","line":385,"kind":"ctor","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult.subgoal","doc":"`fvarId` refers to the local declaration selected for the application of the `injection` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult.subgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">InjectionAnyResult</span>.<span class=\"name\">subgoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult\">InjectionAnyResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L384-L384","name":"Lean.Meta.Match.InjectionAnyResult.failed","line":384,"kind":"ctor","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult.failed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult.failed\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">InjectionAnyResult</span>.<span class=\"name\">failed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult\">InjectionAnyResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L383-L383","name":"Lean.Meta.Match.InjectionAnyResult.solved","line":383,"kind":"ctor","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult.solved","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult.solved\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">InjectionAnyResult</span>.<span class=\"name\">solved</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult\">InjectionAnyResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L382-L386","name":"Lean.Meta.Match.InjectionAnyResult","line":382,"kind":"inductive","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.InjectionAnyResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">InjectionAnyResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L342-L368","name":"Lean.Meta.Match.proveCondEqThm.go","line":342,"kind":"opaque","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.proveCondEqThm.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.proveCondEqThm.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">proveCondEqThm</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchDeclName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L330-L368","name":"Lean.Meta.Match.proveCondEqThm","line":330,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.proveCondEqThm","doc":"Helper method for proving a conditional equational theorem associated with an alternative of\nthe `match`-eliminator `matchDeclName`. `type` contains the type of the theorem. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.proveCondEqThm\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">proveCondEqThm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matchDeclName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L279-L285","name":"Lean.Meta.Match.SimpH.go","line":279,"kind":"opaque","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">SimpH</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L221-L234","name":"Lean.Meta.Match.SimpH.trySubstVarsAndContradiction","line":221,"kind":"opaque","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.trySubstVarsAndContradiction","doc":"Auxiliary tactic that tries to replace as many variables as possible and then apply `contradiction`.\nWe use it to discard redundant hypotheses.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.trySubstVarsAndContradiction\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">SimpH</span>.<span class=\"name\">trySubstVarsAndContradiction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forbidden</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L189-L189","name":"Lean.Meta.Match.SimpH.M","line":189,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.M","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">SimpH</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L187-L187","name":"Lean.Meta.Match.SimpH.State.eqsNew","line":187,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State.eqsNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State.eqsNew\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">SimpH</span>.<span class=\"name\">State</span>.<span class=\"name\">eqsNew</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L186-L186","name":"Lean.Meta.Match.SimpH.State.eqs","line":186,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State.eqs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State.eqs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">SimpH</span>.<span class=\"name\">State</span>.<span class=\"name\">eqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L185-L185","name":"Lean.Meta.Match.SimpH.State.xs","line":185,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State.xs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State.xs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">SimpH</span>.<span class=\"name\">State</span>.<span class=\"name\">xs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L184-L184","name":"Lean.Meta.Match.SimpH.State.mvarId","line":184,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">SimpH</span>.<span class=\"name\">State</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L183-L183","name":"Lean.Meta.Match.SimpH.State.mk","line":183,"kind":"ctor","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">SimpH</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">eqs </span><span class=\"fn\">eqsNew</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L173-L187","name":"Lean.Meta.Match.SimpH.State","line":173,"kind":"structure","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State","doc":"State for the equational theorem hypothesis simplifier.\n\nRecall that each equation contains additional hypotheses to ensure the associated case does not taken by previous cases.\nWe have one hypothesis for each previous case.\n\nEach hypothesis is of the form `forall xs, eqs → False`\n\nWe use tactics to minimize code duplication.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.SimpH.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">SimpH</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L164-L169","name":"Lean.Meta.Match.forallAltTelescope.isNamedPatternProof","line":164,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.forallAltTelescope.isNamedPatternProof","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.forallAltTelescope.isNamedPatternProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">forallAltTelescope</span>.<span class=\"name\">isNamedPatternProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L121-L162","name":"Lean.Meta.Match.forallAltTelescope.go","line":121,"kind":"opaque","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.forallAltTelescope.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.forallAltTelescope.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">forallAltTelescope</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altNumParams </span><span class=\"fn\">numDiscrEqs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys </span><span class=\"fn\">eqs </span><span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mask</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L96-L169","name":"Lean.Meta.Match.forallAltTelescope","line":96,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.forallAltTelescope","doc":"Similar to `forallTelescopeReducing`, but\n\n1. Eliminates arguments for named parameters and the associated equation proofs.\n\n2. Equality parameters associated with the `h : discr` notation are replaced with `rfl` proofs.\n   Recall that this kind of parameter always occurs after the parameters correspoting to pattern variables.\n   `numNonEqParams` is the size of the prefix.\n\nThe continuation `k` takes four arguments `ys args mask type`.\n- `ys` are variables for the hypotheses that have not been eliminated.\n- `eqs` are variables for equality hypotheses associated with discriminants annotated with `h : discr`.\n- `args` are the arguments for the alternative `alt` that has type `altType`. `ys.size <= args.size`\n- `mask[i]` is true if the hypotheses has not been eliminated. `mask.size == args.size`.\n- `type` is the resulting type for `altType`.\n\nWe use the `mask` to build the splitter proof. See `mkSplitterProof`.\n\nThis can be used to use the alternative of a match expression in its splitter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.forallAltTelescope\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">forallAltTelescope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altNumParams </span><span class=\"fn\">numDiscrEqs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L88-L94","name":"Lean.Meta.Match.unfoldNamedPattern","line":88,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.unfoldNamedPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.Match.unfoldNamedPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Match</span>.<span class=\"name\">unfoldNamedPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L83-L84","name":"Lean.Meta.casesOnStuckLHS?","line":83,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.casesOnStuckLHS?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.casesOnStuckLHS?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">casesOnStuckLHS?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L58-L81","name":"Lean.Meta.casesOnStuckLHS.findFVar?","line":58,"kind":"opaque","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.casesOnStuckLHS.findFVar?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.casesOnStuckLHS.findFVar?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">casesOnStuckLHS</span>.<span class=\"name\">findFVar?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Match/MatchEqs.lean#L48-L81","name":"Lean.Meta.casesOnStuckLHS","line":48,"kind":"def","docLink":"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.casesOnStuckLHS","doc":"Helper method for `proveCondEqThm`. Given a goal of the form `C.rec ... xMajor = rhs`,\napply `cases xMajor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Match/MatchEqs.html#Lean.Meta.casesOnStuckLHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">casesOnStuckLHS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"}]}