{"name":"Std.Data.DHashMap.Raw","instances":[{"typeNames":["Std.DHashMap.Raw"],"name":"Std.DHashMap.Raw.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Std.DHashMap.Raw"],"name":"Std.DHashMap.Raw.instInhabited","className":"Inhabited"},{"typeNames":["Sigma","Std.DHashMap.Raw"],"name":"Std.DHashMap.Raw.instSingletonSigmaOfBEqOfHashable","className":"Singleton"},{"typeNames":["Sigma","Std.DHashMap.Raw"],"name":"Std.DHashMap.Raw.instInsertSigmaOfBEqOfHashable","className":"Insert"},{"typeNames":["Sigma","Std.DHashMap.Raw"],"name":"Std.DHashMap.Raw.instLawfulSingletonSigma","className":"LawfulSingleton"},{"typeNames":["Std.DHashMap.Raw"],"name":"Std.DHashMap.Raw.instMembershipOfBEqOfHashable","className":"Membership"},{"typeNames":["Membership.mem"],"name":"Std.DHashMap.Raw.instDecidableMem","className":"Decidable"},{"typeNames":["Std.DHashMap.Raw","Sigma"],"name":"Std.DHashMap.Raw.instForMSigma","className":"ForM"},{"typeNames":["Std.DHashMap.Raw","Sigma"],"name":"Std.DHashMap.Raw.instForInSigma","className":"ForIn"},{"typeNames":["Std.DHashMap.Raw"],"name":"Std.DHashMap.Raw.instUnionOfBEqOfHashable","className":"Union"},{"typeNames":["Std.DHashMap.Raw"],"name":"Std.DHashMap.Raw.instRepr","className":"Repr"}],"imports":["Init.Data.BEq","Init.Data.Hashable","Std.Data.DHashMap.Internal.Defs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L708-L710","name":"Std.DHashMap.Raw.WF.Const.unitOfList","line":708,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.Const.unitOfList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.Const.unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">Const</span>.<span class=\"name\">unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\">Raw.Const.unitOfList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L704-L706","name":"Std.DHashMap.Raw.WF.Const.ofList","line":704,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.Const.ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.Const.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">Const</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\">Raw.Const.ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L700-L702","name":"Std.DHashMap.Raw.WF.ofList","line":700,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.ofList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\">Raw.ofList</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L695-L698","name":"Std.DHashMap.Raw.WF.Const.insertManyIfNewUnit","line":695,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.Const.insertManyIfNewUnit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.Const.insertManyIfNewUnit\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertManyIfNewUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\">Raw.Const.insertManyIfNewUnit</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L690-L693","name":"Std.DHashMap.Raw.WF.Const.insertMany","line":690,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.Const.insertMany","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.Const.insertMany\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\">Raw.Const.insertMany</a> <span class=\"fn\">m</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L685-L688","name":"Std.DHashMap.Raw.WF.insertMany","line":685,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.insertMany","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.insertMany\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\">insertMany</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L681-L683","name":"Std.DHashMap.Raw.WF.Const.getThenInsertIfNew?","line":681,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.Const.getThenInsertIfNew?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.Const.getThenInsertIfNew?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">Const</span>.<span class=\"name\">getThenInsertIfNew?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getThenInsertIfNew?\">Raw.Const.getThenInsertIfNew?</a> <span class=\"fn\">m</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L677-L679","name":"Std.DHashMap.Raw.WF.filter","line":677,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.filter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.filter\">Raw.filter</a> <span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L673-L675","name":"Std.DHashMap.Raw.WF.getThenInsertIfNew?","line":673,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.getThenInsertIfNew?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.getThenInsertIfNew?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">getThenInsertIfNew?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getThenInsertIfNew?\">getThenInsertIfNew?</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L669-L671","name":"Std.DHashMap.Raw.WF.insertIfNew","line":669,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.insertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\">insertIfNew</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L666-L667","name":"Std.DHashMap.Raw.WF.erase","line":666,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.erase","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\">erase</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L662-L664","name":"Std.DHashMap.Raw.WF.containsThenInsertIfNew","line":662,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.containsThenInsertIfNew","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.containsThenInsertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">containsThenInsertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.containsThenInsertIfNew\">containsThenInsertIfNew</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L658-L660","name":"Std.DHashMap.Raw.WF.containsThenInsert","line":658,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.containsThenInsert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.containsThenInsert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">containsThenInsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.containsThenInsert\">containsThenInsert</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L654-L656","name":"Std.DHashMap.Raw.WF.insert","line":654,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\">insert</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L651-L652","name":"Std.DHashMap.Raw.WF.emptyc","line":651,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.emptyc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.emptyc\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">emptyc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L647-L648","name":"Std.DHashMap.Raw.WF.empty","line":647,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L644-L645","name":"Std.DHashMap.Raw.WF.emptyWithCapacity","line":644,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.emptyWithCapacity","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.emptyWithCapacity\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">emptyWithCapacity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.emptyWithCapacity\">Raw.emptyWithCapacity</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L627-L642","name":"Std.DHashMap.Raw.WF.size_buckets_pos","line":627,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.size_buckets_pos","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.size_buckets_pos\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">size_buckets_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L624-L625","name":"Std.DHashMap.Raw.WF.empty₀","line":624,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.empty₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.empty₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">empty₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.emptyWithCapacity\">Internal.Raw₀.emptyWithCapacity</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L618-L620","name":"Std.DHashMap.Raw.WF.constAlter₀","line":618,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.constAlter₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.constAlter₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">constAlter₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.Const.alter\">Internal.Raw₀.Const.alter</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L615-L617","name":"Std.DHashMap.Raw.WF.alter₀","line":615,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.alter₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.alter₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">alter₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.alter\">Internal.Raw₀.alter</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L612-L614","name":"Std.DHashMap.Raw.WF.constModify₀","line":612,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.constModify₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.constModify₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">constModify₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.Const.modify\">Internal.Raw₀.Const.modify</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L609-L611","name":"Std.DHashMap.Raw.WF.modify₀","line":609,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.modify₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.modify₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">modify₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.modify\">Internal.Raw₀.modify</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L606-L608","name":"Std.DHashMap.Raw.WF.constGetThenInsertIfNew?₀","line":606,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.constGetThenInsertIfNew?₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.constGetThenInsertIfNew?₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">constGetThenInsertIfNew?₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.Const.getThenInsertIfNew?\">Internal.Raw₀.Const.getThenInsertIfNew?</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L604-L605","name":"Std.DHashMap.Raw.WF.filter₀","line":604,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.filter₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.filter₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">filter₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.filter\">Internal.Raw₀.filter</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L601-L603","name":"Std.DHashMap.Raw.WF.getThenInsertIfNew?₀","line":601,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.getThenInsertIfNew?₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.getThenInsertIfNew?₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">getThenInsertIfNew?₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.getThenInsertIfNew?\">Internal.Raw₀.getThenInsertIfNew?</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L598-L600","name":"Std.DHashMap.Raw.WF.insertIfNew₀","line":598,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.insertIfNew₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.insertIfNew₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">insertIfNew₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.insertIfNew\">Internal.Raw₀.insertIfNew</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L596-L597","name":"Std.DHashMap.Raw.WF.erase₀","line":596,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.erase₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.erase₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">erase₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.erase\">Internal.Raw₀.erase</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L593-L595","name":"Std.DHashMap.Raw.WF.containsThenInsertIfNew₀","line":593,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.containsThenInsertIfNew₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.containsThenInsertIfNew₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">containsThenInsertIfNew₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.containsThenInsertIfNew\">Internal.Raw₀.containsThenInsertIfNew</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L590-L592","name":"Std.DHashMap.Raw.WF.containsThenInsert₀","line":590,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.containsThenInsert₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.containsThenInsert₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">containsThenInsert₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.containsThenInsert\">Internal.Raw₀.containsThenInsert</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L588-L589","name":"Std.DHashMap.Raw.WF.insert₀","line":588,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.insert₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.insert₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">insert₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.insert\">Internal.Raw₀.insert</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\">m</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L586-L587","name":"Std.DHashMap.Raw.WF.emptyWithCapacity₀","line":586,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.emptyWithCapacity₀","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.emptyWithCapacity₀\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">emptyWithCapacity₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw₀.emptyWithCapacity\">Internal.Raw₀.emptyWithCapacity</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#Subtype.val\">val</a></span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L583-L585","name":"Std.DHashMap.Raw.WF.wf","line":583,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.wf","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF.wf\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span>.<span class=\"name\">wf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> → <span class=\"fn\"><span class=\"fn\">(∀ [<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Init/Data/Hashable.html#LawfulHashable\">LawfulHashable</a> <span class=\"fn\">α</span></span>], <span class=\"fn\"><a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.Raw.WFImp\">Internal.Raw.WFImp</a> <span class=\"fn\">m</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\">WF</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L572-L620","name":"Std.DHashMap.Raw.WF","line":572,"kind":"inductive","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF","doc":"Well-formedness predicate for hash maps. Users of `DHashMap` will not need to interact with\nthis. Users of `DHashMap.Raw` will need to provide proofs of `WF` to lemmas and should use lemmas\nlike `WF.empty` and `WF.insert` (which are always named exactly like the operations they are about)\nto show that map operations preserve well-formedness. The constructors of this type are internal\nimplementation details and should not be accessed by users.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.WF\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">WF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L562-L568","name":"Std.DHashMap.Raw.Const.unitOfList","line":562,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList","doc":"Creates a hash map from a list of keys, associating the value `()` with each key.\n\nThis is mainly useful to implement `HashSet.ofList`, so if you are considering using this,\n`HashSet` or `HashSet.Raw` might be a better fit for you. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">unitOfList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L558-L560","name":"Std.DHashMap.Raw.Const.ofList","line":558,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList","doc":"Creates a hash map from a list of mappings. If the same key appears multiple times, the last\noccurrence takes precedence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L553-L556","name":"Std.DHashMap.Raw.ofList","line":553,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList","doc":"Creates a hash map from a list of mappings. If the same key appears multiple times, the last\noccurrence takes precedence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.ofList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L549-L551","name":"Std.DHashMap.Raw.keys","line":549,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys","doc":"Returns a list of all keys present in the hash map in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keys\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">keys</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L546-L547","name":"Std.DHashMap.Raw.instRepr","line":546,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L542-L544","name":"Std.DHashMap.Raw.Const.toList","line":542,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList","doc":"Transforms the hash map into a list of mappings in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L538-L540","name":"Std.DHashMap.Raw.toList","line":538,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList","doc":"Transforms the hash map into a list of mappings in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toList\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L528-L534","name":"Std.DHashMap.Raw.Internal.numBuckets","line":528,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Internal.numBuckets","doc":"Returns the number of buckets in the internal representation of the hash map. This function may be\nuseful for things like monitoring system health, but it should be considered an internal\nimplementation detail.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Internal.numBuckets\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Internal</span>.<span class=\"name\">numBuckets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L520-L526","name":"Std.DHashMap.Raw.Const.unitOfArray","line":520,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfArray","doc":"Creates a hash map from an array of keys, associating the value `()` with each key.\n\nThis is mainly useful to implement `HashSet.ofArray`, so if you are considering using this,\n`HashSet` or `HashSet.Raw` might be a better fit for you. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.unitOfArray\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">unitOfArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L518-L518","name":"Std.DHashMap.Raw.instUnionOfBEqOfHashable","line":518,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instUnionOfBEqOfHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instUnionOfBEqOfHashable\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instUnionOfBEqOfHashable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Union\">Union</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L514-L516","name":"Std.DHashMap.Raw.union","line":514,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.union","doc":"Computes the union of the given hash maps, by traversing `m₂` and inserting its elements into `m₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.union\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L500-L512","name":"Std.DHashMap.Raw.Const.insertManyIfNewUnit","line":500,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit","doc":"Inserts multiple keys with the value `()` into the hash map by iterating over the given collection\nand calling `insertIfNew`. If the same key appears multiple times, the first occurrence takes\nprecedence.\n\nThis is mainly useful to implement `HashSet.insertMany`, so if you are considering using this,\n`HashSet` or `HashSet.Raw` might be a better fit for you.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertManyIfNewUnit\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertManyIfNewUnit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L494-L498","name":"Std.DHashMap.Raw.Const.insertMany","line":494,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany","doc":"Inserts multiple mappings into the hash map by iterating over the given collection and calling\n`insert`. If the same key appears multiple times, the last occurrence takes precedence.\n\nNote: this precedence behavior is true for `HashMap`, `DHashMap`, `HashMap.Raw` and `DHashMap.Raw`.\nThe `insertMany` function on `HashSet` and `HashSet.Raw` behaves differently: it will prefer the first\nappearance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.insertMany\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L480-L492","name":"Std.DHashMap.Raw.insertMany","line":480,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany","doc":"Inserts multiple mappings into the hash map by iterating over the given collection and calling\n`insert`. If the same key appears multiple times, the last occurrence takes precedence.\n\nNote: this precedence behavior is true for `HashMap`, `DHashMap`, `HashMap.Raw` and `DHashMap.Raw`.\nThe `insertMany` function on `HashSet` and `HashSet.Raw` behaves differently: it will prefer the first\nappearance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertMany\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">ρ</span> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">ρ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L476-L478","name":"Std.DHashMap.Raw.valuesArray","line":476,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.valuesArray","doc":"Returns an array of all values present in the hash map in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.valuesArray\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">valuesArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L472-L474","name":"Std.DHashMap.Raw.values","line":472,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.values","doc":"Returns a list of all values present in the hash map in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.values\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">values</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L468-L470","name":"Std.DHashMap.Raw.keysArray","line":468,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keysArray","doc":"Returns an array of all keys present in the hash map in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.keysArray\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">keysArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L464-L466","name":"Std.DHashMap.Raw.Const.toArray","line":464,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toArray","doc":"Transforms the hash map into an array of mappings in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L460-L462","name":"Std.DHashMap.Raw.toArray","line":460,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toArray","doc":"Transforms the hash map into an array of mappings in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.toArray\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L454-L458","name":"Std.DHashMap.Raw.filter","line":454,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.filter","doc":"Removes all mappings of the hash map for which the given function returns `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.filter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L448-L452","name":"Std.DHashMap.Raw.map","line":448,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.map","doc":"Updates the values of the hash map by applying the given function to all mappings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.map\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">γ</span> <span class=\"fn\">a</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L438-L446","name":"Std.DHashMap.Raw.filterMap","line":438,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.filterMap","doc":"Updates the values of the hash map by applying the given function to all mappings, keeping\nonly those mappings where the function returns `some` value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.filterMap\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">filterMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">γ</span> <span class=\"fn\">a</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L428-L430","name":"Std.DHashMap.Raw.Const.forInUncurried","line":428,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.forInUncurried","doc":"Support for the `for` loop construct in `do` blocks. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.forInUncurried\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">forInUncurried</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L424-L426","name":"Std.DHashMap.Raw.Const.forMUncurried","line":424,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.forMUncurried","doc":"Carries out a monadic action on each mapping in the hash map in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.forMUncurried\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">forMUncurried</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L411-L412","name":"Std.DHashMap.Raw.instForInSigma","line":411,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instForInSigma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instForInSigma\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instForInSigma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L408-L409","name":"Std.DHashMap.Raw.instForMSigma","line":408,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instForMSigma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instForMSigma\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instForMSigma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#ForM\">ForM</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L404-L406","name":"Std.DHashMap.Raw.forIn","line":404,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.forIn","doc":"Support for the `for` loop construct in `do` blocks. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.forIn\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">δ</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L400-L402","name":"Std.DHashMap.Raw.forM","line":400,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.forM","doc":"Carries out a monadic action on each mapping in the hash map in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.forM\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">forM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L392-L398","name":"Std.DHashMap.Raw.foldRev","line":392,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.foldRev","doc":"Folds the given function over the mappings in the hash map in the reverse order used\nby `foldM`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.foldRev\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">foldRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">δ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">δ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L383-L390","name":"Std.DHashMap.Raw.foldRevM","line":383,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.foldRevM","doc":"Monadically computes a value by folding the given function over the mappings in the hash\nmap in the reverse order used by `foldM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.foldRevM\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">foldRevM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L373-L379","name":"Std.DHashMap.Raw.Internal.foldRev","line":373,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Internal.foldRev","doc":"Internal implementation detail of the hash map.\n\nFolds the given function over the mappings in the hash map in the reverse order used\nby `foldM`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Internal.foldRev\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Internal</span>.<span class=\"name\">foldRev</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">δ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">δ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L364-L371","name":"Std.DHashMap.Raw.Internal.foldRevM","line":364,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Internal.foldRevM","doc":"Internal implementation detail of the hash map.\n\nMonadically computes a value by folding the given function over the mappings in the hash\nmap in the reverse order used by `foldM`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Internal.foldRevM\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Internal</span>.<span class=\"name\">foldRevM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L358-L360","name":"Std.DHashMap.Raw.fold","line":358,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.fold","doc":"Folds the given function over the mappings in the hash map in some order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.fold\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\">δ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">δ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L351-L356","name":"Std.DHashMap.Raw.foldM","line":351,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.foldM","doc":"Monadically computes a value by folding the given function over the mappings in the hash\nmap in some order.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.foldM\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">foldM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">δ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">δ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L344-L349","name":"Std.DHashMap.Raw.Const.alter","line":344,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter","doc":"Modifies in place the value associated with a given key,\nallowing creating new values and deleting values via an `Option` valued replacement function.\n\nThis function ensures that the value is used linearly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L331-L342","name":"Std.DHashMap.Raw.alter","line":331,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter","doc":"Modifies in place the value associated with a given key,\nallowing creating new values and deleting values via an `Option` valued replacement function.\n\nThis function ensures that the value is used linearly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.alter\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">alter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L324-L329","name":"Std.DHashMap.Raw.Const.modify","line":324,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify","doc":"Modifies in place the value associated with a given key.\n\nThis function ensures that the value is used linearly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/BEq.html#EquivBEq\">EquivBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L312-L322","name":"Std.DHashMap.Raw.modify","line":312,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify","doc":"Modifies in place the value associated with a given key.\n\nThis function ensures that the value is used linearly.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.modify\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L302-L310","name":"Std.DHashMap.Raw.isEmpty","line":302,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty","doc":"Returns `true` if the hash map contains no mappings.\n\nNote that if your `BEq` instance is not reflexive or your `Hashable` instance is not\nlawful, then it is possible that this function returns `false` even though is not possible\nto get anything out of the hash map.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L293-L300","name":"Std.DHashMap.Raw.getKey!","line":293,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!","doc":"Checks if a mapping for the given key exists and returns the key if it does, otherwise panics.\nIf no panic occurs the result is guaranteed to be pointer equal to the key in the map.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey!\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L284-L291","name":"Std.DHashMap.Raw.getKeyD","line":284,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD","doc":"Checks if a mapping for the given key exists and returns the key if it does, otherwise `fallback`.\nIf a mapping exists the result is guaranteed to be pointer equal to the key in the map.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKeyD\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKeyD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">fallback</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L276-L282","name":"Std.DHashMap.Raw.getKey","line":276,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey","doc":"Retrieves the key from the mapping that matches `a`. Ensures that such a mapping exists by\nrequiring a proof of `a ∈ m`. The result is guaranteed to be pointer equal to the key in the map.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L267-L274","name":"Std.DHashMap.Raw.getKey?","line":267,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?","doc":"Checks if a mapping for the given key exists and returns the key if it does, otherwise `none`.\nThe result in the `some` case is guaranteed to be pointer equal to the key in the map.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getKey?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getKey?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L249-L263","name":"Std.DHashMap.Raw.Const.getThenInsertIfNew?","line":249,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getThenInsertIfNew?","doc":"Equivalent to (but potentially faster than) calling `Const.get?` followed by `insertIfNew`.\n\nChecks whether a key is present in a map, returning the associated value, and inserts a value for\nthe key if it was not found.\n\nIf the returned value is `some v`, then the returned map is unaltered. If it is `none`, then the\nreturned map has a new value inserted.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getThenInsertIfNew?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getThenInsertIfNew?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L243-L247","name":"Std.DHashMap.Raw.Const.get!","line":243,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!","doc":"Tries to retrieve the mapping for the given key, panicking if no such mapping is present. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get!\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L235-L241","name":"Std.DHashMap.Raw.Const.getD","line":235,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD","doc":"Tries to retrieve the mapping for the given key, returning `fallback` if no such mapping is present.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.getD\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L227-L233","name":"Std.DHashMap.Raw.Const.get","line":227,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get","doc":"Retrieves the mapping for the given key. Ensures that such a mapping exists by requiring a proof of\n`a ∈ m`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L219-L225","name":"Std.DHashMap.Raw.Const.get?","line":219,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?","doc":"Tries to retrieve the mapping for the given key, returning `none` if no such mapping is present.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Const.get?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Const</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L209-L213","name":"Std.DHashMap.Raw.erase","line":209,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase","doc":"Removes the mapping for the given key if it exists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.erase\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">erase</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L198-L207","name":"Std.DHashMap.Raw.get!","line":198,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!","doc":"Tries to retrieve the mapping for the given key, panicking if no such mapping is present.\n\nUses the `LawfulBEq` instance to cast the retrieved value to the correct type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get!\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L187-L196","name":"Std.DHashMap.Raw.getD","line":187,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD","doc":"Tries to retrieve the mapping for the given key, returning `fallback` if no such mapping is present.\n\nUses the `LawfulBEq` instance to cast the retrieved value to the correct type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getD\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getD</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fallback</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L177-L185","name":"Std.DHashMap.Raw.get","line":177,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get","doc":"Retrieves the mapping for the given key. Ensures that such a mapping exists by requiring a proof\nof `a ∈ m`.\n\nUses the `LawfulBEq` instance to cast the retrieved value to the correct type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L174-L175","name":"Std.DHashMap.Raw.instDecidableMem","line":174,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instDecidableMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instDecidableMem\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instDecidableMem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">m</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L171-L172","name":"Std.DHashMap.Raw.instMembershipOfBEqOfHashable","line":171,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instMembershipOfBEqOfHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instMembershipOfBEqOfHashable\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instMembershipOfBEqOfHashable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L159-L169","name":"Std.DHashMap.Raw.contains","line":159,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains","doc":"Returns `true` if there is a mapping for the given key. There is also a `Prop`-valued version\nof this: `a ∈ m` is equivalent to `m.contains a = true`.\n\nObserve that this is different behavior than for lists: for lists, `∈` uses `=` and `contains` uses\n`==` for comparisons, while for hash maps, both use `==`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.contains\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">contains</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L149-L157","name":"Std.DHashMap.Raw.get?","line":149,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?","doc":"Tries to retrieve the mapping for the given key, returning `none` if no such mapping is present.\n\nUses the `LawfulBEq` instance to cast the retrieved value to the correct type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.get?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">get?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L134-L147","name":"Std.DHashMap.Raw.containsThenInsertIfNew","line":134,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.containsThenInsertIfNew","doc":"Checks whether a key is present in a map and inserts a value for the key if it was not found.\n\nIf the returned `Bool` is `true`, then the returned map is unaltered. If the `Bool` is `false`, then\nthe returned map has a new value inserted.\n\nEquivalent to (but potentially faster than) calling `contains` followed by `insertIfNew`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.containsThenInsertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">containsThenInsertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L116-L132","name":"Std.DHashMap.Raw.getThenInsertIfNew?","line":116,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getThenInsertIfNew?","doc":"Checks whether a key is present in a map, returning the associated value, and inserts a value for\nthe key if it was not found.\n\nIf the returned value is `some v`, then the returned map is unaltered. If it is `none`, then the\nreturned map has a new value inserted.\n\nEquivalent to (but potentially faster than) calling `get?` followed by `insertIfNew`.\n\nUses the `LawfulBEq` instance to cast the retrieved value to the correct type.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.getThenInsertIfNew?\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">getThenInsertIfNew?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L104-L114","name":"Std.DHashMap.Raw.containsThenInsert","line":104,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.containsThenInsert","doc":"Checks whether a key is present in a map, and unconditionally inserts a value for the key.\n\nEquivalent to (but potentially faster than) calling `contains` followed by `insert`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.containsThenInsert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">containsThenInsert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L95-L102","name":"Std.DHashMap.Raw.insertIfNew","line":95,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew","doc":"If there is no mapping for the given key, inserts the given mapping into the map. Otherwise,\nreturns the map unaltered.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insertIfNew\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insertIfNew</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L92-L93","name":"Std.DHashMap.Raw.instLawfulSingletonSigma","line":92,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instLawfulSingletonSigma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instLawfulSingletonSigma\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instLawfulSingletonSigma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulSingleton\">LawfulSingleton</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L89-L90","name":"Std.DHashMap.Raw.instInsertSigmaOfBEqOfHashable","line":89,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instInsertSigmaOfBEqOfHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instInsertSigmaOfBEqOfHashable\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instInsertSigmaOfBEqOfHashable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Insert\">Insert</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L86-L87","name":"Std.DHashMap.Raw.instSingletonSigmaOfBEqOfHashable","line":86,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instSingletonSigmaOfBEqOfHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instSingletonSigmaOfBEqOfHashable\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instSingletonSigmaOfBEqOfHashable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Singleton\">Singleton</a> <span class=\"fn\">((<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) × <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L73-L84","name":"Std.DHashMap.Raw.insert","line":73,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert","doc":"Inserts the given mapping into the map. If there is already a mapping for the given key, then both\nkey and value will be replaced.\n\nNote: this replacement behavior is true for `HashMap`, `DHashMap`, `HashMap.Raw` and `DHashMap.Raw`.\nThe `insert` function on `HashSet` and `HashSet.Raw` behaves differently: it will return the set\nunchanged if a matching key is already present.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.insert\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L71-L71","name":"Std.DHashMap.Raw.«term_~m_»","line":71,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.«term_~m_»","doc":"Two hash maps are equivalent in the sense of `Equiv` iff\nall the keys and values are equal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.«term_~m_»\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">«term_~m_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L69-L69","name":"Std.DHashMap.Raw.Equiv.impl","line":69,"kind":"theorem","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Equiv.impl","doc":"Internal implementation detail of the hash map "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Equiv.impl\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">impl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.toListModel\">Internal.toListModel</a> <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.toListModel\">Internal.toListModel</a> <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L67-L67","name":"Std.DHashMap.Raw.Equiv.mk","line":67,"kind":"ctor","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Equiv.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Equiv.mk\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">impl</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.toListModel\">Internal.toListModel</a> <span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Perm\">Perm</a></span> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/Internal/Defs.html#Std.DHashMap.Internal.toListModel\">Internal.toListModel</a> <span class=\"fn\"><span class=\"fn\">m₂</span>.<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw.buckets\">buckets</a></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m₁</span>.<a href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Equiv\">Equiv</a></span> <span class=\"fn\">m₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L63-L69","name":"Std.DHashMap.Raw.Equiv","line":63,"kind":"structure","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Equiv","doc":"Two hash maps are equivalent in the sense of `Equiv` iff\nall the keys and values are equal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.Equiv\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">Equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m₁ </span><span class=\"fn\">m₂</span> : <span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L60-L61","name":"Std.DHashMap.Raw.instInhabited","line":60,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instInhabited\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L57-L58","name":"Std.DHashMap.Raw.instEmptyCollection","line":57,"kind":"instance","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.instEmptyCollection\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L54-L55","name":"Std.DHashMap.Raw.empty","line":54,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty","doc":"Creates a new empty hash map. The optional parameter `capacity` can be supplied to presize the\nmap so that it can hold the given number of mappings without reallocating. It is also possible to\nuse the empty collection notations `∅` and `{}` to create an empty hash map with the default\ncapacity.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.empty\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Std/Data/DHashMap/Raw.lean#L45-L52","name":"Std.DHashMap.Raw.emptyWithCapacity","line":45,"kind":"def","docLink":"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.emptyWithCapacity","doc":"Creates a new empty hash map. The optional parameter `capacity` can be supplied to presize the\nmap so that it can hold the given number of mappings without reallocating. It is also possible to\nuse the empty collection notations `∅` and `{}` to create an empty hash map with the default\ncapacity.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/DHashMap/Raw.html#Std.DHashMap.Raw.emptyWithCapacity\"><span class=\"name\">Std</span>.<span class=\"name\">DHashMap</span>.<span class=\"name\">Raw</span>.<span class=\"name\">emptyWithCapacity</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">capacity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/DHashMap/RawDef.html#Std.DHashMap.Raw\">Raw</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"}]}