{"name":"Init.Data.Float32","instances":[{"typeNames":["Float32"],"name":"instNonemptyFloat32","className":"Nonempty"},{"typeNames":["Float32"],"name":"instAddFloat32","className":"Add"},{"typeNames":["Float32"],"name":"instSubFloat32","className":"Sub"},{"typeNames":["Float32"],"name":"instMulFloat32","className":"Mul"},{"typeNames":["Float32"],"name":"instDivFloat32","className":"Div"},{"typeNames":["Float32"],"name":"instNegFloat32","className":"Neg"},{"typeNames":["Float32"],"name":"instLTFloat32","className":"LT"},{"typeNames":["Float32"],"name":"instLEFloat32","className":"LE"},{"typeNames":["Float32"],"name":"instBEqFloat32","className":"BEq"},{"typeNames":["LT.lt"],"name":"float32DecLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"float32DecLe","className":"Decidable"},{"typeNames":["Float32"],"name":"instToStringFloat32","className":"ToString"},{"typeNames":["Float32"],"name":"instInhabitedFloat32","className":"Inhabited"},{"typeNames":["Float32"],"name":"instReprFloat32","className":"Repr"},{"typeNames":["Float32"],"name":"instReprAtomFloat32","className":"ReprAtom"},{"typeNames":["Float32"],"name":"instHomogeneousPowFloat32","className":"HomogeneousPow"},{"typeNames":["Float32"],"name":"instMinFloat32","className":"Min"},{"typeNames":["Float32"],"name":"instMaxFloat32","className":"Max"}],"imports":["Init.Core","Init.Data.Int.Basic","Init.Data.ToString.Basic","Init.Data.Float"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L510-L516","name":"Float.toFloat32","line":510,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float.toFloat32","doc":"Converts a 64-bit floating-point number to a 32-bit floating-point number.\nThis may lose precision.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float.toFloat32\"><span class=\"name\">Float</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float.html#Float\">Float</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L504-L509","name":"Float32.toFloat","line":504,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.toFloat","doc":"Converts a 32-bit floating-point number to a 64-bit floating-point number.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toFloat\"><span class=\"name\">Float32</span>.<span class=\"name\">toFloat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float.html#Float\">Float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L496-L502","name":"Float32.scaleB","line":496,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.scaleB","doc":"Efficiently computes `x * 2^i`.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.scaleB\"><span class=\"name\">Float32</span>.<span class=\"name\">scaleB</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L494-L494","name":"instMaxFloat32","line":494,"kind":"instance","docLink":"./Init/Data/Float32.html#instMaxFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instMaxFloat32\"><span class=\"name\">instMaxFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L492-L492","name":"instMinFloat32","line":492,"kind":"instance","docLink":"./Init/Data/Float32.html#instMinFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instMinFloat32\"><span class=\"name\">instMinFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L490-L490","name":"instHomogeneousPowFloat32","line":490,"kind":"instance","docLink":"./Init/Data/Float32.html#instHomogeneousPowFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instHomogeneousPowFloat32\"><span class=\"name\">instHomogeneousPowFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HomogeneousPow\">HomogeneousPow</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L482-L488","name":"Float32.abs","line":482,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.abs","doc":"Computes the absolute value of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`fabsf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.abs\"><span class=\"name\">Float32</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L475-L481","name":"Float32.round","line":475,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.round","doc":"Rounds to the nearest integer, rounding away from zero at half-way points.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`roundf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.round\"><span class=\"name\">Float32</span>.<span class=\"name\">round</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L463-L474","name":"Float32.floor","line":463,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.floor","doc":"Computes the floor of a floating-point number, which is the largest integer that's no larger\nthan the given number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`floorf`.\n\nExamples:\n * `Float32.floor 1.5 = 1`\n * `Float32.floor (-1.5) = (-2)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.floor\"><span class=\"name\">Float32</span>.<span class=\"name\">floor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L451-L462","name":"Float32.ceil","line":451,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.ceil","doc":"Computes the ceiling of a floating-point number, which is the smallest integer that's no smaller\nthan the given number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`ceilf`.\n\nExamples:\n * `Float32.ceil 1.5 = 2`\n * `Float32.ceil (-1.5) = (-1)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.ceil\"><span class=\"name\">Float32</span>.<span class=\"name\">ceil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L444-L450","name":"Float32.cbrt","line":444,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.cbrt","doc":"Computes the cube root of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`cbrtf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.cbrt\"><span class=\"name\">Float32</span>.<span class=\"name\">cbrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L437-L443","name":"Float32.sqrt","line":437,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.sqrt","doc":"Computes the square root of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sqrtf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.sqrt\"><span class=\"name\">Float32</span>.<span class=\"name\">sqrt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L430-L436","name":"Float32.pow","line":430,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.pow","doc":"Raises one floating-point number to the power of another. Typically used via the `^` operator.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`powf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.pow\"><span class=\"name\">Float32</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L423-L429","name":"Float32.log10","line":423,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.log10","doc":"Computes the base-10 logarithm of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`log10f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.log10\"><span class=\"name\">Float32</span>.<span class=\"name\">log10</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L416-L422","name":"Float32.log2","line":416,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.log2","doc":"Computes the base-2 logarithm of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`log2f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.log2\"><span class=\"name\">Float32</span>.<span class=\"name\">log2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L409-L415","name":"Float32.log","line":409,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.log","doc":"Computes the natural logarithm `ln x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`logf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.log\"><span class=\"name\">Float32</span>.<span class=\"name\">log</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L402-L408","name":"Float32.exp2","line":402,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.exp2","doc":"Computes the base-2 exponential `2^x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`exp2f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.exp2\"><span class=\"name\">Float32</span>.<span class=\"name\">exp2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L395-L401","name":"Float32.exp","line":395,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.exp","doc":"Computes the exponential `e^x` of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`expf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.exp\"><span class=\"name\">Float32</span>.<span class=\"name\">exp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L388-L394","name":"Float32.atanh","line":388,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.atanh","doc":"Computes the hyperbolic arc tangent (inverse tangent) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atanhf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.atanh\"><span class=\"name\">Float32</span>.<span class=\"name\">atanh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L381-L387","name":"Float32.acosh","line":381,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.acosh","doc":"Computes the hyperbolic arc cosine (inverse cosine) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`acoshf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.acosh\"><span class=\"name\">Float32</span>.<span class=\"name\">acosh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L374-L380","name":"Float32.asinh","line":374,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.asinh","doc":"Computes the hyperbolic arc sine (inverse sine) of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`asinhf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.asinh\"><span class=\"name\">Float32</span>.<span class=\"name\">asinh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L367-L373","name":"Float32.tanh","line":367,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.tanh","doc":"Computes the hyperbolic tangent of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`tanhf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.tanh\"><span class=\"name\">Float32</span>.<span class=\"name\">tanh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L360-L366","name":"Float32.cosh","line":360,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.cosh","doc":"Computes the hyperbolic cosine of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`coshf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.cosh\"><span class=\"name\">Float32</span>.<span class=\"name\">cosh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L353-L359","name":"Float32.sinh","line":353,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.sinh","doc":"Computes the hyperbolic sine of a floating-point number.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sinhf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.sinh\"><span class=\"name\">Float32</span>.<span class=\"name\">sinh</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L345-L352","name":"Float32.atan2","line":345,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.atan2","doc":"Computes the arc tangent (inverse tangent) of `y / x` in radians, in the range `-π`–`π`. The signs\nof the arguments determine the quadrant of the result.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atan2f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.atan2\"><span class=\"name\">Float32</span>.<span class=\"name\">atan2</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L338-L344","name":"Float32.atan","line":338,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.atan","doc":"Computes the arc tangent (inverse tangent) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`atanf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.atan\"><span class=\"name\">Float32</span>.<span class=\"name\">atan</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L331-L337","name":"Float32.acos","line":331,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.acos","doc":"Computes the arc cosine (inverse cosine) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`acosf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.acos\"><span class=\"name\">Float32</span>.<span class=\"name\">acos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L324-L330","name":"Float32.asin","line":324,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.asin","doc":"Computes the arc sine (inverse sine) of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`asinf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.asin\"><span class=\"name\">Float32</span>.<span class=\"name\">asin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L317-L323","name":"Float32.tan","line":317,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.tan","doc":"Computes the tangent of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`tanf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.tan\"><span class=\"name\">Float32</span>.<span class=\"name\">tan</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L310-L316","name":"Float32.cos","line":310,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.cos","doc":"Computes the cosine of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`cosf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.cos\"><span class=\"name\">Float32</span>.<span class=\"name\">cos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L303-L309","name":"Float32.sin","line":303,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.sin","doc":"Computes the sine of a floating-point number in radians.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`sinf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.sin\"><span class=\"name\">Float32</span>.<span class=\"name\">sin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L301-L301","name":"instReprAtomFloat32","line":301,"kind":"instance","docLink":"./Init/Data/Float32.html#instReprAtomFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instReprAtomFloat32\"><span class=\"name\">instReprAtomFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L298-L299","name":"instReprFloat32","line":298,"kind":"instance","docLink":"./Init/Data/Float32.html#instReprFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instReprFloat32\"><span class=\"name\">instReprFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L295-L296","name":"Float32.repr","line":295,"kind":"def","docLink":"./Init/Data/Float32.html#Float32.repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.repr\"><span class=\"name\">Float32</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L292-L293","name":"instInhabitedFloat32","line":292,"kind":"instance","docLink":"./Init/Data/Float32.html#instInhabitedFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instInhabitedFloat32\"><span class=\"name\">instInhabitedFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L281-L290","name":"USize.toFloat32","line":281,"kind":"opaque","docLink":"./Init/Data/Float32.html#USize.toFloat32","doc":"Obtains a `Float32` whose value is near the given `USize`.\n\nIt will be exactly the value of the given `USize` if such a `Float32` exists. If no such `Float32`\nexists, the returned value will either be the smallest `Float32` that is larger than the given\nvalue, or the largest `Float32` that is smaller than the given value.\n\nThis function is opaque in the kernel, but is overridden at runtime with an efficient\nimplementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#USize.toFloat32\"><span class=\"name\">USize</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L270-L280","name":"UInt64.toFloat32","line":270,"kind":"opaque","docLink":"./Init/Data/Float32.html#UInt64.toFloat32","doc":"Obtains a `Float32` whose value is near the given `UInt64`.\n\nIt will be exactly the value of the given `UInt64` if such a `Float32` exists. If no such `Float32`\nexists, the returned value will either be the smallest `Float32` that is larger than the given\nvalue, or the largest `Float32` that is smaller than the given value.\n\nThis function is opaque in the kernel, but is overridden at runtime with an efficient\nimplementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#UInt64.toFloat32\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L259-L269","name":"UInt32.toFloat32","line":259,"kind":"opaque","docLink":"./Init/Data/Float32.html#UInt32.toFloat32","doc":"Obtains a `Float32` whose value is near the given `UInt32`.\n\nIt will be exactly the value of the given `UInt32` if such a `Float32` exists. If no such `Float32`\nexists, the returned value will either be the smallest `Float32` that is larger than the given\nvalue, or the largest `Float32` that is smaller than the given value.\n\nThis function is opaque in the kernel, but is overridden at runtime with an efficient\nimplementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#UInt32.toFloat32\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L257-L258","name":"UInt16.toFloat32","line":257,"kind":"opaque","docLink":"./Init/Data/Float32.html#UInt16.toFloat32","doc":"Obtains the `Float32` whose value is the same as the given `UInt16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#UInt16.toFloat32\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L255-L256","name":"UInt8.toFloat32","line":255,"kind":"opaque","docLink":"./Init/Data/Float32.html#UInt8.toFloat32","doc":"Obtains the `Float32` whose value is the same as the given `UInt8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#UInt8.toFloat32\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFloat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L252-L253","name":"instToStringFloat32","line":252,"kind":"instance","docLink":"./Init/Data/Float32.html#instToStringFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instToStringFloat32\"><span class=\"name\">instToStringFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L243-L250","name":"Float32.frExp","line":243,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.frExp","doc":"Splits the given float `x` into a significand/exponent pair `(s, i)` such that `x = s * 2^i` where\n`s ∈ (-1;-0.5] ∪ [0.5; 1)`. Returns an undefined value if `x` is not finite.\n\nThis function does not reduce in the kernel. It is implemented in compiled code by the C function\n`frexp`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.frExp\"><span class=\"name\">Float32</span>.<span class=\"name\">frExp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L236-L242","name":"Float32.isInf","line":236,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.isInf","doc":"Checks whether a floating-point number is a positive or negative infinite number, but not a finite\nnumber or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isinf`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.isInf\"><span class=\"name\">Float32</span>.<span class=\"name\">isInf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L229-L235","name":"Float32.isFinite","line":229,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.isFinite","doc":"Checks whether a floating-point number is finite, that is, whether it is normal, subnormal, or zero,\nbut not infinite or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isfinite`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.isFinite\"><span class=\"name\">Float32</span>.<span class=\"name\">isFinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L221-L228","name":"Float32.isNaN","line":221,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.isNaN","doc":"Checks whether a floating point number is `NaN` (\"not a number\") value.\n\n`NaN` values result from operations that might otherwise be errors, such as dividing zero by zero.\n\nThis function does not reduce in the kernel. It is compiled to the C operator `isnan`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.isNaN\"><span class=\"name\">Float32</span>.<span class=\"name\">isNaN</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L210-L219","name":"Float32.toUSize","line":210,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.toUSize","doc":"Converts a floating-point number to a word-sized unsigned integer.\n\nIf the given `Float32` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `USize`. Returns `0` if the `Float32` is negative or `NaN`, and returns the\nlargest `USize` value (i.e. `USize.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toUSize\"><span class=\"name\">Float32</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L200-L209","name":"Float32.toUInt64","line":200,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.toUInt64","doc":"Converts a floating-point number to a 64-bit unsigned integer.\n\nIf the given `Float32` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt64`. Returns `0` if the `Float32` is negative or `NaN`, and returns\nthe largest `UInt64` value (i.e. `UInt64.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toUInt64\"><span class=\"name\">Float32</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L190-L199","name":"Float32.toUInt32","line":190,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.toUInt32","doc":"Converts a floating-point number to a 32-bit unsigned integer.\n\nIf the given `Float32` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt32`. Returns `0` if the `Float32` is negative or `NaN`, and returns\nthe largest `UInt32` value (i.e. `UInt32.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toUInt32\"><span class=\"name\">Float32</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L180-L189","name":"Float32.toUInt16","line":180,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.toUInt16","doc":"Converts a floating-point number to a 16-bit unsigned integer.\n\nIf the given `Float32` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt16`. Returns `0` if the `Float32` is negative or `NaN`, and returns\nthe largest `UInt16` value (i.e. `UInt16.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toUInt16\"><span class=\"name\">Float32</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L170-L179","name":"Float32.toUInt8","line":170,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.toUInt8","doc":"Converts a floating-point number to an 8-bit unsigned integer.\n\nIf the given `Float32` is non-negative, truncates the value to a positive integer, rounding down and\nclamping to the range of `UInt8`. Returns `0` if the `Float32` is negative or `NaN`, and returns the\nlargest `UInt8` value (i.e. `UInt8.size - 1`) if the float is larger than it.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toUInt8\"><span class=\"name\">Float32</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L164-L169","name":"Float32.toString","line":164,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.toString","doc":"Converts a floating-point number to a string.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toString\"><span class=\"name\">Float32</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L162-L162","name":"float32DecLe","line":162,"kind":"instance","docLink":"./Init/Data/Float32.html#float32DecLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#float32DecLe\"><span class=\"name\">float32DecLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L161-L161","name":"float32DecLt","line":161,"kind":"instance","docLink":"./Init/Data/Float32.html#float32DecLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#float32DecLt\"><span class=\"name\">float32DecLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L152-L159","name":"Float32.decLe","line":152,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.decLe","doc":"Compares two floating point numbers for non-strict inequality.\n\nThis function does not reduce in the kernel. It is compiled to the C inequality operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.decLe\"><span class=\"name\">Float32</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L143-L150","name":"Float32.decLt","line":143,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.decLt","doc":"Compares two floating point numbers for strict inequality.\n\nThis function does not reduce in the kernel. It is compiled to the C inequality operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.decLt\"><span class=\"name\">Float32</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L141-L141","name":"instBEqFloat32","line":141,"kind":"instance","docLink":"./Init/Data/Float32.html#instBEqFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instBEqFloat32\"><span class=\"name\">instBEqFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L130-L139","name":"Float32.beq","line":130,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.beq","doc":"Checks whether two floating-point numbers are equal according to IEEE 754.\n\nFloating-point equality does not correspond with propositional equality. In particular, it is not\nreflexive since `NaN != NaN`, and it is not a congruence because `0.0 == -0.0`, but\n`1.0 / 0.0 != 1.0 / -0.0`.\n\nThis function does not reduce in the kernel. It is compiled to the C equality operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.beq\"><span class=\"name\">Float32</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L128-L128","name":"instLEFloat32","line":128,"kind":"instance","docLink":"./Init/Data/Float32.html#instLEFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instLEFloat32\"><span class=\"name\">instLEFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L127-L127","name":"instLTFloat32","line":127,"kind":"instance","docLink":"./Init/Data/Float32.html#instLTFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instLTFloat32\"><span class=\"name\">instLTFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L126-L126","name":"instNegFloat32","line":126,"kind":"instance","docLink":"./Init/Data/Float32.html#instNegFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instNegFloat32\"><span class=\"name\">instNegFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L125-L125","name":"instDivFloat32","line":125,"kind":"instance","docLink":"./Init/Data/Float32.html#instDivFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instDivFloat32\"><span class=\"name\">instDivFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L124-L124","name":"instMulFloat32","line":124,"kind":"instance","docLink":"./Init/Data/Float32.html#instMulFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instMulFloat32\"><span class=\"name\">instMulFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L123-L123","name":"instSubFloat32","line":123,"kind":"instance","docLink":"./Init/Data/Float32.html#instSubFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instSubFloat32\"><span class=\"name\">instSubFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L122-L122","name":"instAddFloat32","line":122,"kind":"instance","docLink":"./Init/Data/Float32.html#instAddFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instAddFloat32\"><span class=\"name\">instAddFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L108-L120","name":"Float32.toBits","line":108,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.toBits","doc":"Bit-for-bit conversion to `UInt32`. Interprets a `Float32` as a `UInt32`, ignoring the numeric value\nand treating the `Float32`'s bit pattern as a `UInt32`.\n\n`Float32`s and `UInt32`s have the same endianness on all supported platforms. IEEE 754 very\nprecisely specifies the bit layout of floats.\n\nThis function is distinct from `Float.toUInt32`, which attempts to preserve the numeric value rather\nthan reinterpreting the bit pattern.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.toBits\"><span class=\"name\">Float32</span>.<span class=\"name\">toBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L96-L105","name":"Float32.ofBits","line":96,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.ofBits","doc":"Bit-for-bit conversion from `UInt32`. Interprets a `UInt32` as a `Float32`, ignoring the numeric\nvalue and treating the `UInt32`'s bit pattern as a `Float32`.\n\n`Float32`s and `UInt32`s have the same endianness on all supported platforms. IEEE 754 very\nprecisely specifies the bit layout of floats.\n\nThis function does not reduce in the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.ofBits\"><span class=\"name\">Float32</span>.<span class=\"name\">ofBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L90-L94","name":"Float32.le","line":90,"kind":"def","docLink":"./Init/Data/Float32.html#Float32.le","doc":"Non-strict inequality of floating-point numbers. Typically used via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.le\"><span class=\"name\">Float32</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L83-L88","name":"Float32.lt","line":83,"kind":"def","docLink":"./Init/Data/Float32.html#Float32.lt","doc":"Strict inequality of floating-point numbers. Typically used via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.lt\"><span class=\"name\">Float32</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L74-L80","name":"Float32.neg","line":74,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.neg","doc":"Negates 32-bit floating-point numbers according to IEEE 754. Typically used via the `-` prefix\noperator.\n\nThis function does not reduce in the kernel. It is compiled to the C negation operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.neg\"><span class=\"name\">Float32</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L65-L73","name":"Float32.div","line":65,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.div","doc":"Divides 32-bit floating-point numbers according to IEEE 754. Typically used via the `/` operator.\n\nIn Lean, division by zero typically yields zero. For `Float32`, it instead yields either `Inf`,\n`-Inf`, or `NaN`.\n\nThis function does not reduce in the kernel. It is compiled to the C division operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.div\"><span class=\"name\">Float32</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L59-L64","name":"Float32.mul","line":59,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.mul","doc":"Multiplies 32-bit floating-point numbers according to IEEE 754. Typically used via the `*` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C multiplication operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.mul\"><span class=\"name\">Float32</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L53-L58","name":"Float32.sub","line":53,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.sub","doc":"Subtracts 32-bit floating-point numbers according to IEEE 754. Typically used via the `-` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C subtraction operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.sub\"><span class=\"name\">Float32</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L47-L52","name":"Float32.add","line":47,"kind":"opaque","docLink":"./Init/Data/Float32.html#Float32.add","doc":"Adds two 32-bit floating-point numbers according to IEEE 754. Typically used via the `+` operator.\n\nThis function does not reduce in the kernel. It is compiled to the C addition operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.add\"><span class=\"name\">Float32</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a> → <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L45-L45","name":"instNonemptyFloat32","line":45,"kind":"instance","docLink":"./Init/Data/Float32.html#instNonemptyFloat32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#instNonemptyFloat32\"><span class=\"name\">instNonemptyFloat32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Init/Data/Float32.html#Float32\">Float32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L43-L43","name":"Float32.val","line":43,"kind":"def","docLink":"./Init/Data/Float32.html#Float32.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.val\"><span class=\"name\">Float32</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Float32.html#Float32\">Float32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Float32.html#float32Spec\">float32Spec</a>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L42-L42","name":"Float32.mk","line":42,"kind":"ctor","docLink":"./Init/Data/Float32.html#Float32.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32.mk\"><span class=\"name\">Float32</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\"><a href=\"./Init/Data/Float32.html#float32Spec\">float32Spec</a>.<a href=\"./Init/Data/Float.html#FloatSpec.float\">float</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float32.html#Float32\">Float32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L24-L43","name":"Float32","line":24,"kind":"structure","docLink":"./Init/Data/Float32.html#Float32","doc":"32-bit floating-point numbers.\n\n`Float32` corresponds to the IEEE 754 *binary32* format (`float` in C or `f32` in Rust).\nFloating-point numbers are a finite representation of a subset of the real numbers, extended with\nextra “sentinel” values that represent undefined and infinite results as well as separate positive\nand negative zeroes. Arithmetic on floating-point numbers approximates the corresponding operations\non the real numbers by rounding the results to numbers that are representable, propagating error and\ninfinite values.\n\nFloating-point numbers include [subnormal numbers](https://en.wikipedia.org/wiki/Subnormal_number).\nTheir special values are:\n * `NaN`, which denotes a class of “not a number” values that result from operations such as\n   dividing zero by zero, and\n * `Inf` and `-Inf`, which represent positive and infinities that result from dividing non-zero\n   values by zero.\n\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#Float32\"><span class=\"name\">Float32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Float32.lean#L15-L22","name":"float32Spec","line":15,"kind":"opaque","docLink":"./Init/Data/Float32.html#float32Spec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Float32.html#float32Spec\"><span class=\"name\">float32Spec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Float.html#FloatSpec\">FloatSpec</a></div></div>"}]}