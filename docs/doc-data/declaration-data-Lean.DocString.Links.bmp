{"name":"Lean.DocString.Links","instances":[],"imports":["Lean.Syntax"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/DocString/Links.lean#L140-L153","name":"Lean.validateBuiltinDocString","line":140,"kind":"def","docLink":"./Lean/DocString/Links.html#Lean.validateBuiltinDocString","doc":"Validates all links to the Lean reference manual in `docstring`, printing an error message if any\nare invalid. Returns `true` if all links are valid.\n\nThis is intended to be used before saving a docstring that is later subject to rewriting with\n`rewriteManualLinks`, in contexts where the imports needed to produce better error messages in\n`validateDocComment` are not yet available.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Links.html#Lean.validateBuiltinDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">validateBuiltinDocString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docString</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/DocString/Links.lean#L120-L137","name":"Lean.rewriteManualLinks","line":120,"kind":"def","docLink":"./Lean/DocString/Links.html#Lean.rewriteManualLinks","doc":"Rewrites Lean reference manual links in `docstring` to point at the reference manual.\n\nThis assumes that all such links have already been validated by `validateDocComment`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Links.html#Lean.rewriteManualLinks\"><span class=\"name\">Lean</span>.<span class=\"name\">rewriteManualLinks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docString</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/DocString/Links.lean#L105-L117","name":"Lean.rewriteManualLinksCore.rw","line":105,"kind":"def","docLink":"./Lean/DocString/Links.html#Lean.rewriteManualLinksCore.rw","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Links.html#Lean.rewriteManualLinksCore.rw\"><span class=\"name\">Lean</span>.<span class=\"name\">rewriteManualLinksCore</span>.<span class=\"name\">rw</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/DocString/Links.lean#L102-L103","name":"Lean.rewriteManualLinksCore.lookingAt","line":102,"kind":"def","docLink":"./Lean/DocString/Links.html#Lean.rewriteManualLinksCore.lookingAt","doc":"Returns `true` if `goal` is a prefix of the string at the position pointed to by `iter`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Links.html#Lean.rewriteManualLinksCore.lookingAt\"><span class=\"name\">Lean</span>.<span class=\"name\">rewriteManualLinksCore</span>.<span class=\"name\">lookingAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">iter</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">String.Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/DocString/Links.lean#L89-L97","name":"Lean.rewriteManualLinksCore.urlChar","line":89,"kind":"def","docLink":"./Lean/DocString/Links.html#Lean.rewriteManualLinksCore.urlChar","doc":"Returns `true` if the character is one of those allowed in RFC 3986 sections 2.2 and 2.3. other\nthan '(' or')'.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Links.html#Lean.rewriteManualLinksCore.urlChar\"><span class=\"name\">Lean</span>.<span class=\"name\">rewriteManualLinksCore</span>.<span class=\"name\">urlChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/DocString/Links.lean#L38-L117","name":"Lean.rewriteManualLinksCore","line":38,"kind":"def","docLink":"./Lean/DocString/Links.html#Lean.rewriteManualLinksCore","doc":"Rewrites links from the internal Lean manual syntax to the correct URL. This rewriting is an\noverapproximation: any parentheses containing the internal syntax of a Lean manual URL is rewritten.\n\nThe internal syntax is the URL scheme `lean-manual` followed by the path `/KIND/MORE...`, where\n`KIND` is a kind of content being linked to. Presently, the only valid kind is `section`, and it\nrequires that the remainder of the path consists of one element, which is a section or part identifier.\n\nThe correct URL is based on a manual root URL, which is determined by the `LEAN_MANUAL_ROOT`\nenvironment variable. If this environment variable is not set, a manual root provided when Lean was\nbuilt is used (typically this is the version corresponding to the current release). If no such root\nis available, the latest version of the manual is used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Links.html#Lean.rewriteManualLinksCore\"><span class=\"name\">Lean</span>.<span class=\"name\">rewriteManualLinksCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Syntax.html#String.Range\">String.Range</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/DocString/Links.lean#L19-L36","name":"Lean.manualRoot","line":19,"kind":"def","docLink":"./Lean/DocString/Links.html#Lean.manualRoot","doc":"Computes the root of the Lean reference manual that should be used for targets.\n\nIf the environment variable `LEAN_MANUAL_ROOT` is set, it is used as the root. If not, but a manual\nroot is pre-configured for the current Lean executable (typically true for releases), then it is\nused. If neither are true, then `https://lean-lang.org/doc/reference/latest/` is used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Links.html#Lean.manualRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">manualRoot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"}]}