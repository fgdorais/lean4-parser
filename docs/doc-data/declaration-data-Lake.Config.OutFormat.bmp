{"name":"Lake.Config.OutFormat","instances":[{"typeNames":[],"name":"Lake.instToTextOfToString","className":"Lake.ToText"},{"typeNames":["Lean.Json"],"name":"Lake.instToTextJson","className":"Lake.ToText"},{"typeNames":["List"],"name":"Lake.instToTextList","className":"Lake.ToText"},{"typeNames":["Array"],"name":"Lake.instToTextArray","className":"Lake.ToText"},{"typeNames":[],"name":"Lake.instFormatQuery","className":"Lake.FormatQuery"},{"typeNames":[],"name":"Lake.instFormatQueryOfToTextOfToJson","className":"Lake.FormatQuery"},{"typeNames":["Unit"],"name":"Lake.instFormatQueryUnit","className":"Lake.FormatQuery"}],"imports":["Lean.Data.Json"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L50-L50","name":"Lake.instFormatQueryUnit","line":50,"kind":"instance","docLink":"./Lake/Config/OutFormat.html#Lake.instFormatQueryUnit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.instFormatQueryUnit\"><span class=\"name\">Lake</span>.<span class=\"name\">instFormatQueryUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.FormatQuery\">FormatQuery</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L49-L49","name":"Lake.instFormatQueryOfToTextOfToJson","line":49,"kind":"instance","docLink":"./Lake/Config/OutFormat.html#Lake.instFormatQueryOfToTextOfToJson","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.instFormatQueryOfToTextOfToJson\"><span class=\"name\">Lake</span>.<span class=\"name\">instFormatQueryOfToTextOfToJson</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.ToText\">ToText</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.FormatQuery\">FormatQuery</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L43-L47","name":"Lake.stdFormat","line":43,"kind":"def","docLink":"./Lake/Config/OutFormat.html#Lake.stdFormat","doc":"Format function that uses `ToText` and `ToJson` to print output. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.stdFormat\"><span class=\"name\">Lake</span>.<span class=\"name\">stdFormat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.ToText\">ToText</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson.html#Lean.ToJson\">Lean.ToJson</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fmt</span> : <a href=\"./Lake/Config/OutFormat.html#Lake.OutFormat\">OutFormat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L41-L41","name":"Lake.instFormatQuery","line":41,"kind":"instance","docLink":"./Lake/Config/OutFormat.html#Lake.instFormatQuery","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.instFormatQuery\"><span class=\"name\">Lake</span>.<span class=\"name\">instFormatQuery</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.FormatQuery\">FormatQuery</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L35-L39","name":"Lake.nullFormat","line":35,"kind":"def","docLink":"./Lake/Config/OutFormat.html#Lake.nullFormat","doc":"A format function that produces \"null\" output. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.nullFormat\"><span class=\"name\">Lake</span>.<span class=\"name\">nullFormat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fmt</span> : <a href=\"./Lake/Config/OutFormat.html#Lake.OutFormat\">OutFormat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L31-L31","name":"Lake.FormatQuery.formatQuery","line":31,"kind":"def","docLink":"./Lake/Config/OutFormat.html#Lake.FormatQuery.formatQuery","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.FormatQuery.formatQuery\"><span class=\"name\">Lake</span>.<span class=\"name\">FormatQuery</span>.<span class=\"name\">formatQuery</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.FormatQuery\">FormatQuery</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.OutFormat\">OutFormat</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L30-L30","name":"Lake.FormatQuery.mk","line":30,"kind":"ctor","docLink":"./Lake/Config/OutFormat.html#Lake.FormatQuery.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.FormatQuery.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">FormatQuery</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">formatQuery</span> : <span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.OutFormat\">OutFormat</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#String\">String</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.FormatQuery\">FormatQuery</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L29-L31","name":"Lake.FormatQuery","line":29,"kind":"class","docLink":"./Lake/Config/OutFormat.html#Lake.FormatQuery","doc":"Class used to format target output for `lake query`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.FormatQuery\"><span class=\"name\">Lake</span>.<span class=\"name\">FormatQuery</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L27-L27","name":"Lake.instToTextArray","line":27,"kind":"instance","docLink":"./Lake/Config/OutFormat.html#Lake.instToTextArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.instToTextArray\"><span class=\"name\">Lake</span>.<span class=\"name\">instToTextArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.ToText\">ToText</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.ToText\">ToText</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L26-L26","name":"Lake.instToTextList","line":26,"kind":"instance","docLink":"./Lake/Config/OutFormat.html#Lake.instToTextList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.instToTextList\"><span class=\"name\">Lake</span>.<span class=\"name\">instToTextList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.ToText\">ToText</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.ToText\">ToText</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L25-L25","name":"Lake.instToTextJson","line":25,"kind":"instance","docLink":"./Lake/Config/OutFormat.html#Lake.instToTextJson","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.instToTextJson\"><span class=\"name\">Lake</span>.<span class=\"name\">instToTextJson</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.ToText\">ToText</a> <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L23-L23","name":"Lake.instToTextOfToString","line":23,"kind":"instance","docLink":"./Lake/Config/OutFormat.html#Lake.instToTextOfToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.instToTextOfToString\"><span class=\"name\">Lake</span>.<span class=\"name\">instToTextOfToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.ToText\">ToText</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L19-L19","name":"Lake.ToText.toText","line":19,"kind":"def","docLink":"./Lake/Config/OutFormat.html#Lake.ToText.toText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.ToText.toText\"><span class=\"name\">Lake</span>.<span class=\"name\">ToText</span>.<span class=\"name\">toText</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.ToText\">ToText</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L18-L18","name":"Lake.ToText.mk","line":18,"kind":"ctor","docLink":"./Lake/Config/OutFormat.html#Lake.ToText.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.ToText.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">ToText</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toText</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/OutFormat.html#Lake.ToText\">ToText</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L18-L19","name":"Lake.ToText","line":18,"kind":"class","docLink":"./Lake/Config/OutFormat.html#Lake.ToText","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.ToText\"><span class=\"name\">Lake</span>.<span class=\"name\">ToText</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L16-L16","name":"Lake.OutFormat.json","line":16,"kind":"ctor","docLink":"./Lake/Config/OutFormat.html#Lake.OutFormat.json","doc":"Format target output as JSON. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.OutFormat.json\"><span class=\"name\">Lake</span>.<span class=\"name\">OutFormat</span>.<span class=\"name\">json</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/OutFormat.html#Lake.OutFormat\">OutFormat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L15-L15","name":"Lake.OutFormat.text","line":15,"kind":"ctor","docLink":"./Lake/Config/OutFormat.html#Lake.OutFormat.text","doc":"Format target output as text. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.OutFormat.text\"><span class=\"name\">Lake</span>.<span class=\"name\">OutFormat</span>.<span class=\"name\">text</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/OutFormat.html#Lake.OutFormat\">OutFormat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/OutFormat.lean#L13-L16","name":"Lake.OutFormat","line":13,"kind":"inductive","docLink":"./Lake/Config/OutFormat.html#Lake.OutFormat","doc":"Target output formats supported by the Lake CLI (e.g., `lake query`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/OutFormat.html#Lake.OutFormat\"><span class=\"name\">Lake</span>.<span class=\"name\">OutFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}