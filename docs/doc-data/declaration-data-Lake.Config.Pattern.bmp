{"name":"Lake.Config.Pattern","instances":[{"typeNames":["Lake.Pattern"],"name":"Lake.instInhabitedPattern","className":"Inhabited"},{"typeNames":["Lake.PatternDescr"],"name":"Lake.instInhabitedPatternDescr","className":"Inhabited"},{"typeNames":["Lake.PatternDescr"],"name":"Lake.instCoePatternDescr","className":"Coe"},{"typeNames":["Lake.Pattern"],"name":"Lake.instIsPatternPattern","className":"Lake.IsPattern"},{"typeNames":["Lake.PatternDescr"],"name":"Lake.instIsPatternPatternDescr","className":"Lake.IsPattern"},{"typeNames":["Lake.Pattern"],"name":"Lake.instCoeForallBoolPattern","className":"Coe"},{"typeNames":["Lake.PatternDescr","Lake.Pattern"],"name":"Lake.instCoePatternDescrPatternOfIsPattern","className":"Coe"},{"typeNames":["Lake.PatternDescr"],"name":"Lake.instEmptyCollectionPatternDescr","className":"EmptyCollection"},{"typeNames":["Lake.Pattern"],"name":"Lake.instEmptyCollectionPattern","className":"EmptyCollection"},{"typeNames":["Lake.StrPatDescr"],"name":"Lake.instInhabitedStrPatDescr","className":"Inhabited"},{"typeNames":["Lake.StrPatDescr","String"],"name":"Lake.instIsPatternStrPatDescrString","className":"Lake.IsPattern"},{"typeNames":["Array","Lake.StrPatDescr"],"name":"Lake.instCoeArrayStringStrPatDescr","className":"Coe"},{"typeNames":["Array","Lake.StrPat"],"name":"Lake.instCoeArrayStringStrPat","className":"Coe"},{"typeNames":["String","Lake.StrPatDescr"],"name":"Lake.instCoeStringStrPatDescr","className":"Coe"},{"typeNames":["String","Lake.StrPat"],"name":"Lake.instCoeStringStrPat","className":"Coe"},{"typeNames":["Lake.PathPatDescr"],"name":"Lake.instInhabitedPathPatDescr","className":"Inhabited"},{"typeNames":["Lake.PathPatDescr","System.FilePath"],"name":"Lake.instIsPatternPathPatDescrFilePath","className":"Lake.IsPattern"}],"imports":["Lake.Util.Name"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L237-L241","name":"Lake.versionTagPresets","line":237,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.versionTagPresets","doc":"Builtin `StrPat` presets available to TOML for `versionTags`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.versionTagPresets\"><span class=\"name\">Lake</span>.<span class=\"name\">versionTagPresets</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/RBMap.html#Lean.RBMap\">Lean.RBMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a> <a href=\"./Lean/Data/Name.html#Lean.Name.quickCmp\">Lean.Name.quickCmp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L234-L235","name":"Lake.defaultVersionTags","line":234,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.defaultVersionTags","doc":"Default string pattern for a Package's `versionTags`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.defaultVersionTags\"><span class=\"name\">Lake</span>.<span class=\"name\">defaultVersionTags</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L231-L232","name":"Lake.StrPat.verLike","line":231,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.verLike","doc":"Matches a \"version-like\" string: a `v` followed by a digit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.verLike\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">verLike</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L220-L229","name":"Lake.isVerLike","line":220,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.isVerLike","doc":"Whether a string is \"version-like\".\nThat is, a `v` followed by a digit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.isVerLike\"><span class=\"name\">Lake</span>.<span class=\"name\">isVerLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L214-L216","name":"Lake.PathPat.fileName","line":214,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.PathPat.fileName","doc":"Matches a file path whose name satisfies the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPat.fileName\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPat</span>.<span class=\"name\">fileName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPat\">PathPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L210-L212","name":"Lake.PathPat.extension","line":210,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.PathPat.extension","doc":"Matches a file path whose extension satisfies the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPat.extension\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPat</span>.<span class=\"name\">extension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPat\">PathPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L206-L208","name":"Lake.PathPat.path","line":206,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.PathPat.path","doc":"Matches a file path whose normalized string representation satisfies the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPat.path\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPat</span>.<span class=\"name\">path</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPat\">PathPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L203-L204","name":"Lake.PathPat","line":203,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.PathPat","doc":"A `FilePath` pattern. Matches some subset of file paths. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPat\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L201-L201","name":"Lake.instIsPatternPathPatDescrFilePath","line":201,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instIsPatternPathPatDescrFilePath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instIsPatternPathPatDescrFilePath\"><span class=\"name\">Lake</span>.<span class=\"name\">instIsPatternPathPatDescrFilePath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L194-L199","name":"Lake.PathPatDescr.matches","line":194,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr.matches","doc":"Returns whether the string matches the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr.matches\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span>.<span class=\"name\">matches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">path</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L190-L192","name":"Lake.PathPatDescr.eq","line":190,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr.eq","doc":"Matches a file path that is equal to this one (when both are normalized). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr.eq\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L188-L188","name":"Lake.instInhabitedPathPatDescr","line":188,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedPathPatDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedPathPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedPathPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L186-L187","name":"Lake.PathPatDescr.fileName","line":186,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr.fileName","doc":"Matches a file path whose name satisfies the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr.fileName\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span>.<span class=\"name\">fileName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L184-L185","name":"Lake.PathPatDescr.extension","line":184,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr.extension","doc":"Matches a file path whose extension satisfies the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr.extension\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span>.<span class=\"name\">extension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L182-L183","name":"Lake.PathPatDescr.path","line":182,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr.path","doc":"Matches a file path whose normalized string representation satisfies the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr.path\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span>.<span class=\"name\">path</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\">PathPatDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L180-L188","name":"Lake.PathPatDescr","line":180,"kind":"inductive","docLink":"./Lake/Config/Pattern.html#Lake.PathPatDescr","doc":"A declarative `FilePath` pattern. Matches some subset of file paths. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PathPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">PathPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L176-L176","name":"Lake.instCoeStringStrPat","line":176,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instCoeStringStrPat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoeStringStrPat\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeStringStrPat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L175-L175","name":"Lake.instCoeStringStrPatDescr","line":175,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instCoeStringStrPatDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoeStringStrPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeStringStrPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L171-L173","name":"Lake.StrPat.beq","line":171,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.beq","doc":"Matches a string that is a member of the array "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.beq\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L168-L169","name":"Lake.StrPatDescr.beq","line":168,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr.beq","doc":"Matches a string that is equal to this one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr.beq\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L164-L166","name":"Lake.StrPat.endsWith","line":164,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.endsWith","doc":"Matches a string that ends with this suffix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.endsWith\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">endsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">affix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L160-L162","name":"Lake.StrPat.startsWith","line":160,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.startsWith","doc":"Matches a string that starts with this prefix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.startsWith\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">startsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">affix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L158-L158","name":"Lake.instCoeArrayStringStrPat","line":158,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instCoeArrayStringStrPat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoeArrayStringStrPat\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeArrayStringStrPat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span> <a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L157-L157","name":"Lake.instCoeArrayStringStrPatDescr","line":157,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instCoeArrayStringStrPatDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoeArrayStringStrPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeArrayStringStrPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span> <a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L153-L155","name":"Lake.StrPat.mem","line":153,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.mem","doc":"Matches a string that is a member of the array "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.mem\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L149-L151","name":"Lake.StrPat.satisfies","line":149,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.satisfies","doc":"Matches a value that satisfies an arbitrary predicate\n(optionally identified by a `Name`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.satisfies\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">satisfies</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L146-L147","name":"Lake.StrPat.none","line":146,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.StrPat.none","doc":"Matches nothing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat.none\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPat\">StrPat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L143-L144","name":"Lake.StrPat","line":143,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.StrPat","doc":"A `String` pattern. Matches some subset of strings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPat\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L141-L141","name":"Lake.instIsPatternStrPatDescrString","line":141,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instIsPatternStrPatDescrString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instIsPatternStrPatDescrString\"><span class=\"name\">Lake</span>.<span class=\"name\">instIsPatternStrPatDescrString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L134-L139","name":"Lake.StrPatDescr.matches","line":134,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr.matches","doc":"Returns whether the string matches the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr.matches\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span>.<span class=\"name\">matches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L132-L132","name":"Lake.instInhabitedStrPatDescr","line":132,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedStrPatDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedStrPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedStrPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L130-L131","name":"Lake.StrPatDescr.endsWith","line":130,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr.endsWith","doc":"Matches a string that ends with this suffix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr.endsWith\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span>.<span class=\"name\">endsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">affix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L128-L129","name":"Lake.StrPatDescr.startsWith","line":128,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr.startsWith","doc":"Matches a string that starts with this prefix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr.startsWith\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span>.<span class=\"name\">startsWith</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">affix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L126-L127","name":"Lake.StrPatDescr.mem","line":126,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr.mem","doc":"Matches a string that is a member of the array "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr.mem\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span>.<span class=\"name\">mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\">StrPatDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L124-L132","name":"Lake.StrPatDescr","line":124,"kind":"inductive","docLink":"./Lake/Config/Pattern.html#Lake.StrPatDescr","doc":"A declarative `String` pattern. Matches some subset of strings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.StrPatDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">StrPatDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L118-L120","name":"Lake.Pattern.star","line":118,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.star","doc":"Matches eveything. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.star\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L115-L116","name":"Lake.PatternDescr.star","line":115,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.star","doc":"Matches eveything. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.star\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">star</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L113-L113","name":"Lake.instEmptyCollectionPattern","line":113,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instEmptyCollectionPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instEmptyCollectionPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">instEmptyCollectionPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L112-L112","name":"Lake.instEmptyCollectionPatternDescr","line":112,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instEmptyCollectionPatternDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instEmptyCollectionPatternDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instEmptyCollectionPatternDescr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L108-L110","name":"Lake.Pattern.empty","line":108,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.empty","doc":"Matches nothing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L105-L106","name":"Lake.PatternDescr.empty","line":105,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.empty","doc":"Matches nothing. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L101-L103","name":"Lake.Pattern.any","line":101,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.any","doc":"Matches a value that satisfies every pattern. Short-circuits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.any\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L97-L99","name":"Lake.Pattern.all","line":97,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.all","doc":"Matches a value that satisfies every pattern. Short-circuits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.all\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L93-L95","name":"Lake.Pattern.not","line":93,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.not","doc":"Matches a value that satisfies every pattern. Short-circuits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.not\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L91-L91","name":"Lake.instCoePatternDescrPatternOfIsPattern","line":91,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instCoePatternDescrPatternOfIsPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoePatternDescrPatternOfIsPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoePatternDescrPatternOfIsPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L84-L89","name":"Lake.Pattern.ofDescr","line":84,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.ofDescr","doc":"Matches a string that satisfies the declarative pattern.\n(optionally identified by a `Name`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.ofDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ofDescr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">descr</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L82-L82","name":"Lake.instCoeForallBoolPattern","line":82,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instCoeForallBoolPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoeForallBoolPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeForallBoolPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L75-L80","name":"Lake.Pattern.ofFn","line":75,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.ofFn","doc":"Matches a value that satisfies an arbitrary predicate\n(optionally identified by a `Name`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.ofFn\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">ofFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Lean.Name.anonymous</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L73-L73","name":"Lake.instIsPatternPatternDescr","line":73,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instIsPatternPatternDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instIsPatternPatternDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instIsPatternPatternDescr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L63-L71","name":"Lake.PatternDescr.matches","line":63,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.matches","doc":"Returns whether the value matches the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.matches\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">matches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">β</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L61-L61","name":"Lake.instIsPatternPattern","line":61,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instIsPatternPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instIsPatternPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">instIsPatternPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L57-L59","name":"Lake.Pattern.matches","line":57,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.matches","doc":"Returns whether the value matches the pattern. Alias for `filter`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.matches\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">matches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L55-L55","name":"Lake.instCoePatternDescr","line":55,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instCoePatternDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instCoePatternDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoePatternDescr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L49-L50","name":"Lake.PatternDescr.coe","line":49,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.coe","doc":"Matches a value that statisfies the underlying pattern description. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.coe\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L47-L48","name":"Lake.PatternDescr.any","line":47,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.any","doc":"Matches a value that satisfies any one of the patterns. Short-circuits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.any\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">any</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L45-L46","name":"Lake.PatternDescr.all","line":45,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.all","doc":"Matches a value that satisfies every pattern. Short-circuits. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.all\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">all</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L43-L44","name":"Lake.PatternDescr.not","line":43,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr.not","doc":"Matches a value that does not satisfy the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr.not\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span>.<span class=\"name\">not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L38-L51","name":"Lake.PatternDescr","line":38,"kind":"inductive","docLink":"./Lake/Config/Pattern.html#Lake.PatternDescr","doc":"An abstract declarative pattern.\nAugments another pattern description `β` with logical connectives.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">PatternDescr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L36-L36","name":"Lake.instInhabitedPatternDescr","line":36,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedPatternDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedPatternDescr\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedPatternDescr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L36-L36","name":"Lake.instInhabitedPattern","line":36,"kind":"instance","docLink":"./Lake/Config/Pattern.html#Lake.instInhabitedPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.instInhabitedPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedPattern</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L35-L35","name":"Lake.Pattern.descr?","line":35,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.descr?","doc":"A optional declarative description of the filter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.descr?\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">descr?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L33-L33","name":"Lake.Pattern.name","line":33,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.name","doc":"An optional name for the filter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.name\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">name</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L31-L31","name":"Lake.Pattern.filter","line":31,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.filter","doc":"Returns whether the value matches the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.filter\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L29-L29","name":"Lake.Pattern.mk","line":29,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.Pattern.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">filter</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">descr?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lake/Config/Pattern.html#Lake.PatternDescr\">PatternDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.Pattern\">Pattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L25-L36","name":"Lake.Pattern","line":25,"kind":"structure","docLink":"./Lake/Config/Pattern.html#Lake.Pattern","doc":"A pattern. Matches some subset of the values of a type.\nMay also include a declarative description.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.Pattern\"><span class=\"name\">Lake</span>.<span class=\"name\">Pattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L19-L19","name":"Lake.«term_=~_»","line":19,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.«term_=~_»","doc":"Returns whether the value matches the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.«term_=~_»\"><span class=\"name\">Lake</span>.<span class=\"name\">«term_=~_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L17-L17","name":"Lake.IsPattern.satisfies","line":17,"kind":"def","docLink":"./Lake/Config/Pattern.html#Lake.IsPattern.satisfies","doc":"Returns whether the value matches the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.IsPattern.satisfies\"><span class=\"name\">Lake</span>.<span class=\"name\">IsPattern</span>.<span class=\"name\">satisfies</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L15-L15","name":"Lake.IsPattern.mk","line":15,"kind":"ctor","docLink":"./Lake/Config/Pattern.html#Lake.IsPattern.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.IsPattern.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">IsPattern</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">satisfies</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Config/Pattern.html#Lake.IsPattern\">IsPattern</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/Config/Pattern.lean#L15-L17","name":"Lake.IsPattern","line":15,"kind":"class","docLink":"./Lake/Config/Pattern.html#Lake.IsPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Config/Pattern.html#Lake.IsPattern\"><span class=\"name\">Lake</span>.<span class=\"name\">IsPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#outParam\">outParam</a> <a href=\"./foundational_types.html\">(Type</a> v)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"}]}