{"name":"Lean.Elab.PreDefinition.FixedParams","instances":[{"typeNames":["Lean.Elab.FixedParams.Info"],"name":"Lean.Elab.FixedParams.instToFormatInfo","className":"Std.ToFormat"},{"typeNames":["Lean.Elab.FixedParamPerms"],"name":"Lean.Elab.instInhabitedFixedParamPerms","className":"Inhabited"},{"typeNames":["Lean.Elab.FixedParamPerms"],"name":"Lean.Elab.instReprFixedParamPerms","className":"Repr"}],"imports":["Lean.Elab.PreDefinition.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L442-L491","name":"Lean.Elab.FixedParamPerms.erase","line":442,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.erase","doc":"If `xs` are the fixed parameters that are in scope, and `toErase` are, for each function, the\npositions of arguments that must no longer be fixed parameters, then this function splits partitions\n`xs` into those to keep and those to erase, and updates `FixedParams` accordingly.\n\nThis is used in structural recursion, where we may discover that some fixed parameters are actually\nindices and need to be treated as varying, including all parameters that depend on them.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.erase\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerms</span>.<span class=\"name\">erase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerms</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toErase</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L433-L440","name":"Lean.Elab.FixedParamPerms.fixedArePrefix","line":433,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.fixedArePrefix","doc":"Are all fixed parameters a non-reordered prefix?\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.fixedArePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerms</span>.<span class=\"name\">fixedArePrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedParamPerms</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L415-L431","name":"Lean.Elab.FixedParamPerm.buildArgs.go","line":415,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.buildArgs.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.buildArgs.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">buildArgs</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedArgs </span><span class=\"fn\">varyingArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L405-L431","name":"Lean.Elab.FixedParamPerm.buildArgs","line":405,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.buildArgs","doc":"Intersperses the fixed and varying parameters to be in the original parameter order.\nCan handle over- or und-application (extra or missing varying args), as long\nas there are all varying parameters that go before fixed parameters.\n(We expect to always find all fixed parameters, else they wouldn't be fixed parameters.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.buildArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">buildArgs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixedArgs </span><span class=\"fn\">varyingArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L395-L403","name":"Lean.Elab.FixedParamPerm.pickVarying","line":395,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.pickVarying","doc":"If `xs` are arguments to the `funIdx`'s function, pick only the varying ones.\nUnlike `pickFixed`, this function can handle over- or under-application.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.pickVarying\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">pickVarying</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L388-L393","name":"Lean.Elab.FixedParamPerm.pickFixed.go","line":388,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.pickFixed.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.pickFixed.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">pickFixed</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L375-L393","name":"Lean.Elab.FixedParamPerm.pickFixed","line":375,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.pickFixed","doc":"If `xs` are arguments to the `funIdx`'s function, pick only the fixed ones, and reorder appropriately.\nExpects `xs` to match the arity of the function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.pickFixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">pickFixed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L362-L373","name":"Lean.Elab.FixedParamPerm.instantiateLambda.go","line":362,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.instantiateLambda.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.instantiateLambda.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">instantiateLambda</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L352-L373","name":"Lean.Elab.FixedParamPerm.instantiateLambda","line":352,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.instantiateLambda","doc":"If `value` is the body of the `funIdx`'s function, instantiate the fixed parameters.\nExpects enough manifest lambdas to instantiate all fixed parameters, but can handle\neta-contracted definitions beyond that.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.instantiateLambda\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">instantiateLambda</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value₀</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L343-L350","name":"Lean.Elab.FixedParamPerm.instantiateForall.go","line":343,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.instantiateForall.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.instantiateForall.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">instantiateForall</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L335-L350","name":"Lean.Elab.FixedParamPerm.instantiateForall","line":335,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.instantiateForall","doc":"If `type` is the type of the `funIdx`'s function, instantiate the fixed parameters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.instantiateForall\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">instantiateForall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type₀</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L330-L332","name":"Lean.Elab.FixedParamPerm.forallTelescope","line":330,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.forallTelescope","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.forallTelescope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">forallTelescope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L303-L304","name":"Lean.Elab.FixedParamPerm.isFixed","line":303,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.isFixed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.isFixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">isFixed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L300-L301","name":"Lean.Elab.FixedParamPerm.numFixed","line":300,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.numFixed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm.numFixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span>.<span class=\"name\">numFixed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L267-L298","name":"Lean.Elab.getFixedParamPerms","line":267,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.getFixedParamPerms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.getFixedParamPerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getFixedParamPerms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L265-L265","name":"Lean.Elab.instReprFixedParamPerms","line":265,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.instReprFixedParamPerms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.instReprFixedParamPerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instReprFixedParamPerms</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L265-L265","name":"Lean.Elab.instInhabitedFixedParamPerms","line":265,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.instInhabitedFixedParamPerms","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.instInhabitedFixedParamPerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedFixedParamPerms</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L264-L264","name":"Lean.Elab.FixedParamPerms.revDeps","line":264,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.revDeps","doc":"The dependencies among the parameters. See `FixedParams.Info.revDeps`.\nWe need this for the `FixedParamsPerm.erase` operation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.revDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerms</span>.<span class=\"name\">revDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L259-L259","name":"Lean.Elab.FixedParamPerms.perms","line":259,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.perms","doc":"For each function in the clique, a mapping from its parameters to the fixed parameters.\nFor the first function, they appear in order; for other functions they may be reordered.\n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.perms\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerms</span>.<span class=\"name\">perms</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L254-L254","name":"Lean.Elab.FixedParamPerms.numFixed","line":254,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.numFixed","doc":"Number of fixed parameters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.numFixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerms</span>.<span class=\"name\">numFixed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L252-L252","name":"Lean.Elab.FixedParamPerms.mk","line":252,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerms</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numFixed</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\">FixedParamPerm</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">revDeps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\">FixedParamPerms</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L248-L265","name":"Lean.Elab.FixedParamPerms","line":248,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms","doc":"This data structure stores the result of the fixed parameter analysis. See `FixedParams.Info` for\ndetails on the analysis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerms\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerms</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L239-L246","name":"Lean.Elab.FixedParamPerm","line":239,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm","doc":"For a given function, a mapping from its parameters to the (indices of the) fixed parameters of the\nrecursive group.\nThe length of the array is the arity of the function, as determined from its body, consistent\nwith the arity used by well-founded recursion.\nFor the first function, they appear in order; for other functions they may be reordered.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParamPerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParamPerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L187-L237","name":"Lean.Elab.getFixedParamsInfo","line":187,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.getFixedParamsInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.getFixedParamsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getFixedParamsInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">FixedParams.Info</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L175-L185","name":"Lean.Elab.getParamRevDeps","line":175,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.getParamRevDeps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.getParamRevDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getParamRevDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preDefs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Basic.html#Lean.Elab.PreDefinition\">PreDefinition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L169-L169","name":"Lean.Elab.FixedParams.instToFormatInfo","line":169,"kind":"instance","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.instToFormatInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.instToFormatInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">instToFormatInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L160-L166","name":"Lean.Elab.FixedParams.Info.format","line":160,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.format\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L121-L158","name":"Lean.Elab.FixedParams.Info.setCallerParam","line":121,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.setCallerParam","doc":"We observe a possibly valid edge.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.setCallerParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span>.<span class=\"name\">setCallerParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">calleeIdx </span><span class=\"fn\">argIdx </span><span class=\"fn\">callerIdx </span><span class=\"fn\">paramIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L118-L119","name":"Lean.Elab.FixedParams.Info.getCallerParam?","line":118,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.getCallerParam?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.getCallerParam?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span>.<span class=\"name\">getCallerParam?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">calleeIdx </span><span class=\"fn\">argIdx </span><span class=\"fn\">callerIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L99-L116","name":"Lean.Elab.FixedParams.Info.setVarying","line":99,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.setVarying","doc":"This parameter is varying. Set and propagate that information.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.setVarying\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span>.<span class=\"name\">setVarying</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funIdx </span><span class=\"fn\">paramIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L93-L97","name":"Lean.Elab.FixedParams.Info.mayBeFixed","line":93,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.mayBeFixed","doc":"Is this parameter still plausibly a fixed parameter?\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.mayBeFixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span>.<span class=\"name\">mayBeFixed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">callerIdx </span><span class=\"fn\">paramIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L87-L91","name":"Lean.Elab.FixedParams.Info.addSelfCalls","line":87,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.addSelfCalls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.addSelfCalls\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span>.<span class=\"name\">addSelfCalls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L82-L85","name":"Lean.Elab.FixedParams.Info.init","line":82,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.init","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.init\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span>.<span class=\"name\">init</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">revDeps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L79-L79","name":"Lean.Elab.FixedParams.Info.revDeps","line":79,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.revDeps","doc":"The dependency structure of the function parameter.\nIf `paramIdx₂ ∈ revDeps[funIdx][paraIdx₁]`, then the type of `paramIdx₂` depends on `parmaIdx₁`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.revDeps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span>.<span class=\"name\">revDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L74-L74","name":"Lean.Elab.FixedParams.Info.graph","line":74,"kind":"def","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.graph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.graph\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span>.<span class=\"name\">graph</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L60-L60","name":"Lean.Elab.FixedParams.Info.mk","line":60,"kind":"ctor","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">graph</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">revDeps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/FixedParams.lean#L31-L79","name":"Lean.Elab.FixedParams.Info","line":31,"kind":"structure","docLink":"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info","doc":"To determine which parameters in mutually recursive predefinitions are fixed, and how they\ncorrespond to each other, we run an analysis that aggregates information in the `Info` data type.\n\nAbstractly, this represents\n* a set `varying` of `(funIdx × paramIdx)` pairs known to be varying, initially empty\n* a directed graph whose nodes are `(funIdx × paramIdx)` pairs, initially empty\n\nWe find the largest set and graph that satisfies these rules:\n* Every parameter has to be related to itself: `(funIdx, paramIdx) → (funIdx, paramIdx)`.\n* whenever the function with index `caller` calls `callee` and the `argIdx`'s argument is reducibly\n  defeq to `paramIdx`, then we have an edge `(caller, paramIdx) → (callee, argIdx)`.\n* whenever the function with index `caller` calls `callee` and the `argIdx`'s argument is not reducibly\n  defeq to any of the `caller`'s parameters, then `(callee, argIdx) ∈ varying`.\n* If we have `(caller, paramIdx₁) → (callee, argIdx)` and `(caller, paramIdx₂) → (callee, argIdx)`\n  with `paramIdx₁ ≠ paramIdx₂`, then `(callee, argIdx) ∈ varying`.\n* The graph is transitive\n* If we have `(caller, paramIdx) → (callee, argIdx)` and `(caller, paramIdx) ∈ varying`, then\n  `(callee, argIdx) ∈ varying`\n* If the type of `funIdx`’s parameter `paramIdx₂ depends on the `paramIdx₁` and\n  `(funIdx, paramIdx₁) ∈ varying`, then `(funIdx, paramIdx₁) ∈ varying`\n* For structural recursion: The target and all its indices are `varying`.\n  (This is taking into account post-hoc, using `FixedParamPerms.erase`)\n\nUnder the assumption that the predefintions indeed are mutually recursive, then the resulting graph,\nrestricted to the non-`varying` nodes, should partition into cliques that have one member from each\nfunction. Every such clique becomes a fixed parameter.\n\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/FixedParams.html#Lean.Elab.FixedParams.Info\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FixedParams</span>.<span class=\"name\">Info</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}