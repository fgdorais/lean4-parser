{"name":"Lean.Meta.Tactic.Grind.Arith.CommRing.RingId","instances":[],"imports":["Lean.Meta.Tactic.Grind.Simp","Lean.Meta.Tactic.Grind.Arith.CommRing.Util"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/RingId.lean#L94-L121","name":"Lean.Meta.Grind.Arith.CommRing.getRingId?.go?","line":94,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingId.html#Lean.Meta.Grind.Arith.CommRing.getRingId?.go?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingId.html#Lean.Meta.Grind.Arith.CommRing.getRingId?.go?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">getRingId?</span>.<span class=\"name\">go?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/Tactic/Grind/Arith/CommRing/RingId.lean#L78-L121","name":"Lean.Meta.Grind.Arith.CommRing.getRingId?","line":78,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingId.html#Lean.Meta.Grind.Arith.CommRing.getRingId?","doc":"Returns the ring id for the given type if there is a `CommRing` instance for it.\n\nThis function will also perform sanity-checks\n(e.g., the `Add` instance for `type` must be definitionally equal to the `CommRing.toAdd` one.)\n\nIt also caches the functions representing `+`, `*`, `-`, `^`, and `intCast`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/RingId.html#Lean.Meta.Grind.Arith.CommRing.getRingId?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">getRingId?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"}]}