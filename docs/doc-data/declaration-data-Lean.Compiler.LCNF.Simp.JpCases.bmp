{"name":"Lean.Compiler.LCNF.Simp.JpCases","instances":[{"typeNames":["Lean.Compiler.LCNF.Simp.JpCasesInfo"],"name":"Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo","className":"Inhabited"}],"imports":["Lean.Compiler.LCNF.DependsOn","Lean.Compiler.LCNF.InferType","Lean.Compiler.LCNF.Internalize","Lean.Compiler.LCNF.Simp.Basic","Lean.Compiler.LCNF.Simp.DiscrM"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L274-L295","name":"Lean.Compiler.LCNF.Simp.simpJpCases?.visitJmp?","line":274,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.simpJpCases?.visitJmp?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.simpJpCases?.visitJmp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpJpCases?</span>.<span class=\"name\">visitJmp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap\">JpCasesInfoMap</a> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.Ctor2JpCasesAlt\">Ctor2JpCasesAlt</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">DiscrM</a>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L233-L272","name":"Lean.Compiler.LCNF.Simp.simpJpCases?.visitJp?","line":233,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.simpJpCases?.visitJp?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.simpJpCases?.visitJp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpJpCases?</span>.<span class=\"name\">visitJp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap\">JpCasesInfoMap</a> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.Ctor2JpCasesAlt\">Ctor2JpCasesAlt</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">DiscrM</a>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L205-L231","name":"Lean.Compiler.LCNF.Simp.simpJpCases?.visit","line":205,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.simpJpCases?.visit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.simpJpCases?.visit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpJpCases?</span>.<span class=\"name\">visit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap\">JpCasesInfoMap</a> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.Ctor2JpCasesAlt\">Ctor2JpCasesAlt</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">DiscrM</a>)</span> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L151-L295","name":"Lean.Compiler.LCNF.Simp.simpJpCases?","line":151,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.simpJpCases?","doc":"Try to optimize `jpCases` join points.\nWe say a join point is a `jpCases` when it satisfies the predicate `isJpCases`.\nIf we have a jump to `jpCases` with a constructor, then we can optimize the code by creating an new join point for\nthe constructor.\nExample: suppose we have\n```lean\njp _jp.1 y :=\n  let x.1 := true\n  cases y\n  | nil => let x.2 := g x.1; return x.2\n  | cons h t => let x.3 := h x.1; return x.3\n...\ncases x.4\n| ctor1 =>\n  let x.5 := cons z.1 z.2\n  jmp _jp.1 x.5\n| ctor2 =>\n  let x.6 := f x.4\n  jmp _jp.1 x.6\n```\nThis `simpJpCases?` converts it to\n```lean\njp _jp.2 h t :=\n  let x.1 := true\n  let x.3 := h x.1\n  return x.3\njp _jp.1 y :=\n  let x.1 := true\n  cases y\n  | nil => let x.2 := g x.1; return x.2\n  | cons h t => jmp _jp.2 h t\n...\ncases x.4\n| ctor1 =>\n  -- The constructor has been eliminated here\n  jmp _jp.2 z.1 z.2\n| ctor2 =>\n  let x.6 := f x.4\n  jmp _jp.1 x.6\n```\nNote that if all jumps to the join point are with constructors,\nthen the join point is eliminated as dead code.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.simpJpCases?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">simpJpCases?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L105-L105","name":"Lean.Compiler.LCNF.Simp.Ctor2JpCasesAlt","line":105,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.Ctor2JpCasesAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.Ctor2JpCasesAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Ctor2JpCasesAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L103-L103","name":"Lean.Compiler.LCNF.Simp.JpCasesAlt.dependsOnDiscr","line":103,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.dependsOnDiscr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.dependsOnDiscr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesAlt</span>.<span class=\"name\">dependsOnDiscr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt\">JpCasesAlt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L102-L102","name":"Lean.Compiler.LCNF.Simp.JpCasesAlt.default","line":102,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesAlt</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt\">JpCasesAlt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L101-L101","name":"Lean.Compiler.LCNF.Simp.JpCasesAlt.decl","line":101,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.decl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.decl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesAlt</span>.<span class=\"name\">decl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt\">JpCasesAlt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L100-L100","name":"Lean.Compiler.LCNF.Simp.JpCasesAlt.mk","line":100,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesAlt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">default </span><span class=\"fn\">dependsOnDiscr</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt\">JpCasesAlt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L100-L103","name":"Lean.Compiler.LCNF.Simp.JpCasesAlt","line":100,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L69-L86","name":"Lean.Compiler.LCNF.Simp.collectJpCasesInfo.go","line":69,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.collectJpCasesInfo.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.collectJpCasesInfo.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">collectJpCasesInfo</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap\">JpCasesInfoMap</a> <a href=\"./Lean/Compiler/LCNF/Simp/DiscrM.html#Lean.Compiler.LCNF.Simp.DiscrM\">DiscrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L59-L86","name":"Lean.Compiler.LCNF.Simp.collectJpCasesInfo","line":59,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.collectJpCasesInfo","doc":"Return a map containing entries `jpFVarId ↦ { paramIdx, ctorNames }` where `jpFVarId` is the id of join point\nin code that satisfies `isJpCases`, and `ctorNames` is a set of constructor names such that\nthere is a jump `.jmp jpFVarId #[..., x, ...]` in `code` and `x` is a constructor application.\n`paramIdx` is the index of the parameter\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.collectJpCasesInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">collectJpCasesInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap\">JpCasesInfoMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L55-L57","name":"Lean.Compiler.LCNF.Simp.JpCasesInfoMap.isCandidate","line":55,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap.isCandidate","doc":"Return `true` if the collected information suggests opportunities for the `JpCases` optimization. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap.isCandidate\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfoMap</span>.<span class=\"name\">isCandidate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap\">JpCasesInfoMap</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L53-L53","name":"Lean.Compiler.LCNF.Simp.JpCasesInfoMap","line":53,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfoMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfoMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L51-L51","name":"Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo","line":51,"kind":"instance","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.instInhabitedJpCasesInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">instInhabitedJpCasesInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\">JpCasesInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L50-L50","name":"Lean.Compiler.LCNF.Simp.JpCasesInfo.ctorNames","line":50,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.ctorNames","doc":"Set of constructor names s.t. `ctorName` is in the set if there is a jump to the join point where the parameter\n`paramIdx` is a constructor application.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.ctorNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfo</span>.<span class=\"name\">ctorNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\">JpCasesInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L45-L45","name":"Lean.Compiler.LCNF.Simp.JpCasesInfo.paramIdx","line":45,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.paramIdx","doc":"Parameter index returned by `isJpCases?`. This parameter is the one the join point is performing the case-split. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.paramIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfo</span>.<span class=\"name\">paramIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\">JpCasesInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L43-L43","name":"Lean.Compiler.LCNF.Simp.JpCasesInfo.mk","line":43,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorNames</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\">JpCasesInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L40-L51","name":"Lean.Compiler.LCNF.Simp.JpCasesInfo","line":40,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo","doc":"Information for join points that satisfy `isJpCases?`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.JpCasesInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">JpCasesInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L32-L37","name":"Lean.Compiler.LCNF.Simp.isJpCases?.go","line":32,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.isJpCases?.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.isJpCases?.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">isJpCases?</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">small</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prefixSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Simp/JpCases.lean#L16-L38","name":"Lean.Compiler.LCNF.Simp.isJpCases?","line":16,"kind":"def","docLink":"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.isJpCases?","doc":"Given the function declaration `decl`, return `some idx` if it is of the form\n```\nf y :=\n  ... /- This part is not bigger than smallThreshold. -/\n  cases y\n  | ... => ...\n  ...\n```\n`idx` is the index of the parameter used in the `cases` statement.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Simp/JpCases.html#Lean.Compiler.LCNF.Simp.isJpCases?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Simp</span>.<span class=\"name\">isJpCases?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"}]}