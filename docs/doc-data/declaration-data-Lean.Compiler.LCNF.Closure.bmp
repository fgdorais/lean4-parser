{"name":"Lean.Compiler.LCNF.Closure","instances":[],"imports":["Lean.Util.ForEachExprWhere","Lean.Compiler.LCNF.CompilerM"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L149-L151","name":"Lean.Compiler.LCNF.Closure.run","line":149,"kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inScope</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">abstract</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>) =&gt; <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L143-L145","name":"Lean.Compiler.LCNF.Closure.collectType","line":143,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectType","doc":"Collect dependencies of the given expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L115-L141","name":"Lean.Compiler.LCNF.Closure.collectFVar","line":115,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectFVar","doc":"Process the given free variable.\nIf it has not already been visited and is in scope, we collect its dependencies.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L109-L113","name":"Lean.Compiler.LCNF.Closure.collectFunDecl","line":109,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectFunDecl","doc":"Collect dependencies of a local function declaration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L90-L107","name":"Lean.Compiler.LCNF.Closure.collectCode","line":90,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectCode","doc":"Collect dependencies in the given code. We need this function to be able\nto collect dependencies in a local function declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L83-L88","name":"Lean.Compiler.LCNF.Closure.collectLetValue","line":83,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectLetValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectLetValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectLetValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L77-L81","name":"Lean.Compiler.LCNF.Closure.collectArg","line":77,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L70-L75","name":"Lean.Compiler.LCNF.Closure.collectParams","line":70,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectParams","doc":"Collect dependencies in parameters. We need this because parameters may\ncontain other type parameters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.collectParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">collectParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L62-L67","name":"Lean.Compiler.LCNF.Closure.markVisited","line":62,"kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.markVisited","doc":"Mark a free variable as already visited.\nWe perform a topological sort over the dependencies.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.markVisited\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">markVisited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\">ClosureM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L57-L60","name":"Lean.Compiler.LCNF.Closure.ClosureM","line":57,"kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM","doc":"Monad for implementing the dependency collector.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.ClosureM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">ClosureM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L55-L55","name":"Lean.Compiler.LCNF.Closure.State.decls","line":55,"kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.decls","doc":"Let-declarations and local function declarations that are going to be \"copied\" to the code\nbeing processed. For example, when this module is used in the code specializer, the let-declarations\noften contain the instance values. In the current specialization heuristic all let-declarations are ground values\n(i.e., they do not contain free-variables).\nHowever, local function declarations may contain free variables.\n\nAll customers of this module try to avoid work duplication. If a let-declaration is a ground value,\nit most likely will be computed during compilation time, and work duplication is not an issue.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">State</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L44-L44","name":"Lean.Compiler.LCNF.Closure.State.params","line":44,"kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.params","doc":"Free variables that must become new parameters of the code being specialized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.params\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">State</span>.<span class=\"name\">params</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L40-L40","name":"Lean.Compiler.LCNF.Closure.State.visited","line":40,"kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.visited","doc":"Set of already visited free variables.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.visited\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">State</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L36-L36","name":"Lean.Compiler.LCNF.Closure.State.mk","line":36,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visited</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L33-L55","name":"Lean.Compiler.LCNF.Closure.State","line":33,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State","doc":"State for the `ClosureM` monad.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L31-L31","name":"Lean.Compiler.LCNF.Closure.Context.abstract","line":31,"kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.abstract","doc":"If `abstract x` returns `true`, we convert `x` into a closure parameter. Otherwise,\nwe collect the dependencies in the `let`/`fun`-declaration too, and include the declaration in the closure.\nRemark: the lambda lifting pass abstracts all `let`/`fun`-declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.abstract\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">Context</span>.<span class=\"name\">abstract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L25-L25","name":"Lean.Compiler.LCNF.Closure.Context.inScope","line":25,"kind":"def","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.inScope","doc":"`inScope x` returns `true` if `x` is a variable that is not in `C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.inScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">Context</span>.<span class=\"name\">inScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L21-L21","name":"Lean.Compiler.LCNF.Closure.Context.mk","line":21,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inScope </span><span class=\"fn\">abstract</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Compiler/LCNF/Closure.lean#L21-L31","name":"Lean.Compiler.LCNF.Closure.Context","line":21,"kind":"structure","docLink":"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Closure.html#Lean.Compiler.LCNF.Closure.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Closure</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}