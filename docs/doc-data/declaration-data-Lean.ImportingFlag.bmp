{"name":"Lean.ImportingFlag","instances":[],"imports":["Init.System.IO"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ImportingFlag.lean#L40-L56","name":"Lean.withImporting","line":40,"kind":"def","docLink":"./Lean/ImportingFlag.html#Lean.withImporting","doc":"Execute `x` with \"importing\" flag turned on.\nWhen the \"importing\" flag is set to true, we allow user-extensions defined with with\nthe `initialize` command to update global references.\nIMPORTANT: There is no semaphore controlling the access to these global references.\nWe assume these global references are updated by a single execution thread.\nThis is true in the Lean frontend where we process the `import` commands at the beginning\nof the execution only. Users must make sure that when `importModules` is used, there is only\none execution thread accessing the global references.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ImportingFlag.html#Lean.withImporting\"><span class=\"name\">Lean</span>.<span class=\"name\">withImporting</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ImportingFlag.lean#L33-L38","name":"Lean.initializing","line":33,"kind":"def","docLink":"./Lean/ImportingFlag.html#Lean.initializing","doc":"We say Lean is \"initializing\" when it is executing `builtin_initialize` declarations or importing modules.\nRecall that Lean executes `initialize` declarations while importing modules.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ImportingFlag.html#Lean.initializing\"><span class=\"name\">Lean</span>.<span class=\"name\">initializing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ImportingFlag.lean#L30-L31","name":"Lean.isInitializerExecutionEnabled","line":30,"kind":"def","docLink":"./Lean/ImportingFlag.html#Lean.isInitializerExecutionEnabled","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ImportingFlag.html#Lean.isInitializerExecutionEnabled\"><span class=\"name\">Lean</span>.<span class=\"name\">isInitializerExecutionEnabled</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/ImportingFlag.lean#L14-L28","name":"Lean.enableInitializersExecution","line":14,"kind":"def","docLink":"./Lean/ImportingFlag.html#Lean.enableInitializersExecution","doc":"By default the `initialize` code is not executed when importing .olean files.\nWhen this flag is set to `true`, the initializers are executed.\nThis method is meant to be used by the Lean frontend only.\nRemark: it is not safe to run `initialize` code when using multiple threads.\nRemark: Any loaded native Lean code must match its imported version. In particular,\n  no two versions of the same module may be loaded when this flag is set.\n  No native code may be loaded after its module has been imported.\nRemark: Compacted module regions must not be freed when using this flag as the\n  cached initializer results may reference objects in them.\nRemark: The Lean frontend executes this method at startup time.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/ImportingFlag.html#Lean.enableInitializersExecution\"><span class=\"name\">Lean</span>.<span class=\"name\">enableInitializersExecution</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}