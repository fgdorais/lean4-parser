{"name":"Lean.Elab.PreDefinition.Structural.BRecOn","instances":[],"imports":["Lean.Util.HasConstCache","Lean.Meta.PProdN","Lean.Meta.Match.MatcherApp.Transform","Lean.Elab.RecAppSyntax","Lean.Elab.PreDefinition.Basic","Lean.Elab.PreDefinition.Structural.Basic","Lean.Elab.PreDefinition.Structural.RecArgInfo"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L283-L299","name":"Lean.Elab.Structural.mkBrecOnApp","line":283,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBrecOnApp","doc":"Completes the `.brecOn` for the given function.\nThe `value` is the function with (only) the fixed parameters moved into the context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBrecOnApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkBrecOnApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">positions</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.Positions\">Positions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fnIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">brecOnConst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">FArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfo</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L259-L281","name":"Lean.Elab.Structural.inferBRecOnFTypes","line":259,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.inferBRecOnFTypes","doc":"Given the `recArgInfos` and the `motives`, infer the types of the `F` arguments to the `.brecOn`\ncombinators. This assumes that all `.brecOn` functions of a mutual inductive have the same structure.\n\nIt also undoes the permutation and packing done by `packMotives`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.inferBRecOnFTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">inferBRecOnFTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">positions</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.Positions\">Positions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">brecOnConst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L233-L257","name":"Lean.Elab.Structural.mkBRecOnConst","line":233,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnConst","doc":"Given the `motives`, figures out whether to use `.brecOn` or `.binductionOn`, pass\nthe right universe levels, the parameters, and the motives.\nIt was already checked earlier in `checkCodomainsLevel` that the functions live in the same universe.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkBRecOnConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">positions</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.Positions\">Positions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motives</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L214-L231","name":"Lean.Elab.Structural.mkBRecOnF","line":214,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnF","doc":"Calculates the `.brecOn` functional argument corresponding to one structural recursive function.\nThe `value` is the function with (only) the fixed parameters moved into the context,\nThe `FType` is the expected type of the argument.\nThe `recArgInfos` is used to transform the body of the function to replace recursive calls with\nuses of the `below` induction hypothesis.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnF\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkBRecOnF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfos</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">positions</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.Positions\">Positions</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfo</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value </span><span class=\"fn\">FType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L203-L212","name":"Lean.Elab.Structural.mkBRecOnMotive","line":203,"kind":"def","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnMotive","doc":"Calculates the `.brecOn` motive corresponding to one structural recursive function.\nThe `value` is the function with (only) the fixed parameters moved into the context.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.mkBRecOnMotive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">mkBRecOnMotive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">recArgInfo</span> : <a href=\"./Lean/Elab/PreDefinition/Structural/RecArgInfo.html#Lean.Elab.Structural.RecArgInfo\">RecArgInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/PreDefinition/Structural/Basic.html#Lean.Elab.Structural.M\">M</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/PreDefinition/Structural/BRecOn.lean#L21-L31","name":"Lean.Elab.Structural.searchPProd","line":21,"kind":"opaque","docLink":"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.searchPProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Structural/BRecOn.html#Lean.Elab.Structural.searchPProd\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Structural</span>.<span class=\"name\">searchPProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">F</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>"}]}