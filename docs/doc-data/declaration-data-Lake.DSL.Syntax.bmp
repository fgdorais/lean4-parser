{"name":"Lake.DSL.Syntax","instances":[],"imports":["Lake.DSL.DeclUtil","Lean.Parser.Term"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L415-L419","name":"Lake.DSL.runIO","line":415,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.runIO","doc":"Executes a term of type `IO α` at elaboration-time\nand produces an expression corresponding to the result via `ToExpr α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.runIO\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">runIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L388-L413","name":"Lake.DSL.metaIf","line":388,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.metaIf","doc":"The `meta if` command has two forms:\n\n```lean\nmeta if <c:term> then <a:command>\nmeta if <c:term> then <a:command> else <b:command>\n```\n\nIt expands to the command `a` if the term `c` evaluates to true\n(at elaboration time). Otherwise, it expands to command `b` (if an `else`\nclause is provided).\n\nOne can use this command to specify, for example, external library targets\nonly available on specific platforms:\n\n```lean\nmeta if System.Platform.isWindows then\nextern_lib winOnlyLib := ...\nelse meta if System.Platform.isOSX then\nextern_lib macOnlyLib := ...\nelse\nextern_lib linuxOnlyLib := ...\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.metaIf\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">metaIf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L381-L386","name":"Lake.DSL.cmdDo","line":381,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.cmdDo","doc":"The `do` command syntax groups multiple similarly indented commands together.\nThe group can then be passed to another command that usually only accepts a\nsingle command (e.g., `meta if`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.cmdDo\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">cmdDo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L371-L373","name":"Lake.DSL.«term`@___/____»","line":371,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.«term`@___/____»","doc":"A package target key literal (with optional facet). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.«term`@___/____»\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">«term`@___/____»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L368-L369","name":"Lake.DSL.«term`+___»","line":368,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.«term`+___»","doc":"A module target key literal (with optional facet). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.«term`+___»\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">«term`+___»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L366-L366","name":"Lake.DSL.packageTargetLit","line":366,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.packageTargetLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.packageTargetLit\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">packageTargetLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L365-L365","name":"Lake.DSL.facetSuffix","line":365,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.facetSuffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.facetSuffix\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">facetSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L354-L355","name":"Lake.verLit","line":354,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.verLit","doc":"A Lake version literal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.verLit\"><span class=\"name\">Lake</span>.<span class=\"name\">verLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L328-L344","name":"Lake.DSL.scriptDecl","line":328,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.scriptDecl","doc":"Define a new Lake script for the package.\n\n**Example**\n\n```\n/-- Display a greeting -/\nscript «script-name» (args) do\n  if h : 0 < args.length then\n    IO.println s!\"Hello, {args[0]'h}!\"\n  else\n    IO.println \"Hello, world!\"\n  return 0\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.scriptDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">scriptDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L325-L326","name":"Lake.DSL.scriptDeclSpec","line":325,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.scriptDeclSpec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.scriptDeclSpec\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">scriptDeclSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L302-L317","name":"Lake.DSL.externLibCommand","line":302,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.externLibCommand","doc":"Define a new external library target for the package. Has one form:\n\n```lean\nextern_lib «target-name» (pkg : NPackage _package.name) :=\n  /- build term of type `FetchM (Job FilePath)` -/\n```\n\nThe `pkg` parameter (and its type specifier) is optional.\nIt is of type `NPackage _package.name` to provably demonstrate the package\nprovided is the package in which the target is defined.\n\nThe term should build the external library's **static** library.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.externLibCommand\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">externLibCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L299-L300","name":"Lake.DSL.externLibDeclSpec","line":299,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.externLibDeclSpec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.externLibDeclSpec\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">externLibDeclSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L288-L293","name":"Lake.DSL.inputDirCommand","line":288,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.inputDirCommand","doc":"Define a new input directory target for the package.\nCan optionally be provided with a configuration of type `InputDirConfig`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.inputDirCommand\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">inputDirCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L281-L286","name":"Lake.DSL.inputFileCommand","line":281,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.inputFileCommand","doc":"Define a new input file target for the package.\nCan optionally be provided with a configuration of type `InputFileConfig`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.inputFileCommand\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">inputFileCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L267-L279","name":"Lake.DSL.leanExeCommand","line":267,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.leanExeCommand","doc":"Define a new Lean binary executable target for the package.\nCan optionally be provided with a configuration of type `LeanExeConfig`.\nHas many forms:\n\n```lean\nlean_exe «target-name»\nlean_exe «target-name» { /- config opts -/ }\nlean_exe «target-name» where /- config opts -/\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.leanExeCommand\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">leanExeCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L253-L265","name":"Lake.DSL.leanLibCommand","line":253,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.leanLibCommand","doc":"Define a new Lean library target for the package.\nCan optionally be provided with a configuration of type `LeanLibConfig`.\nHas many forms:\n\n```lean\nlean_lib «target-name»\nlean_lib «target-name» { /- config opts -/ }\nlean_lib «target-name» where /- config opts -/\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.leanLibCommand\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">leanLibCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L233-L246","name":"Lake.DSL.targetCommand","line":233,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.targetCommand","doc":"Define a new custom target for the package. Has one form:\n\n```lean\ntarget «target-name» (pkg : NPackage _package.name) : α :=\n  /- build term of type `FetchM (Job α)` -/\n```\n\nThe `pkg` parameter (and its type specifier) is optional.\nIt is of type `NPackage _package.name` to provably demonstrate the package\nprovided is the package in which the target is defined.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.targetCommand\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">targetCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L215-L226","name":"Lake.DSL.libraryFacetDecl","line":215,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.libraryFacetDecl","doc":"Define a new library facet. Has one form:\n\n```lean\nlibrary_facet «facet-name» (lib : LeanLib) : α :=\n  /- build term of type `FetchM (Job α)` -/\n```\n\nThe `lib` parameter (and its type specifier) is optional.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.libraryFacetDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">libraryFacetDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L202-L213","name":"Lake.DSL.packageFacetDecl","line":202,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.packageFacetDecl","doc":"Define a new package facet. Has one form:\n\n```lean\npackage_facet «facet-name» (pkg : Package) : α :=\n  /- build term of type `FetchM (Job α)` -/\n```\n\nThe `pkg` parameter (and its type specifier) is optional.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.packageFacetDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">packageFacetDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L189-L200","name":"Lake.DSL.moduleFacetDecl","line":189,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.moduleFacetDecl","doc":"Define a new module facet. Has one form:\n\n```lean\nmodule_facet «facet-name» (mod : Module) : α :=\n  /- build term of type `FetchM (Job α)` -/\n```\n\nThe `mod` parameter (and its type specifier) is optional.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.moduleFacetDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">moduleFacetDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L182-L183","name":"Lake.DSL.buildDeclSig","line":182,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.buildDeclSig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.buildDeclSig\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">buildDeclSig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L151-L174","name":"Lake.DSL.requireDecl","line":151,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.requireDecl","doc":"Adds a new package dependency to the workspace. The general syntax is:\n\n```\nrequire [\"<scope>\" /] <pkg-name> [@ <version>]\n  [from <source>] [with <options>]\n```\n\nThe `from` clause tells Lake where to locate the dependency.\nSee the `fromClause` syntax documentation (e.g., hover over it) to see\nthe different forms this clause can take.\n\nWithout a `from` clause, Lake will lookup the package in the default\nregistry (i.e., Reservoir) and use the information there to download the\npackage at the requested `version`. The `scope` is used to disambiguate between\npackages in the registry with the same `pkg-name`. In Reservoir, this scope\nis the package owner (e.g., `leanprover` of `@leanprover/doc-gen4`).\n\nThe `with` clause specifies a `NameMap String` of Lake options\nused to configure the dependency. This is equivalent to passing `-K`\noptions to the dependency on the command line.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.requireDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">requireDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L148-L149","name":"Lake.DSL.depSpec","line":148,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.depSpec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.depSpec\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">depSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L145-L146","name":"Lake.DSL.depName","line":145,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.depName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.depName\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">depName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L138-L143","name":"Lake.DSL.verClause","line":138,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.verClause","doc":"The version of the package to require.\nTo specify a Git revision, use the syntax `@ git <rev>`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.verClause\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">verClause</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L135-L136","name":"Lake.DSL.verSpec","line":135,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.verSpec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.verSpec\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">verSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L132-L133","name":"Lake.DSL.withClause","line":132,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.withClause","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.withClause\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">withClause</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L99-L126","name":"Lake.DSL.fromClause","line":99,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.fromClause","doc":"Specifies a specific source from which to draw the package dependency.\nDependencies that are downloaded from a remote source will be placed\ninto the workspace's `packagesDir`.\n\n**Path Dependencies**\n\n```\nfrom <path>\n```\n\nLake loads the package located a fixed `path` relative to the\nrequiring package's directory.\n\n**Git Dependencies**\n\n```\nfrom git <url> [@ <rev>] [/ <subDir>]\n```\n\nLake clones the Git repository available at the specified fixed Git `url`,\nand checks out the specified revision `rev`. The revision can be a commit hash,\nbranch, or tag. If none is provided, Lake defaults to `master`. After checkout,\nLake loads the package located in `subDir` (or the repository root if no\nsubdirectory is specified).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.fromClause\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">fromClause</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L96-L97","name":"Lake.DSL.fromSource","line":96,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.fromSource","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.fromSource\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">fromSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L93-L94","name":"Lake.DSL.fromGit","line":93,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.fromGit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.fromGit\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">fromGit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L90-L91","name":"Lake.DSL.fromPath","line":90,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.fromPath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.fromPath\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">fromPath</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L57-L82","name":"Lake.DSL.postUpdateDecl","line":57,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.postUpdateDecl","doc":"Declare a post-`lake update` hook for the package.\nRuns the monadic action is after a successful `lake update` execution\nin this package or one of its downstream dependents.\n\n**Example**\n\nThis feature enables Mathlib to synchronize the Lean toolchain and run\n`cache get` after a `lake update`:\n\n```\nlean_exe cache\npost_update pkg do\n  let wsToolchainFile := (← getRootPackage).dir / \"lean-toolchain\"\n  let mathlibToolchain ← IO.FS.readFile <| pkg.dir / \"lean-toolchain\"\n  IO.FS.writeFile wsToolchainFile mathlibToolchain\n  let exeFile ← runBuild cache.fetch\n  let exitCode ← env exeFile.toString #[\"get\"]\n  if exitCode ≠ 0 then\n    error s!\"{pkg.name}: failed to fetch cache\"\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.postUpdateDecl\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">postUpdateDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L42-L55","name":"Lake.DSL.packageCommand","line":42,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.packageCommand","doc":"Defines the configuration of a Lake package.  Has many forms:\n\n```lean\npackage «pkg-name»\npackage «pkg-name» { /- config opts -/ }\npackage «pkg-name» where /- config opts -/\n```\n\nThere can only be one `package` declaration per Lake configuration file.\nThe defined package configuration will be available for reference as `_package`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.packageCommand\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">packageCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L28-L35","name":"Lake.DSL.getConfig","line":28,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.getConfig","doc":"A macro that expands to the specified configuration option (or `none`,\nif the option has not been set) during the Lakefile's elaboration.\n\nConfiguration arguments are set either via the Lake CLI (by the `-K` option)\nor via the `with` clause in a `require` statement.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.getConfig\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">getConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/lake/Lake/DSL/Syntax.lean#L22-L26","name":"Lake.DSL.dirConst","line":22,"kind":"def","docLink":"./Lake/DSL/Syntax.html#Lake.DSL.dirConst","doc":"A macro that expands to the path of package's directory\nduring the Lakefile's elaboration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/DSL/Syntax.html#Lake.DSL.dirConst\"><span class=\"name\">Lake</span>.<span class=\"name\">DSL</span>.<span class=\"name\">dirConst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}