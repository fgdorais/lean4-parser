{"name":"Init.Data.SInt.Basic","instances":[{"typeNames":["Int8"],"name":"instToStringInt8","className":"ToString"},{"typeNames":["Int8"],"name":"instReprInt8","className":"Repr"},{"typeNames":["Int8"],"name":"instReprAtomInt8","className":"ReprAtom"},{"typeNames":["Int8"],"name":"instHashableInt8","className":"Hashable"},{"typeNames":["Int8"],"name":"Int8.instOfNat","className":"OfNat"},{"typeNames":["Int8"],"name":"Int8.instNeg","className":"Neg"},{"typeNames":["Int8"],"name":"instInhabitedInt8","className":"Inhabited"},{"typeNames":["Int8"],"name":"instAddInt8","className":"Add"},{"typeNames":["Int8"],"name":"instSubInt8","className":"Sub"},{"typeNames":["Int8"],"name":"instMulInt8","className":"Mul"},{"typeNames":["Int8","Nat"],"name":"instPowInt8Nat","className":"Pow"},{"typeNames":["Int8"],"name":"instModInt8","className":"Mod"},{"typeNames":["Int8"],"name":"instDivInt8","className":"Div"},{"typeNames":["Int8"],"name":"instLTInt8","className":"LT"},{"typeNames":["Int8"],"name":"instLEInt8","className":"LE"},{"typeNames":["Int8"],"name":"instComplementInt8","className":"Complement"},{"typeNames":["Int8"],"name":"instAndOpInt8","className":"AndOp"},{"typeNames":["Int8"],"name":"instOrOpInt8","className":"OrOp"},{"typeNames":["Int8"],"name":"instXorInt8","className":"Xor"},{"typeNames":["Int8"],"name":"instShiftLeftInt8","className":"ShiftLeft"},{"typeNames":["Int8"],"name":"instShiftRightInt8","className":"ShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqInt8","className":"Decidable"},{"typeNames":["LT.lt"],"name":"instDecidableLtInt8","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableLeInt8","className":"Decidable"},{"typeNames":["Int8"],"name":"instMaxInt8","className":"Max"},{"typeNames":["Int8"],"name":"instMinInt8","className":"Min"},{"typeNames":["Int16"],"name":"instToStringInt16","className":"ToString"},{"typeNames":["Int16"],"name":"instReprInt16","className":"Repr"},{"typeNames":["Int16"],"name":"instReprAtomInt16","className":"ReprAtom"},{"typeNames":["Int16"],"name":"instHashableInt16","className":"Hashable"},{"typeNames":["Int16"],"name":"Int16.instOfNat","className":"OfNat"},{"typeNames":["Int16"],"name":"Int16.instNeg","className":"Neg"},{"typeNames":["Int16"],"name":"instInhabitedInt16","className":"Inhabited"},{"typeNames":["Int16"],"name":"instAddInt16","className":"Add"},{"typeNames":["Int16"],"name":"instSubInt16","className":"Sub"},{"typeNames":["Int16"],"name":"instMulInt16","className":"Mul"},{"typeNames":["Int16","Nat"],"name":"instPowInt16Nat","className":"Pow"},{"typeNames":["Int16"],"name":"instModInt16","className":"Mod"},{"typeNames":["Int16"],"name":"instDivInt16","className":"Div"},{"typeNames":["Int16"],"name":"instLTInt16","className":"LT"},{"typeNames":["Int16"],"name":"instLEInt16","className":"LE"},{"typeNames":["Int16"],"name":"instComplementInt16","className":"Complement"},{"typeNames":["Int16"],"name":"instAndOpInt16","className":"AndOp"},{"typeNames":["Int16"],"name":"instOrOpInt16","className":"OrOp"},{"typeNames":["Int16"],"name":"instXorInt16","className":"Xor"},{"typeNames":["Int16"],"name":"instShiftLeftInt16","className":"ShiftLeft"},{"typeNames":["Int16"],"name":"instShiftRightInt16","className":"ShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqInt16","className":"Decidable"},{"typeNames":["LT.lt"],"name":"instDecidableLtInt16","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableLeInt16","className":"Decidable"},{"typeNames":["Int16"],"name":"instMaxInt16","className":"Max"},{"typeNames":["Int16"],"name":"instMinInt16","className":"Min"},{"typeNames":["Int32"],"name":"instToStringInt32","className":"ToString"},{"typeNames":["Int32"],"name":"instReprInt32","className":"Repr"},{"typeNames":["Int32"],"name":"instReprAtomInt32","className":"ReprAtom"},{"typeNames":["Int32"],"name":"instHashableInt32","className":"Hashable"},{"typeNames":["Int32"],"name":"Int32.instOfNat","className":"OfNat"},{"typeNames":["Int32"],"name":"Int32.instNeg","className":"Neg"},{"typeNames":["Int32"],"name":"instInhabitedInt32","className":"Inhabited"},{"typeNames":["Int32"],"name":"instAddInt32","className":"Add"},{"typeNames":["Int32"],"name":"instSubInt32","className":"Sub"},{"typeNames":["Int32"],"name":"instMulInt32","className":"Mul"},{"typeNames":["Int32","Nat"],"name":"instPowInt32Nat","className":"Pow"},{"typeNames":["Int32"],"name":"instModInt32","className":"Mod"},{"typeNames":["Int32"],"name":"instDivInt32","className":"Div"},{"typeNames":["Int32"],"name":"instLTInt32","className":"LT"},{"typeNames":["Int32"],"name":"instLEInt32","className":"LE"},{"typeNames":["Int32"],"name":"instComplementInt32","className":"Complement"},{"typeNames":["Int32"],"name":"instAndOpInt32","className":"AndOp"},{"typeNames":["Int32"],"name":"instOrOpInt32","className":"OrOp"},{"typeNames":["Int32"],"name":"instXorInt32","className":"Xor"},{"typeNames":["Int32"],"name":"instShiftLeftInt32","className":"ShiftLeft"},{"typeNames":["Int32"],"name":"instShiftRightInt32","className":"ShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqInt32","className":"Decidable"},{"typeNames":["LT.lt"],"name":"instDecidableLtInt32","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableLeInt32","className":"Decidable"},{"typeNames":["Int32"],"name":"instMaxInt32","className":"Max"},{"typeNames":["Int32"],"name":"instMinInt32","className":"Min"},{"typeNames":["Int64"],"name":"instToStringInt64","className":"ToString"},{"typeNames":["Int64"],"name":"instReprInt64","className":"Repr"},{"typeNames":["Int64"],"name":"instReprAtomInt64","className":"ReprAtom"},{"typeNames":["Int64"],"name":"instHashableInt64","className":"Hashable"},{"typeNames":["Int64"],"name":"Int64.instOfNat","className":"OfNat"},{"typeNames":["Int64"],"name":"Int64.instNeg","className":"Neg"},{"typeNames":["Int64"],"name":"instInhabitedInt64","className":"Inhabited"},{"typeNames":["Int64"],"name":"instAddInt64","className":"Add"},{"typeNames":["Int64"],"name":"instSubInt64","className":"Sub"},{"typeNames":["Int64"],"name":"instMulInt64","className":"Mul"},{"typeNames":["Int64","Nat"],"name":"instPowInt64Nat","className":"Pow"},{"typeNames":["Int64"],"name":"instModInt64","className":"Mod"},{"typeNames":["Int64"],"name":"instDivInt64","className":"Div"},{"typeNames":["Int64"],"name":"instLTInt64","className":"LT"},{"typeNames":["Int64"],"name":"instLEInt64","className":"LE"},{"typeNames":["Int64"],"name":"instComplementInt64","className":"Complement"},{"typeNames":["Int64"],"name":"instAndOpInt64","className":"AndOp"},{"typeNames":["Int64"],"name":"instOrOpInt64","className":"OrOp"},{"typeNames":["Int64"],"name":"instXorInt64","className":"Xor"},{"typeNames":["Int64"],"name":"instShiftLeftInt64","className":"ShiftLeft"},{"typeNames":["Int64"],"name":"instShiftRightInt64","className":"ShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqInt64","className":"Decidable"},{"typeNames":["LT.lt"],"name":"instDecidableLtInt64","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableLeInt64","className":"Decidable"},{"typeNames":["Int64"],"name":"instMaxInt64","className":"Max"},{"typeNames":["Int64"],"name":"instMinInt64","className":"Min"},{"typeNames":["ISize"],"name":"instToStringISize","className":"ToString"},{"typeNames":["ISize"],"name":"instReprISize","className":"Repr"},{"typeNames":["ISize"],"name":"instReprAtomISize","className":"ReprAtom"},{"typeNames":["ISize"],"name":"instHashableISize","className":"Hashable"},{"typeNames":["ISize"],"name":"ISize.instOfNat","className":"OfNat"},{"typeNames":["ISize"],"name":"ISize.instNeg","className":"Neg"},{"typeNames":["ISize"],"name":"instInhabitedISize","className":"Inhabited"},{"typeNames":["ISize"],"name":"instAddISize","className":"Add"},{"typeNames":["ISize"],"name":"instSubISize","className":"Sub"},{"typeNames":["ISize"],"name":"instMulISize","className":"Mul"},{"typeNames":["ISize","Nat"],"name":"instPowISizeNat","className":"Pow"},{"typeNames":["ISize"],"name":"instModISize","className":"Mod"},{"typeNames":["ISize"],"name":"instDivISize","className":"Div"},{"typeNames":["ISize"],"name":"instLTISize","className":"LT"},{"typeNames":["ISize"],"name":"instLEISize","className":"LE"},{"typeNames":["ISize"],"name":"instComplementISize","className":"Complement"},{"typeNames":["ISize"],"name":"instAndOpISize","className":"AndOp"},{"typeNames":["ISize"],"name":"instOrOpISize","className":"OrOp"},{"typeNames":["ISize"],"name":"instXorISize","className":"Xor"},{"typeNames":["ISize"],"name":"instShiftLeftISize","className":"ShiftLeft"},{"typeNames":["ISize"],"name":"instShiftRightISize","className":"ShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqISize","className":"Decidable"},{"typeNames":["LT.lt"],"name":"instDecidableLtISize","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableLeISize","className":"Decidable"},{"typeNames":["ISize"],"name":"instMaxISize","className":"Max"},{"typeNames":["ISize"],"name":"instMinISize","className":"Min"}],"imports":["Init.Data.UInt.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1992-L1992","name":"instMinISize","line":1992,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMinISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMinISize\"><span class=\"name\">instMinISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1991-L1991","name":"instMaxISize","line":1991,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMaxISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMaxISize\"><span class=\"name\">instMaxISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1990-L1990","name":"instDecidableLeISize","line":1990,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLeISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLeISize\"><span class=\"name\">instDecidableLeISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1989-L1989","name":"instDecidableLtISize","line":1989,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLtISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLtISize\"><span class=\"name\">instDecidableLtISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1973-L1987","name":"ISize.decLe","line":1973,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.decLe","doc":"Decides whether one word-sized signed integer is less than or equal to another. Usually accessed via\nthe `DecidableLE ISize` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if ((-7) : ISize) ≤ 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : ISize) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : ISize) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `show (7 : ISize) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.decLe\"><span class=\"name\">ISize</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1958-L1971","name":"ISize.decLt","line":1958,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.decLt","doc":"Decides whether one word-sized signed integer is strictly less than another. Usually accessed via the\n`DecidableLT ISize` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if ((-7) : ISize) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : ISize) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : ISize) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.decLt\"><span class=\"name\">ISize</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1952-L1956","name":"Bool.toISize","line":1952,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Bool.toISize","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Bool.toISize\"><span class=\"name\">Bool</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1950-L1950","name":"instDecidableEqISize","line":1950,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableEqISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableEqISize\"><span class=\"name\">instDecidableEqISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1949-L1949","name":"instShiftRightISize","line":1949,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftRightISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftRightISize\"><span class=\"name\">instShiftRightISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1948-L1948","name":"instShiftLeftISize","line":1948,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftLeftISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftLeftISize\"><span class=\"name\">instShiftLeftISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1947-L1947","name":"instXorISize","line":1947,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instXorISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instXorISize\"><span class=\"name\">instXorISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1946-L1946","name":"instOrOpISize","line":1946,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instOrOpISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instOrOpISize\"><span class=\"name\">instOrOpISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1945-L1945","name":"instAndOpISize","line":1945,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAndOpISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAndOpISize\"><span class=\"name\">instAndOpISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1944-L1944","name":"instComplementISize","line":1944,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instComplementISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instComplementISize\"><span class=\"name\">instComplementISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1943-L1943","name":"instLEISize","line":1943,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLEISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLEISize\"><span class=\"name\">instLEISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1942-L1942","name":"instLTISize","line":1942,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLTISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLTISize\"><span class=\"name\">instLTISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1941-L1941","name":"instDivISize","line":1941,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDivISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDivISize\"><span class=\"name\">instDivISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1940-L1940","name":"instModISize","line":1940,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instModISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instModISize\"><span class=\"name\">instModISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1939-L1939","name":"instPowISizeNat","line":1939,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instPowISizeNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instPowISizeNat\"><span class=\"name\">instPowISizeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1938-L1938","name":"instMulISize","line":1938,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMulISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMulISize\"><span class=\"name\">instMulISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1937-L1937","name":"instSubISize","line":1937,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instSubISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instSubISize\"><span class=\"name\">instSubISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1936-L1936","name":"instAddISize","line":1936,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAddISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAddISize\"><span class=\"name\">instAddISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1933-L1934","name":"instInhabitedISize","line":1933,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instInhabitedISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instInhabitedISize\"><span class=\"name\">instInhabitedISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1927-L1931","name":"ISize.le","line":1927,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.le","doc":"Non-strict inequality of word-sized signed integers, defined as inequality of the corresponding\nintegers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.le\"><span class=\"name\">ISize</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1922-L1926","name":"ISize.lt","line":1922,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.lt","doc":"Strict inequality of word-sized signed integers, defined as inequality of the corresponding\nintegers. Usually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.lt\"><span class=\"name\">ISize</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1902-L1920","name":"ISize.decEq","line":1902,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.decEq","doc":"Decides whether two word-sized signed integers are equal. Usually accessed via the\n`DecidableEq ISize` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `ISize.decEq 123 123 = .isTrue rfl`\n * `(if ((-7) : ISize) = 7 then \"yes\" else \"no\") = \"no\"`\n * `show (7 : ISize) = 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.decEq\"><span class=\"name\">ISize</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1891-L1900","name":"ISize.abs","line":1891,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.abs","doc":"Computes the absolute value of a word-sized signed integer.\n\nThis function is equivalent to `if a < 0 then -a else a`, so in particular `ISize.minValue` will be\nmapped to `ISize.minValue`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.abs\"><span class=\"name\">ISize</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1879-L1889","name":"ISize.complement","line":1879,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.complement","doc":"Bitwise complement, also known as bitwise negation, for word-sized signed integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\nIntegers use the two's complement representation, so `ISize.complement a = -(a + 1)`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.complement\"><span class=\"name\">ISize</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1869-L1878","name":"ISize.shiftRight","line":1869,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.shiftRight","doc":"Arithmetic right shift for word-sized signed integers. Usually accessed via the `<<<` operator.\n\nThe high bits are filled with the value of\nthe most significant bit.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.shiftRight\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1860-L1868","name":"ISize.shiftLeft","line":1860,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.shiftLeft","doc":"Bitwise left shift for word-sized signed integers. Usually accessed via the `<<<` operator.\n\nSigned integers are interpreted as bitvectors according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.shiftLeft\"><span class=\"name\">ISize</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1850-L1859","name":"ISize.xor","line":1850,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.xor","doc":"Bitwise exclusive or for word-sized signed integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of the input\nintegers is set, according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.xor\"><span class=\"name\">ISize</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1840-L1849","name":"ISize.lor","line":1840,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.lor","doc":"Bitwise or for word-sized signed integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of the input\nintegers is set, according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.lor\"><span class=\"name\">ISize</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1830-L1839","name":"ISize.land","line":1830,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.land","doc":"Bitwise and for word-sized signed integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set,\naccording to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.land\"><span class=\"name\">ISize</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1809-L1829","name":"ISize.mod","line":1809,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.mod","doc":"The modulo operator for word-sized signed integers, which computes the remainder when dividing one\ninteger by another with the T-rounding convention used by `ISize.div`. Usually accessed via the `%`\noperator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `ISize.mod 5 2 = 1`\n* `ISize.mod 5 (-2) = 1`\n* `ISize.mod (-5) 2 = (-1)`\n* `ISize.mod (-5) (-2) = (-1)`\n* `ISize.mod 4 2 = 0`\n* `ISize.mod 4 (-2) = 0`\n* `ISize.mod 4 0 = 4`\n* `ISize.mod (-4) 0 = (-4)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.mod\"><span class=\"name\">ISize</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1798-L1808","name":"ISize.pow","line":1798,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.pow","doc":"The power operation, raising a word-sized signed integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.pow\"><span class=\"name\">ISize</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1781-L1797","name":"ISize.div","line":1781,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.div","doc":"Truncating division for word-sized signed integers, rounding towards zero. Usually accessed via the\n`/` operator.\n\nDivision by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `ISize.div 10 3 = 3`\n* `ISize.div 10 (-3) = (-3)`\n* `ISize.div (-10) (-3) = 3`\n* `ISize.div (-10) 3 = (-3)`\n* `ISize.div 10 0 = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.div\"><span class=\"name\">ISize</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1773-L1780","name":"ISize.mul","line":1773,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.mul","doc":"Multiplies two word-sized signed integers, wrapping around on over- or underflow.  Usually accessed\nvia the `*` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.mul\"><span class=\"name\">ISize</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1765-L1772","name":"ISize.sub","line":1765,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.sub","doc":"Subtracts one word-sized signed integer from another, wrapping around on over- or underflow. Usually\naccessed via the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.sub\"><span class=\"name\">ISize</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1757-L1764","name":"ISize.add","line":1757,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.add","doc":"Adds two word-sized signed integers, wrapping around on over- or underflow.  Usually accessed via\nthe `+` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.add\"><span class=\"name\">ISize</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1747-L1755","name":"ISize.ofIntTruncate","line":1747,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate","doc":"Constructs an `ISize` from an `Int`, clamping if the value is too small or too large. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.ofIntTruncate\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1743-L1746","name":"ISize.ofIntLE","line":1743,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.ofIntLE","doc":"Constructs an `ISize` from an `Int` that is known to be in bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.ofIntLE\"><span class=\"name\">ISize</span>.<span class=\"name\">ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hl</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hr</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1740-L1741","name":"ISize.minValue","line":1740,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.minValue","doc":"The smallest number that `ISize` can represent: `-2^(System.Platform.numBits - 1)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.minValue\"><span class=\"name\">ISize</span>.<span class=\"name\">minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1738-L1739","name":"ISize.maxValue","line":1738,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.maxValue","doc":"The largest number that `ISize` can represent: `2^(System.Platform.numBits - 1) - 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.maxValue\"><span class=\"name\">ISize</span>.<span class=\"name\">maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1735-L1736","name":"ISize.instNeg","line":1735,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#ISize.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.instNeg\"><span class=\"name\">ISize</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1734-L1734","name":"ISize.instOfNat","line":1734,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#ISize.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.instOfNat\"><span class=\"name\">ISize</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1731-L1732","name":"instHashableISize","line":1731,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instHashableISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instHashableISize\"><span class=\"name\">instHashableISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1729-L1729","name":"instReprAtomISize","line":1729,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprAtomISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprAtomISize\"><span class=\"name\">instReprAtomISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1727-L1728","name":"instReprISize","line":1727,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprISize\"><span class=\"name\">instReprISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1725-L1726","name":"instToStringISize","line":1725,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instToStringISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instToStringISize\"><span class=\"name\">instToStringISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1717-L1723","name":"ISize.neg","line":1717,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.neg","doc":"Negates word-sized signed integers. Usually accessed via the `-` prefix operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.neg\"><span class=\"name\">ISize</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1709-L1716","name":"Int64.toISize","line":1709,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toISize","doc":"Converts 64-bit signed integers to word-sized signed integers, truncating the bitvector\nrepresentation on 32-bit platforms. This conversion is lossless on 64-bit platforms.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toISize\"><span class=\"name\">Int64</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1701-L1708","name":"Int32.toISize","line":1701,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toISize","doc":"Converts 32-bit signed integers to word-sized signed integers that denote the same number. This\nconversion is lossless, because `ISize` is either `Int32` or `Int64`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toISize\"><span class=\"name\">Int32</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1693-L1700","name":"Int16.toISize","line":1693,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toISize","doc":"Converts 16-bit signed integers to word-sized signed integers that denote the same number. This conversion is lossless, because\n`ISize` is either `Int32` or `Int64`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toISize\"><span class=\"name\">Int16</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1685-L1692","name":"Int8.toISize","line":1685,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toISize","doc":"Converts 8-bit signed integers to word-sized signed integers that denote the same number. This\nconversion is lossless, because `ISize` is either `Int32` or `Int64`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toISize\"><span class=\"name\">Int8</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1677-L1684","name":"ISize.toInt64","line":1677,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toInt64","doc":"Converts word-sized signed integers to 64-bit signed integers that denote the same number. This\nconversion is lossless, because `ISize` is either `Int32` or `Int64`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toInt64\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1666-L1676","name":"ISize.toInt32","line":1666,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toInt32","doc":"Converts a word-sized signed integer to a 32-bit signed integer.\n\nOn 32-bit platforms, this conversion is lossless. On 64-bit platforms, the integer's bitvector\nrepresentation is truncated to 32 bits. This function is overridden at runtime with an efficient\nimplementation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toInt32\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1659-L1665","name":"ISize.toInt16","line":1659,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toInt16","doc":"Converts a word-sized integer to a 16-bit integer by truncating its bitvector representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toInt16\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1652-L1658","name":"ISize.toInt8","line":1652,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toInt8","doc":"Converts a word-sized signed integer to an 8-bit signed integer by truncating its bitvector representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toInt8\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1650-L1651","name":"ISize.ofBitVec","line":1650,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.ofBitVec","doc":"Obtains the `ISize` whose 2's complement representation is the given `BitVec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.ofBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1648-L1649","name":"ISize.toNat","line":1648,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toNat","doc":"Converts a word-sized signed integer to a natural number, mapping all negative numbers to `0`.\n\nUse `ISize.toBitVec` to obtain the two's complement representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toNat\"><span class=\"name\">ISize</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1642-L1647","name":"ISize.toNatClampNeg","line":1642,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg","doc":"Converts a word-sized signed integer to a natural number, mapping all negative numbers to `0`.\n\nUse `ISize.toBitVec` to obtain the two's complement representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toNatClampNeg\"><span class=\"name\">ISize</span>.<span class=\"name\">toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1635-L1641","name":"ISize.toInt","line":1635,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toInt","doc":"Converts a word-sized signed integer to an arbitrary-precision integer that denotes the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toInt\"><span class=\"name\">ISize</span>.<span class=\"name\">toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1634-L1634","name":"Nat.toISize","line":1634,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Nat.toISize","doc":"Converts an arbitrary-precision natural number to a word-sized signed integer, wrapping around on\noverflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Nat.toISize\"><span class=\"name\">Nat</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1632-L1633","name":"Int.toISize","line":1632,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int.toISize","doc":"Converts an arbitrary-precision integer to a word-sized signed integer, wrapping around on over- or\nunderflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int.toISize\"><span class=\"name\">Int</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1624-L1631","name":"ISize.ofNat","line":1624,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.ofNat","doc":"Converts an arbitrary-precision natural number to a word-sized signed integer, wrapping around on\noverflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.ofNat\"><span class=\"name\">ISize</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1616-L1623","name":"ISize.ofInt","line":1616,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.ofInt","doc":"Converts an arbitrary-precision integer to a word-sized signed integer, wrapping around on over- or\nunderflow.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.ofInt\"><span class=\"name\">ISize</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1614-L1615","name":"ISize.mk","line":1614,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.mk","doc":"Obtains the `ISize` that is 2's complement equivalent to the `USize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.mk\"><span class=\"name\">ISize</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1612-L1613","name":"USize.toISize","line":1612,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#USize.toISize","doc":"Obtains the `ISize` that is 2's complement equivalent to the `USize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#USize.toISize\"><span class=\"name\">USize</span>.<span class=\"name\">toISize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1609-L1610","name":"ISize.toBitVec.inj","line":1609,"kind":"theorem","docLink":"./Init/Data/SInt/Basic.html#ISize.toBitVec.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec.inj\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\">toBitVec</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1604-L1607","name":"ISize.toBitVec","line":1604,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toBitVec","doc":"Obtain the `BitVec` that contains the 2's complement representation of the `ISize`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toBitVec\"><span class=\"name\">ISize</span>.<span class=\"name\">toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1601-L1602","name":"ISize.size","line":1601,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.size","doc":"The number of distinct values representable by `ISize`, that is, `2^System.Platform.numBits`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.size\"><span class=\"name\">ISize</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1599-L1599","name":"instMinInt64","line":1599,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMinInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMinInt64\"><span class=\"name\">instMinInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1598-L1598","name":"instMaxInt64","line":1598,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMaxInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMaxInt64\"><span class=\"name\">instMaxInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1597-L1597","name":"instDecidableLeInt64","line":1597,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLeInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLeInt64\"><span class=\"name\">instDecidableLeInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1596-L1596","name":"instDecidableLtInt64","line":1596,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLtInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLtInt64\"><span class=\"name\">instDecidableLtInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1580-L1594","name":"Int64.decLe","line":1580,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.decLe","doc":"Decides whether one 8-bit signed integer is less than or equal to another. Usually accessed via the\n`DecidableLE Int64` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if ((-7) : Int64) ≤ 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : Int64) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : Int64) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `show (7 : Int64) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.decLe\"><span class=\"name\">Int64</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1566-L1579","name":"Int64.decLt","line":1566,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.decLt","doc":"Decides whether one 8-bit signed integer is strictly less than another. Usually accessed via the\n`DecidableLT Int64` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if ((-7) : Int64) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : Int64) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : Int64) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.decLt\"><span class=\"name\">Int64</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1560-L1564","name":"Bool.toInt64","line":1560,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Bool.toInt64","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Bool.toInt64\"><span class=\"name\">Bool</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1558-L1558","name":"instDecidableEqInt64","line":1558,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableEqInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableEqInt64\"><span class=\"name\">instDecidableEqInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1557-L1557","name":"instShiftRightInt64","line":1557,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftRightInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftRightInt64\"><span class=\"name\">instShiftRightInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1556-L1556","name":"instShiftLeftInt64","line":1556,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftLeftInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftLeftInt64\"><span class=\"name\">instShiftLeftInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1555-L1555","name":"instXorInt64","line":1555,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instXorInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instXorInt64\"><span class=\"name\">instXorInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1554-L1554","name":"instOrOpInt64","line":1554,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instOrOpInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instOrOpInt64\"><span class=\"name\">instOrOpInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1553-L1553","name":"instAndOpInt64","line":1553,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAndOpInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAndOpInt64\"><span class=\"name\">instAndOpInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1552-L1552","name":"instComplementInt64","line":1552,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instComplementInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instComplementInt64\"><span class=\"name\">instComplementInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1551-L1551","name":"instLEInt64","line":1551,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLEInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLEInt64\"><span class=\"name\">instLEInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1550-L1550","name":"instLTInt64","line":1550,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLTInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLTInt64\"><span class=\"name\">instLTInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1549-L1549","name":"instDivInt64","line":1549,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDivInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDivInt64\"><span class=\"name\">instDivInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1548-L1548","name":"instModInt64","line":1548,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instModInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instModInt64\"><span class=\"name\">instModInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1547-L1547","name":"instPowInt64Nat","line":1547,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instPowInt64Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instPowInt64Nat\"><span class=\"name\">instPowInt64Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1546-L1546","name":"instMulInt64","line":1546,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMulInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMulInt64\"><span class=\"name\">instMulInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1545-L1545","name":"instSubInt64","line":1545,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instSubInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instSubInt64\"><span class=\"name\">instSubInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1544-L1544","name":"instAddInt64","line":1544,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAddInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAddInt64\"><span class=\"name\">instAddInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1541-L1542","name":"instInhabitedInt64","line":1541,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instInhabitedInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instInhabitedInt64\"><span class=\"name\">instInhabitedInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1535-L1539","name":"Int64.le","line":1535,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.le","doc":"Non-strict inequality of 64-bit signed integers, defined as inequality of the corresponding integers.\nUsually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.le\"><span class=\"name\">Int64</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1530-L1534","name":"Int64.lt","line":1530,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.lt","doc":"Strict inequality of 64-bit signed integers, defined as inequality of the corresponding integers.\nUsually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.lt\"><span class=\"name\">Int64</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1510-L1528","name":"Int64.decEq","line":1510,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.decEq","doc":"Decides whether two 64-bit signed integers are equal. Usually accessed via the `DecidableEq Int64`\ninstance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `Int64.decEq 123 123 = .isTrue rfl`\n * `(if ((-7) : Int64) = 7 then \"yes\" else \"no\") = \"no\"`\n * `show (7 : Int64) = 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.decEq\"><span class=\"name\">Int64</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1499-L1508","name":"Int64.abs","line":1499,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.abs","doc":"Computes the absolute value of a 64-bit signed integer.\n\nThis function is equivalent to `if a < 0 then -a else a`, so in particular `Int64.minValue` will be\nmapped to `Int64.minValue`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.abs\"><span class=\"name\">Int64</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1488-L1498","name":"Int64.complement","line":1488,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.complement","doc":"Bitwise complement, also known as bitwise negation, for 64-bit signed integers. Usually accessed via\nthe `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\nIntegers use the two's complement representation, so `Int64.complement a = -(a + 1)`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.complement\"><span class=\"name\">Int64</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1479-L1487","name":"Int64.shiftRight","line":1479,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.shiftRight","doc":"Arithmetic right shift for 64-bit signed integers. Usually accessed via the `<<<` operator.\n\nThe high bits are filled with the value of the most significant bit.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.shiftRight\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1470-L1478","name":"Int64.shiftLeft","line":1470,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.shiftLeft","doc":"Bitwise left shift for 64-bit signed integers. Usually accessed via the `<<<` operator.\n\nSigned integers are interpreted as bitvectors according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.shiftLeft\"><span class=\"name\">Int64</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1460-L1469","name":"Int64.xor","line":1460,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.xor","doc":"Bitwise exclusive or for 64-bit signed integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of the input\nintegers is set, according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.xor\"><span class=\"name\">Int64</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1450-L1459","name":"Int64.lor","line":1450,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.lor","doc":"Bitwise or for 64-bit signed integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of the input\nintegers is set, according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.lor\"><span class=\"name\">Int64</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1440-L1449","name":"Int64.land","line":1440,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.land","doc":"Bitwise and for 64-bit signed integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set,\naccording to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.land\"><span class=\"name\">Int64</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1419-L1439","name":"Int64.mod","line":1419,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.mod","doc":"The modulo operator for 64-bit signed integers, which computes the remainder when dividing one\ninteger by another with the T-rounding convention used by `Int64.div`. Usually accessed via the `%`\noperator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int64.mod 5 2 = 1`\n* `Int64.mod 5 (-2) = 1`\n* `Int64.mod (-5) 2 = (-1)`\n* `Int64.mod (-5) (-2) = (-1)`\n* `Int64.mod 4 2 = 0`\n* `Int64.mod 4 (-2) = 0`\n* `Int64.mod 4 0 = 4`\n* `Int64.mod (-4) 0 = (-4)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.mod\"><span class=\"name\">Int64</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1408-L1418","name":"Int64.pow","line":1408,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.pow","doc":"The power operation, raising a 64-bit signed integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.pow\"><span class=\"name\">Int64</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1391-L1407","name":"Int64.div","line":1391,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.div","doc":"Truncating division for 64-bit signed integers, rounding towards zero. Usually accessed via the `/`\noperator.\n\nDivision by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int64.div 10 3 = 3`\n* `Int64.div 10 (-3) = (-3)`\n* `Int64.div (-10) (-3) = 3`\n* `Int64.div (-10) 3 = (-3)`\n* `Int64.div 10 0 = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.div\"><span class=\"name\">Int64</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1383-L1390","name":"Int64.mul","line":1383,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.mul","doc":"Multiplies two 64-bit signed integers, wrapping around on over- or underflow.  Usually accessed via\nthe `*` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.mul\"><span class=\"name\">Int64</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1375-L1382","name":"Int64.sub","line":1375,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.sub","doc":"Subtracts one 64-bit signed integer from another, wrapping around on over- or underflow. Usually\naccessed via the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.sub\"><span class=\"name\">Int64</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1367-L1374","name":"Int64.add","line":1367,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.add","doc":"Adds two 64-bit signed integers, wrapping around on over- or underflow.  Usually accessed via the\n`+` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.add\"><span class=\"name\">Int64</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1357-L1365","name":"Int64.ofIntTruncate","line":1357,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate","doc":"Constructs an `Int64` from an `Int`, clamping if the value is too small or too large. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.ofIntTruncate\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1353-L1356","name":"Int64.ofIntLE","line":1353,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.ofIntLE","doc":"Constructs an `Int64` from an `Int` that is known to be in bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.ofIntLE\"><span class=\"name\">Int64</span>.<span class=\"name\">ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hl</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hr</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1351-L1352","name":"Int64.minValue","line":1351,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.minValue","doc":"The smallest number that `Int64` can represent: `-2^63 = -9223372036854775808`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.minValue\"><span class=\"name\">Int64</span>.<span class=\"name\">minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1349-L1350","name":"Int64.maxValue","line":1349,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.maxValue","doc":"The largest number that `Int64` can represent: `2^63 - 1 = 9223372036854775807`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.maxValue\"><span class=\"name\">Int64</span>.<span class=\"name\">maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1346-L1347","name":"Int64.instNeg","line":1346,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int64.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.instNeg\"><span class=\"name\">Int64</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1345-L1345","name":"Int64.instOfNat","line":1345,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int64.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.instOfNat\"><span class=\"name\">Int64</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1342-L1343","name":"instHashableInt64","line":1342,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instHashableInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instHashableInt64\"><span class=\"name\">instHashableInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1340-L1340","name":"instReprAtomInt64","line":1340,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprAtomInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprAtomInt64\"><span class=\"name\">instReprAtomInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1338-L1339","name":"instReprInt64","line":1338,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprInt64\"><span class=\"name\">instReprInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1336-L1337","name":"instToStringInt64","line":1336,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instToStringInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instToStringInt64\"><span class=\"name\">instToStringInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1328-L1334","name":"Int64.neg","line":1328,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.neg","doc":"Negates 64-bit signed integers. Usually accessed via the `-` prefix operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.neg\"><span class=\"name\">Int64</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1321-L1327","name":"Int32.toInt64","line":1321,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toInt64","doc":"Converts 32-bit signed integers to 64-bit signed integers that denote the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toInt64\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1314-L1320","name":"Int16.toInt64","line":1314,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toInt64","doc":"Converts 16-bit signed integers to 64-bit signed integers that denote the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toInt64\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1307-L1313","name":"Int8.toInt64","line":1307,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toInt64","doc":"Converts 8-bit signed integers to 64-bit signed integers that denote the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toInt64\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1299-L1306","name":"Int64.toInt32","line":1299,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toInt32","doc":"Converts a 64-bit signed integer to a 32-bit signed integer by truncating its bitvector\nrepresentation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toInt32\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1291-L1298","name":"Int64.toInt16","line":1291,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toInt16","doc":"Converts a 64-bit signed integer to a 16-bit signed integer by truncating its bitvector\nrepresentation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toInt16\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1283-L1290","name":"Int64.toInt8","line":1283,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toInt8","doc":"Converts a 64-bit signed integer to an 8-bit signed integer by truncating its bitvector\nrepresentation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toInt8\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1281-L1282","name":"Int64.ofBitVec","line":1281,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.ofBitVec","doc":"Obtains the `Int64` whose 2's complement representation is the given `BitVec 64`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.ofBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1279-L1280","name":"Int64.toNat","line":1279,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toNat","doc":"Converts a 64-bit signed integer to a natural number, mapping all negative numbers to `0`.\n\nUse `Int64.toBitVec` to obtain the two's complement representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toNat\"><span class=\"name\">Int64</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1273-L1278","name":"Int64.toNatClampNeg","line":1273,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg","doc":"Converts a 64-bit signed integer to a natural number, mapping all negative numbers to `0`.\n\nUse `Int64.toBitVec` to obtain the two's complement representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toNatClampNeg\"><span class=\"name\">Int64</span>.<span class=\"name\">toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1266-L1272","name":"Int64.toInt","line":1266,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toInt","doc":"Converts a 64-bit signed integer to an arbitrary-precision integer that denotes the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toInt\"><span class=\"name\">Int64</span>.<span class=\"name\">toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1254-L1265","name":"Nat.toInt64","line":1254,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Nat.toInt64","doc":"Converts a natural number to a 64-bit signed integer, wrapping around to negative numbers on\noverflow.\n\nExamples:\n * `Nat.toInt64 127 = 127`\n * `Nat.toInt64 2_147_483_648 = 2_147_483_648`\n * `Nat.toInt64 9_223_372_036_854_775_807 = 9_223_372_036_854_775_807`\n * `Nat.toInt64 9_223_372_036_854_775_808 = -9_223_372_036_854_775_808`\n * `Nat.toInt64 18_446_744_073_709_551_618 = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Nat.toInt64\"><span class=\"name\">Nat</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1240-L1253","name":"Int.toInt64","line":1240,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int.toInt64","doc":"Converts an arbitrary-precision integer to a 64-bit integer, wrapping on overflow or underflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int.toInt64 48 = 48`\n* `Int.toInt64 (-40_000) = -40_000`\n* `Int.toInt64 2_147_483_648 = 2_147_483_648`\n* `Int.toInt64 (-2_147_483_649) = -2_147_483_649`\n* `Int.toInt64 9_223_372_036_854_775_808 = -9_223_372_036_854_775_808`\n* `Int.toInt64 (-9_223_372_036_854_775_809) = 9_223_372_036_854_775_807`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int.toInt64\"><span class=\"name\">Int</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1225-L1239","name":"Int64.ofNat","line":1225,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.ofNat","doc":"Converts a natural number to a 64-bit signed integer, wrapping around to negative numbers on\noverflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `Int64.ofNat 127 = 127`\n * `Int64.ofNat 2_147_483_648 = 2_147_483_648`\n * `Int64.ofNat 9_223_372_036_854_775_807 = 9_223_372_036_854_775_807`\n * `Int64.ofNat 9_223_372_036_854_775_808 = -9_223_372_036_854_775_808`\n * `Int64.ofNat 18_446_744_073_709_551_618 = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.ofNat\"><span class=\"name\">Int64</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1210-L1224","name":"Int64.ofInt","line":1210,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.ofInt","doc":"Converts an arbitrary-precision integer to a 64-bit integer, wrapping on overflow or underflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int64.ofInt 48 = 48`\n* `Int64.ofInt (-40_000) = -40_000`\n* `Int64.ofInt 2_147_483_648 = 2_147_483_648`\n* `Int64.ofInt (-2_147_483_649) = -2_147_483_649`\n* `Int64.ofInt 9_223_372_036_854_775_808 = -9_223_372_036_854_775_808`\n* `Int64.ofInt (-9_223_372_036_854_775_809) = 9_223_372_036_854_775_807`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.ofInt\"><span class=\"name\">Int64</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1208-L1209","name":"Int64.mk","line":1208,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.mk","doc":"Obtains the `Int64` that is 2's complement equivalent to the `UInt64`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.mk\"><span class=\"name\">Int64</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1206-L1207","name":"UInt64.toInt64","line":1206,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#UInt64.toInt64","doc":"Obtains the `Int64` that is 2's complement equivalent to the `UInt64`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#UInt64.toInt64\"><span class=\"name\">UInt64</span>.<span class=\"name\">toInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1203-L1204","name":"Int64.toBitVec.inj","line":1203,"kind":"theorem","docLink":"./Init/Data/SInt/Basic.html#Int64.toBitVec.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec.inj\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\">toBitVec</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1198-L1201","name":"Int64.toBitVec","line":1198,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toBitVec","doc":"Obtain the `BitVec` that contains the 2's complement representation of the `Int64`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toBitVec\"><span class=\"name\">Int64</span>.<span class=\"name\">toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1195-L1196","name":"Int64.size","line":1195,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.size","doc":"The number of distinct values representable by `Int64`, that is, `2^64 = 18446744073709551616`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.size\"><span class=\"name\">Int64</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1193-L1193","name":"instMinInt32","line":1193,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMinInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMinInt32\"><span class=\"name\">instMinInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1192-L1192","name":"instMaxInt32","line":1192,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMaxInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMaxInt32\"><span class=\"name\">instMaxInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1191-L1191","name":"instDecidableLeInt32","line":1191,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLeInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLeInt32\"><span class=\"name\">instDecidableLeInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1190-L1190","name":"instDecidableLtInt32","line":1190,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLtInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLtInt32\"><span class=\"name\">instDecidableLtInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1174-L1188","name":"Int32.decLe","line":1174,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.decLe","doc":"Decides whether one 32-bit signed integer is less than or equal to another. Usually accessed via the\n`DecidableLE Int32` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if ((-7) : Int32) ≤ 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : Int32) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : Int32) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `show (7 : Int32) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.decLe\"><span class=\"name\">Int32</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1159-L1172","name":"Int32.decLt","line":1159,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.decLt","doc":"Decides whether one 32-bit signed integer is strictly less than another. Usually accessed via the\n`DecidableLT Int32` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if ((-7) : Int32) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : Int32) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : Int32) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.decLt\"><span class=\"name\">Int32</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1153-L1157","name":"Bool.toInt32","line":1153,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Bool.toInt32","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Bool.toInt32\"><span class=\"name\">Bool</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1151-L1151","name":"instDecidableEqInt32","line":1151,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableEqInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableEqInt32\"><span class=\"name\">instDecidableEqInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1150-L1150","name":"instShiftRightInt32","line":1150,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftRightInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftRightInt32\"><span class=\"name\">instShiftRightInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1149-L1149","name":"instShiftLeftInt32","line":1149,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftLeftInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftLeftInt32\"><span class=\"name\">instShiftLeftInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1148-L1148","name":"instXorInt32","line":1148,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instXorInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instXorInt32\"><span class=\"name\">instXorInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1147-L1147","name":"instOrOpInt32","line":1147,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instOrOpInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instOrOpInt32\"><span class=\"name\">instOrOpInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1146-L1146","name":"instAndOpInt32","line":1146,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAndOpInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAndOpInt32\"><span class=\"name\">instAndOpInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1145-L1145","name":"instComplementInt32","line":1145,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instComplementInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instComplementInt32\"><span class=\"name\">instComplementInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1144-L1144","name":"instLEInt32","line":1144,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLEInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLEInt32\"><span class=\"name\">instLEInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1143-L1143","name":"instLTInt32","line":1143,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLTInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLTInt32\"><span class=\"name\">instLTInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1142-L1142","name":"instDivInt32","line":1142,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDivInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDivInt32\"><span class=\"name\">instDivInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1141-L1141","name":"instModInt32","line":1141,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instModInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instModInt32\"><span class=\"name\">instModInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1140-L1140","name":"instPowInt32Nat","line":1140,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instPowInt32Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instPowInt32Nat\"><span class=\"name\">instPowInt32Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1139-L1139","name":"instMulInt32","line":1139,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMulInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMulInt32\"><span class=\"name\">instMulInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1138-L1138","name":"instSubInt32","line":1138,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instSubInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instSubInt32\"><span class=\"name\">instSubInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1137-L1137","name":"instAddInt32","line":1137,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAddInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAddInt32\"><span class=\"name\">instAddInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1134-L1135","name":"instInhabitedInt32","line":1134,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instInhabitedInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instInhabitedInt32\"><span class=\"name\">instInhabitedInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1128-L1132","name":"Int32.le","line":1128,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.le","doc":"Non-strict inequality of 32-bit signed integers, defined as inequality of the corresponding integers.\nUsually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.le\"><span class=\"name\">Int32</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1123-L1127","name":"Int32.lt","line":1123,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.lt","doc":"Strict inequality of 32-bit signed integers, defined as inequality of the corresponding integers.\nUsually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.lt\"><span class=\"name\">Int32</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1103-L1121","name":"Int32.decEq","line":1103,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.decEq","doc":"Decides whether two 32-bit signed integers are equal. Usually accessed via the `DecidableEq Int32`\ninstance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `Int32.decEq 123 123 = .isTrue rfl`\n * `(if ((-7) : Int32) = 7 then \"yes\" else \"no\") = \"no\"`\n * `show (7 : Int32) = 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.decEq\"><span class=\"name\">Int32</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1092-L1101","name":"Int32.abs","line":1092,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.abs","doc":"Computes the absolute value of a 32-bit signed integer.\n\nThis function is equivalent to `if a < 0 then -a else a`, so in particular `Int32.minValue` will be\nmapped to `Int32.minValue`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.abs\"><span class=\"name\">Int32</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1081-L1091","name":"Int32.complement","line":1081,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.complement","doc":"Bitwise complement, also known as bitwise negation, for 32-bit signed integers. Usually accessed via\nthe `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\nIntegers use the two's complement representation, so `Int32.complement a = -(a + 1)`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.complement\"><span class=\"name\">Int32</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1072-L1080","name":"Int32.shiftRight","line":1072,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.shiftRight","doc":"Arithmetic right shift for 32-bit signed integers. Usually accessed via the `<<<` operator.\n\nThe high bits are filled with the value of the most significant bit.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.shiftRight\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1063-L1071","name":"Int32.shiftLeft","line":1063,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.shiftLeft","doc":"Bitwise left shift for 32-bit signed integers. Usually accessed via the `<<<` operator.\n\nSigned integers are interpreted as bitvectors according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.shiftLeft\"><span class=\"name\">Int32</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1053-L1062","name":"Int32.xor","line":1053,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.xor","doc":"Bitwise exclusive or for 32-bit signed integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of the input\nintegers is set, according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.xor\"><span class=\"name\">Int32</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1043-L1052","name":"Int32.lor","line":1043,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.lor","doc":"Bitwise or for 32-bit signed integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of the input\nintegers is set, according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.lor\"><span class=\"name\">Int32</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1033-L1042","name":"Int32.land","line":1033,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.land","doc":"Bitwise and for 32-bit signed integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set,\naccording to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.land\"><span class=\"name\">Int32</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1012-L1032","name":"Int32.mod","line":1012,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.mod","doc":"The modulo operator for 32-bit signed integers, which computes the remainder when dividing one\ninteger by another with the T-rounding convention used by `Int32.div`. Usually accessed via the `%`\noperator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int32.mod 5 2 = 1`\n* `Int32.mod 5 (-2) = 1`\n* `Int32.mod (-5) 2 = (-1)`\n* `Int32.mod (-5) (-2) = (-1)`\n* `Int32.mod 4 2 = 0`\n* `Int32.mod 4 (-2) = 0`\n* `Int32.mod 4 0 = 4`\n* `Int32.mod (-4) 0 = (-4)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.mod\"><span class=\"name\">Int32</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L1001-L1011","name":"Int32.pow","line":1001,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.pow","doc":"The power operation, raising a 32-bit signed integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.pow\"><span class=\"name\">Int32</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L984-L1000","name":"Int32.div","line":984,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.div","doc":"Truncating division for 32-bit signed integers, rounding towards zero. Usually accessed via the `/`\noperator.\n\nDivision by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int32.div 10 3 = 3`\n* `Int32.div 10 (-3) = (-3)`\n* `Int32.div (-10) (-3) = 3`\n* `Int32.div (-10) 3 = (-3)`\n* `Int32.div 10 0 = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.div\"><span class=\"name\">Int32</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L976-L983","name":"Int32.mul","line":976,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.mul","doc":"Multiplies two 32-bit signed integers, wrapping around on over- or underflow.  Usually accessed via\nthe `*` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.mul\"><span class=\"name\">Int32</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L968-L975","name":"Int32.sub","line":968,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.sub","doc":"Subtracts one 32-bit signed integer from another, wrapping around on over- or underflow. Usually\naccessed via the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.sub\"><span class=\"name\">Int32</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L960-L967","name":"Int32.add","line":960,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.add","doc":"Adds two 32-bit signed integers, wrapping around on over- or underflow.  Usually accessed via the\n`+` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.add\"><span class=\"name\">Int32</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L950-L958","name":"Int32.ofIntTruncate","line":950,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate","doc":"Constructs an `Int32` from an `Int`, clamping if the value is too small or too large. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.ofIntTruncate\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L946-L949","name":"Int32.ofIntLE","line":946,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.ofIntLE","doc":"Constructs an `Int32` from an `Int` that is known to be in bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.ofIntLE\"><span class=\"name\">Int32</span>.<span class=\"name\">ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hl</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hr</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L944-L945","name":"Int32.minValue","line":944,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.minValue","doc":"The smallest number that `Int32` can represent: `-2^31 = -2147483648`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.minValue\"><span class=\"name\">Int32</span>.<span class=\"name\">minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L942-L943","name":"Int32.maxValue","line":942,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.maxValue","doc":"The largest number that `Int32` can represent: `2^31 - 1 = 2147483647`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.maxValue\"><span class=\"name\">Int32</span>.<span class=\"name\">maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L939-L940","name":"Int32.instNeg","line":939,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int32.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.instNeg\"><span class=\"name\">Int32</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L938-L938","name":"Int32.instOfNat","line":938,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int32.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.instOfNat\"><span class=\"name\">Int32</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L935-L936","name":"instHashableInt32","line":935,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instHashableInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instHashableInt32\"><span class=\"name\">instHashableInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L933-L933","name":"instReprAtomInt32","line":933,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprAtomInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprAtomInt32\"><span class=\"name\">instReprAtomInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L931-L932","name":"instReprInt32","line":931,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprInt32\"><span class=\"name\">instReprInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L929-L930","name":"instToStringInt32","line":929,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instToStringInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instToStringInt32\"><span class=\"name\">instToStringInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L921-L927","name":"Int32.neg","line":921,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.neg","doc":"Negates 32-bit signed integers. Usually accessed via the `-` prefix operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.neg\"><span class=\"name\">Int32</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L914-L920","name":"Int16.toInt32","line":914,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toInt32","doc":"Converts 8-bit signed integers to 32-bit signed integers that denote the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toInt32\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L907-L913","name":"Int8.toInt32","line":907,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toInt32","doc":"Converts 8-bit signed integers to 32-bit signed integers that denote the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toInt32\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L899-L906","name":"Int32.toInt16","line":899,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toInt16","doc":"Converts a 32-bit signed integer to an 16-bit signed integer by truncating its bitvector\nrepresentation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toInt16\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L891-L898","name":"Int32.toInt8","line":891,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toInt8","doc":"Converts a 32-bit signed integer to an 8-bit signed integer by truncating its bitvector\nrepresentation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toInt8\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L889-L890","name":"Int32.ofBitVec","line":889,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.ofBitVec","doc":"Obtains the `Int32` whose 2's complement representation is the given `BitVec 32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.ofBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L887-L888","name":"Int32.toNat","line":887,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toNat","doc":"Converts a 32-bit signed integer to a natural number, mapping all negative numbers to `0`.\n\nUse `Int32.toBitVec` to obtain the two's complement representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toNat\"><span class=\"name\">Int32</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L881-L886","name":"Int32.toNatClampNeg","line":881,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg","doc":"Converts a 32-bit signed integer to a natural number, mapping all negative numbers to `0`.\n\nUse `Int32.toBitVec` to obtain the two's complement representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toNatClampNeg\"><span class=\"name\">Int32</span>.<span class=\"name\">toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L874-L880","name":"Int32.toInt","line":874,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toInt","doc":"Converts a 32-bit signed integer to an arbitrary-precision integer that denotes the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toInt\"><span class=\"name\">Int32</span>.<span class=\"name\">toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L863-L873","name":"Nat.toInt32","line":863,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Nat.toInt32","doc":"Converts a natural number to a 32-bit signed integer, wrapping around to negative numbers on\noverflow.\n\nExamples:\n * `Nat.toInt32 127 = 127`\n * `Nat.toInt32 32770 = 32770`\n * `Nat.toInt32 2_147_483_647 = 2_147_483_647`\n * `Nat.toInt32 2_147_483_648 = -2_147_483_648`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Nat.toInt32\"><span class=\"name\">Nat</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L851-L862","name":"Int.toInt32","line":851,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int.toInt32","doc":"Converts an arbitrary-precision integer to a 32-bit integer, wrapping on overflow or underflow.\n\nExamples:\n* `Int.toInt32 48 = 48`\n* `Int.toInt32 (-129) = -129`\n* `Int.toInt32 70000 = 70000`\n* `Int.toInt32 (-40000) = -40000`\n* `Int.toInt32 2147483648 = -2147483648`\n* `Int.toInt32 (-2147483649) = 2147483647`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int.toInt32\"><span class=\"name\">Int</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L838-L850","name":"Int32.ofNat","line":838,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.ofNat","doc":"Converts a natural number to a 32-bit signed integer, wrapping around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int32.ofNat 127 = 127`\n* `Int32.ofNat 32770 = 32770`\n* `Int32.ofNat 2_147_483_647 = 2_147_483_647`\n* `Int32.ofNat 2_147_483_648 = -2_147_483_648`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.ofNat\"><span class=\"name\">Int32</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L823-L837","name":"Int32.ofInt","line":823,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.ofInt","doc":"Converts an arbitrary-precision integer to a 32-bit integer, wrapping on overflow or underflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int32.ofInt 48 = 48`\n* `Int32.ofInt (-129) = -129`\n* `Int32.ofInt 70000 = 70000`\n* `Int32.ofInt (-40000) = -40000`\n* `Int32.ofInt 2147483648 = -2147483648`\n* `Int32.ofInt (-2147483649) = 2147483647`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.ofInt\"><span class=\"name\">Int32</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L821-L822","name":"Int32.mk","line":821,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.mk","doc":"Obtains the `Int32` that is 2's complement equivalent to the `UInt32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.mk\"><span class=\"name\">Int32</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L819-L820","name":"UInt32.toInt32","line":819,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#UInt32.toInt32","doc":"Obtains the `Int32` that is 2's complement equivalent to the `UInt32`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#UInt32.toInt32\"><span class=\"name\">UInt32</span>.<span class=\"name\">toInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L816-L817","name":"Int32.toBitVec.inj","line":816,"kind":"theorem","docLink":"./Init/Data/SInt/Basic.html#Int32.toBitVec.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec.inj\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\">toBitVec</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L811-L814","name":"Int32.toBitVec","line":811,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toBitVec","doc":"Obtain the `BitVec` that contains the 2's complement representation of the `Int32`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toBitVec\"><span class=\"name\">Int32</span>.<span class=\"name\">toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L808-L809","name":"Int32.size","line":808,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.size","doc":"The number of distinct values representable by `Int32`, that is, `2^32 = 4294967296`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.size\"><span class=\"name\">Int32</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L806-L806","name":"instMinInt16","line":806,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMinInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMinInt16\"><span class=\"name\">instMinInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L805-L805","name":"instMaxInt16","line":805,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMaxInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMaxInt16\"><span class=\"name\">instMaxInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L804-L804","name":"instDecidableLeInt16","line":804,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLeInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLeInt16\"><span class=\"name\">instDecidableLeInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L803-L803","name":"instDecidableLtInt16","line":803,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLtInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLtInt16\"><span class=\"name\">instDecidableLtInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L787-L801","name":"Int16.decLe","line":787,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.decLe","doc":"Decides whether one 16-bit signed integer is less than or equal to another. Usually accessed via the\n`DecidableLE Int16` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if ((-7) : Int16) ≤ 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : Int16) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : Int16) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `show (7 : Int16) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.decLe\"><span class=\"name\">Int16</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L772-L785","name":"Int16.decLt","line":772,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.decLt","doc":"Decides whether one 16-bit signed integer is strictly less than another. Usually accessed via the\n`DecidableLT Int16` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if ((-7) : Int16) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : Int16) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : Int16) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.decLt\"><span class=\"name\">Int16</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L766-L770","name":"Bool.toInt16","line":766,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Bool.toInt16","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Bool.toInt16\"><span class=\"name\">Bool</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L764-L764","name":"instDecidableEqInt16","line":764,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableEqInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableEqInt16\"><span class=\"name\">instDecidableEqInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L763-L763","name":"instShiftRightInt16","line":763,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftRightInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftRightInt16\"><span class=\"name\">instShiftRightInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L762-L762","name":"instShiftLeftInt16","line":762,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftLeftInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftLeftInt16\"><span class=\"name\">instShiftLeftInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L761-L761","name":"instXorInt16","line":761,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instXorInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instXorInt16\"><span class=\"name\">instXorInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L760-L760","name":"instOrOpInt16","line":760,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instOrOpInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instOrOpInt16\"><span class=\"name\">instOrOpInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L759-L759","name":"instAndOpInt16","line":759,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAndOpInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAndOpInt16\"><span class=\"name\">instAndOpInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L758-L758","name":"instComplementInt16","line":758,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instComplementInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instComplementInt16\"><span class=\"name\">instComplementInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L757-L757","name":"instLEInt16","line":757,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLEInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLEInt16\"><span class=\"name\">instLEInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L756-L756","name":"instLTInt16","line":756,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLTInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLTInt16\"><span class=\"name\">instLTInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L755-L755","name":"instDivInt16","line":755,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDivInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDivInt16\"><span class=\"name\">instDivInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L754-L754","name":"instModInt16","line":754,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instModInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instModInt16\"><span class=\"name\">instModInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L753-L753","name":"instPowInt16Nat","line":753,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instPowInt16Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instPowInt16Nat\"><span class=\"name\">instPowInt16Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L752-L752","name":"instMulInt16","line":752,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMulInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMulInt16\"><span class=\"name\">instMulInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L751-L751","name":"instSubInt16","line":751,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instSubInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instSubInt16\"><span class=\"name\">instSubInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L750-L750","name":"instAddInt16","line":750,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAddInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAddInt16\"><span class=\"name\">instAddInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L747-L748","name":"instInhabitedInt16","line":747,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instInhabitedInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instInhabitedInt16\"><span class=\"name\">instInhabitedInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L741-L745","name":"Int16.le","line":741,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.le","doc":"Non-strict inequality of 16-bit signed integers, defined as inequality of the corresponding\nintegers. Usually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.le\"><span class=\"name\">Int16</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L736-L740","name":"Int16.lt","line":736,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.lt","doc":"Strict inequality of 16-bit signed integers, defined as inequality of the corresponding integers.\nUsually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.lt\"><span class=\"name\">Int16</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L716-L734","name":"Int16.decEq","line":716,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.decEq","doc":"Decides whether two 16-bit signed integers are equal. Usually accessed via the `DecidableEq Int16`\ninstance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `Int16.decEq 123 123 = .isTrue rfl`\n * `(if ((-7) : Int16) = 7 then \"yes\" else \"no\") = \"no\"`\n * `show (7 : Int16) = 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.decEq\"><span class=\"name\">Int16</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L705-L714","name":"Int16.abs","line":705,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.abs","doc":"Computes the absolute value of a 16-bit signed integer.\n\nThis function is equivalent to `if a < 0 then -a else a`, so in particular `Int16.minValue` will be\nmapped to `Int16.minValue`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.abs\"><span class=\"name\">Int16</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L694-L704","name":"Int16.complement","line":694,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.complement","doc":"Bitwise complement, also known as bitwise negation, for 16-bit signed integers. Usually accessed via\nthe `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\nIntegers use the two's complement representation, so `Int16.complement a = -(a + 1)`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.complement\"><span class=\"name\">Int16</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L685-L693","name":"Int16.shiftRight","line":685,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.shiftRight","doc":"Arithmetic right shift for 16-bit signed integers. Usually accessed via the `<<<` operator.\n\nThe high bits are filled with the value of the most significant bit.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.shiftRight\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L676-L684","name":"Int16.shiftLeft","line":676,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.shiftLeft","doc":"Bitwise left shift for 16-bit signed integers. Usually accessed via the `<<<` operator.\n\nSigned integers are interpreted as bitvectors according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.shiftLeft\"><span class=\"name\">Int16</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L666-L675","name":"Int16.xor","line":666,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.xor","doc":"Bitwise exclusive or for 16-bit signed integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of the input\nintegers is set, according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.xor\"><span class=\"name\">Int16</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L656-L665","name":"Int16.lor","line":656,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.lor","doc":"Bitwise or for 16-bit signed integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of the input\nintegers is set, according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.lor\"><span class=\"name\">Int16</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L646-L655","name":"Int16.land","line":646,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.land","doc":"Bitwise and for 16-bit signed integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set,\naccording to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.land\"><span class=\"name\">Int16</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L625-L645","name":"Int16.mod","line":625,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.mod","doc":"The modulo operator for 16-bit signed integers, which computes the remainder when dividing one\ninteger by another with the T-rounding convention used by `Int16.div`. Usually accessed via the `%`\noperator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int16.mod 5 2 = 1`\n* `Int16.mod 5 (-2) = 1`\n* `Int16.mod (-5) 2 = (-1)`\n* `Int16.mod (-5) (-2) = (-1)`\n* `Int16.mod 4 2 = 0`\n* `Int16.mod 4 (-2) = 0`\n* `Int16.mod 4 0 = 4`\n* `Int16.mod (-4) 0 = (-4)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.mod\"><span class=\"name\">Int16</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L614-L624","name":"Int16.pow","line":614,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.pow","doc":"The power operation, raising a 16-bit signed integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.pow\"><span class=\"name\">Int16</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L597-L613","name":"Int16.div","line":597,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.div","doc":"Truncating division for 16-bit signed integers, rounding towards zero. Usually accessed via the `/`\noperator.\n\nDivision by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int16.div 10 3 = 3`\n* `Int16.div 10 (-3) = (-3)`\n* `Int16.div (-10) (-3) = 3`\n* `Int16.div (-10) 3 = (-3)`\n* `Int16.div 10 0 = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.div\"><span class=\"name\">Int16</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L589-L596","name":"Int16.mul","line":589,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.mul","doc":"Multiplies two 16-bit signed integers, wrapping around on over- or underflow.  Usually accessed via\nthe `*` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.mul\"><span class=\"name\">Int16</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L581-L588","name":"Int16.sub","line":581,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.sub","doc":"Subtracts one 16-bit signed integer from another, wrapping around on over- or underflow. Usually\naccessed via the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.sub\"><span class=\"name\">Int16</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L573-L580","name":"Int16.add","line":573,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.add","doc":"Adds two 16-bit signed integers, wrapping around on over- or underflow.  Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.add\"><span class=\"name\">Int16</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L563-L571","name":"Int16.ofIntTruncate","line":563,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate","doc":"Constructs an `Int16` from an `Int`, clamping if the value is too small or too large. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.ofIntTruncate\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L559-L562","name":"Int16.ofIntLE","line":559,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.ofIntLE","doc":"Constructs an `Int16` from an `Int` that is known to be in bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.ofIntLE\"><span class=\"name\">Int16</span>.<span class=\"name\">ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hl</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hr</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L557-L558","name":"Int16.minValue","line":557,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.minValue","doc":"The smallest number that `Int16` can represent: `-2^15 = -32768`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.minValue\"><span class=\"name\">Int16</span>.<span class=\"name\">minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L555-L556","name":"Int16.maxValue","line":555,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.maxValue","doc":"The largest number that `Int16` can represent: `2^15 - 1 = 32767`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.maxValue\"><span class=\"name\">Int16</span>.<span class=\"name\">maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L552-L553","name":"Int16.instNeg","line":552,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int16.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.instNeg\"><span class=\"name\">Int16</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L551-L551","name":"Int16.instOfNat","line":551,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int16.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.instOfNat\"><span class=\"name\">Int16</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L548-L549","name":"instHashableInt16","line":548,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instHashableInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instHashableInt16\"><span class=\"name\">instHashableInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L546-L546","name":"instReprAtomInt16","line":546,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprAtomInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprAtomInt16\"><span class=\"name\">instReprAtomInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L544-L545","name":"instReprInt16","line":544,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprInt16\"><span class=\"name\">instReprInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L542-L543","name":"instToStringInt16","line":542,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instToStringInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instToStringInt16\"><span class=\"name\">instToStringInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L534-L540","name":"Int16.neg","line":534,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.neg","doc":"Negates 16-bit signed integers. Usually accessed via the `-` prefix operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.neg\"><span class=\"name\">Int16</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L527-L533","name":"Int8.toInt16","line":527,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toInt16","doc":"Converts 8-bit signed integers to 16-bit signed integers that denote the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toInt16\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L519-L526","name":"Int16.toInt8","line":519,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toInt8","doc":"Converts 16-bit signed integers to 8-bit signed integers by truncating their bitvector\nrepresentation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toInt8\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L517-L518","name":"Int16.ofBitVec","line":517,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.ofBitVec","doc":"Obtains the `Int16` whose 2's complement representation is the given `BitVec 16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.ofBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L515-L516","name":"Int16.toNat","line":515,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toNat","doc":"Converts a 16-bit signed integer to a natural number, mapping all negative numbers to `0`.\n\nUse `Int16.toBitVec` to obtain the two's complement representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toNat\"><span class=\"name\">Int16</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L509-L514","name":"Int16.toNatClampNeg","line":509,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg","doc":"Converts a 16-bit signed integer to a natural number, mapping all negative numbers to `0`.\n\nUse `Int16.toBitVec` to obtain the two's complement representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toNatClampNeg\"><span class=\"name\">Int16</span>.<span class=\"name\">toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L502-L508","name":"Int16.toInt","line":502,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toInt","doc":"Converts a 16-bit signed integer to an arbitrary-precision integer that denotes the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toInt\"><span class=\"name\">Int16</span>.<span class=\"name\">toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L490-L500","name":"Nat.toInt16","line":490,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Nat.toInt16","doc":"Converts a natural number to a 16-bit signed integer, wrapping around to negative numbers on\noverflow.\n\nExamples:\n * `Nat.toInt16 127 = 127`\n * `Nat.toInt16 32767 = 32767`\n * `Nat.toInt16 32768 = -32768`\n * `Nat.toInt16 32770 = -32766`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Nat.toInt16\"><span class=\"name\">Nat</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L479-L489","name":"Int.toInt16","line":479,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int.toInt16","doc":"Converts an arbitrary-precision integer to a 16-bit integer, wrapping on overflow or underflow.\n\nExamples:\n* `Int.toInt16 48 = 48`\n* `Int.toInt16 (-129) = -129`\n* `Int.toInt16 (128) = 128`\n* `Int.toInt16 70000 = 4464`\n* `Int.toInt16 (-40000) = 25536`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int.toInt16\"><span class=\"name\">Int</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L466-L478","name":"Int16.ofNat","line":466,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.ofNat","doc":"Converts a natural number to a 16-bit signed integer, wrapping around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int16.ofNat 127 = 127`\n* `Int16.ofNat 32767 = 32767`\n* `Int16.ofNat 32768 = -32768`\n* `Int16.ofNat 32770 = -32766`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.ofNat\"><span class=\"name\">Int16</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L452-L465","name":"Int16.ofInt","line":452,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.ofInt","doc":"Converts an arbitrary-precision integer to a 16-bit signed integer, wrapping on overflow or underflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int16.ofInt 48 = 48`\n* `Int16.ofInt (-129) = -129`\n* `Int16.ofInt (128) = 128`\n* `Int16.ofInt 70000 = 4464`\n* `Int16.ofInt (-40000) = 25536`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.ofInt\"><span class=\"name\">Int16</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L450-L451","name":"Int16.mk","line":450,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.mk","doc":"Obtains the `Int16` that is 2's complement equivalent to the `UInt16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.mk\"><span class=\"name\">Int16</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L448-L449","name":"UInt16.toInt16","line":448,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#UInt16.toInt16","doc":"Obtains the `Int16` that is 2's complement equivalent to the `UInt16`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#UInt16.toInt16\"><span class=\"name\">UInt16</span>.<span class=\"name\">toInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L445-L446","name":"Int16.toBitVec.inj","line":445,"kind":"theorem","docLink":"./Init/Data/SInt/Basic.html#Int16.toBitVec.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec.inj\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\">toBitVec</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L440-L443","name":"Int16.toBitVec","line":440,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toBitVec","doc":"Obtain the `BitVec` that contains the 2's complement representation of the `Int16`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toBitVec\"><span class=\"name\">Int16</span>.<span class=\"name\">toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L437-L438","name":"Int16.size","line":437,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.size","doc":"The number of distinct values representable by `Int16`, that is, `2^16 = 65536`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.size\"><span class=\"name\">Int16</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L435-L435","name":"instMinInt8","line":435,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMinInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMinInt8\"><span class=\"name\">instMinInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L434-L434","name":"instMaxInt8","line":434,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMaxInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMaxInt8\"><span class=\"name\">instMaxInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L433-L433","name":"instDecidableLeInt8","line":433,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLeInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLeInt8\"><span class=\"name\">instDecidableLeInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L432-L432","name":"instDecidableLtInt8","line":432,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableLtInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableLtInt8\"><span class=\"name\">instDecidableLtInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L416-L430","name":"Int8.decLe","line":416,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.decLe","doc":"Decides whether one 8-bit signed integer is less than or equal to another. Usually accessed via the\n`DecidableLE Int8` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if ((-7) : Int8) ≤ 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : Int8) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : Int8) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `show (7 : Int8) ≤ 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.decLe\"><span class=\"name\">Int8</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L401-L414","name":"Int8.decLt","line":401,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.decLt","doc":"Decides whether one 8-bit signed integer is strictly less than another. Usually accessed via the\n`DecidableLT Int8` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if ((-7) : Int8) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : Int8) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : Int8) < 7) by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.decLt\"><span class=\"name\">Int8</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L395-L399","name":"Bool.toInt8","line":395,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Bool.toInt8","doc":"Converts `true` to `1` and `false` to `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Bool.toInt8\"><span class=\"name\">Bool</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L393-L393","name":"instDecidableEqInt8","line":393,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDecidableEqInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDecidableEqInt8\"><span class=\"name\">instDecidableEqInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L392-L392","name":"instShiftRightInt8","line":392,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftRightInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftRightInt8\"><span class=\"name\">instShiftRightInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L391-L391","name":"instShiftLeftInt8","line":391,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instShiftLeftInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instShiftLeftInt8\"><span class=\"name\">instShiftLeftInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L390-L390","name":"instXorInt8","line":390,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instXorInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instXorInt8\"><span class=\"name\">instXorInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L389-L389","name":"instOrOpInt8","line":389,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instOrOpInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instOrOpInt8\"><span class=\"name\">instOrOpInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L388-L388","name":"instAndOpInt8","line":388,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAndOpInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAndOpInt8\"><span class=\"name\">instAndOpInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L387-L387","name":"instComplementInt8","line":387,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instComplementInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instComplementInt8\"><span class=\"name\">instComplementInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L386-L386","name":"instLEInt8","line":386,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLEInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLEInt8\"><span class=\"name\">instLEInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L385-L385","name":"instLTInt8","line":385,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instLTInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instLTInt8\"><span class=\"name\">instLTInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L384-L384","name":"instDivInt8","line":384,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instDivInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instDivInt8\"><span class=\"name\">instDivInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L383-L383","name":"instModInt8","line":383,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instModInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instModInt8\"><span class=\"name\">instModInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L382-L382","name":"instPowInt8Nat","line":382,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instPowInt8Nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instPowInt8Nat\"><span class=\"name\">instPowInt8Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L381-L381","name":"instMulInt8","line":381,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instMulInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instMulInt8\"><span class=\"name\">instMulInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L380-L380","name":"instSubInt8","line":380,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instSubInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instSubInt8\"><span class=\"name\">instSubInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L379-L379","name":"instAddInt8","line":379,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instAddInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instAddInt8\"><span class=\"name\">instAddInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L376-L377","name":"instInhabitedInt8","line":376,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instInhabitedInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instInhabitedInt8\"><span class=\"name\">instInhabitedInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L370-L374","name":"Int8.le","line":370,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.le","doc":"Non-strict inequality of 8-bit signed integers, defined as inequality of the corresponding integers.\nUsually accessed via the `≤` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.le\"><span class=\"name\">Int8</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L365-L369","name":"Int8.lt","line":365,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.lt","doc":"Strict inequality of 8-bit signed integers, defined as inequality of the corresponding integers.\nUsually accessed via the `<` operator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.lt\"><span class=\"name\">Int8</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L345-L363","name":"Int8.decEq","line":345,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.decEq","doc":"Decides whether two 8-bit signed integers are equal. Usually accessed via the `DecidableEq Int8`\ninstance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `Int8.decEq 123 123 = .isTrue rfl`\n * `(if ((-7) : Int8) = 7 then \"yes\" else \"no\") = \"no\"`\n * `show (7 : Int8) = 7 by decide`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.decEq\"><span class=\"name\">Int8</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L334-L343","name":"Int8.abs","line":334,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.abs","doc":"Computes the absolute value of an 8-bit signed integer.\n\nThis function is equivalent to `if a < 0 then -a else a`, so in particular `Int8.minValue` will be\nmapped to `Int8.minValue`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.abs\"><span class=\"name\">Int8</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L323-L333","name":"Int8.complement","line":323,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.complement","doc":"Bitwise complement, also known as bitwise negation, for 8-bit signed integers. Usually accessed via\nthe `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\nIntegers use the two's complement representation, so `Int8.complement a = -(a + 1)`.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.complement\"><span class=\"name\">Int8</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L314-L322","name":"Int8.shiftRight","line":314,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.shiftRight","doc":"Arithmetic right shift for 8-bit signed integers. Usually accessed via the `<<<` operator.\n\nThe high bits are filled with the value of the most significant bit.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.shiftRight\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L305-L313","name":"Int8.shiftLeft","line":305,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.shiftLeft","doc":"Bitwise left shift for 8-bit signed integers. Usually accessed via the `<<<` operator.\n\nSigned integers are interpreted as bitvectors according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.shiftLeft\"><span class=\"name\">Int8</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L295-L304","name":"Int8.xor","line":295,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.xor","doc":"Bitwise exclusive or for 8-bit signed integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of the input\nintegers is set, according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.xor\"><span class=\"name\">Int8</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L285-L294","name":"Int8.lor","line":285,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.lor","doc":"Bitwise or for 8-bit signed integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of the input\nintegers is set, according to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.lor\"><span class=\"name\">Int8</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L275-L284","name":"Int8.land","line":275,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.land","doc":"Bitwise and for 8-bit signed integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set,\naccording to the two's complement representation.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.land\"><span class=\"name\">Int8</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L254-L274","name":"Int8.mod","line":254,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.mod","doc":"The modulo operator for 8-bit signed integers, which computes the remainder when dividing one\ninteger by another with the T-rounding convention used by `Int8.div`. Usually accessed via the `%`\noperator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int8.mod 5 2 = 1`\n* `Int8.mod 5 (-2) = 1`\n* `Int8.mod (-5) 2 = (-1)`\n* `Int8.mod (-5) (-2) = (-1)`\n* `Int8.mod 4 2 = 0`\n* `Int8.mod 4 (-2) = 0`\n* `Int8.mod 4 0 = 4`\n* `Int8.mod (-4) 0 = (-4)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.mod\"><span class=\"name\">Int8</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L243-L253","name":"Int8.pow","line":243,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.pow","doc":"The power operation, raising an 8-bit signed integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.pow\"><span class=\"name\">Int8</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L226-L242","name":"Int8.div","line":226,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.div","doc":"Truncating division for 8-bit signed integers, rounding towards zero. Usually accessed via the `/`\noperator.\n\nDivision by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int8.div 10 3 = 3`\n* `Int8.div 10 (-3) = (-3)`\n* `Int8.div (-10) (-3) = 3`\n* `Int8.div (-10) 3 = (-3)`\n* `Int8.div 10 0 = 0`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.div\"><span class=\"name\">Int8</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L218-L225","name":"Int8.mul","line":218,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.mul","doc":"Multiplies two 8-bit signed integers, wrapping around on over- or underflow.  Usually accessed via\nthe `*` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.mul\"><span class=\"name\">Int8</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L210-L217","name":"Int8.sub","line":210,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.sub","doc":"Subtracts one 8-bit signed integer from another, wrapping around on over- or underflow. Usually\naccessed via the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.sub\"><span class=\"name\">Int8</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L202-L209","name":"Int8.add","line":202,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.add","doc":"Adds two 8-bit signed integers, wrapping around on over- or underflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.add\"><span class=\"name\">Int8</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L193-L201","name":"Int8.ofIntTruncate","line":193,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.ofIntTruncate","doc":"Constructs an `Int8` from an `Int`, clamping if the value is too small or too large. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.ofIntTruncate\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntTruncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L189-L192","name":"Int8.ofIntLE","line":189,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.ofIntLE","doc":"Constructs an `Int8` from an `Int` that is known to be in bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.ofIntLE\"><span class=\"name\">Int8</span>.<span class=\"name\">ofIntLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hl</span> : <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.minValue\">minValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_hr</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\">maxValue</a>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L187-L188","name":"Int8.minValue","line":187,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.minValue","doc":"The smallest number that `Int8` can represent: `-2^7 = -128`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.minValue\"><span class=\"name\">Int8</span>.<span class=\"name\">minValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L185-L186","name":"Int8.maxValue","line":185,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.maxValue","doc":"The largest number that `Int8` can represent: `2^7 - 1 = 127`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.maxValue\"><span class=\"name\">Int8</span>.<span class=\"name\">maxValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L182-L183","name":"Int8.instNeg","line":182,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int8.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.instNeg\"><span class=\"name\">Int8</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L181-L181","name":"Int8.instOfNat","line":181,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#Int8.instOfNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.instOfNat\"><span class=\"name\">Int8</span>.<span class=\"name\">instOfNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L178-L179","name":"instHashableInt8","line":178,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instHashableInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instHashableInt8\"><span class=\"name\">instHashableInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L176-L176","name":"instReprAtomInt8","line":176,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprAtomInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprAtomInt8\"><span class=\"name\">instReprAtomInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#ReprAtom\">ReprAtom</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L174-L175","name":"instReprInt8","line":174,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instReprInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instReprInt8\"><span class=\"name\">instReprInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L172-L173","name":"instToStringInt8","line":172,"kind":"instance","docLink":"./Init/Data/SInt/Basic.html#instToStringInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#instToStringInt8\"><span class=\"name\">instToStringInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L164-L170","name":"Int8.neg","line":164,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.neg","doc":"Negates 8-bit signed integers. Usually accessed via the `-` prefix operator.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.neg\"><span class=\"name\">Int8</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L162-L163","name":"Int8.ofBitVec","line":162,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.ofBitVec","doc":"Obtains the `Int8` whose 2's complement representation is the given `BitVec 8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.ofBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">ofBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L160-L161","name":"Int8.toNat","line":160,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toNat","doc":"Converts an 8-bit signed integer to a natural number, mapping all negative numbers to `0`.\n\nUse `Int8.toBitVec` to obtain the two's complement representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toNat\"><span class=\"name\">Int8</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L154-L159","name":"Int8.toNatClampNeg","line":154,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg","doc":"Converts an 8-bit signed integer to a natural number, mapping all negative numbers to `0`.\n\nUse `Int8.toBitVec` to obtain the two's complement representation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toNatClampNeg\"><span class=\"name\">Int8</span>.<span class=\"name\">toNatClampNeg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L147-L153","name":"Int8.toInt","line":147,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toInt","doc":"Converts an 8-bit signed integer to an arbitrary-precision integer that denotes the same number.\n\nThis function is overridden at runtime with an efficient implementation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toInt\"><span class=\"name\">Int8</span>.<span class=\"name\">toInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L135-L145","name":"Nat.toInt8","line":135,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Nat.toInt8","doc":"Converts a natural number to an 8-bit signed integer, wrapping around to negative numbers on\noverflow.\n\nExamples:\n * `Nat.toInt8 53 = 53`\n * `Nat.toInt8 127 = 127`\n * `Nat.toInt8 128 = -128`\n * `Nat.toInt8 255 = -1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Nat.toInt8\"><span class=\"name\">Nat</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L125-L134","name":"Int.toInt8","line":125,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int.toInt8","doc":"Converts an arbitrary-precision integer to an 8-bit integer, wrapping on overflow or underflow.\n\nExamples:\n* `Int.toInt8 48 = 48`\n* `Int.toInt8 (-115) = -115`\n* `Int.toInt8 (-129) = 127`\n* `Int.toInt8 (128) = -128`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int.toInt8\"><span class=\"name\">Int</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L112-L124","name":"Int8.ofNat","line":112,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.ofNat","doc":"Converts a natural number to an 8-bit signed integer, wrapping around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int8.ofNat 53 = 53`\n* `Int8.ofNat 127 = 127`\n* `Int8.ofNat 128 = -128`\n* `Int8.ofNat 255 = -1`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.ofNat\"><span class=\"name\">Int8</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L99-L111","name":"Int8.ofInt","line":99,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.ofInt","doc":"Converts an arbitrary-precision integer to an 8-bit integer, wrapping on overflow or underflow.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `Int8.ofInt 48 = 48`\n* `Int8.ofInt (-115) = -115`\n* `Int8.ofInt (-129) = 127`\n* `Int8.ofInt (128) = -128`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.ofInt\"><span class=\"name\">Int8</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L97-L98","name":"Int8.mk","line":97,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.mk","doc":"Obtains the `Int8` that is 2's complement equivalent to the `UInt8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.mk\"><span class=\"name\">Int8</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L95-L96","name":"UInt8.toInt8","line":95,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#UInt8.toInt8","doc":"Obtains the `Int8` that is 2's complement equivalent to the `UInt8`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#UInt8.toInt8\"><span class=\"name\">UInt8</span>.<span class=\"name\">toInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L92-L93","name":"Int8.toBitVec.inj","line":92,"kind":"theorem","docLink":"./Init/Data/SInt/Basic.html#Int8.toBitVec.inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec.inj\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec</span>.<span class=\"name\">inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\">toBitVec</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L87-L90","name":"Int8.toBitVec","line":87,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toBitVec","doc":"Obtain the `BitVec` that contains the 2's complement representation of the `Int8`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toBitVec\"><span class=\"name\">Int8</span>.<span class=\"name\">toBitVec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L84-L85","name":"Int8.size","line":84,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.size","doc":"The number of distinct values representable by `Int8`, that is, `2^8 = 256`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.size\"><span class=\"name\">Int8</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L82-L82","name":"ISize.toUSize","line":82,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#ISize.toUSize","doc":"Converts a word-sized signed integer into the word-sized unsigned integer that is its two's\ncomplement encoding.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize.toUSize\"><span class=\"name\">ISize</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L70-L82","name":"ISize","line":70,"kind":"structure","docLink":"./Init/Data/SInt/Basic.html#ISize","doc":"Signed integers that are the size of a word on the platform's architecture.\n\nOn a 32-bit architecture, `ISize` is equivalent to `Int32`. On a 64-bit machine, it is equivalent to\n`Int64`. This type has special support in the compiler so it can be represented by an unboxed value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#ISize\"><span class=\"name\">ISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L68-L68","name":"Int64.toUInt64","line":68,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int64.toUInt64","doc":"Converts an 64-bit signed integer into the 64-bit unsigned integer that is its two's complement\nencoding.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64.toUInt64\"><span class=\"name\">Int64</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L57-L68","name":"Int64","line":57,"kind":"structure","docLink":"./Init/Data/SInt/Basic.html#Int64","doc":"Signed 64-bit integers.\n\nThis type has special support in the compiler so it can be represented by an unboxed 64-bit value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int64\"><span class=\"name\">Int64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L55-L55","name":"Int32.toUInt32","line":55,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int32.toUInt32","doc":"Converts an 32-bit signed integer into the 32-bit unsigned integer that is its two's complement\nencoding.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32.toUInt32\"><span class=\"name\">Int32</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L44-L55","name":"Int32","line":44,"kind":"structure","docLink":"./Init/Data/SInt/Basic.html#Int32","doc":"Signed 32-bit integers.\n\nThis type has special support in the compiler so it can be represented by an unboxed 32-bit value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int32\"><span class=\"name\">Int32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L42-L42","name":"Int16.toUInt16","line":42,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int16.toUInt16","doc":"Converts an 16-bit signed integer into the 16-bit unsigned integer that is its two's complement\nencoding.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16.toUInt16\"><span class=\"name\">Int16</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L31-L42","name":"Int16","line":31,"kind":"structure","docLink":"./Init/Data/SInt/Basic.html#Int16","doc":"Signed 16-bit integers.\n\nThis type has special support in the compiler so it can be represented by an unboxed 16-bit value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int16\"><span class=\"name\">Int16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L29-L29","name":"Int8.toUInt8","line":29,"kind":"def","docLink":"./Init/Data/SInt/Basic.html#Int8.toUInt8","doc":"Converts an 8-bit signed integer into the 8-bit unsigned integer that is its two's complement\nencoding.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8.toUInt8\"><span class=\"name\">Int8</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/SInt/Basic.lean#L18-L29","name":"Int8","line":18,"kind":"structure","docLink":"./Init/Data/SInt/Basic.html#Int8","doc":"Signed 8-bit integers.\n\nThis type has special support in the compiler so it can be represented by an unboxed 8-bit value.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/SInt/Basic.html#Int8\"><span class=\"name\">Int8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}