{"name":"Lean.Elab.Tactic.RCases","instances":[{"typeNames":["Lean.Syntax.Ident","Lean.TSyntax"],"name":"Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","className":"Coe"},{"typeNames":["Lean.TSyntax","Lean.TSyntax"],"name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean","className":"Coe"},{"typeNames":["Lean.TSyntax","Lean.TSyntax"],"name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean","className":"Coe"},{"typeNames":["Lean.TSyntax","Lean.TSyntax"],"name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","className":"Coe"},{"typeNames":["Lean.Elab.Tactic.RCases.RCasesPatt"],"name":"Lean.Elab.Tactic.RCases.instReprRCasesPatt","className":"Repr"},{"typeNames":["Lean.Elab.Tactic.RCases.RCasesPatt"],"name":"Lean.Elab.Tactic.RCases.RCasesPatt.instInhabited","className":"Inhabited"},{"typeNames":["Lean.Elab.Tactic.RCases.RCasesPatt"],"name":"Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData","className":"Lean.ToMessageData"}],"imports":["Lean.Elab.Tactic.Induction"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L575-L580","name":"Lean.Elab.Tactic.RCases.evalRIntro","line":575,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalRIntro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalRIntro\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">evalRIntro</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L555-L573","name":"Lean.Elab.Tactic.RCases.evalObtain","line":555,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalObtain","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalObtain\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">evalObtain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L542-L553","name":"Lean.Elab.Tactic.RCases.evalRCases","line":542,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalRCases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalRCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">evalRCases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L534-L540","name":"Lean.Elab.Tactic.RCases.rintro","line":534,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintro","doc":"The implementation of the `rintro` tactic. It takes a list of patterns `pats` and\nan optional type ascription `ty?` and introduces the patterns, resulting in zero or more goals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintro\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rintro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`rintroPat</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L527-L530","name":"Lean.Elab.Tactic.RCases.rintroContinue.loop","line":527,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintroContinue.loop","doc":"Runs `rintroContinue` on `pats[i:]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintroContinue.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rintroContinue</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`rintroPat</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L517-L530","name":"Lean.Elab.Tactic.RCases.rintroContinue","line":517,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintroContinue","doc":"This introduces the list of patterns `pats`. It has the same arguments as `rcasesCore`, plus:\n* `ty?`: the nearest enclosing type ascription on the current pattern\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintroContinue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rintroContinue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`rintroPat</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L500-L515","name":"Lean.Elab.Tactic.RCases.rintroCore","line":500,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintroCore","doc":"This introduces the pattern `pat`. It has the same arguments as `rcasesCore`, plus:\n* `ty?`: the nearest enclosing type ascription on the current pattern\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintroCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rintroCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rintroPat</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L490-L494","name":"Lean.Elab.Tactic.RCases.expandRIntroPats","line":490,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.expandRIntroPats","doc":"Expand a list of `rintroPat` into an equivalent list of `rcasesPat` patterns. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.expandRIntroPats\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">expandRIntroPats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rintroPat</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L479-L488","name":"Lean.Elab.Tactic.RCases.expandRIntroPat","line":479,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.expandRIntroPat","doc":"Expand a `rintroPat` into an equivalent list of `rcasesPat` patterns. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.expandRIntroPat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">expandRIntroPat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rintroPat</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L463-L474","name":"Lean.Elab.Tactic.RCases.obtainNone","line":463,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.obtainNone","doc":"The `obtain` tactic in the no-target case. Given a type `T`, create a goal `|- T` and\nand pattern match `T` against the given pattern. Returns the list of goals, with the assumed goal\nfirst followed by the goals produced by the pattern match.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.obtainNone\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">obtainNone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L440-L461","name":"Lean.Elab.Tactic.RCases.rcases","line":440,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcases","doc":"Given a list of targets of the form `e` or `h : e`, and a pattern, match all the targets\nagainst the pattern. Returns the list of produced subgoals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcases\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rcases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tgts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L425-L438","name":"Lean.Elab.Tactic.RCases.generalizeExceptFVar","line":425,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.generalizeExceptFVar","doc":"Generalize all the arguments as specified in `args` to fvars if they aren't already "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.generalizeExceptFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">generalizeExceptFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Meta.GeneralizeArg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L410-L422","name":"Lean.Elab.Tactic.RCases.RCasesPatt.parse","line":410,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.parse","doc":"Parses a `Syntax` into the `RCasesPatt` type used by the `RCases` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.parse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L393-L406","name":"Lean.Elab.Tactic.RCases.finish","line":393,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.finish","doc":"The terminating continuation used in `rcasesCore` and `rcasesContinue`. We specialize the type\n`α` to `Array MVarId` to collect the list of goals, and given the list of `clears`, it attempts to\nclear them from the goal and adds the goal to the list.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.finish\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">finish</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toTag</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L385-L391","name":"Lean.Elab.Tactic.RCases.tryClearMany'","line":385,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.tryClearMany'","doc":"Like `tryClearMany`, but also clears dependent hypotheses if possible "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.tryClearMany'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">tryClearMany'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L367-L381","name":"Lean.Elab.Tactic.RCases.rcasesContinue","line":367,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcasesContinue","doc":"This will match a list of patterns against a list of hypotheses `e`. The arguments are similar\nto `rcasesCore`, but the patterns and local variables are in `pats`. Because the calls are all\nnested in continuations, later arguments can be matched many times, once per goal produced by\nearlier arguments. For example `⟨a | b, ⟨c, d⟩⟩` performs the `⟨c, d⟩` match twice, once on the\n`a` branch and once on `b`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcasesContinue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rcasesContinue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L357-L364","name":"Lean.Elab.Tactic.RCases.rcasesCore.align","line":357,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcasesCore.align","doc":"Runs `rcasesContinue` on the first pattern in `r` with a matching `ctorName`.\nThe unprocessed patterns (subsequent to the matching pattern) are returned. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcasesCore.align\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rcasesCore</span>.<span class=\"name\">align</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.InductionSubgoal\">Meta.InductionSubgoal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span>)</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L275-L365","name":"Lean.Elab.Tactic.RCases.rcasesCore","line":275,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcasesCore","doc":"This will match a pattern `pat` against a local hypothesis `e`.\n* `g`: The initial subgoal\n* `fs`: A running variable substitution, the result of `cases` operations upstream.\n  The variable `e` must be run through this map before locating it in the context of `g`,\n  and the output variable substitutions will be end extensions of this one.\n* `clears`: The list of variables to clear in all subgoals generated from this point on.\n  We defer clear operations because clearing too early can cause `cases` to fail.\n  The actual clearing happens in `RCases.finish`.\n* `e`: a local hypothesis, the scrutinee to match against.\n* `a`: opaque \"user data\" which is passed through all the goal calls at the end.\n* `pat`: the pattern to match against\n* `cont`: A continuation. This is called on every goal generated by the result of the pattern\n  match, with updated values for `g` , `fs`, `clears`, and `a`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcasesCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rcasesCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L246-L271","name":"Lean.Elab.Tactic.RCases.subst'","line":246,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.subst'","doc":"Like `Lean.Meta.subst`, but preserves the `FVarSubst`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.subst'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">subst'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hFVarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarSubst</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> := <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.mk\">{</a> <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L223-L241","name":"Lean.Elab.Tactic.RCases.processConstructors","line":223,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.processConstructors","doc":"Takes a list of constructor names, and an (alternation) list of patterns, and matches each\npattern against its constructor. It returns the list of names that will be passed to `cases`,\nand the list of `(constructor name, patterns)` for each constructor, where `patterns` is the\n(conjunctive) list of patterns to apply to each constructor argument.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.processConstructors\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">processConstructors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altVarNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.AltVarNames\">Meta.AltVarNames</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.AltVarNames\">Meta.AltVarNames</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L199-L221","name":"Lean.Elab.Tactic.RCases.processConstructor","line":199,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.processConstructor","doc":"Takes the number of fields of a single constructor and patterns to match its fields against\n(not necessarily the same number). The returned lists each contain one element per field of the\nconstructor. The `name` is the name which will be used in the top-level `cases` tactic, and the\n`rcases_patt` is the pattern which the field will be matched against by subsequent `cases`\ntactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.processConstructor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">processConstructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo\">Meta.ParamInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L188-L195","name":"Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.fmt","line":188,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.fmt","doc":"format an `RCasesPatt` with the given precedence: 0 = lo, 1 = med, 2 = hi "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.fmt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">instToMessageData</span>.<span class=\"name\">fmt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L185-L186","name":"Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.parenAbove","line":185,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.parenAbove","doc":"parenthesize the message if the precedence is above `tgt` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.parenAbove\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">instToMessageData</span>.<span class=\"name\">parenAbove</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tgt </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L183-L195","name":"Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData","line":183,"kind":"instance","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L170-L180","name":"Lean.Elab.Tactic.RCases.RCasesPatt.alts₁","line":170,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts₁","doc":"This function is used for producing rcases patterns based on a case tree. This is like\n`alts₁Core`, but it produces a cases pattern directly instead of a list of alternatives. We\nspecially translate the empty alternation to `⟨⟩`, and translate `|(a | b)` to `⟨a | b⟩` (because we\ndon't have any syntax for unary alternation). Otherwise we can use the regular merging of\nalternations at the last argument so that `a | b | (c | d)` becomes `a | b | c | d`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts₁\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">alts₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L158-L168","name":"Lean.Elab.Tactic.RCases.RCasesPatt.alts₁Core","line":158,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts₁Core","doc":"This function is used for producing rcases patterns based on a case tree. Here we are given\nthe list of patterns to apply to each argument of each constructor after the main case, and must\nproduce a list of alternatives with the same effect. This function calls `tuple₁` to make the\nindividual alternatives, and handles merging `[a, b, c | d]` to `a | b | c | d` instead of\n`a | b | (c | d)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts₁Core\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">alts₁Core</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L148-L156","name":"Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁","line":148,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁","doc":"This function is used for producing rcases patterns based on a case tree. This is like\n`tuple₁Core` but it produces a pattern instead of a tuple pattern list, converting `[n]` to `n`\ninstead of `⟨n⟩` and `[]` to `_`, and otherwise just converting `[a, b, c]` to `⟨a, b, c⟩`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">tuple₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L133-L146","name":"Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁Core","line":133,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁Core","doc":"This function is used for producing rcases patterns based on a case tree. Suppose that we have\na list of patterns `ps` that will match correctly against the branches of the case tree for one\nconstructor. This function will merge tuples at the end of the list, so that `[a, b, ⟨c, d⟩]`\nbecomes `⟨a, b, c, d⟩` instead of `⟨a, b, ⟨c, d⟩⟩`.\n\nWe must be careful to turn `[a, ⟨⟩]` into `⟨a, ⟨⟩⟩` instead of `⟨a⟩` (which will not perform the\nnested match).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁Core\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">tuple₁Core</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L125-L131","name":"Lean.Elab.Tactic.RCases.RCasesPatt.alts'","line":125,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts'","doc":"Convert a list of patterns to an alternation pattern, but mapping `[p]` to `p` instead of\na unary alternation `|p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">alts'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L120-L123","name":"Lean.Elab.Tactic.RCases.RCasesPatt.tuple'","line":120,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple'","doc":"Convert a list of patterns to a tuple pattern, but mapping `[p]` to `p` instead of `⟨p⟩`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">tuple'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L115-L118","name":"Lean.Elab.Tactic.RCases.RCasesPatt.typed?","line":115,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.typed?","doc":"Convert a list of patterns to a tuple pattern, but mapping `[p]` to `p` instead of `⟨p⟩`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.typed?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">typed?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L106-L113","name":"Lean.Elab.Tactic.RCases.RCasesPatt.asAlts","line":106,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.asAlts","doc":"Interpret an rcases pattern as an alternation, where non-alternations are treated as one\nalternative.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.asAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">asAlts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L97-L104","name":"Lean.Elab.Tactic.RCases.RCasesPatt.asTuple","line":97,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.asTuple","doc":"Interpret an rcases pattern as a tuple, where `p` becomes `⟨p⟩` if `p` is not already a tuple.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.asTuple\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">asTuple</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L87-L95","name":"Lean.Elab.Tactic.RCases.RCasesPatt.ref","line":87,"kind":"def","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.ref","doc":"Get the syntax node from which this pattern was parsed. Used for error messages "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L77-L85","name":"Lean.Elab.Tactic.RCases.RCasesPatt.name?","line":77,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.name?","doc":"Get the name from a pattern, if provided "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.name?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">name?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L75-L75","name":"Lean.Elab.Tactic.RCases.RCasesPatt.instInhabited","line":75,"kind":"instance","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L71-L71","name":"Lean.Elab.Tactic.RCases.instReprRCasesPatt","line":71,"kind":"instance","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instReprRCasesPatt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instReprRCasesPatt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instReprRCasesPatt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L69-L70","name":"Lean.Elab.Tactic.RCases.RCasesPatt.alts","line":69,"kind":"ctor","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts","doc":"An alternation / variant pattern `p1 | p2 | p3` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">alts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L67-L68","name":"Lean.Elab.Tactic.RCases.RCasesPatt.tuple","line":67,"kind":"ctor","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple","doc":"A tuple constructor like `⟨p1, p2, p3⟩` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">tuple</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L65-L66","name":"Lean.Elab.Tactic.RCases.RCasesPatt.typed","line":65,"kind":"ctor","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.typed","doc":"A type ascription like `pat : ty` (parentheses are optional) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.typed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">typed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L63-L64","name":"Lean.Elab.Tactic.RCases.RCasesPatt.explicit","line":63,"kind":"ctor","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.explicit","doc":"An explicit pattern `@pat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.explicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">explicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L61-L62","name":"Lean.Elab.Tactic.RCases.RCasesPatt.clear","line":61,"kind":"ctor","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.clear","doc":"A hyphen `-`, which clears the active hypothesis and any dependents. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.clear\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">clear</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L59-L60","name":"Lean.Elab.Tactic.RCases.RCasesPatt.one","line":59,"kind":"ctor","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.one","doc":"A named pattern like `foo` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.one\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L57-L58","name":"Lean.Elab.Tactic.RCases.RCasesPatt.paren","line":57,"kind":"ctor","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.paren","doc":"A parenthesized expression, used for hovers "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.paren\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">paren</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L36-L71","name":"Lean.Elab.Tactic.RCases.RCasesPatt","line":36,"kind":"inductive","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt","doc":"An `rcases` pattern can be one of the following, in a nested combination:\n\n* A name like `foo`\n* The special keyword `rfl` (for pattern matching on equality using `subst`)\n* A hyphen `-`, which clears the active hypothesis and any dependents.\n* A type ascription like `pat : ty` (parentheses are optional)\n* A tuple constructor like `⟨p1, p2, p3⟩`\n* An alternation / variant pattern `p1 | p2 | p3`\n\nParentheses can be used for grouping; alternation is higher precedence than type ascription, so\n`p1 | p2 | p3 : ty` means `(p1 | p2 | p3) : ty`.\n\nN-ary alternations are treated as a group, so `p1 | p2 | p3` is not the same as `p1 | (p2 | p3)`,\nand similarly for tuples. However, note that an n-ary alternation or tuple can match an n-ary\nconjunction or disjunction, because if the number of patterns exceeds the number of constructors in\nthe type being destructed, the extra patterns will match on the last element, meaning that\n`p1 | p2 | p3` will act like `p1 | (p2 | p3)` when matching `a1 ∨ a2 ∨ a3`. If matching against a\ntype with 3 constructors,  `p1 | (p2 | p3)` will act like `p1 | (p2 | p3) | _` instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L27-L28","name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","line":27,"kind":"instance","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>) (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rintroPat</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L25-L26","name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean","line":25,"kind":"instance","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.rcasesPatMed</span>) (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.rcasesPatLo</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L23-L24","name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean","line":23,"kind":"instance","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>) (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.rcasesPatMed</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L21-L22","name":"Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","line":21,"kind":"instance","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/Tactic/RCases.lean#L12-L19","name":"Lean.Elab.Tactic.RCases.linter.unusedRCasesPattern","line":12,"kind":"opaque","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.linter.unusedRCasesPattern","doc":"Enables the 'unused rcases pattern' linter. This will warn when a pattern is ignored by\n`rcases`, `rintro`, `ext` and similar tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.linter.unusedRCasesPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">linter</span>.<span class=\"name\">unusedRCasesPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}