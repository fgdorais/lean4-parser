{"name":"Lean.Environment","instances":[{"typeNames":["Lean.EnvExtensionState"],"name":"Lean.instInhabitedEnvExtensionState","className":"Inhabited"},{"typeNames":["Lean.ModuleIdx"],"name":"Lean.instModuleIdxBEq","className":"BEq"},{"typeNames":["Lean.ModuleIdx"],"name":"Lean.instModuleIdxToString","className":"ToString"},{"typeNames":["Lean.ModuleIdx"],"name":"Lean.instInhabitedModuleIdx","className":"Inhabited"},{"typeNames":["Array","Lean.ModuleIdx"],"name":"Lean.instGetElemArrayModuleIdxLtNatToNatSize","className":"GetElem"},{"typeNames":["Array","Lean.ModuleIdx"],"name":"Lean.instGetElem?ArrayModuleIdxLtNatToNatSize","className":"GetElem?"},{"typeNames":["Lean.Import"],"name":"Lean.instReprImport","className":"Repr"},{"typeNames":["Lean.Import"],"name":"Lean.instInhabitedImport","className":"Inhabited"},{"typeNames":["Lean.Name","Lean.Import"],"name":"Lean.instCoeNameImport","className":"Coe"},{"typeNames":["Lean.Import"],"name":"Lean.instToStringImport","className":"ToString"},{"typeNames":["Lean.EnvExtensionEntry"],"name":"Lean.instNonemptyEnvExtensionEntry","className":"Nonempty"},{"typeNames":["Lean.ModuleData"],"name":"Lean.instInhabitedModuleData","className":"Inhabited"},{"typeNames":["Lean.EnvironmentHeader"],"name":"Lean.instNonemptyEnvironmentHeader","className":"Nonempty"},{"typeNames":["Lean.Kernel.Diagnostics"],"name":"Lean.Kernel.instInhabitedDiagnostics","className":"Inhabited"},{"typeNames":["Lean.Kernel.Environment"],"name":"Lean.Kernel.instNonemptyEnvironment","className":"Nonempty"},{"typeNames":["Lean.Kernel.Exception"],"name":"Lean.Kernel.instNonemptyException","className":"Nonempty"},{"typeNames":["Lean.ConstantKind"],"name":"Lean.instInhabitedConstantKind","className":"Inhabited"},{"typeNames":["Lean.ConstantKind"],"name":"Lean.instBEqConstantKind","className":"BEq"},{"typeNames":["Lean.ConstantKind"],"name":"Lean.instReprConstantKind","className":"Repr"},{"typeNames":["Lean.AsyncConstantInfo"],"name":"Lean.instInhabitedAsyncConstantInfo","className":"Inhabited"},{"typeNames":["_private.Lean.Environment.0.Lean.AsyncContext"],"name":"Lean.instNonemptyAsyncContext","className":"Nonempty"},{"typeNames":["_private.Lean.Environment.0.Lean.AsyncConsts"],"name":"Lean.instInhabitedAsyncConsts","className":"Inhabited"},{"typeNames":["_private.Lean.Environment.0.Lean.AsyncConsts"],"name":"Lean.instTypeNameAsyncConsts","className":"TypeName"},{"typeNames":["_private.Lean.Environment.0.Lean.VisibilityMap"],"name":"Lean.instInhabitedVisibilityMap","className":"Inhabited"},{"typeNames":["_private.Lean.Environment.0.Lean.VisibilityMap"],"name":"Lean.instNonemptyVisibilityMap","className":"Nonempty"},{"typeNames":["_private.Lean.Environment.0.Lean.RealizationResult"],"name":"Lean.instNonemptyRealizationResult","className":"Nonempty"},{"typeNames":["Lean.Environment"],"name":"Lean.instNonemptyEnvironment","className":"Nonempty"},{"typeNames":["_private.Lean.Environment.0.Lean.Environment.ConstPromiseVal"],"name":"Lean.Environment.instNonemptyConstPromiseVal","className":"Nonempty"},{"typeNames":["Lean.EnvExtension.AsyncMode"],"name":"Lean.EnvExtension.instInhabitedAsyncMode","className":"Inhabited"},{"typeNames":["Lean.EnvExtension"],"name":"Lean.instInhabitedEnvExtension","className":"Inhabited"},{"typeNames":["Lean.PersistentEnvExtensionState"],"name":"Lean.instInhabitedPersistentEnvExtensionState","className":"Inhabited"},{"typeNames":["Lean.PersistentEnvExtension"],"name":"Lean.instInhabitedPersistentEnvExtension","className":"Inhabited"},{"typeNames":["Eq"],"name":"Lean.instDecidableEqOLeanLevel","className":"Decidable"},{"typeNames":[],"name":"Lean.instMonadEnvOfMonadLift","className":"Lean.MonadEnv"}],"imports":["Init.Control.StateRef","Init.Data.Array.BinSearch","Init.Data.Stream","Init.System.Promise","Lean.ImportingFlag","Lean.Data.NameTrie","Lean.Data.SMap","Lean.Declaration","Lean.LocalContext","Lean.Util.Path","Lean.Util.FindExpr","Lean.Util.Profile","Lean.Util.InstantiateLevelParams","Lean.Util.FoldConsts","Lean.PrivateName","Lean.LoadDynlib","Init.Dynamic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2338-L2345","name":"Lean.getMaxHeight","line":2338,"kind":"def","docLink":"./Lean/Environment.html#Lean.getMaxHeight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.getMaxHeight\"><span class=\"name\">Lean</span>.<span class=\"name\">getMaxHeight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2331-L2336","name":"Lean.mkDefinitionValInferrringUnsafe","line":2331,"kind":"def","docLink":"./Lean/Environment.html#Lean.mkDefinitionValInferrringUnsafe","doc":"Constructs a DefinitionVal, inferring the `unsafe` field "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.mkDefinitionValInferrringUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">mkDefinitionValInferrringUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hints</span> : <a href=\"./Lean/Declaration.html#Lean.ReducibilityHints\">ReducibilityHints</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Declaration.html#Lean.DefinitionVal\">DefinitionVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2327-L2329","name":"Lean.withoutExporting","line":2327,"kind":"def","docLink":"./Lean/Environment.html#Lean.withoutExporting","doc":"Sets `Environment.isExporting` to false while executing `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.withoutExporting\"><span class=\"name\">Lean</span>.<span class=\"name\">withoutExporting</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2312-L2325","name":"Lean.withExporting","line":2312,"kind":"def","docLink":"./Lean/Environment.html#Lean.withExporting","doc":"Sets `Environment.isExporting` to the given value while executing `x`. No-op if\n`EnvironmentHeader.isModule` is false.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.withExporting\"><span class=\"name\">Lean</span>.<span class=\"name\">withExporting</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isExporting</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2307-L2310","name":"Lean.instMonadEnvOfMonadLift","line":2307,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instMonadEnvOfMonadLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instMonadEnvOfMonadLift\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadEnvOfMonadLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2303-L2303","name":"Lean.MonadEnv.modifyEnv","line":2303,"kind":"def","docLink":"./Lean/Environment.html#Lean.MonadEnv.modifyEnv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.MonadEnv.modifyEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadEnv</span>.<span class=\"name\">modifyEnv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a> → <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2302-L2302","name":"Lean.MonadEnv.getEnv","line":2302,"kind":"def","docLink":"./Lean/Environment.html#Lean.MonadEnv.getEnv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.MonadEnv.getEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadEnv</span>.<span class=\"name\">getEnv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2301-L2301","name":"Lean.MonadEnv.mk","line":2301,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.MonadEnv.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.MonadEnv.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadEnv</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getEnv</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifyEnv</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a> → <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2301-L2303","name":"Lean.MonadEnv","line":2301,"kind":"class","docLink":"./Lean/Environment.html#Lean.MonadEnv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.MonadEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadEnv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2290-L2297","name":"Lean.Kernel.check","line":2290,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.Kernel.check","doc":"Kernel typecheck function. We use it mainly for debugging purposes.\nRecall that the Kernel type checker does not support metavariables.\nWhen implementing automation, consider using the `MetaM` methods. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2281-L2288","name":"Lean.Kernel.whnf","line":2281,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.Kernel.whnf","doc":"Kernel WHNF function. We use it mainly for debugging purposes.\nRecall that the kernel type checker does not support metavariables.\nWhen implementing automation, consider using the `MetaM` methods. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.whnf\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">whnf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2278-L2279","name":"Lean.Kernel.isDefEqGuarded","line":2278,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.isDefEqGuarded","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.isDefEqGuarded\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">isDefEqGuarded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2269-L2276","name":"Lean.Kernel.isDefEq","line":2269,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.Kernel.isDefEq","doc":"Kernel isDefEq predicate. We use it mainly for debugging purposes.\nRecall that the kernel type checker does not support metavariables.\nWhen implementing automation, consider using the `MetaM` methods. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.isDefEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">isDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2173-L2262","name":"Lean.Environment.realizeConst","line":2173,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.realizeConst","doc":"Plumbing function for `Lean.Meta.realizeConst`; see documentation there. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.realizeConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">realizeConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forConst </span><span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">realize</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a> → <span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> (<a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Kernel.Exception</a>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2164-L2171","name":"Lean.Environment.hasUnsafe","line":2164,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.hasUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.hasUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">hasUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2152-L2162","name":"Lean.Environment.evalConstCheck","line":2152,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.evalConstCheck","doc":"Like `evalConst`, but first check that `constName` indeed is a declaration of type `typeName`.\nNote that this function cannot guarantee that `typeName` is in fact the name of the type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.evalConstCheck\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">evalConstCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeName </span><span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2116-L2150","name":"Lean.Environment.replayConsts.replayKernel","line":2116,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.replayConsts.replayKernel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.replayConsts.replayKernel\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">replayConsts</span>.<span class=\"name\">replayKernel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldEnv </span><span class=\"fn\">newEnv</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skipExisting</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionState\">EnvExtensionState</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">consts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.AsyncConst\">Lean.AsyncConst✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kenv</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Kernel.Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Kernel.Exception</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Kernel.Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2087-L2150","name":"Lean.Environment.replayConsts","line":2087,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.replayConsts","doc":"Replays the difference between `newEnv` and `oldEnv` onto `dest`: the set of constants in `newEnv`\nbut not `oldEnv` and the environment extension state for extensions defining `replay?`. If\n`skipExisting` is true, constants that are already in `dest` are not added. If `newEnv` and `dest`\nare not derived from `oldEnv`, the result is undefined.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.replayConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">replayConsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dest </span><span class=\"fn\">oldEnv </span><span class=\"fn\">newEnv</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skipExisting</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2077-L2082","name":"Lean.Environment.evalConst","line":2077,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.Environment.evalConst","doc":"Evaluate the given declaration under the given environment to a value of the given type.\nThis function is only safe to use if the type matches the declaration's type in the environment\nand if `enableInitializersExecution` has been used before importing any modules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.evalConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">evalConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2058-L2075","name":"Lean.Environment.displayStats","line":2058,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.displayStats","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.displayStats\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">displayStats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2036-L2037","name":"Lean.Kernel.setDiagnostics","line":2036,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.setDiagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.setDiagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">setDiagnostics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diag</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2033-L2034","name":"Lean.Kernel.getDiagnostics","line":2033,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.getDiagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.getDiagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">getDiagnostics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2030-L2031","name":"Lean.Kernel.resetDiag","line":2030,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.resetDiag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.resetDiag\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">resetDiag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2027-L2028","name":"Lean.Kernel.isDiagnosticsEnabled","line":2027,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.isDiagnosticsEnabled","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.isDiagnosticsEnabled\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">isDiagnosticsEnabled</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2023-L2025","name":"Lean.Kernel.enableDiag","line":2023,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.enableDiag","doc":"Enables/disables kernel diagnostics. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.enableDiag\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">enableDiag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">flag</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L2012-L2021","name":"Lean.withImportModules","line":2012,"kind":"def","docLink":"./Lean/Environment.html#Lean.withImportModules","doc":"Creates environment object from imports and frees compacted regions after calling `act`. No live\nreferences to the environment object or imported objects may exist after `act` finishes. As this\ncannot be ruled out after loading environment extensions, `importModules`'s `loadExts` is always\nunset using this function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.withImportModules\"><span class=\"name\">Lean</span>.<span class=\"name\">withImportModules</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trustLevel</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1981-L2010","name":"Lean.importModules","line":1981,"kind":"def","docLink":"./Lean/Environment.html#Lean.importModules","doc":"Creates environment object from given imports.\n\nIf `leakEnv` is true, we mark the environment as persistent, which means it will not be freed. We\nset this when the object would survive until the end of the process anyway. In exchange, RC updates\nare avoided, which is especially important when they would be atomic because the environment is\nshared across threads (potentially, storing it in an `IO.Ref` is sufficient for marking it as such).\n\nIf `loadExts` is true, we initialize the environment extensions using the imported data. Doing so\nmay use the interpreter and thus is only safe to do after calling `enableInitializersExecution`; see\nalso caveats there. If not set, every extension will have its initial value as its state. While the\nenvironment's constant map can be accessed without `loadExts`, many functions that take\n`Environment` or are in a monad carrying it such as `CoreM` may not function properly without it.\n\nIf `level` is `exported`, the module to be elaborated is assumed to be participating in the module\nsystem and imports will be restricted accordingly. If it is `server`, the data for\n`getModuleEntries (includeServer := true)` is loaded as well. If it is `private`, all data is loaded\nas if no `module` annotations were present in the imports.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.importModules\"><span class=\"name\">Lean</span>.<span class=\"name\">importModules</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trustLevel</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">plugins</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leakEnv </span><span class=\"fn\">loadExts</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">level</span> : <a href=\"./Lean/Environment.html#Lean.OLeanLevel\">OLeanLevel</a> := <a href=\"./Lean/Environment.html#Lean.OLeanLevel.private\">OLeanLevel.private</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1877-L1979","name":"Lean.finalizeImport","line":1877,"kind":"def","docLink":"./Lean/Environment.html#Lean.finalizeImport","doc":"Constructs environment from `importModulesCore` results.\n\nSee also `importModules` for parameter documentation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.finalizeImport\"><span class=\"name\">Lean</span>.<span class=\"name\">finalizeImport</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Environment.html#Lean.ImportState\">ImportState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trustLevel</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leakEnv </span><span class=\"fn\">loadExts</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">level</span> : <a href=\"./Lean/Environment.html#Lean.OLeanLevel\">OLeanLevel</a> := <a href=\"./Lean/Environment.html#Lean.OLeanLevel.private\">OLeanLevel.private</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1803-L1845","name":"Lean.importModulesCore.go","line":1803,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.importModulesCore.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.importModulesCore.go\"><span class=\"name\">Lean</span>.<span class=\"name\">importModulesCore</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forceImportAll</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportStateM\">ImportStateM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1801-L1845","name":"Lean.importModulesCore","line":1801,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.importModulesCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.importModulesCore\"><span class=\"name\">Lean</span>.<span class=\"name\">importModulesCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forceImportAll</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportStateM\">ImportStateM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1798-L1799","name":"Lean.ImportStateM.run","line":1798,"kind":"def","docLink":"./Lean/Environment.html#Lean.ImportStateM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ImportStateM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportStateM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportStateM\">ImportStateM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Environment.html#Lean.ImportState\">ImportState</a> := <a href=\"./Lean/Environment.html#Lean.ImportState.mk\">{</a> <a href=\"./Lean/Environment.html#Lean.ImportState.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Environment.html#Lean.ImportState\">ImportState</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1796-L1796","name":"Lean.ImportStateM","line":1796,"kind":"def","docLink":"./Lean/Environment.html#Lean.ImportStateM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ImportStateM\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportStateM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1791-L1794","name":"Lean.throwAlreadyImported","line":1791,"kind":"def","docLink":"./Lean/Environment.html#Lean.throwAlreadyImported","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.throwAlreadyImported\"><span class=\"name\">Lean</span>.<span class=\"name\">throwAlreadyImported</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Environment.html#Lean.ImportState\">ImportState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">const2ModIdx</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cname</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1787-L1787","name":"Lean.ImportState.mk","line":1787,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ImportState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ImportState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleNameMap</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.ImportedModule\">Lean.ImportedModule✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ImportState\">ImportState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1787-L1789","name":"Lean.ImportState","line":1787,"kind":"structure","docLink":"./Lean/Environment.html#Lean.ImportState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ImportState\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1733-L1734","name":"Lean.getNumBuiltinAttributes","line":1733,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.getNumBuiltinAttributes","doc":"\"Forward declaration\" for retrieving the number of builtin attributes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.getNumBuiltinAttributes\"><span class=\"name\">Lean</span>.<span class=\"name\">getNumBuiltinAttributes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1723-L1732","name":"Lean.updateEnvAttributes","line":1723,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.updateEnvAttributes","doc":"\"Forward declaration\" needed for updating the attribute table with user-defined attributes.\nUser-defined attributes are declared using the `initialize` command. The `initialize` command is just syntax sugar for the `init` attribute.\nThe `init` attribute is initialized after the `attributeExtension` is initialized. We cannot change the order since the `init` attribute is an attribute,\nand requires this extension.\nThe `attributeExtension` initializer uses `attributeMapRef` to initialize the attribute mapping.\nWhen we a new user-defined attribute declaration is imported, `attributeMapRef` is updated.\nLater, we set this method with code that adds the user-defined attributes that were imported after we initialized `attributeExtension`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.updateEnvAttributes\"><span class=\"name\">Lean</span>.<span class=\"name\">updateEnvAttributes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1691-L1701","name":"Lean.mkExtNameMap","line":1691,"kind":"def","docLink":"./Lean/Environment.html#Lean.mkExtNameMap","doc":"Construct a mapping from persistent extension name to extension index at the array of persistent extensions.\nWe only consider extensions starting with index `>= startingAt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.mkExtNameMap\"><span class=\"name\">Lean</span>.<span class=\"name\">mkExtNameMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startingAt</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1680-L1689","name":"Lean.writeModule","line":1680,"kind":"def","docLink":"./Lean/Environment.html#Lean.writeModule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.writeModule\"><span class=\"name\">Lean</span>.<span class=\"name\">writeModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fname</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1654-L1678","name":"Lean.mkModuleData","line":1654,"kind":"def","docLink":"./Lean/Environment.html#Lean.mkModuleData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.mkModuleData\"><span class=\"name\">Lean</span>.<span class=\"name\">mkModuleData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">level</span> : <a href=\"./Lean/Environment.html#Lean.OLeanLevel\">OLeanLevel</a> := <a href=\"./Lean/Environment.html#Lean.OLeanLevel.private\">OLeanLevel.private</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1645-L1648","name":"Lean.OLeanLevel.adjustFileName","line":1645,"kind":"def","docLink":"./Lean/Environment.html#Lean.OLeanLevel.adjustFileName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.OLeanLevel.adjustFileName\"><span class=\"name\">Lean</span>.<span class=\"name\">OLeanLevel</span>.<span class=\"name\">adjustFileName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">base</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.OLeanLevel\">OLeanLevel</a> → <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1643-L1643","name":"Lean.instDecidableEqOLeanLevel","line":1643,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instDecidableEqOLeanLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instDecidableEqOLeanLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">instDecidableEqOLeanLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Environment.html#Lean.OLeanLevel\">OLeanLevel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1641-L1642","name":"Lean.OLeanLevel.private","line":1641,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.OLeanLevel.private","doc":"Private module data. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.OLeanLevel.private\"><span class=\"name\">Lean</span>.<span class=\"name\">OLeanLevel</span>.<span class=\"name\">private</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.OLeanLevel\">OLeanLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1639-L1640","name":"Lean.OLeanLevel.server","line":1639,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.OLeanLevel.server","doc":"Environment extension state for the language server. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.OLeanLevel.server\"><span class=\"name\">Lean</span>.<span class=\"name\">OLeanLevel</span>.<span class=\"name\">server</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.OLeanLevel\">OLeanLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1637-L1638","name":"Lean.OLeanLevel.exported","line":1637,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.OLeanLevel.exported","doc":"Information from exported contexts. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.OLeanLevel.exported\"><span class=\"name\">Lean</span>.<span class=\"name\">OLeanLevel</span>.<span class=\"name\">exported</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.OLeanLevel\">OLeanLevel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1635-L1643","name":"Lean.OLeanLevel","line":1635,"kind":"inductive","docLink":"./Lean/Environment.html#Lean.OLeanLevel","doc":"The level of information to save/load. Each level includes all previous ones. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.OLeanLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">OLeanLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1613-L1633","name":"Lean.Environment.freeRegions","line":1613,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.freeRegions","doc":"Free compacted regions of imports. No live references to imported objects may exist at the time of invocation; in\nparticular, `env` should be the last reference to any `Environment` derived from these imports. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.freeRegions\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">freeRegions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1607-L1611","name":"Lean.readModuleData","line":1607,"kind":"def","docLink":"./Lean/Environment.html#Lean.readModuleData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.readModuleData\"><span class=\"name\">Lean</span>.<span class=\"name\">readModuleData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fname</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> (<a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Environment.html#Lean.CompactedRegion\">CompactedRegion</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1604-L1605","name":"Lean.saveModuleData","line":1604,"kind":"def","docLink":"./Lean/Environment.html#Lean.saveModuleData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.saveModuleData\"><span class=\"name\">Lean</span>.<span class=\"name\">saveModuleData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fname</span> : <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mod</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1597-L1602","name":"Lean.readModuleDataParts","line":1597,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.readModuleDataParts","doc":"Loads the module data from the given file names. The files must be (a prefix of) the result of a\n`saveModuleDataParts` call.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.readModuleDataParts\"><span class=\"name\">Lean</span>.<span class=\"name\">readModuleDataParts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fnames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Environment.html#Lean.CompactedRegion\">CompactedRegion</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1588-L1595","name":"Lean.saveModuleDataParts","line":1588,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.saveModuleDataParts","doc":"Stores each given module data in the respective file name. Objects shared with prior parts are not\nduplicated. Thus the data cannot be loaded with individual `readModuleData` calls but must loaded by\npassing (a prefix of) the file names to `readModuleDataParts`. `mod` is used to determine an\narbitrary but deterministic base address for `mmap`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.saveModuleDataParts\"><span class=\"name\">Lean</span>.<span class=\"name\">saveModuleDataParts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mod</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/System/FilePath.html#System.FilePath\">System.FilePath</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1585-L1586","name":"Lean.registerPersistentEnvExtension","line":1585,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.registerPersistentEnvExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.registerPersistentEnvExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">registerPersistentEnvExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">descr</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1561-L1583","name":"Lean.registerPersistentEnvExtensionUnsafe","line":1561,"kind":"def","docLink":"./Lean/Environment.html#Lean.registerPersistentEnvExtensionUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.registerPersistentEnvExtensionUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">registerPersistentEnvExtensionUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">descr</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1556-L1556","name":"Lean.PersistentEnvExtensionDescr.replay?","line":1556,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.replay?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.replay?\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span>.<span class=\"name\">replay?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.ReplayFn\">ReplayFn</a> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1555-L1555","name":"Lean.PersistentEnvExtensionDescr.asyncMode","line":1555,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.asyncMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.asyncMode\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span>.<span class=\"name\">asyncMode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">EnvExtension.AsyncMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1554-L1554","name":"Lean.PersistentEnvExtensionDescr.statsFn","line":1554,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.statsFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.statsFn\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span>.<span class=\"name\">statsFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1553-L1553","name":"Lean.PersistentEnvExtensionDescr.saveEntriesFn","line":1553,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.saveEntriesFn","doc":"Function to transform state into data that should be imported into other modules when the module\nsystem is disabled. When it is enabled, the data is loaded only in the language server and\naccessible via `getModuleEntries (includeServer := true)`. Conventionally, this is a superset of\nthe data returned by `exportEntriesFn`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.saveEntriesFn\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span>.<span class=\"name\">saveEntriesFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1552-L1552","name":"Lean.PersistentEnvExtensionDescr.exportEntriesFn","line":1552,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.exportEntriesFn","doc":"Function to transform state into data that should always be imported into other modules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.exportEntriesFn\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span>.<span class=\"name\">exportEntriesFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1551-L1551","name":"Lean.PersistentEnvExtensionDescr.addEntryFn","line":1551,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.addEntryFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.addEntryFn\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span>.<span class=\"name\">addEntryFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1550-L1550","name":"Lean.PersistentEnvExtensionDescr.addImportedFn","line":1550,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.addImportedFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.addImportedFn\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span>.<span class=\"name\">addImportedFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">ImportM</a> <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1549-L1549","name":"Lean.PersistentEnvExtensionDescr.mkInitial","line":1549,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.mkInitial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.mkInitial\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span>.<span class=\"name\">mkInitial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1548-L1548","name":"Lean.PersistentEnvExtensionDescr.name","line":1548,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.name\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span>.<span class=\"name\">name</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1547-L1547","name":"Lean.PersistentEnvExtensionDescr.mk","line":1547,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkInitial</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addImportedFn</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">ImportM</a> <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addEntryFn</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exportEntriesFn </span><span class=\"fn\">saveEntriesFn</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">statsFn</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncMode</span> : <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">EnvExtension.AsyncMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">replay?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.ReplayFn\">ReplayFn</a> <span class=\"fn\">σ</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\">PersistentEnvExtensionDescr</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1547-L1556","name":"Lean.PersistentEnvExtensionDescr","line":1547,"kind":"structure","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionDescr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1545-L1545","name":"Lean.persistentEnvExtensionsRef","line":1545,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.persistentEnvExtensionsRef","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.persistentEnvExtensionsRef\"><span class=\"name\">Lean</span>.<span class=\"name\">persistentEnvExtensionsRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionEntry\">EnvExtensionEntry</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionEntry\">EnvExtensionEntry</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionState\">EnvExtensionState</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1537-L1540","name":"Lean.PersistentEnvExtension.findStateAsync","line":1537,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.findStateAsync","doc":"Returns the final extension state on the environment branch corresponding to the passed declaration\nname, if any, or otherwise the state on the current branch. In other words, at most one environment\nbranch will be blocked on.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.findStateAsync\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">findStateAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declPrefix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1532-L1535","name":"Lean.PersistentEnvExtension.modifyState","line":1532,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.modifyState","doc":"Modify the state of the given extension in the given environment by applying the given function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.modifyState\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">modifyState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncMode</span> : <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">EnvExtension.AsyncMode</a> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ext</span>.<a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.toEnvExtension\">toEnvExtension</a></span>.<a href=\"./Lean/Environment.html#Lean.EnvExtension.asyncMode\">asyncMode</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1528-L1530","name":"Lean.PersistentEnvExtension.setState","line":1528,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.setState","doc":"Set the current state of the given extension in the given environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.setState\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">setState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1523-L1526","name":"Lean.PersistentEnvExtension.getState","line":1523,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.getState","doc":"Get the current state of the given extension in the given environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.getState\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">getState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncMode</span> : <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">EnvExtension.AsyncMode</a> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ext</span>.<a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.toEnvExtension\">toEnvExtension</a></span>.<a href=\"./Lean/Environment.html#Lean.EnvExtension.asyncMode\">asyncMode</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1518-L1521","name":"Lean.PersistentEnvExtension.addEntry","line":1518,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.addEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.addEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">addEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1508-L1516","name":"Lean.PersistentEnvExtension.getModuleEntries","line":1508,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.getModuleEntries","doc":"Returns the data saved by `ext.exportEntriesFn/saveEntriesFn` when `m` was elaborated. See docs on\nthe functions for details.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.getModuleEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">getModuleEntries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includeServer</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1495-L1504","name":"Lean.instInhabitedPersistentEnvExtension","line":1495,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedPersistentEnvExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedPersistentEnvExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedPersistentEnvExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1492-L1493","name":"Lean.instInhabitedPersistentEnvExtensionState","line":1492,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedPersistentEnvExtensionState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedPersistentEnvExtensionState\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedPersistentEnvExtensionState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionState\">PersistentEnvExtensionState</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1490-L1490","name":"Lean.PersistentEnvExtension.statsFn","line":1490,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.statsFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.statsFn\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">statsFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1489-L1489","name":"Lean.PersistentEnvExtension.saveEntriesFn","line":1489,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.saveEntriesFn","doc":"Function to transform state into data that should be imported into other modules when the module\nsystem is disabled. When it is enabled, the data is loaded only in the language server and\naccessible via `getModuleEntries (includeServer := true)`. Conventionally, this is a superset of\nthe data returned by `exportEntriesFn`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.saveEntriesFn\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">saveEntriesFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1482-L1482","name":"Lean.PersistentEnvExtension.exportEntriesFn","line":1482,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.exportEntriesFn","doc":"Function to transform state into data that should always be imported into other modules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.exportEntriesFn\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">exportEntriesFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1480-L1480","name":"Lean.PersistentEnvExtension.addEntryFn","line":1480,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.addEntryFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.addEntryFn\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">addEntryFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1479-L1479","name":"Lean.PersistentEnvExtension.addImportedFn","line":1479,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.addImportedFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.addImportedFn\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">addImportedFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">ImportM</a> <span class=\"fn\">σ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1478-L1478","name":"Lean.PersistentEnvExtension.name","line":1478,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.name\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">name</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1477-L1477","name":"Lean.PersistentEnvExtension.toEnvExtension","line":1477,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.toEnvExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.toEnvExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">toEnvExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionState\">PersistentEnvExtensionState</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1476-L1476","name":"Lean.PersistentEnvExtension.mk","line":1476,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toEnvExtension</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionState\">PersistentEnvExtensionState</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addImportedFn</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">ImportM</a> <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addEntryFn</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exportEntriesFn </span><span class=\"fn\">saveEntriesFn</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">statsFn</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1431-L1490","name":"Lean.PersistentEnvExtension","line":1431,"kind":"structure","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtension","doc":"An environment extension with support for storing/retrieving entries from a .olean file.\n - α is the type of the entries that are stored in .olean files.\n - β is the type of values used to update the state.\n - σ is the actual state.\n\nFor most extensions, α and β coincide. `α` and ‵β` do not coincide for extensions where the data\nused to update the state contains elements which cannot be stored in files (for example, closures).\n\nDuring elaboration of a module, state of type `σ` can be both read and written. When elaboration is\ncomplete, the state of type `σ` is converted to serialized state of type `Array α` by\n`exportEntriesFn`. To read the current module's state, use `PersistentEnvExtension.getState`. To\nmodify it, use `PersistentEnvExtension.addEntry`, with an `addEntryFn` that performs the appropriate\nmodification.\n\nWhen a module is loaded, the values saved by all of its dependencies for this\n`PersistentEnvExtension` are available as an `Array (Array α)` via the environment extension,\nwith one array per transitively imported module. The state of type `σ` used in the current module\ncan be initialized from these imports by specifying a suitable `addImportedFn`. The `addImportedFn`\nruns at the beginning of elaboration for every module, so it's usually better for performance to\nquery the array of imported modules directly, because only a fraction of imported entries is usually\nqueried during elaboration of a module.\n\nThe most typical pattern for using `PersistentEnvExtension` is to set `σ` to a datatype such as\n`NameMap` that efficiently tracks data for the current module. Then, in `exportEntriesFn`, this type\nis converted to an array of pairs, sorted by the key. Given `ext : PersistentEnvExtension α β σ` and\n`env : Environment`, the complete array of imported entries sorted by module index can be obtained\nusing `(ext.toEnvExtension.getState env).importedEntries`. To query the extension for some constant\nname `n`, first use `env.getModuleIdxFor? n`. If it returns `none`, look up `n` in the current\nmodule's state (the `NameMap`). If it returns `some idx`, use `ext.getModuleEntries env idx` to get\nthe array of entries for `n`'s defining module, and query it using `Array.binSearch`. This pattern\nimposes a constraint that the extension can only track metadata that is declared in the same module\nas the definition to which it applies; relaxing this restriction can make queries slower due to\nneeding to search _all_ modules. If it is necessary to search all modules, it is usually better to\ninitialize the state of type `σ` once from all imported entries and choose a more efficient search\ndatastructure for it.\n\nNote that `addEntryFn` is not in `IO`. This is intentional, and allows us to write simple functions\nsuch as\n```\ndef addAlias (env : Environment) (a : Name) (e : Name) : Environment :=\naliasExtension.addEntry env (a, e)\n```\nwithout using `IO`. We have many functions like `addAlias`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1429-L1429","name":"Lean.ImportM","line":1429,"kind":"def","docLink":"./Lean/Environment.html#Lean.ImportM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ImportM\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1427-L1427","name":"Lean.ImportM.Context.opts","line":1427,"kind":"def","docLink":"./Lean/Environment.html#Lean.ImportM.Context.opts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ImportM.Context.opts\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportM</span>.<span class=\"name\">Context</span>.<span class=\"name\">opts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.ImportM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1426-L1426","name":"Lean.ImportM.Context.env","line":1426,"kind":"def","docLink":"./Lean/Environment.html#Lean.ImportM.Context.env","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ImportM.Context.env\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportM</span>.<span class=\"name\">Context</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.ImportM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1425-L1425","name":"Lean.ImportM.Context.mk","line":1425,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ImportM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ImportM.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ImportM.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1425-L1427","name":"Lean.ImportM.Context","line":1425,"kind":"structure","docLink":"./Lean/Environment.html#Lean.ImportM.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ImportM.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">ImportM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1423-L1423","name":"Lean.PersistentEnvExtensionState.state","line":1423,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionState.state","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionState.state\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionState</span>.<span class=\"name\">state</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionState\">PersistentEnvExtensionState</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1422-L1422","name":"Lean.PersistentEnvExtensionState.importedEntries","line":1422,"kind":"def","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionState.importedEntries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionState.importedEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionState</span>.<span class=\"name\">importedEntries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionState\">PersistentEnvExtensionState</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1421-L1421","name":"Lean.PersistentEnvExtensionState.mk","line":1421,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionState</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">importedEntries</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionState\">PersistentEnvExtensionState</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1421-L1423","name":"Lean.PersistentEnvExtensionState","line":1421,"kind":"structure","docLink":"./Lean/Environment.html#Lean.PersistentEnvExtensionState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.PersistentEnvExtensionState\"><span class=\"name\">Lean</span>.<span class=\"name\">PersistentEnvExtensionState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1405-L1419","name":"Lean.mkEmptyEnvironment","line":1405,"kind":"def","docLink":"./Lean/Environment.html#Lean.mkEmptyEnvironment","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.mkEmptyEnvironment\"><span class=\"name\">Lean</span>.<span class=\"name\">mkEmptyEnvironment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trustLevel</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1384-L1401","name":"Lean.registerEnvExtension","line":1384,"kind":"def","docLink":"./Lean/Environment.html#Lean.registerEnvExtension","doc":"Environment extensions can only be registered during initialization.\nReasons:\n1- Our implementation assumes the number of extensions does not change after an environment object is created.\n2- We do not use any synchronization primitive to access `envExtensionsRef`.\n\nNote that by default, extension state is *not* stored in .olean files and will not propagate across `import`s.\nFor that, you need to register a persistent environment extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.registerEnvExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">registerEnvExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkInitial</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">replay?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.ReplayFn\">ReplayFn</a> <span class=\"fn\">σ</span>)</span></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncMode</span> : <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">EnvExtension.AsyncMode</a> := <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.mainOnly\">EnvExtension.AsyncMode.mainOnly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1373-L1380","name":"Lean.EnvExtension.findStateAsync","line":1373,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.EnvExtension.findStateAsync","doc":"Returns the final extension state on the environment branch corresponding to the passed declaration\nname, if any, or otherwise the state on the current branch. In other words, at most one environment\nbranch will be blocked on.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.findStateAsync\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">findStateAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1328-L1336","name":"Lean.EnvExtension.getState","line":1328,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.EnvExtension.getState","doc":"Returns the current extension state. See `AsyncMode` for details on how modifications from\ndifferent environment branches are reconciled. Panics if the extension is marked as `async`; see its\ndocumentation for more details. Overriding the extension's default `AsyncMode` is usually not\nrecommended and should be considered only for important optimizations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.getState\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">getState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncMode</span> : <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">AsyncMode</a> := <span class=\"fn\"><span class=\"fn\">ext</span>.<a href=\"./Lean/Environment.html#Lean.EnvExtension.asyncMode\">asyncMode</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1311-L1316","name":"Lean.EnvExtension.setState","line":1311,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvExtension.setState","doc":"Sets the extension state to the given value. See `AsyncMode` for details on how modifications from\ndifferent environment branches are reconciled.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.setState\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">setState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1283-L1309","name":"Lean.EnvExtension.modifyState","line":1283,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvExtension.modifyState","doc":"Applies the given function to the extension state. See `AsyncMode` for details on how modifications\nfrom different environment branches are reconciled.\n\nNote that in modes `sync` and `async`, `f` will be called twice, on the local and on the `checked`\nstate.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.modifyState\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">modifyState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncMode</span> : <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">AsyncMode</a> := <span class=\"fn\"><span class=\"fn\">ext</span>.<a href=\"./Lean/Environment.html#Lean.EnvExtension.asyncMode\">asyncMode</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1279-L1281","name":"Lean.EnvExtension.mkInitialExtStates","line":1279,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvExtension.mkInitialExtStates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.mkInitialExtStates\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">mkInitialExtStates</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionState\">EnvExtensionState</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1243-L1250","name":"Lean.EnvExtension.ensureExtensionsArraySize.loop","line":1243,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.EnvExtension.ensureExtensionsArraySize.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.ensureExtensionsArraySize.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">ensureExtensionsArraySize</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionState\">EnvExtensionState</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionState\">EnvExtensionState</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1233-L1250","name":"Lean.EnvExtension.ensureExtensionsArraySize","line":1233,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvExtension.ensureExtensionsArraySize","doc":"User-defined environment extensions are declared using the `initialize` command.\nThis command is just syntax sugar for the `init` attribute.\nWhen we `import` lean modules, the vector stored at `envExtensionsRef` may increase in size because of\nuser-defined environment extensions. When this happens, we must adjust the size of the `env.extensions`.\nThis method is invoked when processing `import`s.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.ensureExtensionsArraySize\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">ensureExtensionsArraySize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionState\">EnvExtensionState</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionState\">EnvExtensionState</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1227-L1227","name":"Lean.instInhabitedEnvExtension","line":1227,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedEnvExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedEnvExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedEnvExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1226-L1226","name":"Lean.EnvExtension.replay?","line":1226,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvExtension.replay?","doc":"Optional function that, given state before and after realization and newly added constants,\nreplays this change onto a state from another (derived) environment. This function is used only\nwhen making changes to an extension inside a `realizeConst` call, in which case it must be\npresent.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.replay?\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">replay?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#Lean.ReplayFn\">ReplayFn</a> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1219-L1219","name":"Lean.EnvExtension.asyncMode","line":1219,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvExtension.asyncMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.asyncMode\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">asyncMode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">AsyncMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1218-L1218","name":"Lean.EnvExtension.mkInitial","line":1218,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvExtension.mkInitial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.mkInitial\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">mkInitial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1217-L1217","name":"Lean.EnvExtension.idx","line":1217,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvExtension.idx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.idx\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">idx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.EnvExtension\">EnvExtension</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1212-L1227","name":"Lean.EnvExtension","line":1212,"kind":"structure","docLink":"./Lean/Environment.html#Lean.EnvExtension","doc":"Environment extension, can only be generated by `registerEnvExtension` that allocates a unique index\nfor this extension into each environment's extension state's array.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1209-L1210","name":"Lean.ReplayFn","line":1209,"kind":"def","docLink":"./Lean/Environment.html#Lean.ReplayFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ReplayFn\"><span class=\"name\">Lean</span>.<span class=\"name\">ReplayFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1207-L1207","name":"Lean.EnvExtension.instInhabitedAsyncMode","line":1207,"kind":"instance","docLink":"./Lean/Environment.html#Lean.EnvExtension.instInhabitedAsyncMode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.instInhabitedAsyncMode\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">instInhabitedAsyncMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">AsyncMode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1190-L1206","name":"Lean.EnvExtension.AsyncMode.async","line":1190,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.async","doc":"Accumulates modifications in the `checked` environment like `sync`, but `getState` will panic\ninstead of blocking. Instead `findStateAsync` should be used, which will access the state of the\nenvironment branch corresponding to the passed declaration name, if any, or otherwise the state\nof the current branch. In other words, at most one environment branch will be blocked on instead\nof all prior branches. The local state can still be accessed by calling `getState` with mode\n`local` explicitly.\n\nThis mode is suitable for extensions with map-like state where the key uniquely identifies the\ntop-level declaration where it could have been set, e.g. because the key on modification is always\nthe surrounding declaration's name. Any calls to `modifyState`/`setState` should assert\n`asyncMayContain` with that key to ensure state is never accidentally stored in a branch where it\ncannot be found by `findStateAsync`. In particular, this mode is closest to how the environment's\nown constant map works which asserts the same predicate on modification and provides `findAsync?`\nfor block-avoiding access.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.async\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">AsyncMode</span>.<span class=\"name\">async</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">AsyncMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1179-L1189","name":"Lean.EnvExtension.AsyncMode.mainOnly","line":1179,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.mainOnly","doc":"Default access mode. Like `local` but panics when trying to modify the state on anything but the\nmain environment branch. For extensions that fulfill this requirement, all modes functionally\ncoincide with `local` but this is the safest and most efficient choice in that case, preventing\naccidental misuse.\n\nThis mode is suitable for extensions that are modified only at the command elaboration level\nbefore any environment forks in the command, and in particular for extensions that are modified\nonly at the very beginning of the file.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.mainOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">AsyncMode</span>.<span class=\"name\">mainOnly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">AsyncMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1170-L1178","name":"Lean.EnvExtension.AsyncMode.local","line":1170,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.local","doc":"Accesses only the state of the current environment branch. Modifications on other branches are not\nvisible and are ultimately discarded except for the main branch. Provides the fastest accessors,\nwill never block.\n\nThis mode is particularly suitable for extensions where state does not escape from lexical scopes\neven without parallelism, e.g. `ScopedEnvExtension`s when setting local entries.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.local\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">AsyncMode</span>.<span class=\"name\">local</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">AsyncMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1158-L1169","name":"Lean.EnvExtension.AsyncMode.sync","line":1158,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.sync","doc":"Safest access mode, writes and reads the extension state to/from the full `checked`\nenvironment. This mode ensures the observed state is identical independently of whether or how\nparallel elaboration is used but `getState` will block on all prior environment branches by\nwaiting for `checked`. `setState` and `modifyState` do not block.\n\nWhile a safe fallback for when `mainOnly` is not sufficient, any extension that reasonably could\nbe used in parallel elaboration contexts should opt for a weaker mode to avoid blocking unless\nthere is no way to access the correct state without waiting for all prior environment branches, in\nwhich case its data management should be restructured if at all possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.sync\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">AsyncMode</span>.<span class=\"name\">sync</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">AsyncMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1146-L1207","name":"Lean.EnvExtension.AsyncMode","line":1146,"kind":"inductive","docLink":"./Lean/Environment.html#Lean.EnvExtension.AsyncMode","doc":"Async access mode for environment extensions used in `EnvExtension.get/set/modifyState`.\nWhen modified in concurrent contexts, extensions may need to switch to a different mode than the\ndefault `mainOnly`, which will panic in such cases. The access mode is set at environment extension\nregistration time but can be overriden when calling the mentioned functions in order to weaken it\nfor specific accesses.\n\nIn all modes, the state stored into the `.olean` file for persistent environment extensions is the\nresult of `getState` called on the main environment branch at the end of the file, i.e. it\nencompasses all modifications for all modes but `local`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtension</span>.<span class=\"name\">AsyncMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1141-L1142","name":"Lean.ConstantInfo.instantiateValueLevelParams!","line":1141,"kind":"def","docLink":"./Lean/Environment.html#Lean.ConstantInfo.instantiateValueLevelParams!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantInfo.instantiateValueLevelParams!\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">instantiateValueLevelParams!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1138-L1139","name":"Lean.ConstantInfo.instantiateTypeLevelParams","line":1138,"kind":"def","docLink":"./Lean/Environment.html#Lean.ConstantInfo.instantiateTypeLevelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantInfo.instantiateTypeLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantInfo</span>.<span class=\"name\">instantiateTypeLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1133-L1134","name":"Lean.ConstantVal.instantiateTypeLevelParams","line":1133,"kind":"def","docLink":"./Lean/Environment.html#Lean.ConstantVal.instantiateTypeLevelParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantVal.instantiateTypeLevelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantVal</span>.<span class=\"name\">instantiateTypeLevelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">ConstantVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Level</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1128-L1129","name":"Lean.Environment.getModuleIdx?","line":1128,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.getModuleIdx?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.getModuleIdx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">getModuleIdx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1123-L1126","name":"Lean.Environment.isSafeDefinition","line":1123,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.isSafeDefinition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.isSafeDefinition\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">isSafeDefinition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1120-L1121","name":"Lean.Environment.isConstructor","line":1120,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.isConstructor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.isConstructor\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">isConstructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1117-L1118","name":"Lean.Environment.isImportedConst","line":1117,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.isImportedConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.isImportedConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">isImportedConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1113-L1115","name":"Lean.Environment.getModuleIdxFor?","line":1113,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.getModuleIdxFor?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.getModuleIdxFor?\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">getModuleIdxFor?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1110-L1111","name":"Lean.Environment.mainModule","line":1110,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.mainModule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.mainModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">mainModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1101-L1108","name":"Lean.Environment.setMainModule","line":1101,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.setMainModule","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.setMainModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">setMainModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1098-L1099","name":"Lean.Environment.allImportedModuleNames","line":1098,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.allImportedModuleNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.allImportedModuleNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">allImportedModuleNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1095-L1096","name":"Lean.Environment.imports","line":1095,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.imports","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.imports\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">imports</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1091-L1093","name":"Lean.Environment.header","line":1091,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.header","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.header\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">header</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1084-L1089","name":"Lean.Environment.containsOnBranch","line":1084,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.containsOnBranch","doc":"Checks whether the given declaration is known on the current branch, in which case `findAsync?` will\nnot block.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.containsOnBranch\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">containsOnBranch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1074-L1082","name":"Lean.Environment.contains","line":1074,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.contains","doc":"Checks whether `findAsync?` would return a result.\n\nNOTE: Unlike `findAsync`, this function defaults `skipRealize` to `true` to avoid unnecessary\nblocking on realizations, which should always be brought into scope by running `realizeConst`, which\ndoes its own, optimized existence check.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skipRealize</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1059-L1072","name":"Lean.Environment.AddConstAsyncResult.commitCheckEnv","line":1059,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.commitCheckEnv","doc":"Assuming `Lean.addDecl` has been run for the constant to be added on the async environment branch,\ncommits the full constant info from that call to the main environment, waits for the final kernel\nenvironment resulting from the `addDecl` call, and commits it to the main branch as well, unblocking\nkernel additions there. All `commitConst` preconditions apply.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.commitCheckEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">AddConstAsyncResult</span>.<span class=\"name\">commitCheckEnv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">res</span> : <a href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult\">AddConstAsyncResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1026-L1057","name":"Lean.Environment.AddConstAsyncResult.commitConst","line":1026,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.commitConst","doc":"Commits the full constant info as well as the current environment extension state and set of nested\nasynchronous constants to the main environment branch. If `info?` is `none`, it is taken from the\ngiven environment. The declaration name and kind must match the original values given to\n`addConstAsync`. The signature must match the previous `commitSignature` call, if any.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.commitConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">AddConstAsyncResult</span>.<span class=\"name\">commitConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">res</span> : <a href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult\">AddConstAsyncResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info? </span><span class=\"fn\">exportedInfo?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L1015-L1024","name":"Lean.Environment.AddConstAsyncResult.commitSignature","line":1015,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.commitSignature","doc":"Commits the signature of the constant to the main environment branch. The declaration name must\nmatch the name originally given to `addConstAsync`. It is optional to call this function but can\nhelp in unblocking corresponding accesses to the constant on the main branch.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.commitSignature\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">AddConstAsyncResult</span>.<span class=\"name\">commitSignature</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">res</span> : <a href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult\">AddConstAsyncResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sig</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">ConstantVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L950-L1013","name":"Lean.Environment.addConstAsync","line":950,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.addConstAsync","doc":"Starts the asynchronous addition of a constant to the environment. The environment is split into a\n\"main\" branch that holds a reference to the constant to be added but will block on access until the\ncorresponding information has been added on the \"async\" environment branch and committed there; see\nthe respective fields of `AddConstAsyncResult` as well as the [Environment Branches] note for more\ninformation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.addConstAsync\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">addConstAsync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exportedKind</span> : <a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a> := <span class=\"fn\">kind</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reportExts </span><span class=\"fn\">checkMayContain</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult\">AddConstAsyncResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L921-L921","name":"Lean.Environment.AddConstAsyncResult.asyncEnv","line":921,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.asyncEnv","doc":"Resulting \"async branch\" environment which should be used to add the desired declaration in a new\ntask and then call `AddConstAsyncResult.commit*` to commit results back to the main environment.\n`commitCheckEnv` completes the addition; if it is not called and the `AddConstAsyncResult` object\nis dropped, `sorry`ed default values will be reported instead and the kernel environment will be\nleft unchanged.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.asyncEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">AddConstAsyncResult</span>.<span class=\"name\">asyncEnv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult\">AddConstAsyncResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L913-L913","name":"Lean.Environment.AddConstAsyncResult.mainEnv","line":913,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.mainEnv","doc":"Resulting \"main branch\" environment which contains the declaration name as an asynchronous\nconstant. Accessing the constant or kernel environment will block until the corresponding\n`AddConstAsyncResult.commit*` function has been called.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.mainEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">AddConstAsyncResult</span>.<span class=\"name\">mainEnv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult\">AddConstAsyncResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L907-L907","name":"Lean.Environment.AddConstAsyncResult.mk","line":907,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">AddConstAsyncResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainEnv </span><span class=\"fn\">asyncEnv</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sigPromise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">ConstantVal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constPromise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.Environment.ConstPromiseVal\">Lean.Environment.ConstPromiseVal✝</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkedEnvPromise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Kernel.Environment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allRealizationsPromise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap.html#Lean.NameMap\">NameMap</a> <a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.AsyncConst\">Lean.AsyncConst✝</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult\">AddConstAsyncResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L904-L927","name":"Lean.Environment.AddConstAsyncResult","line":904,"kind":"structure","docLink":"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult","doc":"Result of `Lean.Environment.addConstAsync` which is necessary to complete the asynchronous addition.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.AddConstAsyncResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">AddConstAsyncResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L902-L902","name":"Lean.Environment.instNonemptyConstPromiseVal","line":902,"kind":"instance","docLink":"./Lean/Environment.html#Lean.Environment.instNonemptyConstPromiseVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.instNonemptyConstPromiseVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">instNonemptyConstPromiseVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.Environment.ConstPromiseVal\">Lean.Environment.ConstPromiseVal✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L890-L894","name":"Lean.Environment.PromiseCheckedResult.commitChecked","line":890,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult.commitChecked","doc":"Commits the kernel environment of the given environment back to the main branch. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult.commitChecked\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">PromiseCheckedResult</span>.<span class=\"name\">commitChecked</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">res</span> : <a href=\"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult\">PromiseCheckedResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L873-L888","name":"Lean.Environment.promiseChecked","line":873,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.promiseChecked","doc":"Starts an asynchronous modification of the kernel environment. The environment is split into a\n\"main\" branch that will block on access to the kernel environment until\n`PromiseCheckedResult.commitChecked` has been called on the \"async\" environment branch.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.promiseChecked\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">promiseChecked</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult\">PromiseCheckedResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L858-L859","name":"Lean.Environment.realizingStack","line":858,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.realizingStack","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.realizingStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">realizingStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L855-L855","name":"Lean.Environment.PromiseCheckedResult.asyncEnv","line":855,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult.asyncEnv","doc":"Resulting \"async branch\" environment which should be used in a new task and then to call\n`PromiseCheckedResult.commitChecked` to commit results back to the main environment. If it is not\ncalled and the `PromiseCheckedResult` object is dropped, the kernel environment will be left\nunchanged.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult.asyncEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">PromiseCheckedResult</span>.<span class=\"name\">asyncEnv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult\">PromiseCheckedResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L848-L848","name":"Lean.Environment.PromiseCheckedResult.mainEnv","line":848,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult.mainEnv","doc":"Resulting \"main branch\" environment. Accessing the kernel environment will block until\n`PromiseCheckedResult.commitChecked` has been called.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult.mainEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">PromiseCheckedResult</span>.<span class=\"name\">mainEnv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult\">PromiseCheckedResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L843-L843","name":"Lean.Environment.PromiseCheckedResult.mk","line":843,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">PromiseCheckedResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainEnv </span><span class=\"fn\">asyncEnv</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkedEnvPromise</span> : <span class=\"fn\"><a href=\"./Init/System/Promise.html#IO.Promise\">IO.Promise</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Kernel.Environment</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult\">PromiseCheckedResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L842-L856","name":"Lean.Environment.PromiseCheckedResult","line":842,"kind":"structure","docLink":"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult","doc":"Result of `Lean.Environment.promiseChecked`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.PromiseCheckedResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">PromiseCheckedResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L838-L840","name":"Lean.Environment.dbgFormatCheckedSyncState","line":838,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.dbgFormatCheckedSyncState","doc":"Returns debug output about the synchronous state of the environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.dbgFormatCheckedSyncState\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">dbgFormatCheckedSyncState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L825-L836","name":"Lean.Environment.dbgFormatAsyncState","line":825,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.dbgFormatAsyncState","doc":"Returns debug output about the asynchronous state of the environment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.dbgFormatAsyncState\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">dbgFormatAsyncState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L796-L823","name":"Lean.Environment.enableRealizationsForConst","line":796,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.enableRealizationsForConst","doc":"Allows `realizeConst` calls for the given declaration in all derived environment branches.\nRealizations will run using the given environment and options to ensure deterministic results. Note\nthat while we check that the function isn't called before the declaration is actually added to the\nenvironment, we cannot automatically check that it isn't otherwise called too early in the sense\nthat helper declarations and environment extension state that may be relevant to realizations may\nnot have been added yet. We do check that we are not calling it from a different branch than `c` was\nadded on, which would be definitely too late. Thus, this function should generally be called in\nelaborators calling `addDecl` (when that declaration is a plausible target for realization) at the\nlatest possible point, i.e. at the very end of the elaborator or just before a first realization may\nbe triggered if any.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.enableRealizationsForConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">enableRealizationsForConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L790-L794","name":"Lean.Environment.find?","line":790,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.find?","doc":"Like `findAsync?`, but blocks until the constant's info is fully available.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skipRealize</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L780-L788","name":"Lean.Environment.findConstVal?","line":780,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.findConstVal?","doc":"Like `findAsync` but blocks on everything but the constant's body (if any), which is not accessible\nthrough the result.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.findConstVal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">findConstVal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skipRealize</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">ConstantVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L773-L778","name":"Lean.Environment.findTask","line":773,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.findTask","doc":"Like `findAsync?` but returns a task instead of resorting to blocking. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.findTask\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">findTask</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skipRealize</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L753-L771","name":"Lean.Environment.findAsync?","line":753,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.findAsync?","doc":"Looks up the given declaration name in the environment, avoiding forcing any in-progress elaboration\ntasks unless necessary. This can usually be done efficiently because `addConstAsync` ensures that\ndeclarations added in an environment branch have that branch's declaration name as a prefix, so we\nknow exactly what tasks to wait for to find a declaration. However, this is not true for\ndeclarations from `realizeConst`, which are not restricted to the current prefix, and reference to\nwhich may escpae the branch(es) they have been realized on such as when looking into the type `Expr`\nof a declaration found on another branch. Thus when we cannot find the declaration using the fast\nprefix-based lookup, we fall back to waiting for and looking at the realizations from all branches.\nTo avoid this expensive search for realizations from other branches, `skipRealize` can set to ensure\nnegative lookups are as fast as positive ones.\n\nUse `findTask` instead if any blocking should be avoided.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.findAsync?\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">findAsync?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skipRealize</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L700-L709","name":"Lean.Environment.addExtraName","line":700,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.addExtraName","doc":"Save an extra constant name that is used to populate `const2ModIdx` when we import\n.olean files. We use this feature to save in which module an auxiliary declaration\ncreated by the code generator has been created.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.addExtraName\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">addExtraName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L683-L685","name":"Lean.Environment.const2ModIdx","line":683,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.const2ModIdx","doc":"Mapping from constant name to module (index) where constant has been declared.\nRecall that a Lean file has a header where previously compiled modules can be imported.\nEach imported module has a unique `ModuleIdx`.\nMany extensions use the `ModuleIdx` to efficiently retrieve information stored in imported modules.\n\nRemark: this mapping also contains auxiliary constants, created by the code generator, that are **not** in\nthe field `constants`. These auxiliary constants are invisible to the Lean kernel and elaborator.\nOnly the code generator uses them.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.const2ModIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">const2ModIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L679-L681","name":"Lean.Environment.constants","line":679,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.constants","doc":"Mapping from constant name to `ConstantInfo`. It contains all constants (definitions, theorems,\naxioms, etc) that have been already type checked by the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.constants\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">constants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstMap\">ConstMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L661-L677","name":"Lean.Environment.addDeclCore","line":661,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.addDeclCore","doc":"Adds given declaration to the environment, type checking it unless `doCheck` is false.\n\nThis is a plumbing function for the implementation of `Lean.addDecl`, most users should use it\ninstead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.addDeclCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">addDeclCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxHeartbeats</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doCheck</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Kernel.Exception</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L641-L651","name":"Lean.Environment.asyncMayContain","line":641,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.asyncMayContain","doc":"Checks whether the given declaration name may potentially added, or have been added, to the current\nenvironment branch, which is the case either if this is the main branch or if the declaration name\nis a suffix (modulo privacy and hygiene information) of the top-level declaration name for which\nthis branch was created.\n\nThis function should always be checked before modifying an `AsyncMode.async` environment extension\nto ensure `findStateAsync` will be able to find the modification from other branches.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.asyncMayContain\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">asyncMayContain</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L637-L639","name":"Lean.Environment.unlockAsync","line":637,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.unlockAsync","doc":"Forgets about the asynchronous context restrictions. Used only for `withoutModifyingEnv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.unlockAsync\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">unlockAsync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L629-L635","name":"Lean.Environment.importEnv?","line":629,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.importEnv?","doc":"Returns the environment just after importing. `none` if `finalizeImport` has never been called on\nit.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.importEnv?\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">importEnv?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L625-L627","name":"Lean.Environment.isRealizing","line":625,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.isRealizing","doc":"True while inside `realizeConst`'s `realize`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.isRealizing\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">isRealizing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L621-L623","name":"Lean.Environment.asyncPrefix?","line":621,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.asyncPrefix?","doc":"The declaration prefix to which the environment is restricted to, if any. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.asyncPrefix?\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">asyncPrefix?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L609-L611","name":"Lean.Environment.setExporting","line":609,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.setExporting","doc":"Updates `Environment.isExporting`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.setExporting\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">setExporting</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isExporting</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L605-L607","name":"Lean.Environment.toKernelEnv","line":605,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.toKernelEnv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.toKernelEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">toKernelEnv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Kernel.Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L601-L603","name":"Lean.Environment.ofKernelEnv","line":601,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.ofKernelEnv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.ofKernelEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">ofKernelEnv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Kernel.Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L582-L582","name":"Lean.instNonemptyEnvironment","line":582,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instNonemptyEnvironment","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instNonemptyEnvironment\"><span class=\"name\">Lean</span>.<span class=\"name\">instNonemptyEnvironment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L581-L581","name":"Lean.Environment.isExporting","line":581,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.isExporting","doc":"Indicates whether the environment is being used in an exported context, i.e. whether it should\nprovide access to only the data to be imported by other modules participating in the module\nsystem.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.isExporting\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">isExporting</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L547-L547","name":"Lean.Environment.checked","line":547,"kind":"def","docLink":"./Lean/Environment.html#Lean.Environment.checked","doc":"Kernel environment task that is fulfilled when all asynchronously elaborated declarations are\nfinished, containing the resulting environment. Also collects the environment extension state of\nall environment branches that contributed contained declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment.checked\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">checked</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Kernel.Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L516-L582","name":"Lean.Environment","line":516,"kind":"structure","docLink":"./Lean/Environment.html#Lean.Environment","doc":"Elaboration-specific extension of `Kernel.Environment` that adds tracking of asynchronously\nelaborated declarations.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Environment\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L498-L498","name":"Lean.instNonemptyRealizationResult","line":498,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instNonemptyRealizationResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instNonemptyRealizationResult\"><span class=\"name\">Lean</span>.<span class=\"name\">instNonemptyRealizationResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.RealizationResult\">Lean.RealizationResult✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L491-L491","name":"Lean.instNonemptyVisibilityMap","line":491,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instNonemptyVisibilityMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instNonemptyVisibilityMap\"><span class=\"name\">Lean</span>.<span class=\"name\">instNonemptyVisibilityMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.VisibilityMap\">Lean.VisibilityMap✝</a> <span class=\"fn\">α✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L491-L491","name":"Lean.instInhabitedVisibilityMap","line":491,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedVisibilityMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedVisibilityMap\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedVisibilityMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">a✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.VisibilityMap\">Lean.VisibilityMap✝</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L437-L437","name":"Lean.instTypeNameAsyncConsts","line":437,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instTypeNameAsyncConsts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instTypeNameAsyncConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">instTypeNameAsyncConsts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.AsyncConsts\">Lean.AsyncConsts✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L437-L437","name":"Lean.instInhabitedAsyncConsts","line":437,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedAsyncConsts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedAsyncConsts\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAsyncConsts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.AsyncConsts\">Lean.AsyncConsts✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L404-L404","name":"Lean.instNonemptyAsyncContext","line":404,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instNonemptyAsyncContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instNonemptyAsyncContext\"><span class=\"name\">Lean</span>.<span class=\"name\">instNonemptyAsyncContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Environment.html#_private.Lean.Environment.0.Lean.AsyncContext\">Lean.AsyncContext✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L380-L383","name":"Lean.AsyncConstantInfo.isUnsafe","line":380,"kind":"def","docLink":"./Lean/Environment.html#Lean.AsyncConstantInfo.isUnsafe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.AsyncConstantInfo.isUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">AsyncConstantInfo</span>.<span class=\"name\">isUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L374-L378","name":"Lean.AsyncConstantInfo.ofConstantInfo","line":374,"kind":"def","docLink":"./Lean/Environment.html#Lean.AsyncConstantInfo.ofConstantInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.AsyncConstantInfo.ofConstantInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">AsyncConstantInfo</span>.<span class=\"name\">ofConstantInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L371-L372","name":"Lean.AsyncConstantInfo.toConstantInfo","line":371,"kind":"def","docLink":"./Lean/Environment.html#Lean.AsyncConstantInfo.toConstantInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.AsyncConstantInfo.toConstantInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">AsyncConstantInfo</span>.<span class=\"name\">toConstantInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L368-L369","name":"Lean.AsyncConstantInfo.toConstantVal","line":368,"kind":"def","docLink":"./Lean/Environment.html#Lean.AsyncConstantInfo.toConstantVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.AsyncConstantInfo.toConstantVal\"><span class=\"name\">Lean</span>.<span class=\"name\">AsyncConstantInfo</span>.<span class=\"name\">toConstantVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Declaration.html#Lean.ConstantVal\">ConstantVal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L364-L364","name":"Lean.instInhabitedAsyncConstantInfo","line":364,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedAsyncConstantInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedAsyncConstantInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAsyncConstantInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L363-L363","name":"Lean.AsyncConstantInfo.constInfo","line":363,"kind":"def","docLink":"./Lean/Environment.html#Lean.AsyncConstantInfo.constInfo","doc":"The final, complete constant info, potentially filled asynchronously. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.AsyncConstantInfo.constInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">AsyncConstantInfo</span>.<span class=\"name\">constInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L361-L361","name":"Lean.AsyncConstantInfo.sig","line":361,"kind":"def","docLink":"./Lean/Environment.html#Lean.AsyncConstantInfo.sig","doc":"The \"signature\" including level params and type, potentially filled asynchronously. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.AsyncConstantInfo.sig\"><span class=\"name\">Lean</span>.<span class=\"name\">AsyncConstantInfo</span>.<span class=\"name\">sig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">ConstantVal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L359-L359","name":"Lean.AsyncConstantInfo.kind","line":359,"kind":"def","docLink":"./Lean/Environment.html#Lean.AsyncConstantInfo.kind","doc":"The kind of the constant, known immediately. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.AsyncConstantInfo.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">AsyncConstantInfo</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L357-L357","name":"Lean.AsyncConstantInfo.name","line":357,"kind":"def","docLink":"./Lean/Environment.html#Lean.AsyncConstantInfo.name","doc":"The declaration name, known immediately. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.AsyncConstantInfo.name\"><span class=\"name\">Lean</span>.<span class=\"name\">AsyncConstantInfo</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L355-L355","name":"Lean.AsyncConstantInfo.mk","line":355,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.AsyncConstantInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.AsyncConstantInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">AsyncConstantInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sig</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Lean/Declaration.html#Lean.ConstantVal\">ConstantVal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constInfo</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\">AsyncConstantInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L354-L364","name":"Lean.AsyncConstantInfo","line":354,"kind":"structure","docLink":"./Lean/Environment.html#Lean.AsyncConstantInfo","doc":"`ConstantInfo` variant that allows for asynchronous filling of components via tasks. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.AsyncConstantInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">AsyncConstantInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L344-L352","name":"Lean.ConstantKind.ofConstantInfo","line":344,"kind":"def","docLink":"./Lean/Environment.html#Lean.ConstantKind.ofConstantInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantKind.ofConstantInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantKind</span>.<span class=\"name\">ofConstantInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a> → <a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L342-L342","name":"Lean.instReprConstantKind","line":342,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instReprConstantKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instReprConstantKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprConstantKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L342-L342","name":"Lean.instBEqConstantKind","line":342,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instBEqConstantKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instBEqConstantKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqConstantKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L342-L342","name":"Lean.instInhabitedConstantKind","line":342,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedConstantKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedConstantKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedConstantKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L341-L341","name":"Lean.ConstantKind.recursor","line":341,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ConstantKind.recursor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantKind.recursor\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantKind</span>.<span class=\"name\">recursor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L341-L341","name":"Lean.ConstantKind.ctor","line":341,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ConstantKind.ctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantKind.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantKind</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L341-L341","name":"Lean.ConstantKind.induct","line":341,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ConstantKind.induct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantKind.induct\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantKind</span>.<span class=\"name\">induct</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L341-L341","name":"Lean.ConstantKind.quot","line":341,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ConstantKind.quot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantKind.quot\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantKind</span>.<span class=\"name\">quot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L341-L341","name":"Lean.ConstantKind.opaque","line":341,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ConstantKind.opaque","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantKind.opaque\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantKind</span>.<span class=\"name\">opaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L341-L341","name":"Lean.ConstantKind.axiom","line":341,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ConstantKind.axiom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantKind.axiom\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantKind</span>.<span class=\"name\">axiom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L341-L341","name":"Lean.ConstantKind.thm","line":341,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ConstantKind.thm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantKind.thm\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantKind</span>.<span class=\"name\">thm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L341-L341","name":"Lean.ConstantKind.defn","line":341,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ConstantKind.defn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantKind.defn\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantKind</span>.<span class=\"name\">defn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstantKind\">ConstantKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L340-L342","name":"Lean.ConstantKind","line":340,"kind":"inductive","docLink":"./Lean/Environment.html#Lean.ConstantKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstantKind\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstantKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L337-L338","name":"Lean.KernelException","line":337,"kind":"def","docLink":"./Lean/Environment.html#Lean.KernelException","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.KernelException\"><span class=\"name\">Lean</span>.<span class=\"name\">KernelException</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L331-L333","name":"Lean.Kernel.Environment.setDiagnostics","line":331,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.setDiagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.setDiagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">setDiagnostics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diag</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L327-L329","name":"Lean.Kernel.Environment.getDiagnostics","line":327,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.getDiagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.getDiagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">getDiagnostics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L319-L325","name":"Lean.Kernel.Environment.Diagnostics.recordUnfold","line":319,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.Diagnostics.recordUnfold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.Diagnostics.recordUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">recordUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L316-L317","name":"Lean.Kernel.Environment.resetDiag","line":316,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.resetDiag","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.resetDiag\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">resetDiag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L313-L314","name":"Lean.Kernel.Environment.isDiagnosticsEnabled","line":313,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.isDiagnosticsEnabled","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.isDiagnosticsEnabled\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">isDiagnosticsEnabled</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L309-L311","name":"Lean.Kernel.Environment.enableDiag","line":309,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.enableDiag","doc":"Enables/disables kernel diagnostics. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.enableDiag\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">enableDiag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">flag</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L305-L307","name":"Lean.Kernel.Environment.Diagnostics.isEnabled","line":305,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.Diagnostics.isEnabled","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.Diagnostics.isEnabled\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">isEnabled</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L291-L299","name":"Lean.Kernel.Environment.addDeclWithoutChecking","line":291,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.addDeclWithoutChecking","doc":"Add declaration to kernel without type checking it.\n\n**WARNING** This function is meant for temporarily working around kernel performance issues.\nIt compromises soundness because, for example, a buggy tactic may produce an invalid proof,\nand the kernel will not catch it if the new option is set to true.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.addDeclWithoutChecking\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">addDeclWithoutChecking</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L286-L289","name":"Lean.Kernel.Environment.addDeclCore","line":286,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.addDeclCore","doc":"Type check given declaration and add it to the environment "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.addDeclCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">addDeclCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxHeartbeats</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L273-L276","name":"Lean.Kernel.Environment.find?","line":273,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.find?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L269-L269","name":"Lean.Kernel.instNonemptyException","line":269,"kind":"instance","docLink":"./Lean/Environment.html#Lean.Kernel.instNonemptyException","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.instNonemptyException\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instNonemptyException</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L268-L268","name":"Lean.Kernel.Exception.interrupted","line":268,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.interrupted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.interrupted\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">interrupted</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L267-L267","name":"Lean.Kernel.Exception.deepRecursion","line":267,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.deepRecursion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.deepRecursion\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">deepRecursion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L266-L266","name":"Lean.Kernel.Exception.excessiveMemory","line":266,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.excessiveMemory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.excessiveMemory\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">excessiveMemory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L265-L265","name":"Lean.Kernel.Exception.deterministicTimeout","line":265,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.deterministicTimeout","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.deterministicTimeout\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">deterministicTimeout</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L264-L264","name":"Lean.Kernel.Exception.other","line":264,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.other","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.other\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">other</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L263-L263","name":"Lean.Kernel.Exception.thmTypeIsNotProp","line":263,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.thmTypeIsNotProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.thmTypeIsNotProp\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">thmTypeIsNotProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L262-L262","name":"Lean.Kernel.Exception.invalidProj","line":262,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.invalidProj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.invalidProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">invalidProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proj</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L261-L261","name":"Lean.Kernel.Exception.appTypeMismatch","line":261,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.appTypeMismatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.appTypeMismatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">appTypeMismatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app </span><span class=\"fn\">funType </span><span class=\"fn\">argType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L260-L260","name":"Lean.Kernel.Exception.exprTypeMismatch","line":260,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.exprTypeMismatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.exprTypeMismatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">exprTypeMismatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L259-L259","name":"Lean.Kernel.Exception.letTypeMismatch","line":259,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.letTypeMismatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.letTypeMismatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">letTypeMismatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenType </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L258-L258","name":"Lean.Kernel.Exception.typeExpected","line":258,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.typeExpected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.typeExpected\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">typeExpected</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L257-L257","name":"Lean.Kernel.Exception.funExpected","line":257,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.funExpected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.funExpected\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">funExpected</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L256-L256","name":"Lean.Kernel.Exception.declHasFVars","line":256,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.declHasFVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.declHasFVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">declHasFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L255-L255","name":"Lean.Kernel.Exception.declHasMVars","line":255,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.declHasMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.declHasMVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">declHasMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L254-L254","name":"Lean.Kernel.Exception.declTypeMismatch","line":254,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.declTypeMismatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.declTypeMismatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">declTypeMismatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Declaration.html#Lean.Declaration\">Declaration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L253-L253","name":"Lean.Kernel.Exception.alreadyDeclared","line":253,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.alreadyDeclared","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.alreadyDeclared\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">alreadyDeclared</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L252-L252","name":"Lean.Kernel.Exception.unknownConstant","line":252,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Exception.unknownConstant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception.unknownConstant\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span>.<span class=\"name\">unknownConstant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Exception\">Exception</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L250-L269","name":"Lean.Kernel.Exception","line":250,"kind":"inductive","docLink":"./Lean/Environment.html#Lean.Kernel.Exception","doc":"Exceptions that can be raised by the kernel when type checking new declarations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Exception\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Exception</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L248-L248","name":"Lean.Kernel.instNonemptyEnvironment","line":248,"kind":"instance","docLink":"./Lean/Environment.html#Lean.Kernel.instNonemptyEnvironment","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.instNonemptyEnvironment\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instNonemptyEnvironment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L247-L247","name":"Lean.Kernel.Environment.header","line":247,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.header","doc":"The header contains additional information that is set at import time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.header\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">header</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L235-L235","name":"Lean.Kernel.Environment.const2ModIdx","line":235,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.const2ModIdx","doc":"Mapping from constant name to module (index) where constant has been declared.\nRecall that a Lean file has a header where previously compiled modules can be imported.\nEach imported module has a unique `ModuleIdx`.\nMany extensions use the `ModuleIdx` to efficiently retrieve information stored in imported modules.\n\nRemark: this mapping also contains auxiliary constants, created by the code generator, that are **not** in\nthe field `constants`. These auxiliary constants are invisible to the Lean kernel and elaborator.\nOnly the code generator uses them.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.const2ModIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">const2ModIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L224-L224","name":"Lean.Kernel.Environment.diagnostics","line":224,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.diagnostics","doc":"Diagnostic information collected during kernel execution.\n\nRemark: We store kernel diagnostic information in an environment field to simplify the interface\nwith the kernel implemented in C/C++. Thus, we can only track declarations in methods, such as\n`addDecl`, which return a new environment. `Kernel.isDefEq` and `Kernel.whnf` do not update the\nstatistics. We claim this is ok since these methods are mainly used for debugging.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.diagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">diagnostics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L215-L215","name":"Lean.Kernel.Environment.quotInit","line":215,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.quotInit","doc":"`quotInit = true` if the command `init_quot` has already been executed for the environment, and\n`Quot` declarations have been added to the environment. When the flag is set, the type checker can\nassume that the `Quot` declarations in the environment have indeed been added by the kernel and\nnot by the user.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.quotInit\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">quotInit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L208-L208","name":"Lean.Kernel.Environment.constants","line":208,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Environment.constants","doc":"Mapping from constant name to `ConstantInfo`. It contains all constants (definitions, theorems,\naxioms, etc) that have been already type checked by the kernel.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment.constants\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span>.<span class=\"name\">constants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ConstMap\">ConstMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L184-L248","name":"Lean.Kernel.Environment","line":184,"kind":"structure","docLink":"./Lean/Environment.html#Lean.Kernel.Environment","doc":"An environment stores declarations provided by the user. The kernel\ncurrently supports different kinds of declarations such as definitions, theorems,\nand inductive families. Each has a unique identifier (i.e., `Name`), and can be\nparameterized by a sequence of universe parameters.\nA constant in Lean is just a reference to a `ConstantInfo` object. The main task of\nthe kernel is to type check these declarations and refuse type incorrect ones. The\nkernel does not allow declarations containing metavariables and/or free variables\nto be added to an environment. Environments are never destructively updated.\n\nThe environment also contains a collection of extensions. For example, the `simp` theorems\ndeclared by users are stored in an environment extension. Users can declare new extensions\nusing meta-programming.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Environment\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Environment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L182-L182","name":"Lean.Kernel.instInhabitedDiagnostics","line":182,"kind":"instance","docLink":"./Lean/Environment.html#Lean.Kernel.instInhabitedDiagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.instInhabitedDiagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">instInhabitedDiagnostics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L181-L181","name":"Lean.Kernel.Diagnostics.enabled","line":181,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Diagnostics.enabled","doc":"If `enabled = true`, kernel records declarations that have been unfolded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics.enabled\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">enabled</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L179-L179","name":"Lean.Kernel.Diagnostics.unfoldCounter","line":179,"kind":"def","docLink":"./Lean/Environment.html#Lean.Kernel.Diagnostics.unfoldCounter","doc":"Number of times each declaration has been unfolded by the kernel. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics.unfoldCounter\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">unfoldCounter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L177-L177","name":"Lean.Kernel.Diagnostics.mk","line":177,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Kernel.Diagnostics.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Diagnostics</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unfoldCounter</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">PHashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">enabled</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\">Diagnostics</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L177-L182","name":"Lean.Kernel.Diagnostics","line":177,"kind":"structure","docLink":"./Lean/Environment.html#Lean.Kernel.Diagnostics","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Kernel.Diagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Kernel</span>.<span class=\"name\">Diagnostics</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L173-L173","name":"Lean.instNonemptyEnvironmentHeader","line":173,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instNonemptyEnvironmentHeader","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instNonemptyEnvironmentHeader\"><span class=\"name\">Lean</span>.<span class=\"name\">instNonemptyEnvironmentHeader</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L172-L172","name":"Lean.EnvironmentHeader.moduleData","line":172,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvironmentHeader.moduleData","doc":"Module data for all imported modules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvironmentHeader.moduleData\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvironmentHeader</span>.<span class=\"name\">moduleData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L170-L170","name":"Lean.EnvironmentHeader.moduleNames","line":170,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvironmentHeader.moduleNames","doc":"Name of all imported modules (directly and indirectly).\nThe index of a module name in the array equals the `ModuleIdx` for the same module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvironmentHeader.moduleNames\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvironmentHeader</span>.<span class=\"name\">moduleNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L165-L165","name":"Lean.EnvironmentHeader.regions","line":165,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvironmentHeader.regions","doc":"Compacted regions for all imported modules. Objects in compacted memory regions do no require any memory management. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvironmentHeader.regions\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvironmentHeader</span>.<span class=\"name\">regions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.CompactedRegion\">CompactedRegion</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L163-L163","name":"Lean.EnvironmentHeader.imports","line":163,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvironmentHeader.imports","doc":"Direct imports "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvironmentHeader.imports\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvironmentHeader</span>.<span class=\"name\">imports</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L161-L161","name":"Lean.EnvironmentHeader.isModule","line":161,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvironmentHeader.isModule","doc":"Participating in the module system? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvironmentHeader.isModule\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvironmentHeader</span>.<span class=\"name\">isModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L159-L159","name":"Lean.EnvironmentHeader.mainModule","line":159,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvironmentHeader.mainModule","doc":"Name of the module being compiled.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvironmentHeader.mainModule\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvironmentHeader</span>.<span class=\"name\">mainModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L155-L155","name":"Lean.EnvironmentHeader.trustLevel","line":155,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvironmentHeader.trustLevel","doc":"The trust level used by the kernel. For example,\nthe kernel assumes imported constants are type correct when the trust level is greater than zero.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvironmentHeader.trustLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvironmentHeader</span>.<span class=\"name\">trustLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L150-L150","name":"Lean.EnvironmentHeader.mk","line":150,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.EnvironmentHeader.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvironmentHeader.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvironmentHeader</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trustLevel</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainModule</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isModule</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">regions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.CompactedRegion\">CompactedRegion</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moduleData</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.EnvironmentHeader\">EnvironmentHeader</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L149-L173","name":"Lean.EnvironmentHeader","line":149,"kind":"structure","docLink":"./Lean/Environment.html#Lean.EnvironmentHeader","doc":"Environment fields that are not used often. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvironmentHeader\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvironmentHeader</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L147-L147","name":"Lean.instInhabitedModuleData","line":147,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedModuleData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedModuleData\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedModuleData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L146-L146","name":"Lean.ModuleData.entries","line":146,"kind":"def","docLink":"./Lean/Environment.html#Lean.ModuleData.entries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ModuleData.entries\"><span class=\"name\">Lean</span>.<span class=\"name\">ModuleData</span>.<span class=\"name\">entries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionEntry\">EnvExtensionEntry</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L145-L145","name":"Lean.ModuleData.extraConstNames","line":145,"kind":"def","docLink":"./Lean/Environment.html#Lean.ModuleData.extraConstNames","doc":"Extra entries for the `const2ModIdx` map in the `Environment` object.\nThe code generator creates auxiliary declarations that are not in the\nmapping `constants`, but we want to know in which module they were generated.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ModuleData.extraConstNames\"><span class=\"name\">Lean</span>.<span class=\"name\">ModuleData</span>.<span class=\"name\">extraConstNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L139-L139","name":"Lean.ModuleData.constants","line":139,"kind":"def","docLink":"./Lean/Environment.html#Lean.ModuleData.constants","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ModuleData.constants\"><span class=\"name\">Lean</span>.<span class=\"name\">ModuleData</span>.<span class=\"name\">constants</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L138-L138","name":"Lean.ModuleData.constNames","line":138,"kind":"def","docLink":"./Lean/Environment.html#Lean.ModuleData.constNames","doc":"`constNames` contains all constant names in `constants`.\nThis information is redundant. It is equal to `constants.map fun c => c.name`,\nbut it improves the performance of `importModules`. `perf` reports that 12% of the\nruntime was being spent on `ConstantInfo.name` when importing a file containing only `import Lean`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ModuleData.constNames\"><span class=\"name\">Lean</span>.<span class=\"name\">ModuleData</span>.<span class=\"name\">constNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L131-L131","name":"Lean.ModuleData.imports","line":131,"kind":"def","docLink":"./Lean/Environment.html#Lean.ModuleData.imports","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ModuleData.imports\"><span class=\"name\">Lean</span>.<span class=\"name\">ModuleData</span>.<span class=\"name\">imports</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L130-L130","name":"Lean.ModuleData.isModule","line":130,"kind":"def","docLink":"./Lean/Environment.html#Lean.ModuleData.isModule","doc":"Participating in the module system? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ModuleData.isModule\"><span class=\"name\">Lean</span>.<span class=\"name\">ModuleData</span>.<span class=\"name\">isModule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L128-L128","name":"Lean.ModuleData.mk","line":128,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.ModuleData.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ModuleData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ModuleData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isModule</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imports</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constants</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Declaration.html#Lean.ConstantInfo\">ConstantInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extraConstNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entries</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionEntry\">EnvExtensionEntry</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.ModuleData\">ModuleData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L126-L147","name":"Lean.ModuleData","line":126,"kind":"structure","docLink":"./Lean/Environment.html#Lean.ModuleData","doc":"Content of a .olean file.\nWe use `compact.cpp` to generate the image of this object in disk. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ModuleData\"><span class=\"name\">Lean</span>.<span class=\"name\">ModuleData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L124-L124","name":"Lean.instNonemptyEnvExtensionEntry","line":124,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instNonemptyEnvExtensionEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instNonemptyEnvExtensionEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">instNonemptyEnvExtensionEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionEntry\">EnvExtensionEntry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L123-L123","name":"Lean.EnvExtensionEntry","line":123,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvExtensionEntry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtensionEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtensionEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L121-L122","name":"Lean.EnvExtensionEntrySpec","line":121,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.EnvExtensionEntrySpec","doc":"Opaque persistent environment extension entry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtensionEntrySpec\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtensionEntrySpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#NonemptyType\">NonemptyType</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L117-L119","name":"Lean.CompactedRegion.free","line":117,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.CompactedRegion.free","doc":"Free a compacted region and its contents. No live references to the contents may exist at the time of invocation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.CompactedRegion.free\"><span class=\"name\">Lean</span>.<span class=\"name\">CompactedRegion</span>.<span class=\"name\">free</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.CompactedRegion\">CompactedRegion</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L114-L115","name":"Lean.CompactedRegion.isMemoryMapped","line":114,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.CompactedRegion.isMemoryMapped","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.CompactedRegion.isMemoryMapped\"><span class=\"name\">Lean</span>.<span class=\"name\">CompactedRegion</span>.<span class=\"name\">isMemoryMapped</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.CompactedRegion\">CompactedRegion</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L108-L112","name":"Lean.CompactedRegion","line":108,"kind":"def","docLink":"./Lean/Environment.html#Lean.CompactedRegion","doc":"A compacted region holds multiple Lean objects in a contiguous memory region, which can be read/written to/from disk.\nObjects inside the region do not have reference counters and cannot be freed individually. The contents of .olean\nfiles are compacted regions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.CompactedRegion\"><span class=\"name\">Lean</span>.<span class=\"name\">CompactedRegion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L106-L106","name":"Lean.instToStringImport","line":106,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instToStringImport","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instToStringImport\"><span class=\"name\">Lean</span>.<span class=\"name\">instToStringImport</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L104-L104","name":"Lean.instCoeNameImport","line":104,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instCoeNameImport","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instCoeNameImport\"><span class=\"name\">Lean</span>.<span class=\"name\">instCoeNameImport</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L102-L102","name":"Lean.instInhabitedImport","line":102,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedImport","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedImport\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedImport</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L102-L102","name":"Lean.instReprImport","line":102,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instReprImport","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instReprImport\"><span class=\"name\">Lean</span>.<span class=\"name\">instReprImport</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Environment.html#Lean.Import\">Import</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L101-L101","name":"Lean.Import.isExported","line":101,"kind":"def","docLink":"./Lean/Environment.html#Lean.Import.isExported","doc":"Whether to activate this import when the current module itself is imported. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Import.isExported\"><span class=\"name\">Lean</span>.<span class=\"name\">Import</span>.<span class=\"name\">isExported</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Import\">Import</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L99-L99","name":"Lean.Import.importAll","line":99,"kind":"def","docLink":"./Lean/Environment.html#Lean.Import.importAll","doc":"`import all`; whether to import and expose all data saved by the module. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Import.importAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Import</span>.<span class=\"name\">importAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Import\">Import</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L97-L97","name":"Lean.Import.module","line":97,"kind":"def","docLink":"./Lean/Environment.html#Lean.Import.module","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Import.module\"><span class=\"name\">Lean</span>.<span class=\"name\">Import</span>.<span class=\"name\">module</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Environment.html#Lean.Import\">Import</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L96-L96","name":"Lean.Import.mk","line":96,"kind":"ctor","docLink":"./Lean/Environment.html#Lean.Import.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Import.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Import</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">module</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">importAll </span><span class=\"fn\">isExported</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Import\">Import</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L96-L102","name":"Lean.Import","line":96,"kind":"structure","docLink":"./Lean/Environment.html#Lean.Import","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.Import\"><span class=\"name\">Lean</span>.<span class=\"name\">Import</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L94-L94","name":"Lean.ConstMap","line":94,"kind":"def","docLink":"./Lean/Environment.html#Lean.ConstMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ConstMap\"><span class=\"name\">Lean</span>.<span class=\"name\">ConstMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L90-L92","name":"Lean.instGetElem?ArrayModuleIdxLtNatToNatSize","line":90,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instGetElem?ArrayModuleIdxLtNatToNatSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instGetElem?ArrayModuleIdxLtNatToNatSize\"><span class=\"name\">Lean</span>.<span class=\"name\">instGetElem?ArrayModuleIdxLtNatToNatSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/GetElem.html#GetElem?\">GetElem?</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a>) =&gt; <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Lean/Environment.html#Lean.ModuleIdx.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L87-L88","name":"Lean.instGetElemArrayModuleIdxLtNatToNatSize","line":87,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instGetElemArrayModuleIdxLtNatToNatSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instGetElemArrayModuleIdxLtNatToNatSize\"><span class=\"name\">Lean</span>.<span class=\"name\">instGetElemArrayModuleIdxLtNatToNatSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/GetElem.html#GetElem\">GetElem</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a> <span class=\"fn\">α</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">i</span> : <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a>) =&gt; <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Lean/Environment.html#Lean.ModuleIdx.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L85-L85","name":"Lean.instInhabitedModuleIdx","line":85,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedModuleIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedModuleIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedModuleIdx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L83-L83","name":"Lean.ModuleIdx.toNat","line":83,"kind":"def","docLink":"./Lean/Environment.html#Lean.ModuleIdx.toNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ModuleIdx.toNat\"><span class=\"name\">Lean</span>.<span class=\"name\">ModuleIdx</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">midx</span> : <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L81-L81","name":"Lean.instModuleIdxToString","line":81,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instModuleIdxToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instModuleIdxToString\"><span class=\"name\">Lean</span>.<span class=\"name\">instModuleIdxToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L81-L81","name":"Lean.instModuleIdxBEq","line":81,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instModuleIdxBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instModuleIdxBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">instModuleIdxBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Environment.html#Lean.ModuleIdx\">ModuleIdx</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L80-L81","name":"Lean.ModuleIdx","line":80,"kind":"def","docLink":"./Lean/Environment.html#Lean.ModuleIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.ModuleIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">ModuleIdx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L78-L78","name":"Lean.instInhabitedEnvExtensionState","line":78,"kind":"instance","docLink":"./Lean/Environment.html#Lean.instInhabitedEnvExtensionState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.instInhabitedEnvExtensionState\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedEnvExtensionState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Environment.html#Lean.EnvExtensionState\">EnvExtensionState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L77-L77","name":"Lean.EnvExtensionState","line":77,"kind":"def","docLink":"./Lean/Environment.html#Lean.EnvExtensionState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtensionState\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtensionState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L75-L76","name":"Lean.EnvExtensionStateSpec","line":75,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.EnvExtensionStateSpec","doc":"Opaque environment extension state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.EnvExtensionStateSpec\"><span class=\"name\">Lean</span>.<span class=\"name\">EnvExtensionStateSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>) × <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Environment.lean#L69-L73","name":"Lean.debug.skipKernelTC","line":69,"kind":"opaque","docLink":"./Lean/Environment.html#Lean.debug.skipKernelTC","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Environment.html#Lean.debug.skipKernelTC\"><span class=\"name\">Lean</span>.<span class=\"name\">debug</span>.<span class=\"name\">skipKernelTC</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}