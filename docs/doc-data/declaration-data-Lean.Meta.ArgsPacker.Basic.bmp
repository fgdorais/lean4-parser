{"name":"Lean.Meta.ArgsPacker.Basic","instances":[{"typeNames":["Lean.Meta.ArgsPacker"],"name":"Lean.Meta.instInhabitedArgsPacker","className":"Inhabited"}],"imports":["Init.Data.Array.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker/Basic.lean#L31-L31","name":"Lean.Meta.instInhabitedArgsPacker","line":31,"kind":"instance","docLink":"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.instInhabitedArgsPacker","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.instInhabitedArgsPacker\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instInhabitedArgsPacker</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker/Basic.lean#L30-L30","name":"Lean.Meta.ArgsPacker.varNamess","line":30,"kind":"def","docLink":"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker.varNamess","doc":"Variable names to use when unpacking a packed argument.\n\nCrucially, the size of this array also indicates the number of functions to pack, and\nthe length of each array the arity.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker.varNamess\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">varNamess</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker/Basic.lean#L23-L23","name":"Lean.Meta.ArgsPacker.mk","line":23,"kind":"ctor","docLink":"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varNamess</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\">ArgsPacker</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Meta/ArgsPacker/Basic.lean#L19-L31","name":"Lean.Meta.ArgsPacker","line":19,"kind":"structure","docLink":"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker","doc":"The metadata required for the operation in the `Lean.Meta.ArgsPacker` module; see\nthe module docs there for an overview.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ArgsPacker/Basic.html#Lean.Meta.ArgsPacker\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ArgsPacker</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}