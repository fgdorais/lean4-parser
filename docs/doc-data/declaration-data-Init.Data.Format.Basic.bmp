{"name":"Init.Data.Format.Basic","instances":[{"typeNames":["Std.Format.FlattenBehavior"],"name":"Std.Format.instInhabitedFlattenBehavior","className":"Inhabited"},{"typeNames":["Std.Format.FlattenBehavior"],"name":"Std.Format.instBEqFlattenBehavior","className":"BEq"},{"typeNames":["Std.Format"],"name":"Std.instInhabitedFormat","className":"Inhabited"},{"typeNames":["Std.Format"],"name":"Std.Format.instAppend","className":"Append"},{"typeNames":["String","Std.Format"],"name":"Std.Format.instCoeString","className":"Coe"},{"typeNames":["_private.Init.Data.Format.Basic.0.Std.Format.SpaceResult"],"name":"Std.Format.instInhabitedSpaceResult","className":"Inhabited"},{"typeNames":["StateM"],"name":"Std.Format.instMonadPrettyFormatStateMState","className":"Std.Format.MonadPrettyFormat"},{"typeNames":["Std.Format"],"name":"Std.instToFormatFormat","className":"Std.ToFormat"},{"typeNames":["String"],"name":"Std.instToFormatString","className":"Std.ToFormat"}],"imports":["Init.Control.State","Init.Data.Int.Basic","Init.Data.String.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L345-L348","name":"Std.Format.joinSuffix","line":345,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSuffix","doc":"Format each item in `items` and append `suffix`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.joinSuffix\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">joinSuffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L340-L343","name":"Std.Format.prefixJoin","line":340,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.prefixJoin","doc":"Format each item in `items` and prepend prefix `pre`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.prefixJoin\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">prefixJoin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L334-L338","name":"Std.Format.joinSep","line":334,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.joinSep","doc":"Intersperse the given list (each item printed with `format`) with the given `sep` format. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.joinSep\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">joinSep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L331-L332","name":"Std.instToFormatString","line":331,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instToFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">instToFormatString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L328-L329","name":"Std.instToFormatFormat","line":328,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instToFormatFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instToFormatFormat\"><span class=\"name\">Std</span>.<span class=\"name\">instToFormatFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L323-L323","name":"Std.ToFormat.format","line":323,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat.format","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat.format\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span>.<span class=\"name\">format</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L322-L322","name":"Std.ToFormat.mk","line":322,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat.mk\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">ToFormat</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L320-L323","name":"Std.ToFormat","line":320,"kind":"class","docLink":"./Init/Data/Format/Basic.html#Std.ToFormat","doc":"Class for converting a given type α to a `Format` object for pretty-printing.\nSee also `Repr`, which also outputs a `Format` object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.ToFormat\"><span class=\"name\">Std</span>.<span class=\"name\">ToFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L305-L316","name":"Std.Format.pretty","line":305,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.pretty","doc":"Renders a `Format` to a string.\n* `width`: the total width\n* `indent`: the initial indentation to use for wrapped lines\n  (subsequent wrapping may increase the indentation)\n* `column`: begin the first line wrap `column` characters earlier than usual\n  (this is useful when the output String will be printed starting at `column`)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.pretty\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">pretty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">width</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <a href=\"./Init/Data/Format/Basic.html#Std.Format.defWidth\">defWidth</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent </span><span class=\"fn\">column</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L297-L303","name":"Std.Format.instMonadPrettyFormatStateMState","line":297,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instMonadPrettyFormatStateMState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instMonadPrettyFormatStateMState\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instMonadPrettyFormatStateMState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateM\">StateM</a> <a href=\"./Init/Data/Format/Basic.html#_private.Init.Data.Format.Basic.0.Std.Format.State\">Std.Format.State✝</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L288-L290","name":"Std.Format.indentD","line":288,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.indentD","doc":"Insert a newline and then `f`, all nested by the default indent amount. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.indentD\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">indentD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L284-L286","name":"Std.Format.nestD","line":284,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.nestD","doc":"Nest with the default indentation amount."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nestD\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nestD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L281-L282","name":"Std.Format.defWidth","line":281,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defWidth","doc":"Default width of the targeted output pane. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defWidth\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defWidth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L280-L280","name":"Std.Format.defUnicode","line":280,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defUnicode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defUnicode\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defUnicode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L278-L279","name":"Std.Format.defIndent","line":278,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.defIndent","doc":"Default indentation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.defIndent\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">defIndent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L274-L276","name":"Std.Format.bracketFill","line":274,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracketFill","doc":"Same as `bracket` except uses the `fill` flattening behaviour. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.bracketFill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">bracketFill</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L270-L272","name":"Std.Format.sbracket","line":270,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.sbracket","doc":"Creates the format `\"[\" ++ f ++ \"]\"` with a flattening group."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.sbracket\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">sbracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L266-L268","name":"Std.Format.paren","line":266,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.paren","doc":"Creates the format `\"(\" ++ f ++ \")\"` with a flattening group."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.paren\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">paren</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L261-L264","name":"Std.Format.bracket","line":261,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.bracket","doc":"Create a format `l ++ f ++ r` with a flatten group.\nFlattenBehaviour is `allOrNone`; for `fill` use `bracketFill`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.bracket\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">bracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L256-L259","name":"Std.Format.prettyM","line":256,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.prettyM","doc":"Render the given `f : Format` with a line width of `w`.\n`indent` is the starting amount to indent each line by. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.prettyM\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">prettyM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L166-L166","name":"Std.Format.MonadPrettyFormat.endTags","line":166,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.endTags","doc":"Exit the scope of `n`-many opened tags. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.endTags\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">endTags</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L164-L164","name":"Std.Format.MonadPrettyFormat.startTag","line":164,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.startTag","doc":"Start a scope tagged with `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.startTag\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">startTag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L162-L162","name":"Std.Format.MonadPrettyFormat.currColumn","line":162,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.currColumn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.currColumn\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">currColumn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L161-L161","name":"Std.Format.MonadPrettyFormat.pushNewline","line":161,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushNewline","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushNewline\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">pushNewline</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L160-L160","name":"Std.Format.MonadPrettyFormat.pushOutput","line":160,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushOutput","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.pushOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">pushOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L159-L159","name":"Std.Format.MonadPrettyFormat.mk","line":159,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pushOutput</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pushNewline</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currColumn</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">startTag </span><span class=\"fn\">endTags</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\">MonadPrettyFormat</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L158-L166","name":"Std.Format.MonadPrettyFormat","line":158,"kind":"class","docLink":"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat","doc":"A monad in which we can pretty-print `Format` objects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.MonadPrettyFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">MonadPrettyFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L113-L113","name":"Std.Format.instInhabitedSpaceResult","line":113,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedSpaceResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instInhabitedSpaceResult\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instInhabitedSpaceResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#_private.Init.Data.Format.Basic.0.Std.Format.SpaceResult\">Std.Format.SpaceResult✝</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L105-L107","name":"Std.Format.isNil","line":105,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.isNil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.isNil\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">isNil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L102-L103","name":"Std.Format.join","line":102,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.join\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">join</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L100-L100","name":"Std.Format.instCoeString","line":100,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instCoeString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instCoeString\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instCoeString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L99-L99","name":"Std.Format.instAppend","line":99,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instAppend","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instAppend\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L95-L97","name":"Std.Format.fill","line":95,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.fill","doc":"Alias for a group with `FlattenBehavior` set to `fill`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.fill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">fill</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L84-L93","name":"Std.Format.isEmpty","line":84,"kind":"def","docLink":"./Init/Data/Format/Basic.html#Std.Format.isEmpty","doc":"Check whether the given format contains no characters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.isEmpty\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L80-L80","name":"Std.instInhabitedFormat","line":80,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.instInhabitedFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.instInhabitedFormat\"><span class=\"name\">Std</span>.<span class=\"name\">instInhabitedFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L78-L79","name":"Std.Format.tag","line":78,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.tag","doc":"Used for associating auxiliary information (e.g. `Expr`s) with `Format` objects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.tag\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">tag</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L76-L77","name":"Std.Format.group","line":76,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.group","doc":"Creates a new flattening group for the given inner format.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.group\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">group</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <span class=\"fn\">(<span class=\"fn\">behavior</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone\">FlattenBehavior.allOrNone</a></span>) → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L74-L75","name":"Std.Format.append","line":74,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.append","doc":"Concatenation of two Formats. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.append\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L61-L73","name":"Std.Format.nest","line":61,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.nest","doc":"`nest n f` tells the formatter that `f` is nested inside something with length `n`\nso that it is pretty-printed with the correct indentation on a line break.\nFor example, we can define a formatter for list `l : List Format` as:\n\n```\nlet f := join <| l.intersperse <| \", \" ++ Format.line\ngroup (nest 1 <| \"[\" ++ f ++ \"]\")\n```\n\nThis will be written all on one line, but if the text is too large,\nthe formatter will put in linebreaks after the commas and indent later lines by 1.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nest\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indent</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L59-L60","name":"Std.Format.text","line":59,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.text","doc":"A node containing a plain string. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.text\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">text</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L46-L58","name":"Std.Format.align","line":46,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.align","doc":"`align` tells the formatter to pad with spaces to the current indent,\nor else add a newline if we are already at or past the indent. For example:\n```\nnest 2 <| \".\" ++ align ++ \"a\" ++ line ++ \"b\"\n```\nresults in:\n```\n. a\n  b\n```\nIf `force` is true, then it will pad to the indent even if it is in a flattened group.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.align\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">align</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">force</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L43-L45","name":"Std.Format.line","line":43,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.line","doc":"A position where a newline may be inserted\nif the current group does not fit within the allotted column width. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.line\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">line</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L41-L42","name":"Std.Format.nil","line":41,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.nil","doc":"The empty format. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.nil\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L36-L80","name":"Std.Format","line":36,"kind":"inductive","docLink":"./Init/Data/Format/Basic.html#Std.Format","doc":"A string with pretty-printing information for rendering in a column-width-aware way.\n\nThe pretty-printing algorithm is based on Wadler's paper\n[_A Prettier Printer_](https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L33-L33","name":"Std.Format.instBEqFlattenBehavior","line":33,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instBEqFlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instBEqFlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L33-L33","name":"Std.Format.instInhabitedFlattenBehavior","line":33,"kind":"instance","docLink":"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.instInhabitedFlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">instInhabitedFlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L32-L32","name":"Std.Format.FlattenBehavior.fill","line":32,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.fill","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.fill\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span>.<span class=\"name\">fill</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L31-L31","name":"Std.Format.FlattenBehavior.allOrNone","line":31,"kind":"ctor","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior.allOrNone\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span>.<span class=\"name\">allOrNone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\">FlattenBehavior</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Init/Data/Format/Basic.lean#L15-L33","name":"Std.Format.FlattenBehavior","line":15,"kind":"inductive","docLink":"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior","doc":"Determines how groups should have linebreaks inserted when the\ntext would overfill its remaining space.\n\n- `allOrNone` will make a linebreak on every `Format.line` in the group or none of them.\n  ```\n  [1,\n   2,\n   3]\n  ```\n- `fill` will only make linebreaks on as few `Format.line`s as possible:\n  ```\n  [1, 2,\n   3]\n  ```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Format/Basic.html#Std.Format.FlattenBehavior\"><span class=\"name\">Std</span>.<span class=\"name\">Format</span>.<span class=\"name\">FlattenBehavior</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}