{"name":"Lean.Elab.InfoTree.Types","instances":[{"typeNames":["Lean.Elab.ElabInfo"],"name":"Lean.Elab.instInhabitedElabInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.TermInfo"],"name":"Lean.Elab.instInhabitedTermInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.PartialTermInfo"],"name":"Lean.Elab.instInhabitedPartialTermInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.CommandInfo"],"name":"Lean.Elab.instInhabitedCommandInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.FieldInfo"],"name":"Lean.Elab.instInhabitedFieldInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.TacticInfo"],"name":"Lean.Elab.instInhabitedTacticInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.MacroExpansionInfo"],"name":"Lean.Elab.instInhabitedMacroExpansionInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.Info"],"name":"Lean.Elab.instInhabitedInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.InfoTree"],"name":"Lean.Elab.instInhabitedInfoTree","className":"Inhabited"},{"typeNames":["Lean.Elab.InfoState"],"name":"Lean.Elab.instInhabitedInfoState","className":"Inhabited"},{"typeNames":[],"name":"Lean.Elab.instMonadInfoTreeOfMonadLift","className":"Lean.Elab.MonadInfoTree"}],"imports":["Lean.Data.DeclarationRange","Lean.Data.OpenDecl","Lean.MetavarContext","Lean.Environment","Lean.Data.Json","Lean.Server.Rpc.Basic","Lean.Widget.Types"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L281-L281","name":"Lean.Elab.MonadParentDecl.getParentDeclName?","line":281,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadParentDecl.getParentDeclName?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadParentDecl.getParentDeclName?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MonadParentDecl</span>.<span class=\"name\">getParentDeclName?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadParentDecl\">MonadParentDecl</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L280-L280","name":"Lean.Elab.MonadParentDecl.mk","line":280,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadParentDecl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadParentDecl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MonadParentDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getParentDeclName?</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadParentDecl\">MonadParentDecl</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L280-L281","name":"Lean.Elab.MonadParentDecl","line":280,"kind":"class","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadParentDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadParentDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MonadParentDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L277-L278","name":"Lean.Elab.setInfoState","line":277,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.setInfoState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.setInfoState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">setInfoState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L273-L275","name":"Lean.Elab.instMonadInfoTreeOfMonadLift","line":273,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instMonadInfoTreeOfMonadLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instMonadInfoTreeOfMonadLift\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instMonadInfoTreeOfMonadLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L269-L269","name":"Lean.Elab.MonadInfoTree.modifyInfoState","line":269,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree.modifyInfoState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree.modifyInfoState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MonadInfoTree</span>.<span class=\"name\">modifyInfoState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a> → <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L268-L268","name":"Lean.Elab.MonadInfoTree.getInfoState","line":268,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree.getInfoState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree.getInfoState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MonadInfoTree</span>.<span class=\"name\">getInfoState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L267-L267","name":"Lean.Elab.MonadInfoTree.mk","line":267,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MonadInfoTree</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getInfoState</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifyInfoState</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a> → <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a>)</span> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L267-L269","name":"Lean.Elab.MonadInfoTree","line":267,"kind":"class","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MonadInfoTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L265-L265","name":"Lean.Elab.instInhabitedInfoState","line":265,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedInfoState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedInfoState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedInfoState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L264-L264","name":"Lean.Elab.InfoState.trees","line":264,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState.trees","doc":"Pending child trees of a node. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState.trees\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoState</span>.<span class=\"name\">trees</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L262-L262","name":"Lean.Elab.InfoState.lazyAssignment","line":262,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState.lazyAssignment","doc":"Assignments fulfilled by other elaboration tasks. We substitute them only just before reporting\nthe info tree via a snapshot to avoid premature blocking.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState.lazyAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoState</span>.<span class=\"name\">lazyAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L257-L257","name":"Lean.Elab.InfoState.assignment","line":257,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState.assignment","doc":"Map from holes in the infotree to child infotrees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState.assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoState</span>.<span class=\"name\">assignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L255-L255","name":"Lean.Elab.InfoState.enabled","line":255,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState.enabled","doc":"Whether info trees should be recorded. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState.enabled\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoState</span>.<span class=\"name\">enabled</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L253-L253","name":"Lean.Elab.InfoState.mk","line":253,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">enabled</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lazyAssignment</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PersistentHashMap\">PersistentHashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Task\">Task</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trees</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L243-L265","name":"Lean.Elab.InfoState","line":243,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState","doc":"This structure is the state that is being used to build an InfoTree object.\nDuring elaboration, some parts of the info tree may be `holes` which need to be filled later.\nThe `assignments` field is used to assign these holes.\nThe `trees` field is a list of pending child trees for the infotree node currently being built.\n\nYou should not need to use `InfoState` directly, instead infotrees should be built with the help of the methods here\nsuch as `pushInfoLeaf` to create leaf nodes and `withInfoContext` to create a nested child node.\n\nTo see how `trees` is used, look at the function body of `withInfoContext'`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L241-L241","name":"Lean.Elab.instInhabitedInfoTree","line":241,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedInfoTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedInfoTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedInfoTree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L239-L240","name":"Lean.Elab.InfoTree.hole","line":239,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree.hole","doc":"The elaborator creates holes (aka metavariables) for tactics and postponed terms "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree.hole\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">hole</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L237-L238","name":"Lean.Elab.InfoTree.node","line":237,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree.node","doc":"The children contain information for nested term elaboration and tactic evaluation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree.node\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">node</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">children</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentArray.html#Lean.PersistentArray\">PersistentArray</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L235-L236","name":"Lean.Elab.InfoTree.context","line":235,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree.context","doc":"The context object is created at appropriate points during elaboration "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree.context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span>.<span class=\"name\">context</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialContextInfo\">PartialContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\">InfoTree</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L213-L241","name":"Lean.Elab.InfoTree","line":213,"kind":"inductive","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree","doc":"The InfoTree is a structure that is generated during elaboration and used\nby the language server to look up information about objects at particular points\nin the Lean document. For example, tactic information and expected type information in\nthe infoview and information about completions.\n\nThe infotree consists of nodes which may have child nodes. Each node\nhas an `Info` object that contains details about what kind of information\nis present. Each `Info` object also contains a `Syntax` instance, this is used to\nmap positions in the Lean document to particular info objects.\n\nAn example of a function that extracts information from an infotree for a given\nposition is `InfoTree.goalsAt?` which finds `TacticInfo`.\n\nInformation concerning expressions requires that a context also be saved.\n`context` nodes store a local context that is used to process expressions\nin nodes below.\n\nBecause the info tree is generated during elaboration, some parts of the infotree\nfor a particular piece of syntax may not be ready yet. Hence InfoTree supports metavariable-like\n`hole`s which are filled in later in the same way that unassigned metavariables are.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">InfoTree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L211-L211","name":"Lean.Elab.instInhabitedInfo","line":211,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L210-L210","name":"Lean.Elab.Info.ofChoiceInfo","line":210,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofChoiceInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofChoiceInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofChoiceInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ChoiceInfo\">ChoiceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L209-L209","name":"Lean.Elab.Info.ofDelabTermInfo","line":209,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofDelabTermInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofDelabTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofDelabTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo\">DelabTermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L208-L208","name":"Lean.Elab.Info.ofFieldRedeclInfo","line":208,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofFieldRedeclInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofFieldRedeclInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofFieldRedeclInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo\">FieldRedeclInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L207-L207","name":"Lean.Elab.Info.ofFVarAliasInfo","line":207,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofFVarAliasInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofFVarAliasInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofFVarAliasInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo\">FVarAliasInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L206-L206","name":"Lean.Elab.Info.ofCustomInfo","line":206,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofCustomInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofCustomInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofCustomInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo\">CustomInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L205-L205","name":"Lean.Elab.Info.ofUserWidgetInfo","line":205,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofUserWidgetInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofUserWidgetInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofUserWidgetInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo\">UserWidgetInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L204-L204","name":"Lean.Elab.Info.ofCompletionInfo","line":204,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofCompletionInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofCompletionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofCompletionInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">CompletionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L203-L203","name":"Lean.Elab.Info.ofFieldInfo","line":203,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofFieldInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofFieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofFieldInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo\">FieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L202-L202","name":"Lean.Elab.Info.ofOptionInfo","line":202,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofOptionInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofOptionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofOptionInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo\">OptionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L201-L201","name":"Lean.Elab.Info.ofMacroExpansionInfo","line":201,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofMacroExpansionInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofMacroExpansionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofMacroExpansionInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo\">MacroExpansionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L200-L200","name":"Lean.Elab.Info.ofCommandInfo","line":200,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofCommandInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofCommandInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofCommandInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo\">CommandInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L199-L199","name":"Lean.Elab.Info.ofPartialTermInfo","line":199,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofPartialTermInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofPartialTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofPartialTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo\">PartialTermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L198-L198","name":"Lean.Elab.Info.ofTermInfo","line":198,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofTermInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L197-L197","name":"Lean.Elab.Info.ofTacticInfo","line":197,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofTacticInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info.ofTacticInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span>.<span class=\"name\">ofTacticInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L195-L211","name":"Lean.Elab.Info","line":195,"kind":"inductive","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info","doc":"Header information for a node in `InfoTree`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Info</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L193-L193","name":"Lean.Elab.ChoiceInfo.mk","line":193,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ChoiceInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ChoiceInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ChoiceInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toElabInfo</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ChoiceInfo\">ChoiceInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L193-L193","name":"Lean.Elab.ChoiceInfo.toElabInfo","line":193,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ChoiceInfo.toElabInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ChoiceInfo.toElabInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ChoiceInfo</span>.<span class=\"name\">toElabInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ChoiceInfo\">ChoiceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L188-L193","name":"Lean.Elab.ChoiceInfo","line":188,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ChoiceInfo","doc":"Indicates that all overloaded elaborators failed. The subtrees of a `ChoiceInfo` node are the\npartial `InfoTree`s of those failed elaborators. Retaining these partial `InfoTree`s helps\nthe language server provide interactivity even when all overloaded elaborators failed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ChoiceInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ChoiceInfo</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">Lean.Elab.ElabInfo</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L186-L186","name":"Lean.Elab.DelabTermInfo.explicit","line":186,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo.explicit","doc":"Whether to use explicit mode when pretty printing the term on hover. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo.explicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DelabTermInfo</span>.<span class=\"name\">explicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo\">DelabTermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L184-L184","name":"Lean.Elab.DelabTermInfo.docString?","line":184,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo.docString?","doc":"Text to use to override the docstring. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo.docString?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DelabTermInfo</span>.<span class=\"name\">docString?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo\">DelabTermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L182-L182","name":"Lean.Elab.DelabTermInfo.location?","line":182,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo.location?","doc":"A source position to use for \"go to definition\", to override the default. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo.location?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DelabTermInfo</span>.<span class=\"name\">location?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo\">DelabTermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/DeclarationRange.html#Lean.DeclarationLocation\">DeclarationLocation</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L180-L180","name":"Lean.Elab.DelabTermInfo.mk","line":180,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DelabTermInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toTermInfo</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">location?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/DeclarationRange.html#Lean.DeclarationLocation\">DeclarationLocation</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docString?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo\">DelabTermInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L180-L186","name":"Lean.Elab.DelabTermInfo.toTermInfo","line":180,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo.toTermInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo.toTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DelabTermInfo</span>.<span class=\"name\">toTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo\">DelabTermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L170-L186","name":"Lean.Elab.DelabTermInfo","line":170,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo","doc":"Denotes TermInfo with additional configurations to control interactions with delaborated terms.\n\nFor example, the omission term `⋯` that is emitted by the delaborator when omitting a term\ndue to `pp.deepTerms false` or `pp.proofs false` uses this.\nOmission needs to be treated differently from regular terms because\nit has to be delaborated differently in `Lean.Widget.InteractiveDiagnostics.infoToInteractive`:\nRegular terms are delaborated explicitly, whereas omitted terms are simply to be expanded with\nregular delaboration settings. Additionally, omissions come with a reason for omission.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.DelabTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DelabTermInfo</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">Lean.Elab.TermInfo</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L168-L168","name":"Lean.Elab.FieldRedeclInfo.stx","line":168,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldRedeclInfo</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo\">FieldRedeclInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L167-L167","name":"Lean.Elab.FieldRedeclInfo.mk","line":167,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldRedeclInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo\">FieldRedeclInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L158-L168","name":"Lean.Elab.FieldRedeclInfo","line":158,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo","doc":"Contains the syntax of an identifier which is part of a field redeclaration, like:\n```\nstructure Foo := x : Nat\nstructure Bar extends Foo :=\n  x := 0\n--^ here\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldRedeclInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L156-L156","name":"Lean.Elab.FVarAliasInfo.baseId","line":156,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo.baseId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo.baseId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FVarAliasInfo</span>.<span class=\"name\">baseId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo\">FVarAliasInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L155-L155","name":"Lean.Elab.FVarAliasInfo.id","line":155,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FVarAliasInfo</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo\">FVarAliasInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L154-L154","name":"Lean.Elab.FVarAliasInfo.userName","line":154,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo.userName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo.userName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FVarAliasInfo</span>.<span class=\"name\">userName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo\">FVarAliasInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L153-L153","name":"Lean.Elab.FVarAliasInfo.mk","line":153,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FVarAliasInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id </span><span class=\"fn\">baseId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo\">FVarAliasInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L147-L156","name":"Lean.Elab.FVarAliasInfo","line":147,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo","doc":"Specifies that the given free variables should be considered semantically identical.\nThe free variable `baseId` might not be in the current local context\nbecause it has been cleared.\nUsed for e.g. connecting variables before and after `match` generalization.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FVarAliasInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L145-L145","name":"Lean.Elab.UserWidgetInfo.stx","line":145,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">UserWidgetInfo</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo\">UserWidgetInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L144-L144","name":"Lean.Elab.UserWidgetInfo.mk","line":144,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">UserWidgetInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toWidgetInstance</span> : <a href=\"./Lean/Widget/Types.html#Lean.Widget.WidgetInstance\">Widget.WidgetInstance</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo\">UserWidgetInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L144-L145","name":"Lean.Elab.UserWidgetInfo.toWidgetInstance","line":144,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo.toWidgetInstance","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo.toWidgetInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">UserWidgetInfo</span>.<span class=\"name\">toWidgetInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo\">UserWidgetInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Widget/Types.html#Lean.Widget.WidgetInstance\">Widget.WidgetInstance</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L140-L145","name":"Lean.Elab.UserWidgetInfo","line":140,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo","doc":"Information about a user widget associated with a syntactic span.\nThis must be a panel widget.\nA panel widget is a widget that can be displayed\nin the infoview alongside the goal state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">UserWidgetInfo</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Widget/Types.html#Lean.Widget.WidgetInstance\">Lean.Widget.WidgetInstance</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L138-L138","name":"Lean.Elab.CustomInfo.value","line":138,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo.value","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CustomInfo</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo\">CustomInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L137-L137","name":"Lean.Elab.CustomInfo.stx","line":137,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CustomInfo</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo\">CustomInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L136-L136","name":"Lean.Elab.CustomInfo.mk","line":136,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CustomInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Init/Dynamic.html#Dynamic\">Dynamic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo\">CustomInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L135-L138","name":"Lean.Elab.CustomInfo","line":135,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo","doc":"Dynamic info for custom use cases. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CustomInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L133-L133","name":"Lean.Elab.instInhabitedMacroExpansionInfo","line":133,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedMacroExpansionInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedMacroExpansionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedMacroExpansionInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo\">MacroExpansionInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L132-L132","name":"Lean.Elab.MacroExpansionInfo.output","line":132,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo.output","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo.output\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MacroExpansionInfo</span>.<span class=\"name\">output</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo\">MacroExpansionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L131-L131","name":"Lean.Elab.MacroExpansionInfo.stx","line":131,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MacroExpansionInfo</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo\">MacroExpansionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L130-L130","name":"Lean.Elab.MacroExpansionInfo.lctx","line":130,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MacroExpansionInfo</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo\">MacroExpansionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L129-L129","name":"Lean.Elab.MacroExpansionInfo.mk","line":129,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MacroExpansionInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx </span><span class=\"fn\">output</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo\">MacroExpansionInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L129-L133","name":"Lean.Elab.MacroExpansionInfo","line":129,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">MacroExpansionInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L127-L127","name":"Lean.Elab.instInhabitedTacticInfo","line":127,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedTacticInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedTacticInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedTacticInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L126-L126","name":"Lean.Elab.TacticInfo.goalsAfter","line":126,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.goalsAfter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.goalsAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TacticInfo</span>.<span class=\"name\">goalsAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L125-L125","name":"Lean.Elab.TacticInfo.mctxAfter","line":125,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.mctxAfter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.mctxAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TacticInfo</span>.<span class=\"name\">mctxAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L124-L124","name":"Lean.Elab.TacticInfo.goalsBefore","line":124,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.goalsBefore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.goalsBefore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TacticInfo</span>.<span class=\"name\">goalsBefore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L123-L123","name":"Lean.Elab.TacticInfo.mctxBefore","line":123,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.mctxBefore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.mctxBefore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TacticInfo</span>.<span class=\"name\">mctxBefore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L122-L122","name":"Lean.Elab.TacticInfo.mk","line":122,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TacticInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toElabInfo</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctxBefore</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goalsBefore</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctxAfter</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goalsAfter</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L122-L127","name":"Lean.Elab.TacticInfo.toElabInfo","line":122,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.toElabInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo.toElabInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TacticInfo</span>.<span class=\"name\">toElabInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\">TacticInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L117-L127","name":"Lean.Elab.TacticInfo","line":117,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo","doc":"The information needed to render the tactic state in the infoview.\n\nWe store the list of goals before and after the execution of a tactic.\nWe also store the metavariable context at each time since we want metavariables\nunassigned at tactic execution time to be displayed as `?m...`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TacticInfo</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">Lean.Elab.ElabInfo</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L115-L115","name":"Lean.Elab.instInhabitedFieldInfo","line":115,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedFieldInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedFieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedFieldInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo\">FieldInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L114-L114","name":"Lean.Elab.FieldInfo.stx","line":114,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldInfo</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo\">FieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L113-L113","name":"Lean.Elab.FieldInfo.val","line":113,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldInfo</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo\">FieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L112-L112","name":"Lean.Elab.FieldInfo.lctx","line":112,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldInfo</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo\">FieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L111-L111","name":"Lean.Elab.FieldInfo.fieldName","line":111,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.fieldName","doc":"Name of the field as written. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.fieldName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldInfo</span>.<span class=\"name\">fieldName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo\">FieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L109-L109","name":"Lean.Elab.FieldInfo.projName","line":109,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.projName","doc":"Name of the projection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.projName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldInfo</span>.<span class=\"name\">projName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo\">FieldInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L107-L107","name":"Lean.Elab.FieldInfo.mk","line":107,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">projName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo\">FieldInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L107-L115","name":"Lean.Elab.FieldInfo","line":107,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">FieldInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L105-L105","name":"Lean.Elab.OptionInfo.declName","line":105,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo.declName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">OptionInfo</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo\">OptionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L104-L104","name":"Lean.Elab.OptionInfo.optionName","line":104,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo.optionName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo.optionName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">OptionInfo</span>.<span class=\"name\">optionName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo\">OptionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L103-L103","name":"Lean.Elab.OptionInfo.stx","line":103,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">OptionInfo</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo\">OptionInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L102-L102","name":"Lean.Elab.OptionInfo.mk","line":102,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">OptionInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optionName </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo\">OptionInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L101-L105","name":"Lean.Elab.OptionInfo","line":101,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo","doc":"Info for an option reference (e.g. in `set_option`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.OptionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">OptionInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L98-L98","name":"Lean.Elab.CompletionInfo.tactic","line":98,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.tactic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">tactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">CompletionInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L97-L97","name":"Lean.Elab.CompletionInfo.endSection","line":97,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.endSection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.endSection\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">endSection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scopeNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">CompletionInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L96-L96","name":"Lean.Elab.CompletionInfo.option","line":96,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.option","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.option\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">option</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">CompletionInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L95-L95","name":"Lean.Elab.CompletionInfo.namespaceId","line":95,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.namespaceId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.namespaceId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">namespaceId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">CompletionInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L94-L94","name":"Lean.Elab.CompletionInfo.fieldId","line":94,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.fieldId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.fieldId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">fieldId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">structName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">CompletionInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L93-L93","name":"Lean.Elab.CompletionInfo.dotId","line":93,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.dotId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.dotId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">dotId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">CompletionInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L92-L92","name":"Lean.Elab.CompletionInfo.id","line":92,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.id\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">danglingDot</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">CompletionInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L91-L91","name":"Lean.Elab.CompletionInfo.dot","line":91,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.dot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo.dot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span>.<span class=\"name\">dot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">termInfo</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\">CompletionInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L88-L98","name":"Lean.Elab.CompletionInfo","line":88,"kind":"inductive","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo","doc":"A completion is an item that appears in the [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense)\nbox that appears as you type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CompletionInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L86-L86","name":"Lean.Elab.instInhabitedCommandInfo","line":86,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedCommandInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedCommandInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedCommandInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo\">CommandInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L85-L85","name":"Lean.Elab.CommandInfo.mk","line":85,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toElabInfo</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo\">CommandInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L85-L86","name":"Lean.Elab.CommandInfo","line":85,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandInfo</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">Lean.Elab.ElabInfo</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L85-L86","name":"Lean.Elab.CommandInfo.toElabInfo","line":85,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo.toElabInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo.toElabInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandInfo</span>.<span class=\"name\">toElabInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo\">CommandInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L83-L83","name":"Lean.Elab.instInhabitedPartialTermInfo","line":83,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedPartialTermInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedPartialTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedPartialTermInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo\">PartialTermInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L82-L82","name":"Lean.Elab.PartialTermInfo.expectedType?","line":82,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo.expectedType?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo.expectedType?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialTermInfo</span>.<span class=\"name\">expectedType?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo\">PartialTermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L81-L81","name":"Lean.Elab.PartialTermInfo.lctx","line":81,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialTermInfo</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo\">PartialTermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L80-L80","name":"Lean.Elab.PartialTermInfo.mk","line":80,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialTermInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toElabInfo</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo\">PartialTermInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L80-L83","name":"Lean.Elab.PartialTermInfo.toElabInfo","line":80,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo.toElabInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo.toElabInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialTermInfo</span>.<span class=\"name\">toElabInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo\">PartialTermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L73-L83","name":"Lean.Elab.PartialTermInfo","line":73,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo","doc":"Used instead of `TermInfo` when a term couldn't successfully be elaborated,\nand so there is no complete expression available.\n\nThe main purpose of `PartialTermInfo` is to ensure that the sub-`InfoTree`s of a failed elaborator\nare retained so that they can still be used in the language server.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialTermInfo</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">Lean.Elab.ElabInfo</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L71-L71","name":"Lean.Elab.instInhabitedTermInfo","line":71,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedTermInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedTermInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L70-L70","name":"Lean.Elab.TermInfo.isBinder","line":70,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.isBinder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.isBinder\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TermInfo</span>.<span class=\"name\">isBinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L69-L69","name":"Lean.Elab.TermInfo.expr","line":69,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TermInfo</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L68-L68","name":"Lean.Elab.TermInfo.expectedType?","line":68,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.expectedType?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.expectedType?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TermInfo</span>.<span class=\"name\">expectedType?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L67-L67","name":"Lean.Elab.TermInfo.lctx","line":67,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.lctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TermInfo</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L66-L66","name":"Lean.Elab.TermInfo.mk","line":66,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TermInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toElabInfo</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isBinder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L66-L71","name":"Lean.Elab.TermInfo.toElabInfo","line":66,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.toElabInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo.toElabInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TermInfo</span>.<span class=\"name\">toElabInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\">TermInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L66-L71","name":"Lean.Elab.TermInfo","line":66,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">TermInfo</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">Lean.Elab.ElabInfo</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L64-L64","name":"Lean.Elab.instInhabitedElabInfo","line":64,"kind":"instance","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedElabInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedElabInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedElabInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L63-L63","name":"Lean.Elab.ElabInfo.stx","line":63,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo.stx","doc":"The piece of syntax that the elaborator created this info for.\nNote that this also implicitly stores the code position in the syntax's SourceInfo. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ElabInfo</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L60-L60","name":"Lean.Elab.ElabInfo.elaborator","line":60,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo.elaborator","doc":"The name of the elaborator that created this info. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo.elaborator\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ElabInfo</span>.<span class=\"name\">elaborator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L58-L58","name":"Lean.Elab.ElabInfo.mk","line":58,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ElabInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elaborator</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\">ElabInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L57-L64","name":"Lean.Elab.ElabInfo","line":57,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo","doc":"Base structure for `TermInfo`, `CommandInfo` and `TacticInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ElabInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L48-L53","name":"Lean.Elab.PartialContextInfo.parentDeclCtx","line":48,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialContextInfo.parentDeclCtx","doc":"Context for the name of the declaration that surrounds nodes contained within this `context` node.\nFor example, this makes the name of the surrounding declaration available in `InfoTree` nodes\ncorresponding to the terms within the declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialContextInfo.parentDeclCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialContextInfo</span>.<span class=\"name\">parentDeclCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parentDecl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialContextInfo\">PartialContextInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L47-L47","name":"Lean.Elab.PartialContextInfo.commandCtx","line":47,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialContextInfo.commandCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialContextInfo.commandCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialContextInfo</span>.<span class=\"name\">commandCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialContextInfo\">PartialContextInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L40-L53","name":"Lean.Elab.PartialContextInfo","line":40,"kind":"inductive","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialContextInfo","doc":"Context for a sub-`InfoTree`.\n\nWithin `InfoTree`, this must fulfill the invariant that every non-`commandCtx` `PartialContextInfo`\nnode is always contained within a `commandCtx` node.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.PartialContextInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialContextInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L38-L38","name":"Lean.Elab.ContextInfo.parentDecl?","line":38,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo.parentDecl?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo.parentDecl?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">parentDecl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L37-L37","name":"Lean.Elab.ContextInfo.mk","line":37,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toCommandContextInfo</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parentDecl?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L37-L38","name":"Lean.Elab.ContextInfo.toCommandContextInfo","line":37,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo.toCommandContextInfo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo.toCommandContextInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span>.<span class=\"name\">toCommandContextInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\">ContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L32-L38","name":"Lean.Elab.ContextInfo","line":32,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo","doc":"Context from the root of the `InfoTree` up to this node.\nNote that the term information collected during elaboration may contain metavariables, and their\nassignments are stored at `mctx`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">ContextInfo</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">Lean.Elab.CommandContextInfo</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L30-L30","name":"Lean.Elab.CommandContextInfo.ngen","line":30,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.ngen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.ngen\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span>.<span class=\"name\">ngen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L29-L29","name":"Lean.Elab.CommandContextInfo.openDecls","line":29,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.openDecls","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L28-L28","name":"Lean.Elab.CommandContextInfo.currNamespace","line":28,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.currNamespace","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.currNamespace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span>.<span class=\"name\">currNamespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L27-L27","name":"Lean.Elab.CommandContextInfo.options","line":27,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.options","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.options\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span>.<span class=\"name\">options</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L26-L26","name":"Lean.Elab.CommandContextInfo.mctx","line":26,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.mctx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.mctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L25-L25","name":"Lean.Elab.CommandContextInfo.fileMap","line":25,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.fileMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.fileMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span>.<span class=\"name\">fileMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Position.html#Lean.FileMap\">FileMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L24-L24","name":"Lean.Elab.CommandContextInfo.env","line":24,"kind":"def","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.env","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.env\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L23-L23","name":"Lean.Elab.CommandContextInfo.mk","line":23,"kind":"ctor","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileMap</span> : <a href=\"./Lean/Data/Position.html#Lean.FileMap\">FileMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">options</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currNamespace</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">openDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\">CommandContextInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/81b85203c90439fb7d7e0cec32130d62d8cb7a2e/src/Lean/Elab/InfoTree/Types.lean#L18-L30","name":"Lean.Elab.CommandContextInfo","line":18,"kind":"structure","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo","doc":"Context after executing `liftTermElabM`.\nNote that the term information collected during elaboration may contain metavariables, and their\nassignments are stored at `mctx`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandContextInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">CommandContextInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}